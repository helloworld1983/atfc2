// Copyright 1986-2015 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2015.4.2 (win64) Build 1494164 Fri Feb 26 04:18:56 MST 2016
// Date        : Wed Nov 22 16:57:00 2017
// Host        : windowsPC running 64-bit major release  (build 9200)
// Command     : write_verilog -force -mode funcsim
//               c:/Users/smkilani/Documents/atfc/firmware/ATFC_demo1/ATFC_demo1.srcs/sources_1/bd/system/ip/system_microblaze_0_0/system_microblaze_0_0_sim_netlist.v
// Design      : system_microblaze_0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7a35tfgg484-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "system_microblaze_0_0,MicroBlaze,{}" *) (* core_generation_info = "system_microblaze_0_0,MicroBlaze,{x_ipProduct=Vivado 2015.4.2,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=microblaze,x_ipVersion=9.5,x_ipCoreRevision=3,x_ipLanguage=VHDL,x_ipSimLanguage=VHDL,C_SCO=0,C_FREQ=100000000,C_USE_CONFIG_RESET=0,C_NUM_SYNC_FF_CLK=2,C_NUM_SYNC_FF_CLK_IRQ=1,C_NUM_SYNC_FF_CLK_DEBUG=2,C_NUM_SYNC_FF_DBG_CLK=1,C_FAULT_TOLERANT=0,C_ECC_USE_CE_EXCEPTION=0,C_LOCKSTEP_SLAVE=0,C_ENDIANNESS=1,C_FAMILY=artix7,C_DATA_SIZE=32,C_INSTANCE=system_microblaze_0_0,C_AVOID_PRIMITIVES=0,C_AREA_OPTIMIZED=0,C_OPTIMIZATION=0,C_INTERCONNECT=2,C_BASE_VECTORS=0x00000000,C_M_AXI_DP_THREAD_ID_WIDTH=1,C_M_AXI_DP_DATA_WIDTH=32,C_M_AXI_DP_ADDR_WIDTH=32,C_M_AXI_DP_EXCLUSIVE_ACCESS=0,C_M_AXI_D_BUS_EXCEPTION=0,C_M_AXI_IP_THREAD_ID_WIDTH=1,C_M_AXI_IP_DATA_WIDTH=32,C_M_AXI_IP_ADDR_WIDTH=32,C_M_AXI_I_BUS_EXCEPTION=0,C_D_LMB=1,C_D_AXI=1,C_I_LMB=1,C_I_AXI=0,C_USE_MSR_INSTR=0,C_USE_PCMP_INSTR=0,C_USE_BARREL=0,C_USE_DIV=0,C_USE_HW_MUL=0,C_USE_FPU=0,C_USE_REORDER_INSTR=1,C_UNALIGNED_EXCEPTIONS=0,C_ILL_OPCODE_EXCEPTION=0,C_DIV_ZERO_EXCEPTION=0,C_FPU_EXCEPTION=0,C_FSL_LINKS=0,C_USE_EXTENDED_FSL_INSTR=0,C_FSL_EXCEPTION=0,C_USE_STACK_PROTECTION=0,C_IMPRECISE_EXCEPTIONS=0,C_USE_INTERRUPT=2,C_USE_EXT_BRK=0,C_USE_EXT_NM_BRK=0,C_USE_MMU=0,C_MMU_DTLB_SIZE=4,C_MMU_ITLB_SIZE=2,C_MMU_TLB_ACCESS=3,C_MMU_ZONES=16,C_MMU_PRIVILEGED_INSTR=0,C_USE_BRANCH_TARGET_CACHE=0,C_BRANCH_TARGET_CACHE_SIZE=0,C_PC_WIDTH=32,C_PVR=0,C_PVR_USER1=0x00,C_PVR_USER2=0x00000000,C_DYNAMIC_BUS_SIZING=0,C_RESET_MSR=0x00000000,C_OPCODE_0x0_ILLEGAL=0,C_DEBUG_ENABLED=1,C_NUMBER_OF_PC_BRK=1,C_NUMBER_OF_RD_ADDR_BRK=0,C_NUMBER_OF_WR_ADDR_BRK=0,C_DEBUG_EVENT_COUNTERS=5,C_DEBUG_LATENCY_COUNTERS=1,C_DEBUG_COUNTER_WIDTH=32,C_DEBUG_TRACE_SIZE=8192,C_DEBUG_EXTERNAL_TRACE=0,C_DEBUG_PROFILE_SIZE=0,C_INTERRUPT_IS_EDGE=0,C_EDGE_IS_POSITIVE=1,C_ASYNC_INTERRUPT=1,C_M0_AXIS_DATA_WIDTH=32,C_S0_AXIS_DATA_WIDTH=32,C_M1_AXIS_DATA_WIDTH=32,C_S1_AXIS_DATA_WIDTH=32,C_M2_AXIS_DATA_WIDTH=32,C_S2_AXIS_DATA_WIDTH=32,C_M3_AXIS_DATA_WIDTH=32,C_S3_AXIS_DATA_WIDTH=32,C_M4_AXIS_DATA_WIDTH=32,C_S4_AXIS_DATA_WIDTH=32,C_M5_AXIS_DATA_WIDTH=32,C_S5_AXIS_DATA_WIDTH=32,C_M6_AXIS_DATA_WIDTH=32,C_S6_AXIS_DATA_WIDTH=32,C_M7_AXIS_DATA_WIDTH=32,C_S7_AXIS_DATA_WIDTH=32,C_M8_AXIS_DATA_WIDTH=32,C_S8_AXIS_DATA_WIDTH=32,C_M9_AXIS_DATA_WIDTH=32,C_S9_AXIS_DATA_WIDTH=32,C_M10_AXIS_DATA_WIDTH=32,C_S10_AXIS_DATA_WIDTH=32,C_M11_AXIS_DATA_WIDTH=32,C_S11_AXIS_DATA_WIDTH=32,C_M12_AXIS_DATA_WIDTH=32,C_S12_AXIS_DATA_WIDTH=32,C_M13_AXIS_DATA_WIDTH=32,C_S13_AXIS_DATA_WIDTH=32,C_M14_AXIS_DATA_WIDTH=32,C_S14_AXIS_DATA_WIDTH=32,C_M15_AXIS_DATA_WIDTH=32,C_S15_AXIS_DATA_WIDTH=32,C_ICACHE_BASEADDR=0x00000000,C_ICACHE_HIGHADDR=0x3FFFFFFF,C_USE_ICACHE=0,C_ALLOW_ICACHE_WR=1,C_ADDR_TAG_BITS=17,C_CACHE_BYTE_SIZE=8192,C_ICACHE_LINE_LEN=4,C_ICACHE_ALWAYS_USED=0,C_ICACHE_STREAMS=0,C_ICACHE_VICTIMS=0,C_ICACHE_FORCE_TAG_LUTRAM=0,C_ICACHE_DATA_WIDTH=0,C_M_AXI_IC_THREAD_ID_WIDTH=1,C_M_AXI_IC_DATA_WIDTH=32,C_M_AXI_IC_ADDR_WIDTH=32,C_M_AXI_IC_USER_VALUE=31,C_M_AXI_IC_AWUSER_WIDTH=5,C_M_AXI_IC_ARUSER_WIDTH=5,C_M_AXI_IC_WUSER_WIDTH=1,C_M_AXI_IC_RUSER_WIDTH=1,C_M_AXI_IC_BUSER_WIDTH=1,C_DCACHE_BASEADDR=0x00000000,C_DCACHE_HIGHADDR=0x3FFFFFFF,C_USE_DCACHE=0,C_ALLOW_DCACHE_WR=1,C_DCACHE_ADDR_TAG=17,C_DCACHE_BYTE_SIZE=8192,C_DCACHE_LINE_LEN=4,C_DCACHE_ALWAYS_USED=0,C_DCACHE_USE_WRITEBACK=0,C_DCACHE_VICTIMS=0,C_DCACHE_FORCE_TAG_LUTRAM=0,C_DCACHE_DATA_WIDTH=0,C_M_AXI_DC_THREAD_ID_WIDTH=1,C_M_AXI_DC_DATA_WIDTH=32,C_M_AXI_DC_ADDR_WIDTH=32,C_M_AXI_DC_EXCLUSIVE_ACCESS=0,C_M_AXI_DC_USER_VALUE=31,C_M_AXI_DC_AWUSER_WIDTH=5,C_M_AXI_DC_ARUSER_WIDTH=5,C_M_AXI_DC_WUSER_WIDTH=1,C_M_AXI_DC_RUSER_WIDTH=1,C_M_AXI_DC_BUSER_WIDTH=1}" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* x_core_info = "MicroBlaze,Vivado 2015.4.2" *) 
(* NotValidForBitStream *)
module system_microblaze_0_0
   (Clk,
    Reset,
    Interrupt,
    Interrupt_Address,
    Interrupt_Ack,
    Instr_Addr,
    Instr,
    IFetch,
    I_AS,
    IReady,
    IWAIT,
    ICE,
    IUE,
    Data_Addr,
    Data_Read,
    Data_Write,
    D_AS,
    Read_Strobe,
    Write_Strobe,
    DReady,
    DWait,
    DCE,
    DUE,
    Byte_Enable,
    M_AXI_DP_AWADDR,
    M_AXI_DP_AWPROT,
    M_AXI_DP_AWVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WDATA,
    M_AXI_DP_WSTRB,
    M_AXI_DP_WVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_BRESP,
    M_AXI_DP_BVALID,
    M_AXI_DP_BREADY,
    M_AXI_DP_ARADDR,
    M_AXI_DP_ARPROT,
    M_AXI_DP_ARVALID,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RDATA,
    M_AXI_DP_RRESP,
    M_AXI_DP_RVALID,
    M_AXI_DP_RREADY,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_TDO,
    Dbg_Reg_En,
    Dbg_Shift,
    Dbg_Capture,
    Dbg_Update,
    Debug_Rst);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) input Clk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 RST.RESET RST" *) input Reset;
  (* x_interface_info = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT INTERRUPT" *) input Interrupt;
  (* x_interface_info = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT ADDRESS" *) input [0:31]Interrupt_Address;
  (* x_interface_info = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT ACK" *) output [0:1]Interrupt_Ack;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB ABUS" *) output [0:31]Instr_Addr;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB READDBUS" *) input [0:31]Instr;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB READSTROBE" *) output IFetch;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB ADDRSTROBE" *) output I_AS;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB READY" *) input IReady;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB WAIT" *) input IWAIT;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB CE" *) input ICE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB UE" *) input IUE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB ABUS" *) output [0:31]Data_Addr;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB READDBUS" *) input [0:31]Data_Read;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB WRITEDBUS" *) output [0:31]Data_Write;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB ADDRSTROBE" *) output D_AS;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB READSTROBE" *) output Read_Strobe;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB WRITESTROBE" *) output Write_Strobe;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB READY" *) input DReady;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB WAIT" *) input DWait;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB CE" *) input DCE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB UE" *) input DUE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB BE" *) output [0:3]Byte_Enable;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWADDR" *) output [31:0]M_AXI_DP_AWADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWPROT" *) output [2:0]M_AXI_DP_AWPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWVALID" *) output M_AXI_DP_AWVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWREADY" *) input M_AXI_DP_AWREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WDATA" *) output [31:0]M_AXI_DP_WDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WSTRB" *) output [3:0]M_AXI_DP_WSTRB;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WVALID" *) output M_AXI_DP_WVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WREADY" *) input M_AXI_DP_WREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP BRESP" *) input [1:0]M_AXI_DP_BRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP BVALID" *) input M_AXI_DP_BVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP BREADY" *) output M_AXI_DP_BREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARADDR" *) output [31:0]M_AXI_DP_ARADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARPROT" *) output [2:0]M_AXI_DP_ARPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARVALID" *) output M_AXI_DP_ARVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARREADY" *) input M_AXI_DP_ARREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RDATA" *) input [31:0]M_AXI_DP_RDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RRESP" *) input [1:0]M_AXI_DP_RRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RVALID" *) input M_AXI_DP_RVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RREADY" *) output M_AXI_DP_RREADY;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG CLK" *) input Dbg_Clk;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG TDI" *) input Dbg_TDI;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG TDO" *) output Dbg_TDO;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG REG_EN" *) input [0:7]Dbg_Reg_En;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG SHIFT" *) input Dbg_Shift;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG CAPTURE" *) input Dbg_Capture;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG UPDATE" *) input Dbg_Update;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG RST" *) input Debug_Rst;

  wire [0:3]Byte_Enable;
  wire Clk;
  wire DCE;
  wire DReady;
  wire DUE;
  wire DWait;
  wire D_AS;
  wire [0:31]Data_Addr;
  wire [0:31]Data_Read;
  wire [0:31]Data_Write;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_Update;
  wire Debug_Rst;
  wire ICE;
  wire IFetch;
  wire IReady;
  wire IUE;
  wire IWAIT;
  wire I_AS;
  wire [0:31]Instr;
  wire [0:31]Instr_Addr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [31:0]M_AXI_DP_ARADDR;
  wire [2:0]M_AXI_DP_ARPROT;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID;
  wire [31:0]M_AXI_DP_AWADDR;
  wire [2:0]M_AXI_DP_AWPROT;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID;
  wire M_AXI_DP_BREADY;
  wire [1:0]M_AXI_DP_BRESP;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RREADY;
  wire [1:0]M_AXI_DP_RRESP;
  wire M_AXI_DP_RVALID;
  wire [31:0]M_AXI_DP_WDATA;
  wire M_AXI_DP_WREADY;
  wire [3:0]M_AXI_DP_WSTRB;
  wire M_AXI_DP_WVALID;
  wire Read_Strobe;
  wire Reset;
  wire Write_Strobe;
  wire NLW_U0_Dbg_Intr_UNCONNECTED;
  wire NLW_U0_Dbg_Trace_Valid_UNCONNECTED;
  wire NLW_U0_Dbg_Wakeup_UNCONNECTED;
  wire NLW_U0_M0_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M0_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M10_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M10_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M11_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M11_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M12_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M12_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M13_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M13_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M14_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M14_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M15_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M15_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M1_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M1_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M2_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M2_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M3_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M3_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M4_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M4_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M5_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M5_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M6_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M6_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M7_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M7_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M8_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M8_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M9_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M9_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_MB_Error_UNCONNECTED;
  wire NLW_U0_MB_Halted_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ACREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CDLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CDVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CRVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RACK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WACK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ACREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CDLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CDVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CRVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RACK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WACK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_WVALID_UNCONNECTED;
  wire NLW_U0_S0_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S10_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S11_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S12_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S13_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S14_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S15_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S1_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S2_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S3_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S4_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S5_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S6_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S7_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S8_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S9_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_Sleep_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Hit_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Rdy_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Read_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Req_UNCONNECTED;
  wire NLW_U0_Trace_Data_Access_UNCONNECTED;
  wire NLW_U0_Trace_Data_Read_UNCONNECTED;
  wire NLW_U0_Trace_Data_Write_UNCONNECTED;
  wire NLW_U0_Trace_Delay_Slot_UNCONNECTED;
  wire NLW_U0_Trace_EX_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_Exception_Taken_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Hit_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Rdy_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Req_UNCONNECTED;
  wire NLW_U0_Trace_Jump_Hit_UNCONNECTED;
  wire NLW_U0_Trace_Jump_Taken_UNCONNECTED;
  wire NLW_U0_Trace_MB_Halted_UNCONNECTED;
  wire NLW_U0_Trace_MEM_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_OF_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_Reg_Write_UNCONNECTED;
  wire NLW_U0_Trace_Valid_Instr_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_Trace_Data_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_UNCONNECTED;
  wire [0:4095]NLW_U0_LOCKSTEP_Master_Out_UNCONNECTED;
  wire [0:4095]NLW_U0_LOCKSTEP_Out_UNCONNECTED;
  wire [31:0]NLW_U0_M0_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M10_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M11_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M12_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M13_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M14_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M15_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M1_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M2_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M3_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M4_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M5_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M6_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M7_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M8_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M9_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DC_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_ARSIZE_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_ARUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_AWCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DC_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWSIZE_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_AWUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_WSTRB_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_WUSER_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DP_ARLEN_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_ARSIZE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DP_AWLEN_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IC_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_ARSIZE_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_ARUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_AWCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IC_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWSIZE_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_AWUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_WSTRB_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_WUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IP_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IP_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_WSTRB_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Address_UNCONNECTED;
  wire [0:3]NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Write_Value_UNCONNECTED;
  wire [0:4]NLW_U0_Trace_Exception_Kind_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Instruction_UNCONNECTED;
  wire [0:14]NLW_U0_Trace_MSR_Reg_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_New_Reg_Value_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_PC_UNCONNECTED;
  wire [0:7]NLW_U0_Trace_PID_Reg_UNCONNECTED;
  wire [0:4]NLW_U0_Trace_Reg_Addr_UNCONNECTED;

  (* C_ADDR_TAG_BITS = "17" *) 
  (* C_ALLOW_DCACHE_WR = "1" *) 
  (* C_ALLOW_ICACHE_WR = "1" *) 
  (* C_AREA_OPTIMIZED = "0" *) 
  (* C_ASYNC_INTERRUPT = "1" *) 
  (* C_AVOID_PRIMITIVES = "0" *) 
  (* C_BASE_VECTORS = "0" *) 
  (* C_BRANCH_TARGET_CACHE_SIZE = "0" *) 
  (* C_CACHE_BYTE_SIZE = "8192" *) 
  (* C_DATA_SIZE = "32" *) 
  (* C_DCACHE_ADDR_TAG = "17" *) 
  (* C_DCACHE_ALWAYS_USED = "0" *) 
  (* C_DCACHE_BASEADDR = "0" *) 
  (* C_DCACHE_BYTE_SIZE = "8192" *) 
  (* C_DCACHE_DATA_WIDTH = "0" *) 
  (* C_DCACHE_FORCE_TAG_LUTRAM = "0" *) 
  (* C_DCACHE_HIGHADDR = "1073741823" *) 
  (* C_DCACHE_LINE_LEN = "4" *) 
  (* C_DCACHE_USE_WRITEBACK = "0" *) 
  (* C_DCACHE_VICTIMS = "0" *) 
  (* C_DEBUG_COUNTER_WIDTH = "32" *) 
  (* C_DEBUG_ENABLED = "1" *) 
  (* C_DEBUG_EVENT_COUNTERS = "5" *) 
  (* C_DEBUG_EXTERNAL_TRACE = "0" *) 
  (* C_DEBUG_LATENCY_COUNTERS = "1" *) 
  (* C_DEBUG_PROFILE_SIZE = "0" *) 
  (* C_DEBUG_TRACE_SIZE = "8192" *) 
  (* C_DIV_ZERO_EXCEPTION = "0" *) 
  (* C_DYNAMIC_BUS_SIZING = "0" *) 
  (* C_D_AXI = "1" *) 
  (* C_D_LMB = "1" *) 
  (* C_ECC_USE_CE_EXCEPTION = "0" *) 
  (* C_EDGE_IS_POSITIVE = "1" *) 
  (* C_ENDIANNESS = "1" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FAULT_TOLERANT = "0" *) 
  (* C_FPU_EXCEPTION = "0" *) 
  (* C_FREQ = "100000000" *) 
  (* C_FSL_EXCEPTION = "0" *) 
  (* C_FSL_LINKS = "0" *) 
  (* C_ICACHE_ALWAYS_USED = "0" *) 
  (* C_ICACHE_BASEADDR = "0" *) 
  (* C_ICACHE_DATA_WIDTH = "0" *) 
  (* C_ICACHE_FORCE_TAG_LUTRAM = "0" *) 
  (* C_ICACHE_HIGHADDR = "1073741823" *) 
  (* C_ICACHE_LINE_LEN = "4" *) 
  (* C_ICACHE_STREAMS = "0" *) 
  (* C_ICACHE_VICTIMS = "0" *) 
  (* C_ILL_OPCODE_EXCEPTION = "0" *) 
  (* C_IMPRECISE_EXCEPTIONS = "0" *) 
  (* C_INSTANCE = "system_microblaze_0_0" *) 
  (* C_INTERCONNECT = "2" *) 
  (* C_INTERRUPT_IS_EDGE = "0" *) 
  (* C_I_AXI = "0" *) 
  (* C_I_LMB = "1" *) 
  (* C_LOCKSTEP_SLAVE = "0" *) 
  (* C_M0_AXIS_DATA_WIDTH = "32" *) 
  (* C_M10_AXIS_DATA_WIDTH = "32" *) 
  (* C_M11_AXIS_DATA_WIDTH = "32" *) 
  (* C_M12_AXIS_DATA_WIDTH = "32" *) 
  (* C_M13_AXIS_DATA_WIDTH = "32" *) 
  (* C_M14_AXIS_DATA_WIDTH = "32" *) 
  (* C_M15_AXIS_DATA_WIDTH = "32" *) 
  (* C_M1_AXIS_DATA_WIDTH = "32" *) 
  (* C_M2_AXIS_DATA_WIDTH = "32" *) 
  (* C_M3_AXIS_DATA_WIDTH = "32" *) 
  (* C_M4_AXIS_DATA_WIDTH = "32" *) 
  (* C_M5_AXIS_DATA_WIDTH = "32" *) 
  (* C_M6_AXIS_DATA_WIDTH = "32" *) 
  (* C_M7_AXIS_DATA_WIDTH = "32" *) 
  (* C_M8_AXIS_DATA_WIDTH = "32" *) 
  (* C_M9_AXIS_DATA_WIDTH = "32" *) 
  (* C_MMU_DTLB_SIZE = "4" *) 
  (* C_MMU_ITLB_SIZE = "2" *) 
  (* C_MMU_PRIVILEGED_INSTR = "0" *) 
  (* C_MMU_TLB_ACCESS = "3" *) 
  (* C_MMU_ZONES = "16" *) 
  (* C_M_AXI_DC_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DC_ARUSER_WIDTH = "5" *) 
  (* C_M_AXI_DC_AWUSER_WIDTH = "5" *) 
  (* C_M_AXI_DC_BUSER_WIDTH = "1" *) 
  (* C_M_AXI_DC_DATA_WIDTH = "32" *) 
  (* C_M_AXI_DC_EXCLUSIVE_ACCESS = "0" *) 
  (* C_M_AXI_DC_RUSER_WIDTH = "1" *) 
  (* C_M_AXI_DC_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_DC_USER_VALUE = "31" *) 
  (* C_M_AXI_DC_WUSER_WIDTH = "1" *) 
  (* C_M_AXI_DP_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DP_DATA_WIDTH = "32" *) 
  (* C_M_AXI_DP_EXCLUSIVE_ACCESS = "0" *) 
  (* C_M_AXI_DP_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_D_BUS_EXCEPTION = "0" *) 
  (* C_M_AXI_IC_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_IC_ARUSER_WIDTH = "5" *) 
  (* C_M_AXI_IC_AWUSER_WIDTH = "5" *) 
  (* C_M_AXI_IC_BUSER_WIDTH = "1" *) 
  (* C_M_AXI_IC_DATA_WIDTH = "32" *) 
  (* C_M_AXI_IC_RUSER_WIDTH = "1" *) 
  (* C_M_AXI_IC_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_IC_USER_VALUE = "31" *) 
  (* C_M_AXI_IC_WUSER_WIDTH = "1" *) 
  (* C_M_AXI_IP_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_IP_DATA_WIDTH = "32" *) 
  (* C_M_AXI_IP_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_I_BUS_EXCEPTION = "0" *) 
  (* C_NUMBER_OF_PC_BRK = "1" *) 
  (* C_NUMBER_OF_RD_ADDR_BRK = "0" *) 
  (* C_NUMBER_OF_WR_ADDR_BRK = "0" *) 
  (* C_NUM_SYNC_FF_CLK = "2" *) 
  (* C_NUM_SYNC_FF_CLK_DEBUG = "2" *) 
  (* C_NUM_SYNC_FF_CLK_IRQ = "1" *) 
  (* C_NUM_SYNC_FF_DBG_CLK = "1" *) 
  (* C_OPCODE_0x0_ILLEGAL = "0" *) 
  (* C_OPTIMIZATION = "0" *) 
  (* C_PC_WIDTH = "32" *) 
  (* C_PVR = "0" *) 
  (* C_PVR_USER1 = "8'b00000000" *) 
  (* C_PVR_USER2 = "0" *) 
  (* C_RESET_MSR = "0" *) 
  (* C_S0_AXIS_DATA_WIDTH = "32" *) 
  (* C_S10_AXIS_DATA_WIDTH = "32" *) 
  (* C_S11_AXIS_DATA_WIDTH = "32" *) 
  (* C_S12_AXIS_DATA_WIDTH = "32" *) 
  (* C_S13_AXIS_DATA_WIDTH = "32" *) 
  (* C_S14_AXIS_DATA_WIDTH = "32" *) 
  (* C_S15_AXIS_DATA_WIDTH = "32" *) 
  (* C_S1_AXIS_DATA_WIDTH = "32" *) 
  (* C_S2_AXIS_DATA_WIDTH = "32" *) 
  (* C_S3_AXIS_DATA_WIDTH = "32" *) 
  (* C_S4_AXIS_DATA_WIDTH = "32" *) 
  (* C_S5_AXIS_DATA_WIDTH = "32" *) 
  (* C_S6_AXIS_DATA_WIDTH = "32" *) 
  (* C_S7_AXIS_DATA_WIDTH = "32" *) 
  (* C_S8_AXIS_DATA_WIDTH = "32" *) 
  (* C_S9_AXIS_DATA_WIDTH = "32" *) 
  (* C_SCO = "0" *) 
  (* C_UNALIGNED_EXCEPTIONS = "0" *) 
  (* C_USE_BARREL = "0" *) 
  (* C_USE_BRANCH_TARGET_CACHE = "0" *) 
  (* C_USE_CONFIG_RESET = "0" *) 
  (* C_USE_DCACHE = "0" *) 
  (* C_USE_DIV = "0" *) 
  (* C_USE_EXTENDED_FSL_INSTR = "0" *) 
  (* C_USE_EXT_BRK = "0" *) 
  (* C_USE_EXT_NM_BRK = "0" *) 
  (* C_USE_FPU = "0" *) 
  (* C_USE_HW_MUL = "0" *) 
  (* C_USE_ICACHE = "0" *) 
  (* C_USE_INTERRUPT = "2" *) 
  (* C_USE_MMU = "0" *) 
  (* C_USE_MSR_INSTR = "0" *) 
  (* C_USE_PCMP_INSTR = "0" *) 
  (* C_USE_REORDER_INSTR = "1" *) 
  (* C_USE_STACK_PROTECTION = "0" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  system_microblaze_0_0_MicroBlaze U0
       (.Byte_Enable(Byte_Enable),
        .Clk(Clk),
        .Config_Reset(1'b0),
        .DCE(DCE),
        .DReady(DReady),
        .DUE(DUE),
        .DWait(DWait),
        .D_AS(D_AS),
        .Data_Addr(Data_Addr),
        .Data_Read(Data_Read),
        .Data_Write(Data_Write),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(1'b0),
        .Dbg_Intr(NLW_U0_Dbg_Intr_UNCONNECTED),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(1'b0),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trace_Clk(1'b0),
        .Dbg_Trace_Data(NLW_U0_Dbg_Trace_Data_UNCONNECTED[0:35]),
        .Dbg_Trace_Ready(1'b0),
        .Dbg_Trace_Valid(NLW_U0_Dbg_Trace_Valid_UNCONNECTED),
        .Dbg_Trig_Ack_In({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out(NLW_U0_Dbg_Trig_Ack_Out_UNCONNECTED[0:7]),
        .Dbg_Trig_In(NLW_U0_Dbg_Trig_In_UNCONNECTED[0:7]),
        .Dbg_Trig_Out({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Update(Dbg_Update),
        .Dbg_Wakeup(NLW_U0_Dbg_Wakeup_UNCONNECTED),
        .Debug_Rst(Debug_Rst),
        .Ext_BRK(1'b0),
        .Ext_NM_BRK(1'b0),
        .ICE(ICE),
        .IFetch(IFetch),
        .IReady(IReady),
        .IUE(IUE),
        .IWAIT(IWAIT),
        .I_AS(I_AS),
        .Instr(Instr),
        .Instr_Addr(Instr_Addr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out(NLW_U0_LOCKSTEP_Master_Out_UNCONNECTED[0:4095]),
        .LOCKSTEP_Out(NLW_U0_LOCKSTEP_Out_UNCONNECTED[0:4095]),
        .LOCKSTEP_Slave_In({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M0_AXIS_TDATA(NLW_U0_M0_AXIS_TDATA_UNCONNECTED[31:0]),
        .M0_AXIS_TLAST(NLW_U0_M0_AXIS_TLAST_UNCONNECTED),
        .M0_AXIS_TREADY(1'b0),
        .M0_AXIS_TVALID(NLW_U0_M0_AXIS_TVALID_UNCONNECTED),
        .M10_AXIS_TDATA(NLW_U0_M10_AXIS_TDATA_UNCONNECTED[31:0]),
        .M10_AXIS_TLAST(NLW_U0_M10_AXIS_TLAST_UNCONNECTED),
        .M10_AXIS_TREADY(1'b0),
        .M10_AXIS_TVALID(NLW_U0_M10_AXIS_TVALID_UNCONNECTED),
        .M11_AXIS_TDATA(NLW_U0_M11_AXIS_TDATA_UNCONNECTED[31:0]),
        .M11_AXIS_TLAST(NLW_U0_M11_AXIS_TLAST_UNCONNECTED),
        .M11_AXIS_TREADY(1'b0),
        .M11_AXIS_TVALID(NLW_U0_M11_AXIS_TVALID_UNCONNECTED),
        .M12_AXIS_TDATA(NLW_U0_M12_AXIS_TDATA_UNCONNECTED[31:0]),
        .M12_AXIS_TLAST(NLW_U0_M12_AXIS_TLAST_UNCONNECTED),
        .M12_AXIS_TREADY(1'b0),
        .M12_AXIS_TVALID(NLW_U0_M12_AXIS_TVALID_UNCONNECTED),
        .M13_AXIS_TDATA(NLW_U0_M13_AXIS_TDATA_UNCONNECTED[31:0]),
        .M13_AXIS_TLAST(NLW_U0_M13_AXIS_TLAST_UNCONNECTED),
        .M13_AXIS_TREADY(1'b0),
        .M13_AXIS_TVALID(NLW_U0_M13_AXIS_TVALID_UNCONNECTED),
        .M14_AXIS_TDATA(NLW_U0_M14_AXIS_TDATA_UNCONNECTED[31:0]),
        .M14_AXIS_TLAST(NLW_U0_M14_AXIS_TLAST_UNCONNECTED),
        .M14_AXIS_TREADY(1'b0),
        .M14_AXIS_TVALID(NLW_U0_M14_AXIS_TVALID_UNCONNECTED),
        .M15_AXIS_TDATA(NLW_U0_M15_AXIS_TDATA_UNCONNECTED[31:0]),
        .M15_AXIS_TLAST(NLW_U0_M15_AXIS_TLAST_UNCONNECTED),
        .M15_AXIS_TREADY(1'b0),
        .M15_AXIS_TVALID(NLW_U0_M15_AXIS_TVALID_UNCONNECTED),
        .M1_AXIS_TDATA(NLW_U0_M1_AXIS_TDATA_UNCONNECTED[31:0]),
        .M1_AXIS_TLAST(NLW_U0_M1_AXIS_TLAST_UNCONNECTED),
        .M1_AXIS_TREADY(1'b0),
        .M1_AXIS_TVALID(NLW_U0_M1_AXIS_TVALID_UNCONNECTED),
        .M2_AXIS_TDATA(NLW_U0_M2_AXIS_TDATA_UNCONNECTED[31:0]),
        .M2_AXIS_TLAST(NLW_U0_M2_AXIS_TLAST_UNCONNECTED),
        .M2_AXIS_TREADY(1'b0),
        .M2_AXIS_TVALID(NLW_U0_M2_AXIS_TVALID_UNCONNECTED),
        .M3_AXIS_TDATA(NLW_U0_M3_AXIS_TDATA_UNCONNECTED[31:0]),
        .M3_AXIS_TLAST(NLW_U0_M3_AXIS_TLAST_UNCONNECTED),
        .M3_AXIS_TREADY(1'b0),
        .M3_AXIS_TVALID(NLW_U0_M3_AXIS_TVALID_UNCONNECTED),
        .M4_AXIS_TDATA(NLW_U0_M4_AXIS_TDATA_UNCONNECTED[31:0]),
        .M4_AXIS_TLAST(NLW_U0_M4_AXIS_TLAST_UNCONNECTED),
        .M4_AXIS_TREADY(1'b0),
        .M4_AXIS_TVALID(NLW_U0_M4_AXIS_TVALID_UNCONNECTED),
        .M5_AXIS_TDATA(NLW_U0_M5_AXIS_TDATA_UNCONNECTED[31:0]),
        .M5_AXIS_TLAST(NLW_U0_M5_AXIS_TLAST_UNCONNECTED),
        .M5_AXIS_TREADY(1'b0),
        .M5_AXIS_TVALID(NLW_U0_M5_AXIS_TVALID_UNCONNECTED),
        .M6_AXIS_TDATA(NLW_U0_M6_AXIS_TDATA_UNCONNECTED[31:0]),
        .M6_AXIS_TLAST(NLW_U0_M6_AXIS_TLAST_UNCONNECTED),
        .M6_AXIS_TREADY(1'b0),
        .M6_AXIS_TVALID(NLW_U0_M6_AXIS_TVALID_UNCONNECTED),
        .M7_AXIS_TDATA(NLW_U0_M7_AXIS_TDATA_UNCONNECTED[31:0]),
        .M7_AXIS_TLAST(NLW_U0_M7_AXIS_TLAST_UNCONNECTED),
        .M7_AXIS_TREADY(1'b0),
        .M7_AXIS_TVALID(NLW_U0_M7_AXIS_TVALID_UNCONNECTED),
        .M8_AXIS_TDATA(NLW_U0_M8_AXIS_TDATA_UNCONNECTED[31:0]),
        .M8_AXIS_TLAST(NLW_U0_M8_AXIS_TLAST_UNCONNECTED),
        .M8_AXIS_TREADY(1'b0),
        .M8_AXIS_TVALID(NLW_U0_M8_AXIS_TVALID_UNCONNECTED),
        .M9_AXIS_TDATA(NLW_U0_M9_AXIS_TDATA_UNCONNECTED[31:0]),
        .M9_AXIS_TLAST(NLW_U0_M9_AXIS_TLAST_UNCONNECTED),
        .M9_AXIS_TREADY(1'b0),
        .M9_AXIS_TVALID(NLW_U0_M9_AXIS_TVALID_UNCONNECTED),
        .MB_Error(NLW_U0_MB_Error_UNCONNECTED),
        .MB_Halted(NLW_U0_MB_Halted_UNCONNECTED),
        .M_AXI_DC_ACADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACPROT({1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACREADY(NLW_U0_M_AXI_DC_ACREADY_UNCONNECTED),
        .M_AXI_DC_ACSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACVALID(1'b0),
        .M_AXI_DC_ARADDR(NLW_U0_M_AXI_DC_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_DC_ARBAR(NLW_U0_M_AXI_DC_ARBAR_UNCONNECTED[1:0]),
        .M_AXI_DC_ARBURST(NLW_U0_M_AXI_DC_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_DC_ARCACHE(NLW_U0_M_AXI_DC_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_DC_ARDOMAIN(NLW_U0_M_AXI_DC_ARDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_DC_ARID(NLW_U0_M_AXI_DC_ARID_UNCONNECTED[0]),
        .M_AXI_DC_ARLEN(NLW_U0_M_AXI_DC_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_DC_ARLOCK(NLW_U0_M_AXI_DC_ARLOCK_UNCONNECTED),
        .M_AXI_DC_ARPROT(NLW_U0_M_AXI_DC_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_DC_ARQOS(NLW_U0_M_AXI_DC_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_DC_ARREADY(1'b0),
        .M_AXI_DC_ARSIZE(NLW_U0_M_AXI_DC_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_DC_ARSNOOP(NLW_U0_M_AXI_DC_ARSNOOP_UNCONNECTED[3:0]),
        .M_AXI_DC_ARUSER(NLW_U0_M_AXI_DC_ARUSER_UNCONNECTED[4:0]),
        .M_AXI_DC_ARVALID(NLW_U0_M_AXI_DC_ARVALID_UNCONNECTED),
        .M_AXI_DC_AWADDR(NLW_U0_M_AXI_DC_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_DC_AWBAR(NLW_U0_M_AXI_DC_AWBAR_UNCONNECTED[1:0]),
        .M_AXI_DC_AWBURST(NLW_U0_M_AXI_DC_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_DC_AWCACHE(NLW_U0_M_AXI_DC_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_DC_AWDOMAIN(NLW_U0_M_AXI_DC_AWDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_DC_AWID(NLW_U0_M_AXI_DC_AWID_UNCONNECTED[0]),
        .M_AXI_DC_AWLEN(NLW_U0_M_AXI_DC_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_DC_AWLOCK(NLW_U0_M_AXI_DC_AWLOCK_UNCONNECTED),
        .M_AXI_DC_AWPROT(NLW_U0_M_AXI_DC_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_DC_AWQOS(NLW_U0_M_AXI_DC_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_DC_AWREADY(1'b0),
        .M_AXI_DC_AWSIZE(NLW_U0_M_AXI_DC_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_DC_AWSNOOP(NLW_U0_M_AXI_DC_AWSNOOP_UNCONNECTED[2:0]),
        .M_AXI_DC_AWUSER(NLW_U0_M_AXI_DC_AWUSER_UNCONNECTED[4:0]),
        .M_AXI_DC_AWVALID(NLW_U0_M_AXI_DC_AWVALID_UNCONNECTED),
        .M_AXI_DC_BID(1'b0),
        .M_AXI_DC_BREADY(NLW_U0_M_AXI_DC_BREADY_UNCONNECTED),
        .M_AXI_DC_BRESP({1'b0,1'b0}),
        .M_AXI_DC_BUSER(1'b0),
        .M_AXI_DC_BVALID(1'b0),
        .M_AXI_DC_CDDATA(NLW_U0_M_AXI_DC_CDDATA_UNCONNECTED[31:0]),
        .M_AXI_DC_CDLAST(NLW_U0_M_AXI_DC_CDLAST_UNCONNECTED),
        .M_AXI_DC_CDREADY(1'b0),
        .M_AXI_DC_CDVALID(NLW_U0_M_AXI_DC_CDVALID_UNCONNECTED),
        .M_AXI_DC_CRREADY(1'b0),
        .M_AXI_DC_CRRESP(NLW_U0_M_AXI_DC_CRRESP_UNCONNECTED[4:0]),
        .M_AXI_DC_CRVALID(NLW_U0_M_AXI_DC_CRVALID_UNCONNECTED),
        .M_AXI_DC_RACK(NLW_U0_M_AXI_DC_RACK_UNCONNECTED),
        .M_AXI_DC_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_RID(1'b0),
        .M_AXI_DC_RLAST(1'b0),
        .M_AXI_DC_RREADY(NLW_U0_M_AXI_DC_RREADY_UNCONNECTED),
        .M_AXI_DC_RRESP({1'b0,1'b0}),
        .M_AXI_DC_RUSER(1'b0),
        .M_AXI_DC_RVALID(1'b0),
        .M_AXI_DC_WACK(NLW_U0_M_AXI_DC_WACK_UNCONNECTED),
        .M_AXI_DC_WDATA(NLW_U0_M_AXI_DC_WDATA_UNCONNECTED[31:0]),
        .M_AXI_DC_WLAST(NLW_U0_M_AXI_DC_WLAST_UNCONNECTED),
        .M_AXI_DC_WREADY(1'b0),
        .M_AXI_DC_WSTRB(NLW_U0_M_AXI_DC_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_DC_WUSER(NLW_U0_M_AXI_DC_WUSER_UNCONNECTED[0]),
        .M_AXI_DC_WVALID(NLW_U0_M_AXI_DC_WVALID_UNCONNECTED),
        .M_AXI_DP_ARADDR(M_AXI_DP_ARADDR),
        .M_AXI_DP_ARBURST(NLW_U0_M_AXI_DP_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_DP_ARCACHE(NLW_U0_M_AXI_DP_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_DP_ARID(NLW_U0_M_AXI_DP_ARID_UNCONNECTED[0]),
        .M_AXI_DP_ARLEN(NLW_U0_M_AXI_DP_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_DP_ARLOCK(NLW_U0_M_AXI_DP_ARLOCK_UNCONNECTED),
        .M_AXI_DP_ARPROT(M_AXI_DP_ARPROT),
        .M_AXI_DP_ARQOS(NLW_U0_M_AXI_DP_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_ARSIZE(NLW_U0_M_AXI_DP_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_DP_ARVALID(M_AXI_DP_ARVALID),
        .M_AXI_DP_AWADDR(M_AXI_DP_AWADDR),
        .M_AXI_DP_AWBURST(NLW_U0_M_AXI_DP_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_DP_AWCACHE(NLW_U0_M_AXI_DP_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_DP_AWID(NLW_U0_M_AXI_DP_AWID_UNCONNECTED[0]),
        .M_AXI_DP_AWLEN(NLW_U0_M_AXI_DP_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_DP_AWLOCK(NLW_U0_M_AXI_DP_AWLOCK_UNCONNECTED),
        .M_AXI_DP_AWPROT(M_AXI_DP_AWPROT),
        .M_AXI_DP_AWQOS(NLW_U0_M_AXI_DP_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_AWSIZE(NLW_U0_M_AXI_DP_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_DP_AWVALID(M_AXI_DP_AWVALID),
        .M_AXI_DP_BID(1'b0),
        .M_AXI_DP_BREADY(M_AXI_DP_BREADY),
        .M_AXI_DP_BRESP(M_AXI_DP_BRESP),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RID(1'b0),
        .M_AXI_DP_RLAST(1'b0),
        .M_AXI_DP_RREADY(M_AXI_DP_RREADY),
        .M_AXI_DP_RRESP(M_AXI_DP_RRESP),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WDATA(M_AXI_DP_WDATA),
        .M_AXI_DP_WLAST(NLW_U0_M_AXI_DP_WLAST_UNCONNECTED),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .M_AXI_DP_WSTRB(M_AXI_DP_WSTRB),
        .M_AXI_DP_WVALID(M_AXI_DP_WVALID),
        .M_AXI_IC_ACADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACPROT({1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACREADY(NLW_U0_M_AXI_IC_ACREADY_UNCONNECTED),
        .M_AXI_IC_ACSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACVALID(1'b0),
        .M_AXI_IC_ARADDR(NLW_U0_M_AXI_IC_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_IC_ARBAR(NLW_U0_M_AXI_IC_ARBAR_UNCONNECTED[1:0]),
        .M_AXI_IC_ARBURST(NLW_U0_M_AXI_IC_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_IC_ARCACHE(NLW_U0_M_AXI_IC_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_IC_ARDOMAIN(NLW_U0_M_AXI_IC_ARDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_IC_ARID(NLW_U0_M_AXI_IC_ARID_UNCONNECTED[0]),
        .M_AXI_IC_ARLEN(NLW_U0_M_AXI_IC_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_IC_ARLOCK(NLW_U0_M_AXI_IC_ARLOCK_UNCONNECTED),
        .M_AXI_IC_ARPROT(NLW_U0_M_AXI_IC_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_IC_ARQOS(NLW_U0_M_AXI_IC_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_IC_ARREADY(1'b0),
        .M_AXI_IC_ARSIZE(NLW_U0_M_AXI_IC_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_IC_ARSNOOP(NLW_U0_M_AXI_IC_ARSNOOP_UNCONNECTED[3:0]),
        .M_AXI_IC_ARUSER(NLW_U0_M_AXI_IC_ARUSER_UNCONNECTED[4:0]),
        .M_AXI_IC_ARVALID(NLW_U0_M_AXI_IC_ARVALID_UNCONNECTED),
        .M_AXI_IC_AWADDR(NLW_U0_M_AXI_IC_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_IC_AWBAR(NLW_U0_M_AXI_IC_AWBAR_UNCONNECTED[1:0]),
        .M_AXI_IC_AWBURST(NLW_U0_M_AXI_IC_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_IC_AWCACHE(NLW_U0_M_AXI_IC_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_IC_AWDOMAIN(NLW_U0_M_AXI_IC_AWDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_IC_AWID(NLW_U0_M_AXI_IC_AWID_UNCONNECTED[0]),
        .M_AXI_IC_AWLEN(NLW_U0_M_AXI_IC_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_IC_AWLOCK(NLW_U0_M_AXI_IC_AWLOCK_UNCONNECTED),
        .M_AXI_IC_AWPROT(NLW_U0_M_AXI_IC_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_IC_AWQOS(NLW_U0_M_AXI_IC_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_IC_AWREADY(1'b0),
        .M_AXI_IC_AWSIZE(NLW_U0_M_AXI_IC_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_IC_AWSNOOP(NLW_U0_M_AXI_IC_AWSNOOP_UNCONNECTED[2:0]),
        .M_AXI_IC_AWUSER(NLW_U0_M_AXI_IC_AWUSER_UNCONNECTED[4:0]),
        .M_AXI_IC_AWVALID(NLW_U0_M_AXI_IC_AWVALID_UNCONNECTED),
        .M_AXI_IC_BID(1'b0),
        .M_AXI_IC_BREADY(NLW_U0_M_AXI_IC_BREADY_UNCONNECTED),
        .M_AXI_IC_BRESP({1'b0,1'b0}),
        .M_AXI_IC_BUSER(1'b0),
        .M_AXI_IC_BVALID(1'b0),
        .M_AXI_IC_CDDATA(NLW_U0_M_AXI_IC_CDDATA_UNCONNECTED[31:0]),
        .M_AXI_IC_CDLAST(NLW_U0_M_AXI_IC_CDLAST_UNCONNECTED),
        .M_AXI_IC_CDREADY(1'b0),
        .M_AXI_IC_CDVALID(NLW_U0_M_AXI_IC_CDVALID_UNCONNECTED),
        .M_AXI_IC_CRREADY(1'b0),
        .M_AXI_IC_CRRESP(NLW_U0_M_AXI_IC_CRRESP_UNCONNECTED[4:0]),
        .M_AXI_IC_CRVALID(NLW_U0_M_AXI_IC_CRVALID_UNCONNECTED),
        .M_AXI_IC_RACK(NLW_U0_M_AXI_IC_RACK_UNCONNECTED),
        .M_AXI_IC_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_RID(1'b0),
        .M_AXI_IC_RLAST(1'b0),
        .M_AXI_IC_RREADY(NLW_U0_M_AXI_IC_RREADY_UNCONNECTED),
        .M_AXI_IC_RRESP({1'b0,1'b0}),
        .M_AXI_IC_RUSER(1'b0),
        .M_AXI_IC_RVALID(1'b0),
        .M_AXI_IC_WACK(NLW_U0_M_AXI_IC_WACK_UNCONNECTED),
        .M_AXI_IC_WDATA(NLW_U0_M_AXI_IC_WDATA_UNCONNECTED[31:0]),
        .M_AXI_IC_WLAST(NLW_U0_M_AXI_IC_WLAST_UNCONNECTED),
        .M_AXI_IC_WREADY(1'b0),
        .M_AXI_IC_WSTRB(NLW_U0_M_AXI_IC_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_IC_WUSER(NLW_U0_M_AXI_IC_WUSER_UNCONNECTED[0]),
        .M_AXI_IC_WVALID(NLW_U0_M_AXI_IC_WVALID_UNCONNECTED),
        .M_AXI_IP_ARADDR(NLW_U0_M_AXI_IP_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_IP_ARBURST(NLW_U0_M_AXI_IP_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_IP_ARCACHE(NLW_U0_M_AXI_IP_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_IP_ARID(NLW_U0_M_AXI_IP_ARID_UNCONNECTED[0]),
        .M_AXI_IP_ARLEN(NLW_U0_M_AXI_IP_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_IP_ARLOCK(NLW_U0_M_AXI_IP_ARLOCK_UNCONNECTED),
        .M_AXI_IP_ARPROT(NLW_U0_M_AXI_IP_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_IP_ARQOS(NLW_U0_M_AXI_IP_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_IP_ARREADY(1'b0),
        .M_AXI_IP_ARSIZE(NLW_U0_M_AXI_IP_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_IP_ARVALID(NLW_U0_M_AXI_IP_ARVALID_UNCONNECTED),
        .M_AXI_IP_AWADDR(NLW_U0_M_AXI_IP_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_IP_AWBURST(NLW_U0_M_AXI_IP_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_IP_AWCACHE(NLW_U0_M_AXI_IP_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_IP_AWID(NLW_U0_M_AXI_IP_AWID_UNCONNECTED[0]),
        .M_AXI_IP_AWLEN(NLW_U0_M_AXI_IP_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_IP_AWLOCK(NLW_U0_M_AXI_IP_AWLOCK_UNCONNECTED),
        .M_AXI_IP_AWPROT(NLW_U0_M_AXI_IP_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_IP_AWQOS(NLW_U0_M_AXI_IP_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_IP_AWREADY(1'b0),
        .M_AXI_IP_AWSIZE(NLW_U0_M_AXI_IP_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_IP_AWVALID(NLW_U0_M_AXI_IP_AWVALID_UNCONNECTED),
        .M_AXI_IP_BID(1'b0),
        .M_AXI_IP_BREADY(NLW_U0_M_AXI_IP_BREADY_UNCONNECTED),
        .M_AXI_IP_BRESP({1'b0,1'b0}),
        .M_AXI_IP_BVALID(1'b0),
        .M_AXI_IP_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IP_RID(1'b0),
        .M_AXI_IP_RLAST(1'b0),
        .M_AXI_IP_RREADY(NLW_U0_M_AXI_IP_RREADY_UNCONNECTED),
        .M_AXI_IP_RRESP({1'b0,1'b0}),
        .M_AXI_IP_RVALID(1'b0),
        .M_AXI_IP_WDATA(NLW_U0_M_AXI_IP_WDATA_UNCONNECTED[31:0]),
        .M_AXI_IP_WLAST(NLW_U0_M_AXI_IP_WLAST_UNCONNECTED),
        .M_AXI_IP_WREADY(1'b0),
        .M_AXI_IP_WSTRB(NLW_U0_M_AXI_IP_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_IP_WVALID(NLW_U0_M_AXI_IP_WVALID_UNCONNECTED),
        .Mb_Reset(1'b0),
        .Read_Strobe(Read_Strobe),
        .Reset(Reset),
        .Reset_Mode({1'b0,1'b0}),
        .S0_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXIS_TLAST(1'b0),
        .S0_AXIS_TREADY(NLW_U0_S0_AXIS_TREADY_UNCONNECTED),
        .S0_AXIS_TVALID(1'b0),
        .S10_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXIS_TLAST(1'b0),
        .S10_AXIS_TREADY(NLW_U0_S10_AXIS_TREADY_UNCONNECTED),
        .S10_AXIS_TVALID(1'b0),
        .S11_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXIS_TLAST(1'b0),
        .S11_AXIS_TREADY(NLW_U0_S11_AXIS_TREADY_UNCONNECTED),
        .S11_AXIS_TVALID(1'b0),
        .S12_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXIS_TLAST(1'b0),
        .S12_AXIS_TREADY(NLW_U0_S12_AXIS_TREADY_UNCONNECTED),
        .S12_AXIS_TVALID(1'b0),
        .S13_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXIS_TLAST(1'b0),
        .S13_AXIS_TREADY(NLW_U0_S13_AXIS_TREADY_UNCONNECTED),
        .S13_AXIS_TVALID(1'b0),
        .S14_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXIS_TLAST(1'b0),
        .S14_AXIS_TREADY(NLW_U0_S14_AXIS_TREADY_UNCONNECTED),
        .S14_AXIS_TVALID(1'b0),
        .S15_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXIS_TLAST(1'b0),
        .S15_AXIS_TREADY(NLW_U0_S15_AXIS_TREADY_UNCONNECTED),
        .S15_AXIS_TVALID(1'b0),
        .S1_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXIS_TLAST(1'b0),
        .S1_AXIS_TREADY(NLW_U0_S1_AXIS_TREADY_UNCONNECTED),
        .S1_AXIS_TVALID(1'b0),
        .S2_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXIS_TLAST(1'b0),
        .S2_AXIS_TREADY(NLW_U0_S2_AXIS_TREADY_UNCONNECTED),
        .S2_AXIS_TVALID(1'b0),
        .S3_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXIS_TLAST(1'b0),
        .S3_AXIS_TREADY(NLW_U0_S3_AXIS_TREADY_UNCONNECTED),
        .S3_AXIS_TVALID(1'b0),
        .S4_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXIS_TLAST(1'b0),
        .S4_AXIS_TREADY(NLW_U0_S4_AXIS_TREADY_UNCONNECTED),
        .S4_AXIS_TVALID(1'b0),
        .S5_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXIS_TLAST(1'b0),
        .S5_AXIS_TREADY(NLW_U0_S5_AXIS_TREADY_UNCONNECTED),
        .S5_AXIS_TVALID(1'b0),
        .S6_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXIS_TLAST(1'b0),
        .S6_AXIS_TREADY(NLW_U0_S6_AXIS_TREADY_UNCONNECTED),
        .S6_AXIS_TVALID(1'b0),
        .S7_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXIS_TLAST(1'b0),
        .S7_AXIS_TREADY(NLW_U0_S7_AXIS_TREADY_UNCONNECTED),
        .S7_AXIS_TVALID(1'b0),
        .S8_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXIS_TLAST(1'b0),
        .S8_AXIS_TREADY(NLW_U0_S8_AXIS_TREADY_UNCONNECTED),
        .S8_AXIS_TVALID(1'b0),
        .S9_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXIS_TLAST(1'b0),
        .S9_AXIS_TREADY(NLW_U0_S9_AXIS_TREADY_UNCONNECTED),
        .S9_AXIS_TVALID(1'b0),
        .Scan_Reset(1'b0),
        .Scan_Reset_Sel(1'b0),
        .Sleep(NLW_U0_Sleep_UNCONNECTED),
        .Trace_DCache_Hit(NLW_U0_Trace_DCache_Hit_UNCONNECTED),
        .Trace_DCache_Rdy(NLW_U0_Trace_DCache_Rdy_UNCONNECTED),
        .Trace_DCache_Read(NLW_U0_Trace_DCache_Read_UNCONNECTED),
        .Trace_DCache_Req(NLW_U0_Trace_DCache_Req_UNCONNECTED),
        .Trace_Data_Access(NLW_U0_Trace_Data_Access_UNCONNECTED),
        .Trace_Data_Address(NLW_U0_Trace_Data_Address_UNCONNECTED[0:31]),
        .Trace_Data_Byte_Enable(NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED[0:3]),
        .Trace_Data_Read(NLW_U0_Trace_Data_Read_UNCONNECTED),
        .Trace_Data_Write(NLW_U0_Trace_Data_Write_UNCONNECTED),
        .Trace_Data_Write_Value(NLW_U0_Trace_Data_Write_Value_UNCONNECTED[0:31]),
        .Trace_Delay_Slot(NLW_U0_Trace_Delay_Slot_UNCONNECTED),
        .Trace_EX_PipeRun(NLW_U0_Trace_EX_PipeRun_UNCONNECTED),
        .Trace_Exception_Kind(NLW_U0_Trace_Exception_Kind_UNCONNECTED[0:4]),
        .Trace_Exception_Taken(NLW_U0_Trace_Exception_Taken_UNCONNECTED),
        .Trace_ICache_Hit(NLW_U0_Trace_ICache_Hit_UNCONNECTED),
        .Trace_ICache_Rdy(NLW_U0_Trace_ICache_Rdy_UNCONNECTED),
        .Trace_ICache_Req(NLW_U0_Trace_ICache_Req_UNCONNECTED),
        .Trace_Instruction(NLW_U0_Trace_Instruction_UNCONNECTED[0:31]),
        .Trace_Jump_Hit(NLW_U0_Trace_Jump_Hit_UNCONNECTED),
        .Trace_Jump_Taken(NLW_U0_Trace_Jump_Taken_UNCONNECTED),
        .Trace_MB_Halted(NLW_U0_Trace_MB_Halted_UNCONNECTED),
        .Trace_MEM_PipeRun(NLW_U0_Trace_MEM_PipeRun_UNCONNECTED),
        .Trace_MSR_Reg(NLW_U0_Trace_MSR_Reg_UNCONNECTED[0:14]),
        .Trace_New_Reg_Value(NLW_U0_Trace_New_Reg_Value_UNCONNECTED[0:31]),
        .Trace_OF_PipeRun(NLW_U0_Trace_OF_PipeRun_UNCONNECTED),
        .Trace_PC(NLW_U0_Trace_PC_UNCONNECTED[0:31]),
        .Trace_PID_Reg(NLW_U0_Trace_PID_Reg_UNCONNECTED[0:7]),
        .Trace_Reg_Addr(NLW_U0_Trace_Reg_Addr_UNCONNECTED[0:4]),
        .Trace_Reg_Write(NLW_U0_Trace_Reg_Write_UNCONNECTED),
        .Trace_Valid_Instr(NLW_U0_Trace_Valid_Instr_UNCONNECTED),
        .Wakeup({1'b0,1'b0}),
        .Write_Strobe(Write_Strobe));
endmodule

(* ORIG_REF_NAME = "ALU" *) 
module system_microblaze_0_0_ALU
   (LO,
    \Data_Addr[0] ,
    \MEM_DataBus_Addr_reg[30] ,
    ex_use_carry,
    DI_0,
    ex_alu_carryin,
    EX_CMP_Op_reg,
    ex_unsigned_op,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[0] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output LO;
  output [29:0]\Data_Addr[0] ;
  output [1:0]\MEM_DataBus_Addr_reg[30] ;
  input ex_use_carry;
  input DI_0;
  input ex_alu_carryin;
  input EX_CMP_Op_reg;
  input ex_unsigned_op;
  input [31:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [31:0]\EX_Op1_reg[0] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input S;
  input lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  input lopt_4;

  wire DI_0;
  wire [29:0]\Data_Addr[0] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CMP_Op_reg;
  wire EX_Enable_ALU;
  wire [31:0]\EX_Op1_reg[0] ;
  wire LO;
  wire [1:0]\MEM_DataBus_Addr_reg[30] ;
  wire [31:0]Q;
  wire S;
  wire alu_carry_0;
  wire alu_carry_1;
  wire alu_carry_10;
  wire alu_carry_11;
  wire alu_carry_12;
  wire alu_carry_13;
  wire alu_carry_14;
  wire alu_carry_15;
  wire alu_carry_16;
  wire alu_carry_17;
  wire alu_carry_18;
  wire alu_carry_19;
  wire alu_carry_2;
  wire alu_carry_20;
  wire alu_carry_21;
  wire alu_carry_22;
  wire alu_carry_23;
  wire alu_carry_24;
  wire alu_carry_25;
  wire alu_carry_26;
  wire alu_carry_27;
  wire alu_carry_28;
  wire alu_carry_29;
  wire alu_carry_3;
  wire alu_carry_30;
  wire alu_carry_31;
  wire alu_carry_4;
  wire alu_carry_5;
  wire alu_carry_6;
  wire alu_carry_7;
  wire alu_carry_8;
  wire alu_carry_9;
  wire ex_alu_carryin;
  wire ex_unsigned_op;
  wire ex_use_carry;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_102;
  wire lopt_103;
  wire lopt_104;
  wire lopt_105;
  wire lopt_106;
  wire lopt_107;
  wire lopt_108;
  wire lopt_109;
  wire lopt_11;
  wire lopt_110;
  wire lopt_111;
  wire lopt_112;
  wire lopt_113;
  wire lopt_114;
  wire lopt_115;
  wire lopt_116;
  wire lopt_117;
  wire lopt_118;
  wire lopt_119;
  wire lopt_12;
  wire lopt_120;
  wire lopt_121;
  wire lopt_122;
  wire lopt_123;
  wire lopt_124;
  wire lopt_125;
  wire lopt_126;
  wire lopt_127;
  wire lopt_128;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;

  system_microblaze_0_0_ALU_Bit__parameterized31 \ALL_Bits[0].ALU_Bit_I1 
       (.\Data_Addr[0] (\Data_Addr[0] [29]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CMP_Op_reg(EX_CMP_Op_reg),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[0] (\EX_Op1_reg[0] [31]),
        .LO(alu_carry_31),
        .Q(Q[31]),
        .S(S),
        .\Using_FPGA.Native (LO),
        .ex_unsigned_op(ex_unsigned_op),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_8),
        .lopt_100(lopt_98),
        .lopt_101(lopt_99),
        .lopt_102(lopt_100),
        .lopt_103(lopt_101),
        .lopt_104(lopt_102),
        .lopt_105(lopt_103),
        .lopt_106(lopt_104),
        .lopt_107(lopt_105),
        .lopt_108(lopt_106),
        .lopt_109(lopt_107),
        .lopt_11(lopt_9),
        .lopt_110(lopt_108),
        .lopt_111(lopt_109),
        .lopt_112(lopt_110),
        .lopt_113(lopt_111),
        .lopt_114(lopt_112),
        .lopt_115(lopt_113),
        .lopt_116(lopt_114),
        .lopt_117(lopt_115),
        .lopt_118(lopt_116),
        .lopt_119(lopt_117),
        .lopt_12(lopt_10),
        .lopt_120(lopt_118),
        .lopt_121(lopt_119),
        .lopt_122(lopt_120),
        .lopt_123(lopt_121),
        .lopt_124(lopt_122),
        .lopt_125(lopt_123),
        .lopt_126(lopt_124),
        .lopt_127(lopt_125),
        .lopt_128(lopt_126),
        .lopt_129(lopt_127),
        .lopt_13(lopt_11),
        .lopt_130(lopt_128),
        .lopt_14(lopt_12),
        .lopt_15(lopt_13),
        .lopt_16(lopt_14),
        .lopt_17(lopt_15),
        .lopt_18(lopt_16),
        .lopt_19(lopt_17),
        .lopt_2(lopt_2),
        .lopt_20(lopt_18),
        .lopt_21(lopt_19),
        .lopt_22(lopt_20),
        .lopt_23(lopt_21),
        .lopt_24(lopt_22),
        .lopt_25(lopt_23),
        .lopt_26(lopt_24),
        .lopt_27(lopt_25),
        .lopt_28(lopt_26),
        .lopt_29(lopt_27),
        .lopt_3(lopt_3),
        .lopt_30(lopt_28),
        .lopt_31(lopt_29),
        .lopt_32(lopt_30),
        .lopt_33(lopt_31),
        .lopt_34(lopt_32),
        .lopt_35(lopt_33),
        .lopt_36(lopt_34),
        .lopt_37(lopt_35),
        .lopt_38(lopt_36),
        .lopt_39(lopt_37),
        .lopt_4(lopt_4),
        .lopt_40(lopt_38),
        .lopt_41(lopt_39),
        .lopt_42(lopt_40),
        .lopt_43(lopt_41),
        .lopt_44(lopt_42),
        .lopt_45(lopt_43),
        .lopt_46(lopt_44),
        .lopt_47(lopt_45),
        .lopt_48(lopt_46),
        .lopt_49(lopt_47),
        .lopt_5(lopt_5),
        .lopt_50(lopt_48),
        .lopt_51(lopt_49),
        .lopt_52(lopt_50),
        .lopt_53(lopt_51),
        .lopt_54(lopt_52),
        .lopt_55(lopt_53),
        .lopt_56(lopt_54),
        .lopt_57(lopt_55),
        .lopt_58(lopt_56),
        .lopt_59(lopt_57),
        .lopt_6(DI_0),
        .lopt_60(lopt_58),
        .lopt_61(lopt_59),
        .lopt_62(lopt_60),
        .lopt_63(lopt_61),
        .lopt_64(lopt_62),
        .lopt_65(lopt_63),
        .lopt_66(lopt_64),
        .lopt_67(lopt_65),
        .lopt_68(lopt_66),
        .lopt_69(lopt_67),
        .lopt_7(ex_use_carry),
        .lopt_70(lopt_68),
        .lopt_71(lopt_69),
        .lopt_72(lopt_70),
        .lopt_73(lopt_71),
        .lopt_74(lopt_72),
        .lopt_75(lopt_73),
        .lopt_76(lopt_74),
        .lopt_77(lopt_75),
        .lopt_78(lopt_76),
        .lopt_79(lopt_77),
        .lopt_8(lopt_6),
        .lopt_80(lopt_78),
        .lopt_81(lopt_79),
        .lopt_82(lopt_80),
        .lopt_83(lopt_81),
        .lopt_84(lopt_82),
        .lopt_85(lopt_83),
        .lopt_86(lopt_84),
        .lopt_87(lopt_85),
        .lopt_88(lopt_86),
        .lopt_89(lopt_87),
        .lopt_9(lopt_7),
        .lopt_90(lopt_88),
        .lopt_91(lopt_89),
        .lopt_92(lopt_90),
        .lopt_93(lopt_91),
        .lopt_94(lopt_92),
        .lopt_95(lopt_93),
        .lopt_96(lopt_94),
        .lopt_97(lopt_95),
        .lopt_98(lopt_96),
        .lopt_99(lopt_97));
  system_microblaze_0_0_ALU_Bit \ALL_Bits[10].ALU_Bit_I1 
       (.\Data_Addr[10] (\Data_Addr[0] [19]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_22),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[10] (\EX_Op1_reg[0] [21]),
        .LO(alu_carry_21),
        .Q(Q[21]),
        .lopt(lopt_90),
        .lopt_1(lopt_91),
        .lopt_2(lopt_92),
        .lopt_3(lopt_102));
  system_microblaze_0_0_ALU_Bit_419 \ALL_Bits[11].ALU_Bit_I1 
       (.\Data_Addr[11] (\Data_Addr[0] [18]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_21),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[11] (\EX_Op1_reg[0] [20]),
        .LO(alu_carry_20),
        .Q(Q[20]),
        .lopt(lopt_83),
        .lopt_1(lopt_84),
        .lopt_2(lopt_85),
        .lopt_3(lopt_89));
  system_microblaze_0_0_ALU_Bit_420 \ALL_Bits[12].ALU_Bit_I1 
       (.\Data_Addr[12] (\Data_Addr[0] [17]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_20),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[12] (\EX_Op1_reg[0] [19]),
        .LO(alu_carry_19),
        .Q(Q[19]),
        .lopt(lopt_80),
        .lopt_1(lopt_81),
        .lopt_2(lopt_82),
        .lopt_3(lopt_88));
  system_microblaze_0_0_ALU_Bit_421 \ALL_Bits[13].ALU_Bit_I1 
       (.\Data_Addr[13] (\Data_Addr[0] [16]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_19),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[13] (\EX_Op1_reg[0] [18]),
        .LO(alu_carry_18),
        .Q(Q[18]),
        .lopt(lopt_77),
        .lopt_1(lopt_78),
        .lopt_2(lopt_79),
        .lopt_3(lopt_87));
  system_microblaze_0_0_ALU_Bit_422 \ALL_Bits[14].ALU_Bit_I1 
       (.\Data_Addr[14] (\Data_Addr[0] [15]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_18),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[14] (\EX_Op1_reg[0] [17]),
        .LO(alu_carry_17),
        .Q(Q[17]),
        .lopt(lopt_74),
        .lopt_1(lopt_75),
        .lopt_2(lopt_76),
        .lopt_3(lopt_86));
  system_microblaze_0_0_ALU_Bit_423 \ALL_Bits[15].ALU_Bit_I1 
       (.\Data_Addr[15] (\Data_Addr[0] [14]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_17),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[15] (\EX_Op1_reg[0] [16]),
        .LO(alu_carry_16),
        .Q(Q[16]),
        .lopt(lopt_67),
        .lopt_1(lopt_68),
        .lopt_2(lopt_69),
        .lopt_3(lopt_73));
  system_microblaze_0_0_ALU_Bit_424 \ALL_Bits[16].ALU_Bit_I1 
       (.\Data_Addr[16] (\Data_Addr[0] [13]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_16),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[16] (\EX_Op1_reg[0] [15]),
        .LO(alu_carry_15),
        .Q(Q[15]),
        .lopt(lopt_64),
        .lopt_1(lopt_65),
        .lopt_2(lopt_66),
        .lopt_3(lopt_72));
  system_microblaze_0_0_ALU_Bit_425 \ALL_Bits[17].ALU_Bit_I1 
       (.\Data_Addr[17] (\Data_Addr[0] [12]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_15),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[17] (\EX_Op1_reg[0] [14]),
        .LO(alu_carry_14),
        .Q(Q[14]),
        .lopt(lopt_61),
        .lopt_1(lopt_62),
        .lopt_2(lopt_63),
        .lopt_3(lopt_71));
  system_microblaze_0_0_ALU_Bit_426 \ALL_Bits[18].ALU_Bit_I1 
       (.\Data_Addr[18] (\Data_Addr[0] [11]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_14),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[18] (\EX_Op1_reg[0] [13]),
        .LO(alu_carry_13),
        .Q(Q[13]),
        .lopt(lopt_58),
        .lopt_1(lopt_59),
        .lopt_2(lopt_60),
        .lopt_3(lopt_70));
  system_microblaze_0_0_ALU_Bit_427 \ALL_Bits[19].ALU_Bit_I1 
       (.\Data_Addr[19] (\Data_Addr[0] [10]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_13),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[19] (\EX_Op1_reg[0] [12]),
        .LO(alu_carry_12),
        .Q(Q[12]),
        .lopt(lopt_51),
        .lopt_1(lopt_52),
        .lopt_2(lopt_53),
        .lopt_3(lopt_57));
  system_microblaze_0_0_ALU_Bit_428 \ALL_Bits[1].ALU_Bit_I1 
       (.\Data_Addr[1] (\Data_Addr[0] [28]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_31),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[1] (\EX_Op1_reg[0] [30]),
        .LO(alu_carry_30),
        .Q(Q[30]),
        .lopt(lopt_125),
        .lopt_1(lopt_126),
        .lopt_2(lopt_128));
  system_microblaze_0_0_ALU_Bit_429 \ALL_Bits[20].ALU_Bit_I1 
       (.\Data_Addr[20] (\Data_Addr[0] [9]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_12),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[20] (\EX_Op1_reg[0] [11]),
        .LO(alu_carry_11),
        .Q(Q[11]),
        .lopt(lopt_48),
        .lopt_1(lopt_49),
        .lopt_2(lopt_50),
        .lopt_3(lopt_56));
  system_microblaze_0_0_ALU_Bit_430 \ALL_Bits[21].ALU_Bit_I1 
       (.\Data_Addr[21] (\Data_Addr[0] [8]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_11),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[21] (\EX_Op1_reg[0] [10]),
        .LO(alu_carry_10),
        .Q(Q[10]),
        .lopt(lopt_45),
        .lopt_1(lopt_46),
        .lopt_2(lopt_47),
        .lopt_3(lopt_55));
  system_microblaze_0_0_ALU_Bit_431 \ALL_Bits[22].ALU_Bit_I1 
       (.\Data_Addr[22] (\Data_Addr[0] [7]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_10),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[22] (\EX_Op1_reg[0] [9]),
        .LO(alu_carry_9),
        .Q(Q[9]),
        .lopt(lopt_42),
        .lopt_1(lopt_43),
        .lopt_2(lopt_44),
        .lopt_3(lopt_54));
  system_microblaze_0_0_ALU_Bit_432 \ALL_Bits[23].ALU_Bit_I1 
       (.\Data_Addr[23] (\Data_Addr[0] [6]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_9),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[23] (\EX_Op1_reg[0] [8]),
        .LO(alu_carry_8),
        .Q(Q[8]),
        .lopt(lopt_35),
        .lopt_1(lopt_36),
        .lopt_2(lopt_37),
        .lopt_3(lopt_41));
  system_microblaze_0_0_ALU_Bit_433 \ALL_Bits[24].ALU_Bit_I1 
       (.\Data_Addr[24] (\Data_Addr[0] [5]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_8),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[24] (\EX_Op1_reg[0] [7]),
        .LO(alu_carry_7),
        .Q(Q[7]),
        .lopt(lopt_32),
        .lopt_1(lopt_33),
        .lopt_2(lopt_34),
        .lopt_3(lopt_40));
  system_microblaze_0_0_ALU_Bit_434 \ALL_Bits[25].ALU_Bit_I1 
       (.\Data_Addr[25] (\Data_Addr[0] [4]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_7),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[25] (\EX_Op1_reg[0] [6]),
        .LO(alu_carry_6),
        .Q(Q[6]),
        .lopt(lopt_29),
        .lopt_1(lopt_30),
        .lopt_2(lopt_31),
        .lopt_3(lopt_39));
  system_microblaze_0_0_ALU_Bit_435 \ALL_Bits[26].ALU_Bit_I1 
       (.\Data_Addr[26] (\Data_Addr[0] [3]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_6),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[26] (\EX_Op1_reg[0] [5]),
        .LO(alu_carry_5),
        .Q(Q[5]),
        .lopt(lopt_26),
        .lopt_1(lopt_27),
        .lopt_2(lopt_28),
        .lopt_3(lopt_38));
  system_microblaze_0_0_ALU_Bit_436 \ALL_Bits[27].ALU_Bit_I1 
       (.\Data_Addr[27] (\Data_Addr[0] [2]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_5),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[27] (\EX_Op1_reg[0] [4]),
        .LO(alu_carry_4),
        .Q(Q[4]),
        .lopt(lopt_19),
        .lopt_1(lopt_20),
        .lopt_2(lopt_21),
        .lopt_3(lopt_25));
  system_microblaze_0_0_ALU_Bit_437 \ALL_Bits[28].ALU_Bit_I1 
       (.\Data_Addr[28] (\Data_Addr[0] [1]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_4),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[28] (\EX_Op1_reg[0] [3]),
        .LO(alu_carry_3),
        .Q(Q[3]),
        .lopt(lopt_16),
        .lopt_1(lopt_17),
        .lopt_2(lopt_18),
        .lopt_3(lopt_24));
  system_microblaze_0_0_ALU_Bit_438 \ALL_Bits[29].ALU_Bit_I1 
       (.\Data_Addr[29] (\Data_Addr[0] [0]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_3),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[29] (\EX_Op1_reg[0] [2]),
        .LO(alu_carry_2),
        .Q(Q[2]),
        .lopt(lopt_13),
        .lopt_1(lopt_14),
        .lopt_2(lopt_15),
        .lopt_3(lopt_23));
  system_microblaze_0_0_ALU_Bit_439 \ALL_Bits[2].ALU_Bit_I1 
       (.\Data_Addr[2] (\Data_Addr[0] [27]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_30),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[2] (\EX_Op1_reg[0] [29]),
        .LO(alu_carry_29),
        .Q(Q[29]),
        .lopt(lopt_122),
        .lopt_1(lopt_123),
        .lopt_2(lopt_124),
        .lopt_3(lopt_127));
  system_microblaze_0_0_ALU_Bit_440 \ALL_Bits[30].ALU_Bit_I1 
       (.\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_2),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[30] (\EX_Op1_reg[0] [1]),
        .LO(alu_carry_1),
        .\MEM_DataBus_Addr_reg[30] (\MEM_DataBus_Addr_reg[30] [1]),
        .Q(Q[1]),
        .lopt(lopt_10),
        .lopt_1(lopt_11),
        .lopt_2(lopt_12),
        .lopt_3(lopt_22));
  system_microblaze_0_0_ALU_Bit_441 \ALL_Bits[31].ALU_Bit_I1 
       (.\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryIn(alu_carry_0),
        .EX_CarryOut(alu_carry_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[31] (\EX_Op1_reg[0] [0]),
        .\MEM_DataBus_Addr_reg[31] (\MEM_DataBus_Addr_reg[30] [0]),
        .Q(Q[0]),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9));
  system_microblaze_0_0_ALU_Bit_442 \ALL_Bits[3].ALU_Bit_I1 
       (.\Data_Addr[3] (\Data_Addr[0] [26]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_29),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[3] (\EX_Op1_reg[0] [28]),
        .LO(alu_carry_28),
        .Q(Q[28]),
        .lopt(lopt_115),
        .lopt_1(lopt_116),
        .lopt_2(lopt_117),
        .lopt_3(lopt_121));
  system_microblaze_0_0_ALU_Bit_443 \ALL_Bits[4].ALU_Bit_I1 
       (.\Data_Addr[4] (\Data_Addr[0] [25]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_28),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[4] (\EX_Op1_reg[0] [27]),
        .LO(alu_carry_27),
        .Q(Q[27]),
        .lopt(lopt_112),
        .lopt_1(lopt_113),
        .lopt_2(lopt_114),
        .lopt_3(lopt_120));
  system_microblaze_0_0_ALU_Bit_444 \ALL_Bits[5].ALU_Bit_I1 
       (.\Data_Addr[5] (\Data_Addr[0] [24]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_27),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[5] (\EX_Op1_reg[0] [26]),
        .LO(alu_carry_26),
        .Q(Q[26]),
        .lopt(lopt_109),
        .lopt_1(lopt_110),
        .lopt_2(lopt_111),
        .lopt_3(lopt_119));
  system_microblaze_0_0_ALU_Bit_445 \ALL_Bits[6].ALU_Bit_I1 
       (.\Data_Addr[6] (\Data_Addr[0] [23]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_26),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[6] (\EX_Op1_reg[0] [25]),
        .LO(alu_carry_25),
        .Q(Q[25]),
        .lopt(lopt_106),
        .lopt_1(lopt_107),
        .lopt_2(lopt_108),
        .lopt_3(lopt_118));
  system_microblaze_0_0_ALU_Bit_446 \ALL_Bits[7].ALU_Bit_I1 
       (.\Data_Addr[7] (\Data_Addr[0] [22]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_25),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[7] (\EX_Op1_reg[0] [24]),
        .LO(alu_carry_24),
        .Q(Q[24]),
        .lopt(lopt_99),
        .lopt_1(lopt_100),
        .lopt_2(lopt_101),
        .lopt_3(lopt_105));
  system_microblaze_0_0_ALU_Bit_447 \ALL_Bits[8].ALU_Bit_I1 
       (.\Data_Addr[8] (\Data_Addr[0] [21]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryOut(alu_carry_24),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[8] (\EX_Op1_reg[0] [23]),
        .LO(alu_carry_23),
        .Q(Q[23]),
        .lopt(lopt_96),
        .lopt_1(lopt_97),
        .lopt_2(lopt_98),
        .lopt_3(lopt_104));
  system_microblaze_0_0_ALU_Bit_448 \ALL_Bits[9].ALU_Bit_I1 
       (.\Data_Addr[9] (\Data_Addr[0] [20]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CarryIn(alu_carry_22),
        .EX_CarryOut(alu_carry_23),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[9] (\EX_Op1_reg[0] [22]),
        .Q(Q[22]),
        .lopt(lopt_93),
        .lopt_1(lopt_94),
        .lopt_2(lopt_95),
        .lopt_3(lopt_103));
  system_microblaze_0_0_MB_MUXCY_449 \Use_Carry_Decoding.CarryIn_MUXCY 
       (.DI_0(DI_0),
        .alu_carry_0(alu_carry_0),
        .ex_alu_carryin(ex_alu_carryin),
        .ex_use_carry(ex_use_carry),
        .lopt(lopt_5));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit
   (EX_CarryOut,
    \Data_Addr[10] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[10] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[10] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[10] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[10] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[10] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_509 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[10] (\EX_Op1_reg[10] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_510 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[10] (\Data_Addr[10] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_419
   (EX_CarryOut,
    \Data_Addr[11] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[11] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[11] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[11] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[11] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[11] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_507 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[11] (\EX_Op1_reg[11] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_508 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[11] (\Data_Addr[11] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_420
   (EX_CarryOut,
    \Data_Addr[12] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[12] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[12] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[12] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[12] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[12] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_505 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[12] (\EX_Op1_reg[12] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_506 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[12] (\Data_Addr[12] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_421
   (EX_CarryOut,
    \Data_Addr[13] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[13] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[13] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[13] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[13] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[13] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_503 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[13] (\EX_Op1_reg[13] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_504 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[13] (\Data_Addr[13] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_422
   (EX_CarryOut,
    \Data_Addr[14] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[14] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[14] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[14] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[14] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[14] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_501 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[14] (\EX_Op1_reg[14] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_502 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[14] (\Data_Addr[14] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_423
   (EX_CarryOut,
    \Data_Addr[15] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[15] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[15] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[15] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[15] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[15] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_499 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[15] (\EX_Op1_reg[15] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_500 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[15] (\Data_Addr[15] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_424
   (EX_CarryOut,
    \Data_Addr[16] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[16] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[16] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[16] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[16] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[16] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_497 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[16] (\EX_Op1_reg[16] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_498 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[16] (\Data_Addr[16] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_425
   (EX_CarryOut,
    \Data_Addr[17] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[17] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[17] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[17] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[17] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[17] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_495 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[17] (\EX_Op1_reg[17] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_496 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[17] (\Data_Addr[17] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_426
   (EX_CarryOut,
    \Data_Addr[18] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[18] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[18] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[18] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[18] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[18] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_493 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[18] (\EX_Op1_reg[18] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_494 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[18] (\Data_Addr[18] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_427
   (EX_CarryOut,
    \Data_Addr[19] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[19] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[19] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[19] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[19] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[19] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_491 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[19] (\EX_Op1_reg[19] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_492 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[19] (\Data_Addr[19] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_428
   (EX_CarryOut,
    \Data_Addr[1] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[1] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2);
  output EX_CarryOut;
  output [0:0]\Data_Addr[1] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[1] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  output lopt;
  output lopt_1;
  input lopt_2;

  wire [0:0]\Data_Addr[1] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[1] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire \^lopt ;
  wire op2_is_1;

  assign \^lopt  = lopt_2;
  assign lopt = op2_is_1;
  assign lopt_1 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_489 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[1] (\EX_Op1_reg[1] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_490 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[1] (\Data_Addr[1] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(\^lopt ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_429
   (EX_CarryOut,
    \Data_Addr[20] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[20] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[20] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[20] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[20] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[20] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_487 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[20] (\EX_Op1_reg[20] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_488 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[20] (\Data_Addr[20] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_430
   (EX_CarryOut,
    \Data_Addr[21] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[21] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[21] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[21] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[21] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[21] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_485 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[21] (\EX_Op1_reg[21] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_486 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[21] (\Data_Addr[21] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_431
   (EX_CarryOut,
    \Data_Addr[22] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[22] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[22] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[22] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[22] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[22] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_483 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[22] (\EX_Op1_reg[22] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_484 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[22] (\Data_Addr[22] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_432
   (EX_CarryOut,
    \Data_Addr[23] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[23] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[23] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[23] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[23] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[23] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_481 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[23] (\EX_Op1_reg[23] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_482 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[23] (\Data_Addr[23] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_433
   (EX_CarryOut,
    \Data_Addr[24] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[24] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[24] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[24] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[24] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[24] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_479 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[24] (\EX_Op1_reg[24] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_480 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[24] (\Data_Addr[24] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_434
   (EX_CarryOut,
    \Data_Addr[25] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[25] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[25] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[25] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[25] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[25] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_477 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[25] (\EX_Op1_reg[25] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_478 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[25] (\Data_Addr[25] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_435
   (EX_CarryOut,
    \Data_Addr[26] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[26] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[26] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[26] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[26] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[26] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_475 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[26] (\EX_Op1_reg[26] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_476 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[26] (\Data_Addr[26] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_436
   (EX_CarryOut,
    \Data_Addr[27] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[27] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[27] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[27] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[27] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[27] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_473 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[27] (\EX_Op1_reg[27] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_474 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[27] (\Data_Addr[27] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_437
   (EX_CarryOut,
    \Data_Addr[28] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[28] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[28] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[28] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[28] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[28] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_471 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[28] (\EX_Op1_reg[28] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_472 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[28] (\Data_Addr[28] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_438
   (EX_CarryOut,
    \Data_Addr[29] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[29] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[29] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[29] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[29] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[29] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_469 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[29] (\EX_Op1_reg[29] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_470 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[29] (\Data_Addr[29] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_439
   (EX_CarryOut,
    \Data_Addr[2] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[2] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[2] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[2] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[2] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[2] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_467 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[2] (\EX_Op1_reg[2] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_468 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[2] (\Data_Addr[2] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_440
   (EX_CarryOut,
    \MEM_DataBus_Addr_reg[30] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[30] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\MEM_DataBus_Addr_reg[30] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[30] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[30] ;
  wire LO;
  wire [0:0]\MEM_DataBus_Addr_reg[30] ;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_465 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[30] (\EX_Op1_reg[30] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_466 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .\MEM_DataBus_Addr_reg[30] (\MEM_DataBus_Addr_reg[30] ),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_441
   (EX_CarryOut,
    \MEM_DataBus_Addr_reg[31] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[31] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    EX_CarryIn,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\MEM_DataBus_Addr_reg[31] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[31] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input EX_CarryIn;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[31] ;
  wire [0:0]\MEM_DataBus_Addr_reg[31] ;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_463 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[31] (\EX_Op1_reg[31] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_464 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryIn(EX_CarryIn),
        .EX_CarryOut(EX_CarryOut),
        .\MEM_DataBus_Addr_reg[31] (\MEM_DataBus_Addr_reg[31] ),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_442
   (EX_CarryOut,
    \Data_Addr[3] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[3] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[3] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[3] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[3] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[3] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_461 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[3] (\EX_Op1_reg[3] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_462 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[3] (\Data_Addr[3] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_443
   (EX_CarryOut,
    \Data_Addr[4] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[4] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[4] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[4] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[4] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[4] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_459 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[4] (\EX_Op1_reg[4] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_460 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[4] (\Data_Addr[4] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_444
   (EX_CarryOut,
    \Data_Addr[5] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[5] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[5] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[5] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[5] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[5] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_457 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[5] (\EX_Op1_reg[5] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_458 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[5] (\Data_Addr[5] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_445
   (EX_CarryOut,
    \Data_Addr[6] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[6] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[6] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[6] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[6] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[6] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_455 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[6] (\EX_Op1_reg[6] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_456 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[6] (\Data_Addr[6] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_446
   (EX_CarryOut,
    \Data_Addr[7] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[7] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[7] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[7] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[7] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[7] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_453 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[7] (\EX_Op1_reg[7] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_454 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[7] (\Data_Addr[7] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_447
   (EX_CarryOut,
    \Data_Addr[8] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[8] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[8] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[8] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[8] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[8] ;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2_451 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[8] (\EX_Op1_reg[8] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_452 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[8] (\Data_Addr[8] ),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit_448
   (EX_CarryOut,
    \Data_Addr[9] ,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[9] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    EX_CarryIn,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]\Data_Addr[9] ;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[9] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input EX_CarryIn;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]\Data_Addr[9] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[9] ;
  wire [0:0]Q;
  wire alu_AddSub;
  wire lopt;
  wire \^lopt_1 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  system_microblaze_0_0_MB_LUT6_2 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[9] (\EX_Op1_reg[9] ),
        .Q(Q),
        .S(alu_AddSub));
  system_microblaze_0_0_MB_MUXCY_XORCY_450 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .\Data_Addr[9] (\Data_Addr[9] ),
        .EX_CarryIn(EX_CarryIn),
        .EX_CarryOut(EX_CarryOut),
        .S(alu_AddSub),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module system_microblaze_0_0_ALU_Bit__parameterized31
   (\Using_FPGA.Native ,
    \Data_Addr[0] ,
    EX_CMP_Op_reg,
    ex_unsigned_op,
    LO,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[0] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14,
    lopt_15,
    lopt_16,
    lopt_17,
    lopt_18,
    lopt_19,
    lopt_20,
    lopt_21,
    lopt_22,
    lopt_23,
    lopt_24,
    lopt_25,
    lopt_26,
    lopt_27,
    lopt_28,
    lopt_29,
    lopt_30,
    lopt_31,
    lopt_32,
    lopt_33,
    lopt_34,
    lopt_35,
    lopt_36,
    lopt_37,
    lopt_38,
    lopt_39,
    lopt_40,
    lopt_41,
    lopt_42,
    lopt_43,
    lopt_44,
    lopt_45,
    lopt_46,
    lopt_47,
    lopt_48,
    lopt_49,
    lopt_50,
    lopt_51,
    lopt_52,
    lopt_53,
    lopt_54,
    lopt_55,
    lopt_56,
    lopt_57,
    lopt_58,
    lopt_59,
    lopt_60,
    lopt_61,
    lopt_62,
    lopt_63,
    lopt_64,
    lopt_65,
    lopt_66,
    lopt_67,
    lopt_68,
    lopt_69,
    lopt_70,
    lopt_71,
    lopt_72,
    lopt_73,
    lopt_74,
    lopt_75,
    lopt_76,
    lopt_77,
    lopt_78,
    lopt_79,
    lopt_80,
    lopt_81,
    lopt_82,
    lopt_83,
    lopt_84,
    lopt_85,
    lopt_86,
    lopt_87,
    lopt_88,
    lopt_89,
    lopt_90,
    lopt_91,
    lopt_92,
    lopt_93,
    lopt_94,
    lopt_95,
    lopt_96,
    lopt_97,
    lopt_98,
    lopt_99,
    lopt_100,
    lopt_101,
    lopt_102,
    lopt_103,
    lopt_104,
    lopt_105,
    lopt_106,
    lopt_107,
    lopt_108,
    lopt_109,
    lopt_110,
    lopt_111,
    lopt_112,
    lopt_113,
    lopt_114,
    lopt_115,
    lopt_116,
    lopt_117,
    lopt_118,
    lopt_119,
    lopt_120,
    lopt_121,
    lopt_122,
    lopt_123,
    lopt_124,
    lopt_125,
    lopt_126,
    lopt_127,
    lopt_128,
    lopt_129,
    lopt_130);
  output \Using_FPGA.Native ;
  output [0:0]\Data_Addr[0] ;
  input EX_CMP_Op_reg;
  input ex_unsigned_op;
  input LO;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[0] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input S;
  input lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;
  output lopt_8;
  input lopt_9;
  input lopt_10;
  output lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;
  output lopt_15;
  input lopt_16;
  input lopt_17;
  output lopt_18;
  input lopt_19;
  input lopt_20;
  output lopt_21;
  input lopt_22;
  input lopt_23;
  output lopt_24;
  output lopt_25;
  output lopt_26;
  output lopt_27;
  output lopt_28;
  input lopt_29;
  input lopt_30;
  output lopt_31;
  input lopt_32;
  input lopt_33;
  output lopt_34;
  input lopt_35;
  input lopt_36;
  output lopt_37;
  input lopt_38;
  input lopt_39;
  output lopt_40;
  output lopt_41;
  output lopt_42;
  output lopt_43;
  output lopt_44;
  input lopt_45;
  input lopt_46;
  output lopt_47;
  input lopt_48;
  input lopt_49;
  output lopt_50;
  input lopt_51;
  input lopt_52;
  output lopt_53;
  input lopt_54;
  input lopt_55;
  output lopt_56;
  output lopt_57;
  output lopt_58;
  output lopt_59;
  output lopt_60;
  input lopt_61;
  input lopt_62;
  output lopt_63;
  input lopt_64;
  input lopt_65;
  output lopt_66;
  input lopt_67;
  input lopt_68;
  output lopt_69;
  input lopt_70;
  input lopt_71;
  output lopt_72;
  output lopt_73;
  output lopt_74;
  output lopt_75;
  output lopt_76;
  input lopt_77;
  input lopt_78;
  output lopt_79;
  input lopt_80;
  input lopt_81;
  output lopt_82;
  input lopt_83;
  input lopt_84;
  output lopt_85;
  input lopt_86;
  input lopt_87;
  output lopt_88;
  output lopt_89;
  output lopt_90;
  output lopt_91;
  output lopt_92;
  input lopt_93;
  input lopt_94;
  output lopt_95;
  input lopt_96;
  input lopt_97;
  output lopt_98;
  input lopt_99;
  input lopt_100;
  output lopt_101;
  input lopt_102;
  input lopt_103;
  output lopt_104;
  output lopt_105;
  output lopt_106;
  output lopt_107;
  output lopt_108;
  input lopt_109;
  input lopt_110;
  output lopt_111;
  input lopt_112;
  input lopt_113;
  output lopt_114;
  input lopt_115;
  input lopt_116;
  output lopt_117;
  input lopt_118;
  input lopt_119;
  output lopt_120;
  output lopt_121;
  output lopt_122;
  output lopt_123;
  output lopt_124;
  input lopt_125;
  input lopt_126;
  input lopt_127;
  input lopt_128;
  output lopt_129;
  output lopt_130;

  wire [0:0]\Data_Addr[0] ;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_CMP_Op_reg;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[0] ;
  wire LO;
  wire [0:0]Q;
  wire S;
  wire \Using_FPGA.Native ;
  wire alu_AddSub;
  wire alu_AddSub_1;
  wire ex_unsigned_op;
  wire invert_result;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_102;
  wire lopt_103;
  wire lopt_104;
  wire lopt_105;
  wire lopt_106;
  wire lopt_107;
  wire lopt_108;
  wire lopt_109;
  wire lopt_11;
  wire lopt_110;
  wire lopt_111;
  wire lopt_112;
  wire lopt_113;
  wire lopt_114;
  wire lopt_115;
  wire lopt_116;
  wire lopt_117;
  wire lopt_118;
  wire lopt_119;
  wire lopt_12;
  wire lopt_120;
  wire lopt_121;
  wire lopt_122;
  wire lopt_123;
  wire lopt_124;
  wire lopt_125;
  wire lopt_126;
  wire lopt_127;
  wire lopt_128;
  wire \^lopt_129 ;
  wire lopt_13;
  wire \^lopt_130 ;
  wire lopt_131;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;
  wire op2_is_1;

  assign lopt_129 = \^lopt_130 ;
  assign lopt_130 = lopt_131;
  system_microblaze_0_0_MB_LUT4 \Last_Bit.I_ALU_LUT_2 
       (.\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] [1]),
        .EX_CMP_Op_reg(S),
        .Q(Q),
        .S(alu_AddSub),
        .alu_AddSub_1(alu_AddSub_1));
  system_microblaze_0_0_MB_LUT6__parameterized34 \Last_Bit.I_ALU_LUT_V5 
       (.\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[0] (\EX_Op1_reg[0] ),
        .Q(Q),
        .alu_AddSub_1(alu_AddSub_1));
  system_microblaze_0_0_MB_MULT_AND \Last_Bit.MULT_AND_I 
       (.DI(op2_is_1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] [1]),
        .Q(Q));
  system_microblaze_0_0_MB_MUXCY_XORCY_511 \Last_Bit.MUXCY_XOR_I 
       (.CI(invert_result),
        .DI(op2_is_1),
        .\Data_Addr[0] (\Data_Addr[0] ),
        .S(alu_AddSub),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_100(lopt_100),
        .lopt_101(lopt_101),
        .lopt_102(lopt_102),
        .lopt_103(lopt_103),
        .lopt_104(lopt_104),
        .lopt_105(lopt_105),
        .lopt_106(lopt_106),
        .lopt_107(lopt_107),
        .lopt_108(lopt_108),
        .lopt_109(lopt_109),
        .lopt_11(lopt_11),
        .lopt_110(lopt_110),
        .lopt_111(lopt_111),
        .lopt_112(lopt_112),
        .lopt_113(lopt_113),
        .lopt_114(lopt_114),
        .lopt_115(lopt_115),
        .lopt_116(lopt_116),
        .lopt_117(lopt_117),
        .lopt_118(lopt_118),
        .lopt_119(lopt_119),
        .lopt_12(lopt_12),
        .lopt_120(lopt_120),
        .lopt_121(lopt_121),
        .lopt_122(lopt_122),
        .lopt_123(lopt_123),
        .lopt_124(lopt_124),
        .lopt_125(lopt_125),
        .lopt_126(lopt_126),
        .lopt_127(lopt_127),
        .lopt_128(lopt_128),
        .lopt_129(\^lopt_129 ),
        .lopt_13(lopt_13),
        .lopt_130(ex_unsigned_op),
        .lopt_131(EX_CMP_Op_reg),
        .lopt_132(\^lopt_130 ),
        .lopt_133(lopt_131),
        .lopt_14(lopt_14),
        .lopt_15(lopt_15),
        .lopt_16(lopt_16),
        .lopt_17(lopt_17),
        .lopt_18(lopt_18),
        .lopt_19(lopt_19),
        .lopt_2(lopt_2),
        .lopt_20(lopt_20),
        .lopt_21(lopt_21),
        .lopt_22(lopt_22),
        .lopt_23(lopt_23),
        .lopt_24(lopt_24),
        .lopt_25(lopt_25),
        .lopt_26(lopt_26),
        .lopt_27(lopt_27),
        .lopt_28(lopt_28),
        .lopt_29(lopt_29),
        .lopt_3(lopt_3),
        .lopt_30(lopt_30),
        .lopt_31(lopt_31),
        .lopt_32(lopt_32),
        .lopt_33(lopt_33),
        .lopt_34(lopt_34),
        .lopt_35(lopt_35),
        .lopt_36(lopt_36),
        .lopt_37(lopt_37),
        .lopt_38(lopt_38),
        .lopt_39(lopt_39),
        .lopt_4(lopt_4),
        .lopt_40(lopt_40),
        .lopt_41(lopt_41),
        .lopt_42(lopt_42),
        .lopt_43(lopt_43),
        .lopt_44(lopt_44),
        .lopt_45(lopt_45),
        .lopt_46(lopt_46),
        .lopt_47(lopt_47),
        .lopt_48(lopt_48),
        .lopt_49(lopt_49),
        .lopt_5(lopt_5),
        .lopt_50(lopt_50),
        .lopt_51(lopt_51),
        .lopt_52(lopt_52),
        .lopt_53(lopt_53),
        .lopt_54(lopt_54),
        .lopt_55(lopt_55),
        .lopt_56(lopt_56),
        .lopt_57(lopt_57),
        .lopt_58(lopt_58),
        .lopt_59(lopt_59),
        .lopt_6(lopt_6),
        .lopt_60(lopt_60),
        .lopt_61(lopt_61),
        .lopt_62(lopt_62),
        .lopt_63(lopt_63),
        .lopt_64(lopt_64),
        .lopt_65(lopt_65),
        .lopt_66(lopt_66),
        .lopt_67(lopt_67),
        .lopt_68(lopt_68),
        .lopt_69(lopt_69),
        .lopt_7(lopt_7),
        .lopt_70(lopt_70),
        .lopt_71(lopt_71),
        .lopt_72(lopt_72),
        .lopt_73(lopt_73),
        .lopt_74(lopt_74),
        .lopt_75(lopt_75),
        .lopt_76(lopt_76),
        .lopt_77(lopt_77),
        .lopt_78(lopt_78),
        .lopt_79(lopt_79),
        .lopt_8(lopt_8),
        .lopt_80(lopt_80),
        .lopt_81(lopt_81),
        .lopt_82(lopt_82),
        .lopt_83(lopt_83),
        .lopt_84(lopt_84),
        .lopt_85(lopt_85),
        .lopt_86(lopt_86),
        .lopt_87(lopt_87),
        .lopt_88(lopt_88),
        .lopt_89(lopt_89),
        .lopt_9(lopt_9),
        .lopt_90(lopt_90),
        .lopt_91(lopt_91),
        .lopt_92(lopt_92),
        .lopt_93(lopt_93),
        .lopt_94(lopt_94),
        .lopt_95(lopt_95),
        .lopt_96(lopt_96),
        .lopt_97(lopt_97),
        .lopt_98(lopt_98),
        .lopt_99(lopt_99));
  system_microblaze_0_0_MB_MUXCY_512 \Last_Bit.Pre_MUXCY_I 
       (.EX_CMP_Op_reg(EX_CMP_Op_reg),
        .LO(LO),
        .ex_unsigned_op(ex_unsigned_op),
        .invert_result(invert_result),
        .lopt(\^lopt_129 ));
endmodule

(* ORIG_REF_NAME = "Byte_Doublet_Handle_gti" *) 
module system_microblaze_0_0_Byte_Doublet_Handle_gti
   (wb_read_msb_doublet_sel,
    \M_AXI_DP_WDATA[31] ,
    \LOCKSTEP_Out_reg[3792] ,
    Q,
    out,
    ex_branch_with_delayslot_reg,
    ex_reverse_byteorder,
    Clk,
    ex_doublet_access,
    ex_byte_access,
    mem_valid_reg,
    \EX_Op3_reg[24] ,
    \Using_FPGA.Native ,
    D);
  output wb_read_msb_doublet_sel;
  output [35:0]\M_AXI_DP_WDATA[31] ;
  output [1:0]\LOCKSTEP_Out_reg[3792] ;
  output [1:0]Q;
  input [0:0]out;
  input ex_branch_with_delayslot_reg;
  input ex_reverse_byteorder;
  input Clk;
  input ex_doublet_access;
  input ex_byte_access;
  input mem_valid_reg;
  input [31:0]\EX_Op3_reg[24] ;
  input [3:0]\Using_FPGA.Native ;
  input [1:0]D;

  wire Clk;
  wire [1:0]D;
  wire [31:0]\EX_Op3_reg[24] ;
  wire [1:0]\LOCKSTEP_Out_reg[3792] ;
  wire [35:0]\M_AXI_DP_WDATA[31] ;
  wire [1:0]Q;
  wire [3:0]\Using_FPGA.Native ;
  wire ex_branch_with_delayslot_reg;
  wire ex_byte_access;
  wire ex_doublet_access;
  wire ex_reverse_byteorder;
  wire mem_Byte_Access;
  wire mem_Doublet_Access;
  wire [0:1]mem_byte_selects;
  wire mem_reverse_byteorder;
  wire mem_valid_reg;
  wire [0:0]out;
  wire \wb_read_lsb_1_sel[0]_i_1_n_0 ;
  wire \wb_read_lsb_sel[0]_i_1_n_0 ;
  wire \wb_read_lsb_sel[1]_i_1_n_0 ;
  wire wb_read_msb_doublet_sel;

  FDRE \MEM_DataBus_Byte_Enable_reg[0] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\Using_FPGA.Native [3]),
        .Q(\M_AXI_DP_WDATA[31] [3]),
        .R(out));
  FDRE \MEM_DataBus_Byte_Enable_reg[1] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\Using_FPGA.Native [2]),
        .Q(\M_AXI_DP_WDATA[31] [2]),
        .R(out));
  FDRE \MEM_DataBus_Byte_Enable_reg[2] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\Using_FPGA.Native [1]),
        .Q(\M_AXI_DP_WDATA[31] [1]),
        .R(out));
  FDRE \MEM_DataBus_Byte_Enable_reg[3] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\Using_FPGA.Native [0]),
        .Q(\M_AXI_DP_WDATA[31] [0]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[0] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [31]),
        .Q(\M_AXI_DP_WDATA[31] [35]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[10] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [21]),
        .Q(\M_AXI_DP_WDATA[31] [25]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[11] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [20]),
        .Q(\M_AXI_DP_WDATA[31] [24]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[12] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [19]),
        .Q(\M_AXI_DP_WDATA[31] [23]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[13] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [18]),
        .Q(\M_AXI_DP_WDATA[31] [22]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[14] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [17]),
        .Q(\M_AXI_DP_WDATA[31] [21]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[15] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [16]),
        .Q(\M_AXI_DP_WDATA[31] [20]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[16] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [15]),
        .Q(\M_AXI_DP_WDATA[31] [19]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[17] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [14]),
        .Q(\M_AXI_DP_WDATA[31] [18]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[18] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [13]),
        .Q(\M_AXI_DP_WDATA[31] [17]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[19] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [12]),
        .Q(\M_AXI_DP_WDATA[31] [16]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[1] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [30]),
        .Q(\M_AXI_DP_WDATA[31] [34]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[20] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [11]),
        .Q(\M_AXI_DP_WDATA[31] [15]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[21] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [10]),
        .Q(\M_AXI_DP_WDATA[31] [14]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[22] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [9]),
        .Q(\M_AXI_DP_WDATA[31] [13]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[23] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [8]),
        .Q(\M_AXI_DP_WDATA[31] [12]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[24] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [7]),
        .Q(\M_AXI_DP_WDATA[31] [11]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[25] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [6]),
        .Q(\M_AXI_DP_WDATA[31] [10]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[26] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [5]),
        .Q(\M_AXI_DP_WDATA[31] [9]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[27] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [4]),
        .Q(\M_AXI_DP_WDATA[31] [8]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[28] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [3]),
        .Q(\M_AXI_DP_WDATA[31] [7]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[29] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [2]),
        .Q(\M_AXI_DP_WDATA[31] [6]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[2] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [29]),
        .Q(\M_AXI_DP_WDATA[31] [33]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[30] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [1]),
        .Q(\M_AXI_DP_WDATA[31] [5]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[31] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [0]),
        .Q(\M_AXI_DP_WDATA[31] [4]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[3] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [28]),
        .Q(\M_AXI_DP_WDATA[31] [32]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[4] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [27]),
        .Q(\M_AXI_DP_WDATA[31] [31]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[5] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [26]),
        .Q(\M_AXI_DP_WDATA[31] [30]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[6] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [25]),
        .Q(\M_AXI_DP_WDATA[31] [29]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[7] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [24]),
        .Q(\M_AXI_DP_WDATA[31] [28]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[8] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [23]),
        .Q(\M_AXI_DP_WDATA[31] [27]),
        .R(out));
  FDRE \MEM_DataBus_Write_Data_reg[9] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\EX_Op3_reg[24] [22]),
        .Q(\M_AXI_DP_WDATA[31] [26]),
        .R(out));
  FDRE mem_Byte_Access_reg
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(ex_byte_access),
        .Q(mem_Byte_Access),
        .R(out));
  FDRE mem_Doublet_Access_reg
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(ex_doublet_access),
        .Q(mem_Doublet_Access),
        .R(out));
  FDRE \mem_byte_selects_reg[0] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(D[1]),
        .Q(mem_byte_selects[0]),
        .R(out));
  FDRE \mem_byte_selects_reg[1] 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(D[0]),
        .Q(mem_byte_selects[1]),
        .R(out));
  FDRE mem_reverse_byteorder_reg
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(ex_reverse_byteorder),
        .Q(mem_reverse_byteorder),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT3 #(
    .INIT(8'h8B)) 
    \wb_read_lsb_1_sel[0]_i_1 
       (.I0(mem_byte_selects[0]),
        .I1(mem_Doublet_Access),
        .I2(mem_reverse_byteorder),
        .O(\wb_read_lsb_1_sel[0]_i_1_n_0 ));
  FDRE \wb_read_lsb_1_sel_reg[0] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\wb_read_lsb_1_sel[0]_i_1_n_0 ),
        .Q(\LOCKSTEP_Out_reg[3792] [1]),
        .R(out));
  FDRE \wb_read_lsb_1_sel_reg[1] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(mem_reverse_byteorder),
        .Q(\LOCKSTEP_Out_reg[3792] [0]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'hA8AB)) 
    \wb_read_lsb_sel[0]_i_1 
       (.I0(mem_byte_selects[0]),
        .I1(mem_Byte_Access),
        .I2(mem_Doublet_Access),
        .I3(mem_reverse_byteorder),
        .O(\wb_read_lsb_sel[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h8B)) 
    \wb_read_lsb_sel[1]_i_1 
       (.I0(mem_byte_selects[1]),
        .I1(mem_Byte_Access),
        .I2(mem_reverse_byteorder),
        .O(\wb_read_lsb_sel[1]_i_1_n_0 ));
  FDRE \wb_read_lsb_sel_reg[0] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\wb_read_lsb_sel[0]_i_1_n_0 ),
        .Q(Q[1]),
        .R(out));
  FDRE \wb_read_lsb_sel_reg[1] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\wb_read_lsb_sel[1]_i_1_n_0 ),
        .Q(Q[0]),
        .R(out));
  FDRE wb_read_msb_doublet_sel_reg
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(mem_reverse_byteorder),
        .Q(wb_read_msb_doublet_sel),
        .R(out));
endmodule

(* ORIG_REF_NAME = "DAXI_interface" *) 
module system_microblaze_0_0_DAXI_interface
   (active_access_d1,
    mem_daxi_exclusive_failed,
    \LOCKSTEP_Out_reg[3800] ,
    \LOCKSTEP_Out_reg[3800]_0 ,
    \LOCKSTEP_Out_reg[3799] ,
    \LOCKSTEP_Out_reg[3799]_0 ,
    \LOCKSTEP_Out_reg[3798] ,
    \LOCKSTEP_Out_reg[3798]_0 ,
    \LOCKSTEP_Out_reg[3797] ,
    \LOCKSTEP_Out_reg[3797]_0 ,
    \LOCKSTEP_Out_reg[3796] ,
    \LOCKSTEP_Out_reg[3796]_0 ,
    \LOCKSTEP_Out_reg[3795] ,
    \LOCKSTEP_Out_reg[3795]_0 ,
    \LOCKSTEP_Out_reg[3794] ,
    \LOCKSTEP_Out_reg[3794]_0 ,
    \LOCKSTEP_Out_reg[3793] ,
    \LOCKSTEP_Out_reg[3793]_0 ,
    \LOCKSTEP_Out_reg[3792] ,
    \LOCKSTEP_Out_reg[3791] ,
    \LOCKSTEP_Out_reg[3790] ,
    \LOCKSTEP_Out_reg[3789] ,
    \LOCKSTEP_Out_reg[3788] ,
    \LOCKSTEP_Out_reg[3787] ,
    \LOCKSTEP_Out_reg[3786] ,
    \LOCKSTEP_Out_reg[3785] ,
    \LOCKSTEP_Out_reg[3784] ,
    \LOCKSTEP_Out_reg[3783] ,
    \LOCKSTEP_Out_reg[3782] ,
    \LOCKSTEP_Out_reg[3781] ,
    \LOCKSTEP_Out_reg[3780] ,
    \LOCKSTEP_Out_reg[3779] ,
    \LOCKSTEP_Out_reg[3778] ,
    \LOCKSTEP_Out_reg[3777] ,
    \LOCKSTEP_Out_reg[3776] ,
    \LOCKSTEP_Out_reg[3775] ,
    \LOCKSTEP_Out_reg[3774] ,
    \LOCKSTEP_Out_reg[3773] ,
    \LOCKSTEP_Out_reg[3772] ,
    \LOCKSTEP_Out_reg[3771] ,
    \LOCKSTEP_Out_reg[3770] ,
    \LOCKSTEP_Out_reg[3769] ,
    Trace_WB_Jump_Hit_reg,
    D,
    out,
    Clk,
    M_AXI_DP_BVALID,
    M_AXI_DP_RVALID,
    Q,
    \wb_read_lsb_sel_reg[0] ,
    \wb_read_lsb_1_sel_reg[0] ,
    wb_read_msb_doublet_sel,
    DReady,
    M_AXI_DP_AWVALID_i1,
    LOCKSTEP_Master_Out,
    M_AXI_DP_AWVALID_i,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WREADY,
    mem_databus_write,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RDATA);
  output active_access_d1;
  output mem_daxi_exclusive_failed;
  output \LOCKSTEP_Out_reg[3800] ;
  output \LOCKSTEP_Out_reg[3800]_0 ;
  output \LOCKSTEP_Out_reg[3799] ;
  output \LOCKSTEP_Out_reg[3799]_0 ;
  output \LOCKSTEP_Out_reg[3798] ;
  output \LOCKSTEP_Out_reg[3798]_0 ;
  output \LOCKSTEP_Out_reg[3797] ;
  output \LOCKSTEP_Out_reg[3797]_0 ;
  output \LOCKSTEP_Out_reg[3796] ;
  output \LOCKSTEP_Out_reg[3796]_0 ;
  output \LOCKSTEP_Out_reg[3795] ;
  output \LOCKSTEP_Out_reg[3795]_0 ;
  output \LOCKSTEP_Out_reg[3794] ;
  output \LOCKSTEP_Out_reg[3794]_0 ;
  output \LOCKSTEP_Out_reg[3793] ;
  output \LOCKSTEP_Out_reg[3793]_0 ;
  output \LOCKSTEP_Out_reg[3792] ;
  output \LOCKSTEP_Out_reg[3791] ;
  output \LOCKSTEP_Out_reg[3790] ;
  output \LOCKSTEP_Out_reg[3789] ;
  output \LOCKSTEP_Out_reg[3788] ;
  output \LOCKSTEP_Out_reg[3787] ;
  output \LOCKSTEP_Out_reg[3786] ;
  output \LOCKSTEP_Out_reg[3785] ;
  output \LOCKSTEP_Out_reg[3784] ;
  output \LOCKSTEP_Out_reg[3783] ;
  output \LOCKSTEP_Out_reg[3782] ;
  output \LOCKSTEP_Out_reg[3781] ;
  output \LOCKSTEP_Out_reg[3780] ;
  output \LOCKSTEP_Out_reg[3779] ;
  output \LOCKSTEP_Out_reg[3778] ;
  output \LOCKSTEP_Out_reg[3777] ;
  output \LOCKSTEP_Out_reg[3776] ;
  output \LOCKSTEP_Out_reg[3775] ;
  output \LOCKSTEP_Out_reg[3774] ;
  output \LOCKSTEP_Out_reg[3773] ;
  output \LOCKSTEP_Out_reg[3772] ;
  output \LOCKSTEP_Out_reg[3771] ;
  output \LOCKSTEP_Out_reg[3770] ;
  output \LOCKSTEP_Out_reg[3769] ;
  output Trace_WB_Jump_Hit_reg;
  output [2:0]D;
  input [0:0]out;
  input Clk;
  input M_AXI_DP_BVALID;
  input M_AXI_DP_RVALID;
  input [31:0]Q;
  input [0:0]\wb_read_lsb_sel_reg[0] ;
  input [1:0]\wb_read_lsb_1_sel_reg[0] ;
  input wb_read_msb_doublet_sel;
  input DReady;
  input M_AXI_DP_AWVALID_i1;
  input [0:0]LOCKSTEP_Master_Out;
  input M_AXI_DP_AWVALID_i;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_WREADY;
  input mem_databus_write;
  input M_AXI_DP_ARREADY;
  input [31:0]M_AXI_DP_RDATA;

  wire Clk;
  wire [2:0]D;
  wire DReady;
  wire [0:0]LOCKSTEP_Master_Out;
  wire \LOCKSTEP_Out_reg[3769] ;
  wire \LOCKSTEP_Out_reg[3770] ;
  wire \LOCKSTEP_Out_reg[3771] ;
  wire \LOCKSTEP_Out_reg[3772] ;
  wire \LOCKSTEP_Out_reg[3773] ;
  wire \LOCKSTEP_Out_reg[3774] ;
  wire \LOCKSTEP_Out_reg[3775] ;
  wire \LOCKSTEP_Out_reg[3776] ;
  wire \LOCKSTEP_Out_reg[3777] ;
  wire \LOCKSTEP_Out_reg[3778] ;
  wire \LOCKSTEP_Out_reg[3779] ;
  wire \LOCKSTEP_Out_reg[3780] ;
  wire \LOCKSTEP_Out_reg[3781] ;
  wire \LOCKSTEP_Out_reg[3782] ;
  wire \LOCKSTEP_Out_reg[3783] ;
  wire \LOCKSTEP_Out_reg[3784] ;
  wire \LOCKSTEP_Out_reg[3785] ;
  wire \LOCKSTEP_Out_reg[3786] ;
  wire \LOCKSTEP_Out_reg[3787] ;
  wire \LOCKSTEP_Out_reg[3788] ;
  wire \LOCKSTEP_Out_reg[3789] ;
  wire \LOCKSTEP_Out_reg[3790] ;
  wire \LOCKSTEP_Out_reg[3791] ;
  wire \LOCKSTEP_Out_reg[3792] ;
  wire \LOCKSTEP_Out_reg[3793] ;
  wire \LOCKSTEP_Out_reg[3793]_0 ;
  wire \LOCKSTEP_Out_reg[3794] ;
  wire \LOCKSTEP_Out_reg[3794]_0 ;
  wire \LOCKSTEP_Out_reg[3795] ;
  wire \LOCKSTEP_Out_reg[3795]_0 ;
  wire \LOCKSTEP_Out_reg[3796] ;
  wire \LOCKSTEP_Out_reg[3796]_0 ;
  wire \LOCKSTEP_Out_reg[3797] ;
  wire \LOCKSTEP_Out_reg[3797]_0 ;
  wire \LOCKSTEP_Out_reg[3798] ;
  wire \LOCKSTEP_Out_reg[3798]_0 ;
  wire \LOCKSTEP_Out_reg[3799] ;
  wire \LOCKSTEP_Out_reg[3799]_0 ;
  wire \LOCKSTEP_Out_reg[3800] ;
  wire \LOCKSTEP_Out_reg[3800]_0 ;
  wire MEM_DAXI_Data_Strobe;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID_i_i_1_n_0;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID_i;
  wire M_AXI_DP_AWVALID_i1;
  wire M_AXI_DP_AWVALID_i_i_1_n_0;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire M_AXI_DP_WVALID_i_i_1_n_0;
  wire [31:0]Q;
  wire Trace_WB_Jump_Hit_reg;
  wire active_access;
  wire active_access_d1;
  wire active_access_i_1_n_0;
  wire mem_access_completed0;
  wire mem_databus_write;
  wire mem_daxi_exclusive_failed;
  wire [0:0]out;
  wire [0:31]wb_databus_read_data;
  wire wb_dext_Data_Strobe;
  wire [0:31]wb_dext_read_data;
  wire [1:0]\wb_read_lsb_1_sel_reg[0] ;
  wire [0:0]\wb_read_lsb_sel_reg[0] ;
  wire wb_read_msb_doublet_sel;

  LUT5 #(
    .INIT(32'h00000F44)) 
    M_AXI_DP_ARVALID_i_i_1
       (.I0(mem_databus_write),
        .I1(M_AXI_DP_AWVALID_i1),
        .I2(M_AXI_DP_ARREADY),
        .I3(D[0]),
        .I4(out),
        .O(M_AXI_DP_ARVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_ARVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARVALID_i_i_1_n_0),
        .Q(D[0]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h003A)) 
    M_AXI_DP_AWVALID_i_i_1
       (.I0(M_AXI_DP_AWVALID_i),
        .I1(M_AXI_DP_AWREADY),
        .I2(D[2]),
        .I3(out),
        .O(M_AXI_DP_AWVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_AWVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWVALID_i_i_1_n_0),
        .Q(D[2]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h003A)) 
    M_AXI_DP_WVALID_i_i_1
       (.I0(M_AXI_DP_AWVALID_i),
        .I1(M_AXI_DP_WREADY),
        .I2(D[1]),
        .I3(out),
        .O(M_AXI_DP_WVALID_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    M_AXI_DP_WVALID_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WVALID_i_i_1_n_0),
        .Q(D[1]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[0]_INST_0_i_1 
       (.I0(Q[7]),
        .I1(wb_dext_read_data[24]),
        .I2(Q[31]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[0]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3769] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[10]_INST_0_i_1 
       (.I0(Q[13]),
        .I1(wb_dext_read_data[18]),
        .I2(Q[21]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[10]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3779] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[11]_INST_0_i_1 
       (.I0(Q[12]),
        .I1(wb_dext_read_data[19]),
        .I2(Q[20]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[11]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3780] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[12]_INST_0_i_1 
       (.I0(Q[11]),
        .I1(wb_dext_read_data[20]),
        .I2(Q[19]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[12]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3781] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[13]_INST_0_i_1 
       (.I0(Q[10]),
        .I1(wb_dext_read_data[21]),
        .I2(Q[18]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[13]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3782] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[14]_INST_0_i_1 
       (.I0(Q[9]),
        .I1(wb_dext_read_data[22]),
        .I2(Q[17]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[14]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3783] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[15]_INST_0_i_1 
       (.I0(Q[8]),
        .I1(wb_dext_read_data[23]),
        .I2(Q[16]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[15]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3784] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Trace_New_Reg_Value[16]_INST_0_i_1 
       (.I0(wb_databus_read_data[24]),
        .I1(wb_databus_read_data[8]),
        .I2(wb_databus_read_data[16]),
        .I3(\wb_read_lsb_1_sel_reg[0] [1]),
        .I4(wb_databus_read_data[0]),
        .I5(\wb_read_lsb_1_sel_reg[0] [0]),
        .O(\LOCKSTEP_Out_reg[3785] ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[16]_INST_0_i_2 
       (.I0(Q[7]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[24]),
        .O(wb_databus_read_data[24]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[16]_INST_0_i_3 
       (.I0(Q[23]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[8]),
        .O(wb_databus_read_data[8]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[16]_INST_0_i_4 
       (.I0(Q[15]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[16]),
        .O(wb_databus_read_data[16]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[16]_INST_0_i_5 
       (.I0(Q[31]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[0]),
        .O(wb_databus_read_data[0]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Trace_New_Reg_Value[17]_INST_0_i_1 
       (.I0(wb_databus_read_data[25]),
        .I1(wb_databus_read_data[9]),
        .I2(wb_databus_read_data[17]),
        .I3(\wb_read_lsb_1_sel_reg[0] [1]),
        .I4(wb_databus_read_data[1]),
        .I5(\wb_read_lsb_1_sel_reg[0] [0]),
        .O(\LOCKSTEP_Out_reg[3786] ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[17]_INST_0_i_2 
       (.I0(Q[6]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[25]),
        .O(wb_databus_read_data[25]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[17]_INST_0_i_3 
       (.I0(Q[22]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[9]),
        .O(wb_databus_read_data[9]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[17]_INST_0_i_4 
       (.I0(Q[14]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[17]),
        .O(wb_databus_read_data[17]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[17]_INST_0_i_5 
       (.I0(Q[30]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[1]),
        .O(wb_databus_read_data[1]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Trace_New_Reg_Value[18]_INST_0_i_1 
       (.I0(wb_databus_read_data[26]),
        .I1(wb_databus_read_data[10]),
        .I2(wb_databus_read_data[18]),
        .I3(\wb_read_lsb_1_sel_reg[0] [1]),
        .I4(wb_databus_read_data[2]),
        .I5(\wb_read_lsb_1_sel_reg[0] [0]),
        .O(\LOCKSTEP_Out_reg[3787] ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[18]_INST_0_i_2 
       (.I0(Q[5]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[26]),
        .O(wb_databus_read_data[26]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[18]_INST_0_i_3 
       (.I0(Q[21]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[10]),
        .O(wb_databus_read_data[10]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[18]_INST_0_i_4 
       (.I0(Q[13]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[18]),
        .O(wb_databus_read_data[18]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[18]_INST_0_i_5 
       (.I0(Q[29]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[2]),
        .O(wb_databus_read_data[2]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Trace_New_Reg_Value[19]_INST_0_i_1 
       (.I0(wb_databus_read_data[27]),
        .I1(wb_databus_read_data[11]),
        .I2(wb_databus_read_data[19]),
        .I3(\wb_read_lsb_1_sel_reg[0] [1]),
        .I4(wb_databus_read_data[3]),
        .I5(\wb_read_lsb_1_sel_reg[0] [0]),
        .O(\LOCKSTEP_Out_reg[3788] ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[19]_INST_0_i_2 
       (.I0(Q[4]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[27]),
        .O(wb_databus_read_data[27]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[19]_INST_0_i_3 
       (.I0(Q[20]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[11]),
        .O(wb_databus_read_data[11]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[19]_INST_0_i_4 
       (.I0(Q[12]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[19]),
        .O(wb_databus_read_data[19]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[19]_INST_0_i_5 
       (.I0(Q[28]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[3]),
        .O(wb_databus_read_data[3]));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[1]_INST_0_i_1 
       (.I0(Q[6]),
        .I1(wb_dext_read_data[25]),
        .I2(Q[30]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[1]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3770] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Trace_New_Reg_Value[20]_INST_0_i_1 
       (.I0(wb_databus_read_data[28]),
        .I1(wb_databus_read_data[12]),
        .I2(wb_databus_read_data[20]),
        .I3(\wb_read_lsb_1_sel_reg[0] [1]),
        .I4(wb_databus_read_data[4]),
        .I5(\wb_read_lsb_1_sel_reg[0] [0]),
        .O(\LOCKSTEP_Out_reg[3789] ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[20]_INST_0_i_2 
       (.I0(Q[3]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[28]),
        .O(wb_databus_read_data[28]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[20]_INST_0_i_3 
       (.I0(Q[19]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[12]),
        .O(wb_databus_read_data[12]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[20]_INST_0_i_4 
       (.I0(Q[11]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[20]),
        .O(wb_databus_read_data[20]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[20]_INST_0_i_5 
       (.I0(Q[27]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[4]),
        .O(wb_databus_read_data[4]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Trace_New_Reg_Value[21]_INST_0_i_1 
       (.I0(wb_databus_read_data[29]),
        .I1(wb_databus_read_data[13]),
        .I2(wb_databus_read_data[21]),
        .I3(\wb_read_lsb_1_sel_reg[0] [1]),
        .I4(wb_databus_read_data[5]),
        .I5(\wb_read_lsb_1_sel_reg[0] [0]),
        .O(\LOCKSTEP_Out_reg[3790] ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[21]_INST_0_i_2 
       (.I0(Q[2]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[29]),
        .O(wb_databus_read_data[29]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[21]_INST_0_i_3 
       (.I0(Q[18]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[13]),
        .O(wb_databus_read_data[13]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[21]_INST_0_i_4 
       (.I0(Q[10]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[21]),
        .O(wb_databus_read_data[21]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[21]_INST_0_i_5 
       (.I0(Q[26]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[5]),
        .O(wb_databus_read_data[5]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Trace_New_Reg_Value[22]_INST_0_i_1 
       (.I0(wb_databus_read_data[30]),
        .I1(wb_databus_read_data[14]),
        .I2(wb_databus_read_data[22]),
        .I3(\wb_read_lsb_1_sel_reg[0] [1]),
        .I4(wb_databus_read_data[6]),
        .I5(\wb_read_lsb_1_sel_reg[0] [0]),
        .O(\LOCKSTEP_Out_reg[3791] ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[22]_INST_0_i_2 
       (.I0(Q[1]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[30]),
        .O(wb_databus_read_data[30]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[22]_INST_0_i_3 
       (.I0(Q[17]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[14]),
        .O(wb_databus_read_data[14]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[22]_INST_0_i_4 
       (.I0(Q[9]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[22]),
        .O(wb_databus_read_data[22]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[22]_INST_0_i_5 
       (.I0(Q[25]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[6]),
        .O(wb_databus_read_data[6]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Trace_New_Reg_Value[23]_INST_0_i_1 
       (.I0(wb_databus_read_data[31]),
        .I1(wb_databus_read_data[15]),
        .I2(wb_databus_read_data[23]),
        .I3(\wb_read_lsb_1_sel_reg[0] [1]),
        .I4(wb_databus_read_data[7]),
        .I5(\wb_read_lsb_1_sel_reg[0] [0]),
        .O(\LOCKSTEP_Out_reg[3792] ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[23]_INST_0_i_2 
       (.I0(Q[0]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[31]),
        .O(wb_databus_read_data[31]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[23]_INST_0_i_3 
       (.I0(Q[16]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[15]),
        .O(wb_databus_read_data[15]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[23]_INST_0_i_4 
       (.I0(Q[8]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[23]),
        .O(wb_databus_read_data[23]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Trace_New_Reg_Value[23]_INST_0_i_5 
       (.I0(Q[24]),
        .I1(wb_dext_Data_Strobe),
        .I2(wb_dext_read_data[7]),
        .O(wb_databus_read_data[7]));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[24]_INST_0_i_1 
       (.I0(Q[15]),
        .I1(wb_dext_read_data[16]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[31]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[0]),
        .O(\LOCKSTEP_Out_reg[3793] ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[24]_INST_0_i_2 
       (.I0(Q[7]),
        .I1(wb_dext_read_data[24]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[23]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[8]),
        .O(\LOCKSTEP_Out_reg[3793]_0 ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[25]_INST_0_i_1 
       (.I0(Q[14]),
        .I1(wb_dext_read_data[17]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[30]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[1]),
        .O(\LOCKSTEP_Out_reg[3794] ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[25]_INST_0_i_2 
       (.I0(Q[6]),
        .I1(wb_dext_read_data[25]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[22]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[9]),
        .O(\LOCKSTEP_Out_reg[3794]_0 ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[26]_INST_0_i_1 
       (.I0(Q[13]),
        .I1(wb_dext_read_data[18]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[29]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[2]),
        .O(\LOCKSTEP_Out_reg[3795] ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[26]_INST_0_i_2 
       (.I0(Q[5]),
        .I1(wb_dext_read_data[26]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[21]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[10]),
        .O(\LOCKSTEP_Out_reg[3795]_0 ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[27]_INST_0_i_1 
       (.I0(Q[12]),
        .I1(wb_dext_read_data[19]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[28]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[3]),
        .O(\LOCKSTEP_Out_reg[3796] ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[27]_INST_0_i_2 
       (.I0(Q[4]),
        .I1(wb_dext_read_data[27]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[20]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[11]),
        .O(\LOCKSTEP_Out_reg[3796]_0 ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[28]_INST_0_i_1 
       (.I0(Q[11]),
        .I1(wb_dext_read_data[20]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[27]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[4]),
        .O(\LOCKSTEP_Out_reg[3797] ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[28]_INST_0_i_2 
       (.I0(Q[3]),
        .I1(wb_dext_read_data[28]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[19]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[12]),
        .O(\LOCKSTEP_Out_reg[3797]_0 ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[29]_INST_0_i_1 
       (.I0(Q[10]),
        .I1(wb_dext_read_data[21]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[26]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[5]),
        .O(\LOCKSTEP_Out_reg[3798] ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[29]_INST_0_i_2 
       (.I0(Q[2]),
        .I1(wb_dext_read_data[29]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[18]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[13]),
        .O(\LOCKSTEP_Out_reg[3798]_0 ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[2]_INST_0_i_1 
       (.I0(Q[5]),
        .I1(wb_dext_read_data[26]),
        .I2(Q[29]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[2]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3771] ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[30]_INST_0_i_1 
       (.I0(Q[9]),
        .I1(wb_dext_read_data[22]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[25]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[6]),
        .O(\LOCKSTEP_Out_reg[3799] ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[30]_INST_0_i_2 
       (.I0(Q[1]),
        .I1(wb_dext_read_data[30]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[17]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[14]),
        .O(\LOCKSTEP_Out_reg[3799]_0 ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[31]_INST_0_i_1 
       (.I0(Q[8]),
        .I1(wb_dext_read_data[23]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[24]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[7]),
        .O(\LOCKSTEP_Out_reg[3800] ));
  LUT6 #(
    .INIT(64'hEFEFAFA0EFE0AFA0)) 
    \Trace_New_Reg_Value[31]_INST_0_i_2 
       (.I0(Q[0]),
        .I1(wb_dext_read_data[31]),
        .I2(\wb_read_lsb_sel_reg[0] ),
        .I3(Q[16]),
        .I4(wb_dext_Data_Strobe),
        .I5(wb_dext_read_data[15]),
        .O(\LOCKSTEP_Out_reg[3800]_0 ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[3]_INST_0_i_1 
       (.I0(Q[4]),
        .I1(wb_dext_read_data[27]),
        .I2(Q[28]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[3]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3772] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[4]_INST_0_i_1 
       (.I0(Q[3]),
        .I1(wb_dext_read_data[28]),
        .I2(Q[27]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[4]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3773] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[5]_INST_0_i_1 
       (.I0(Q[2]),
        .I1(wb_dext_read_data[29]),
        .I2(Q[26]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[5]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3774] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[6]_INST_0_i_1 
       (.I0(Q[1]),
        .I1(wb_dext_read_data[30]),
        .I2(Q[25]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[6]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3775] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[7]_INST_0_i_1 
       (.I0(Q[0]),
        .I1(wb_dext_read_data[31]),
        .I2(Q[24]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[7]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3776] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[8]_INST_0_i_1 
       (.I0(Q[15]),
        .I1(wb_dext_read_data[16]),
        .I2(Q[23]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[8]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3777] ));
  LUT6 #(
    .INIT(64'hEEAAEEAAFFF0F0F0)) 
    \Trace_New_Reg_Value[9]_INST_0_i_1 
       (.I0(Q[14]),
        .I1(wb_dext_read_data[17]),
        .I2(Q[22]),
        .I3(wb_dext_Data_Strobe),
        .I4(wb_dext_read_data[9]),
        .I5(wb_read_msb_doublet_sel),
        .O(\LOCKSTEP_Out_reg[3778] ));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1__183 
       (.I0(DReady),
        .I1(MEM_DAXI_Data_Strobe),
        .O(Trace_WB_Jump_Hit_reg));
  FDRE WB_DAXI_Data_Strobe_reg
       (.C(Clk),
        .CE(1'b1),
        .D(MEM_DAXI_Data_Strobe),
        .Q(wb_dext_Data_Strobe),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[0] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[31]),
        .Q(wb_dext_read_data[0]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[10] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[21]),
        .Q(wb_dext_read_data[10]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[11] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[20]),
        .Q(wb_dext_read_data[11]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[12] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[19]),
        .Q(wb_dext_read_data[12]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[13] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[18]),
        .Q(wb_dext_read_data[13]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[14] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[17]),
        .Q(wb_dext_read_data[14]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[15] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[16]),
        .Q(wb_dext_read_data[15]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[16] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[15]),
        .Q(wb_dext_read_data[16]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[17] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[14]),
        .Q(wb_dext_read_data[17]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[18] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[13]),
        .Q(wb_dext_read_data[18]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[19] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[12]),
        .Q(wb_dext_read_data[19]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[1] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[30]),
        .Q(wb_dext_read_data[1]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[20] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[11]),
        .Q(wb_dext_read_data[20]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[21] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[10]),
        .Q(wb_dext_read_data[21]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[22] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[9]),
        .Q(wb_dext_read_data[22]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[23] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[8]),
        .Q(wb_dext_read_data[23]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[24] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[7]),
        .Q(wb_dext_read_data[24]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[25] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[6]),
        .Q(wb_dext_read_data[25]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[26] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[5]),
        .Q(wb_dext_read_data[26]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[27] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[4]),
        .Q(wb_dext_read_data[27]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[28] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[3]),
        .Q(wb_dext_read_data[28]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[29] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[2]),
        .Q(wb_dext_read_data[29]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[2] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[29]),
        .Q(wb_dext_read_data[2]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[30] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[1]),
        .Q(wb_dext_read_data[30]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[31] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[0]),
        .Q(wb_dext_read_data[31]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[3] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[28]),
        .Q(wb_dext_read_data[3]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[4] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[27]),
        .Q(wb_dext_read_data[4]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[5] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[26]),
        .Q(wb_dext_read_data[5]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[6] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[25]),
        .Q(wb_dext_read_data[6]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[7] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[24]),
        .Q(wb_dext_read_data[7]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[8] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[23]),
        .Q(wb_dext_read_data[8]),
        .R(out));
  FDRE \WB_DAXI_Read_Data_reg[9] 
       (.C(Clk),
        .CE(M_AXI_DP_RVALID),
        .D(M_AXI_DP_RDATA[22]),
        .Q(wb_dext_read_data[9]),
        .R(out));
  FDRE active_access_d1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_access),
        .Q(active_access_d1),
        .R(out));
  LUT6 #(
    .INIT(64'h000000000000000E)) 
    active_access_i_1
       (.I0(active_access),
        .I1(M_AXI_DP_AWVALID_i1),
        .I2(LOCKSTEP_Master_Out),
        .I3(out),
        .I4(M_AXI_DP_RVALID),
        .I5(M_AXI_DP_BVALID),
        .O(active_access_i_1_n_0));
  FDRE active_access_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_access_i_1_n_0),
        .Q(active_access),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    mem_access_completed_i_1
       (.I0(M_AXI_DP_BVALID),
        .I1(M_AXI_DP_RVALID),
        .O(mem_access_completed0));
  FDRE mem_access_completed_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mem_access_completed0),
        .Q(MEM_DAXI_Data_Strobe),
        .R(out));
  FDRE mem_access_failed_reg
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(mem_daxi_exclusive_failed),
        .R(out));
endmodule

(* ORIG_REF_NAME = "Data_Flow_Logic" *) 
module system_microblaze_0_0_Data_Flow_Logic
   (\WB_MEM_Result_reg[0]_0 ,
    mem_ex_result,
    Q,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk,
    SR,
    mem_valid_reg,
    D);
  output [29:0]\WB_MEM_Result_reg[0]_0 ;
  output [1:0]mem_ex_result;
  output [31:0]Q;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:31]EX_Fwd;
  input Clk;
  input [0:0]SR;
  input mem_valid_reg;
  input [3:0]D;

  wire Clk;
  wire [3:0]D;
  wire [0:31]EX_Fwd;
  wire [31:0]Q;
  wire R;
  wire [0:0]SR;
  wire [29:0]\WB_MEM_Result_reg[0]_0 ;
  wire ex_branch_with_delayslot_reg;
  wire [1:0]mem_ex_result;
  wire mem_valid_reg;

  system_microblaze_0_0_MB_FDRE_387 \Gen_Bits[0].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[0]),
        .R(R),
        .\WB_MEM_Result_reg[0] (\WB_MEM_Result_reg[0]_0 [29]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_388 \Gen_Bits[10].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[10]),
        .R(R),
        .\WB_MEM_Result_reg[10] (\WB_MEM_Result_reg[0]_0 [19]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_389 \Gen_Bits[11].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[11]),
        .R(R),
        .\WB_MEM_Result_reg[11] (\WB_MEM_Result_reg[0]_0 [18]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_390 \Gen_Bits[12].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[12]),
        .R(R),
        .\WB_MEM_Result_reg[12] (\WB_MEM_Result_reg[0]_0 [17]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_391 \Gen_Bits[13].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[13]),
        .R(R),
        .\WB_MEM_Result_reg[13] (\WB_MEM_Result_reg[0]_0 [16]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_392 \Gen_Bits[14].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[14]),
        .R(R),
        .\WB_MEM_Result_reg[14] (\WB_MEM_Result_reg[0]_0 [15]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_393 \Gen_Bits[15].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[15]),
        .R(R),
        .\WB_MEM_Result_reg[15] (\WB_MEM_Result_reg[0]_0 [14]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_394 \Gen_Bits[16].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[16]),
        .R(R),
        .\WB_MEM_Result_reg[16] (\WB_MEM_Result_reg[0]_0 [13]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_395 \Gen_Bits[17].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[17]),
        .R(R),
        .\WB_MEM_Result_reg[17] (\WB_MEM_Result_reg[0]_0 [12]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_396 \Gen_Bits[18].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[18]),
        .R(R),
        .\WB_MEM_Result_reg[18] (\WB_MEM_Result_reg[0]_0 [11]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_397 \Gen_Bits[19].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[19]),
        .R(R),
        .\WB_MEM_Result_reg[19] (\WB_MEM_Result_reg[0]_0 [10]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_398 \Gen_Bits[1].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[1]),
        .R(R),
        .\WB_MEM_Result_reg[1] (\WB_MEM_Result_reg[0]_0 [28]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_399 \Gen_Bits[20].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[20]),
        .R(R),
        .\WB_MEM_Result_reg[20] (\WB_MEM_Result_reg[0]_0 [9]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_400 \Gen_Bits[21].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[21]),
        .R(R),
        .\WB_MEM_Result_reg[21] (\WB_MEM_Result_reg[0]_0 [8]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_401 \Gen_Bits[22].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[22]),
        .R(R),
        .\WB_MEM_Result_reg[22] (\WB_MEM_Result_reg[0]_0 [7]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_402 \Gen_Bits[23].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[23]),
        .R(R),
        .\WB_MEM_Result_reg[23] (\WB_MEM_Result_reg[0]_0 [6]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_403 \Gen_Bits[24].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[24]),
        .R(R),
        .\WB_MEM_Result_reg[24] (\WB_MEM_Result_reg[0]_0 [5]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_404 \Gen_Bits[25].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[25]),
        .R(R),
        .\WB_MEM_Result_reg[25] (\WB_MEM_Result_reg[0]_0 [4]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_405 \Gen_Bits[26].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[26]),
        .R(R),
        .\WB_MEM_Result_reg[26] (\WB_MEM_Result_reg[0]_0 [3]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_406 \Gen_Bits[27].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[27]),
        .R(R),
        .\WB_MEM_Result_reg[27] (\WB_MEM_Result_reg[0]_0 [2]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_407 \Gen_Bits[28].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[28]),
        .R(R),
        .\WB_MEM_Result_reg[28] (\WB_MEM_Result_reg[0]_0 [1]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_408 \Gen_Bits[29].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[29]),
        .R(R),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .mem_ex_result(mem_ex_result[1]));
  system_microblaze_0_0_MB_FDRE_409 \Gen_Bits[2].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[2]),
        .R(R),
        .\WB_MEM_Result_reg[2] (\WB_MEM_Result_reg[0]_0 [27]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_410 \Gen_Bits[30].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[30]),
        .R(R),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .mem_ex_result(mem_ex_result[0]));
  system_microblaze_0_0_MB_FDRE_411 \Gen_Bits[31].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[31]),
        .R(R),
        .\WB_MEM_Result_reg[31] (\WB_MEM_Result_reg[0]_0 [0]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_412 \Gen_Bits[3].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[3]),
        .R(R),
        .\WB_MEM_Result_reg[3] (\WB_MEM_Result_reg[0]_0 [26]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_413 \Gen_Bits[4].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[4]),
        .R(R),
        .\WB_MEM_Result_reg[4] (\WB_MEM_Result_reg[0]_0 [25]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_414 \Gen_Bits[5].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[5]),
        .R(R),
        .\WB_MEM_Result_reg[5] (\WB_MEM_Result_reg[0]_0 [24]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_415 \Gen_Bits[6].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[6]),
        .R(R),
        .\WB_MEM_Result_reg[6] (\WB_MEM_Result_reg[0]_0 [23]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_416 \Gen_Bits[7].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[7]),
        .R(R),
        .\WB_MEM_Result_reg[7] (\WB_MEM_Result_reg[0]_0 [22]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_417 \Gen_Bits[8].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[8]),
        .R(R),
        .\WB_MEM_Result_reg[8] (\WB_MEM_Result_reg[0]_0 [21]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  system_microblaze_0_0_MB_FDRE_418 \Gen_Bits[9].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd[9]),
        .R(R),
        .\WB_MEM_Result_reg[9] (\WB_MEM_Result_reg[0]_0 [20]),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg));
  FDRE \WB_MEM_Result_reg[0] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(D[3]),
        .Q(Q[31]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[10] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [19]),
        .Q(Q[21]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[11] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [18]),
        .Q(Q[20]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[12] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [17]),
        .Q(Q[19]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[13] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [16]),
        .Q(Q[18]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[14] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [15]),
        .Q(Q[17]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[15] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [14]),
        .Q(Q[16]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[16] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [13]),
        .Q(Q[15]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[17] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [12]),
        .Q(Q[14]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[18] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [11]),
        .Q(Q[13]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[19] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [10]),
        .Q(Q[12]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[1] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [28]),
        .Q(Q[30]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[20] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [9]),
        .Q(Q[11]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[21] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [8]),
        .Q(Q[10]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[22] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [7]),
        .Q(Q[9]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[23] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [6]),
        .Q(Q[8]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[24] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [5]),
        .Q(Q[7]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[25] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [4]),
        .Q(Q[6]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[26] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [3]),
        .Q(Q[5]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[27] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [2]),
        .Q(Q[4]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[28] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(D[2]),
        .Q(Q[3]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[29] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(D[1]),
        .Q(Q[2]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[2] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [27]),
        .Q(Q[29]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[30] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(D[0]),
        .Q(Q[1]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[31] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [0]),
        .Q(Q[0]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[3] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [26]),
        .Q(Q[28]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[4] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [25]),
        .Q(Q[27]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[5] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [24]),
        .Q(Q[26]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[6] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [23]),
        .Q(Q[25]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[7] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [22]),
        .Q(Q[24]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[8] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [21]),
        .Q(Q[23]),
        .R(SR));
  FDRE \WB_MEM_Result_reg[9] 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(\WB_MEM_Result_reg[0]_0 [20]),
        .Q(Q[22]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "Data_Flow_gti" *) 
module system_microblaze_0_0_Data_Flow_gti
   (Q,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    ex_op1_zero,
    \WB_MEM_Result_reg[0] ,
    wb_MSR_cmb,
    \WB_MEM_Result_reg[29] ,
    ex_MSR,
    of_MSR,
    DI,
    \LOCKSTEP_Out_reg[3738] ,
    \LOCKSTEP_Out_reg[3737] ,
    \LOCKSTEP_Out_reg[3736] ,
    \LOCKSTEP_Out_reg[3735] ,
    \LOCKSTEP_Out_reg[3734] ,
    \LOCKSTEP_Out_reg[3733] ,
    \LOCKSTEP_Out_reg[3732] ,
    \LOCKSTEP_Out_reg[3731] ,
    \LOCKSTEP_Out_reg[3730] ,
    \LOCKSTEP_Out_reg[3729] ,
    \LOCKSTEP_Out_reg[3728] ,
    \LOCKSTEP_Out_reg[3727] ,
    \LOCKSTEP_Out_reg[3726] ,
    \LOCKSTEP_Out_reg[3725] ,
    \LOCKSTEP_Out_reg[3724] ,
    \LOCKSTEP_Out_reg[3723] ,
    \LOCKSTEP_Out_reg[3722] ,
    \LOCKSTEP_Out_reg[3721] ,
    \LOCKSTEP_Out_reg[3720] ,
    \LOCKSTEP_Out_reg[3719] ,
    \LOCKSTEP_Out_reg[3718] ,
    \LOCKSTEP_Out_reg[3717] ,
    \LOCKSTEP_Out_reg[3716] ,
    \LOCKSTEP_Out_reg[3715] ,
    \LOCKSTEP_Out_reg[3714] ,
    \LOCKSTEP_Out_reg[3713] ,
    \LOCKSTEP_Out_reg[3712] ,
    \LOCKSTEP_Out_reg[3711] ,
    \LOCKSTEP_Out_reg[3710] ,
    \LOCKSTEP_Out_reg[3709] ,
    \Data_Addr[0] ,
    \LOCKSTEP_Out_reg[3769] ,
    wb_read_msb_doublet_sel,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    GPR_Op3,
    \WB_MEM_Result_reg[0]_0 ,
    GPR_Op1,
    \mem_byte_selects_reg[0] ,
    \data_rd_reg_reg[31] ,
    \data_rd_reg_reg[30] ,
    \data_rd_reg_reg[29] ,
    \data_rd_reg_reg[28] ,
    \data_rd_reg_reg[27] ,
    \data_rd_reg_reg[26] ,
    \data_rd_reg_reg[25] ,
    \data_rd_reg_reg[24] ,
    \data_rd_reg_reg[23] ,
    \data_rd_reg_reg[22] ,
    \data_rd_reg_reg[21] ,
    \data_rd_reg_reg[20] ,
    \data_rd_reg_reg[19] ,
    \data_rd_reg_reg[18] ,
    \data_rd_reg_reg[17] ,
    \data_rd_reg_reg[16] ,
    \LOCKSTEP_Out_reg[3769]_0 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    ex_Interrupt_Brk_combo_reg,
    \Using_Fast_Interrupt.wb_ie_rising_reg ,
    \Using_FPGA.Native_37 ,
    GPR_Op2,
    LO,
    \EX_Op2_reg[0] ,
    \LOCKSTEP_Out_reg[3792] ,
    \LOCKSTEP_Out_reg[3800] ,
    \MEM_DataBus_Addr_reg[30] ,
    of_op1_sel_spr,
    D,
    I1,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_44 ,
    \Using_FPGA.Native_45 ,
    \Using_FPGA.Native_46 ,
    \Using_FPGA.Native_47 ,
    \Using_FPGA.Native_48 ,
    \Using_FPGA.Native_49 ,
    \Using_FPGA.Native_50 ,
    \Using_FPGA.Native_51 ,
    \Using_FPGA.Native_52 ,
    \Using_FPGA.Native_53 ,
    \Using_FPGA.Native_54 ,
    \Using_FPGA.Native_55 ,
    \Using_FPGA.Native_56 ,
    \Using_FPGA.Native_57 ,
    \Using_FPGA.Native_58 ,
    \Using_FPGA.Native_59 ,
    \Using_FPGA.Native_60 ,
    \Using_FPGA.Native_61 ,
    \Using_FPGA.Native_62 ,
    \Using_FPGA.Native_63 ,
    \Using_FPGA.Native_64 ,
    \Using_FPGA.Native_65 ,
    \Using_FPGA.Native_66 ,
    \Using_FPGA.Native_67 ,
    \Using_FPGA.Native_68 ,
    ex_use_carry,
    DI_0,
    ex_unsigned_op,
    \EX_ALU_Op_reg[0] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU,
    \EX_Op1_reg[24] ,
    ex_op1_cmp_equal,
    ex_op1_cmp_equal_n,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk,
    out,
    \Using_FPGA.Native_69 ,
    \Using_FPGA.Native_70 ,
    \Using_FPGA.Native_71 ,
    ex_set_MSR_IE_instr_reg,
    ex_set_MSR_IE_instr_reg_0,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[0] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    mem_valid_reg,
    \wb_exception_kind_i_reg[28]_0 ,
    mem_daxi_exclusive_failed,
    ex_reverse_byteorder,
    ex_doublet_access,
    ex_byte_access,
    ex_Take_Intr_or_Exc_reg,
    wb_sel_spr_shr,
    ex_move_to_MSR_instr,
    WB_Doublet_Access_reg,
    of_op3_sel,
    of_op1_sel,
    restore_wb_msr_to_ex,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    wb_byte_access,
    \wb_read_lsb_1_sel_reg[0] ,
    \wb_read_lsb_1_sel_reg[0]_0 ,
    \wb_read_lsb_1_sel_reg[0]_1 ,
    \wb_read_lsb_1_sel_reg[0]_2 ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ,
    \wb_read_lsb_1_sel_reg[0]_3 ,
    \wb_read_lsb_1_sel_reg[0]_4 ,
    \wb_read_lsb_1_sel_reg[0]_5 ,
    \wb_read_lsb_1_sel_reg[0]_6 ,
    ex_cmp_op,
    ex_swap_byte_instr,
    mem_sel_msr,
    \control_reg_reg[3] ,
    Dbg_Disable,
    Interrupt,
    of_Take_Interrupt,
    \EX_Sext_Op_reg[0] ,
    WB_GPR_Wr,
    WB_Doublet_Access_reg_0,
    WB_Doublet_Access_reg_1,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD,
    WB_Doublet_Access_reg_2,
    WB_Doublet_Access_reg_3,
    WB_Doublet_Access_reg_4,
    WB_Doublet_Access_reg_5,
    WB_Doublet_Access_reg_6,
    WB_Doublet_Access_reg_7,
    WB_Doublet_Access_reg_8,
    WB_Doublet_Access_reg_9,
    WB_Doublet_Access_reg_10,
    WB_Doublet_Access_reg_11,
    WB_Doublet_Access_reg_12,
    WB_Doublet_Access_reg_13,
    WB_Doublet_Access_reg_14,
    WB_Doublet_Access_reg_15,
    E,
    \Using_FPGA.Native_72 ,
    \interrupt_address_d1_reg[0] ,
    \Using_FPGA.Native_73 ,
    SR,
    wb_piperun,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]Q;
  output [31:0]\Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output ex_op1_zero;
  output [29:0]\WB_MEM_Result_reg[0] ;
  output [0:0]wb_MSR_cmb;
  output [0:0]\WB_MEM_Result_reg[29] ;
  output [2:0]ex_MSR;
  output [1:0]of_MSR;
  output DI;
  output \LOCKSTEP_Out_reg[3738] ;
  output \LOCKSTEP_Out_reg[3737] ;
  output \LOCKSTEP_Out_reg[3736] ;
  output \LOCKSTEP_Out_reg[3735] ;
  output \LOCKSTEP_Out_reg[3734] ;
  output \LOCKSTEP_Out_reg[3733] ;
  output \LOCKSTEP_Out_reg[3732] ;
  output \LOCKSTEP_Out_reg[3731] ;
  output \LOCKSTEP_Out_reg[3730] ;
  output \LOCKSTEP_Out_reg[3729] ;
  output \LOCKSTEP_Out_reg[3728] ;
  output \LOCKSTEP_Out_reg[3727] ;
  output \LOCKSTEP_Out_reg[3726] ;
  output \LOCKSTEP_Out_reg[3725] ;
  output \LOCKSTEP_Out_reg[3724] ;
  output \LOCKSTEP_Out_reg[3723] ;
  output \LOCKSTEP_Out_reg[3722] ;
  output \LOCKSTEP_Out_reg[3721] ;
  output \LOCKSTEP_Out_reg[3720] ;
  output \LOCKSTEP_Out_reg[3719] ;
  output \LOCKSTEP_Out_reg[3718] ;
  output \LOCKSTEP_Out_reg[3717] ;
  output \LOCKSTEP_Out_reg[3716] ;
  output \LOCKSTEP_Out_reg[3715] ;
  output \LOCKSTEP_Out_reg[3714] ;
  output \LOCKSTEP_Out_reg[3713] ;
  output \LOCKSTEP_Out_reg[3712] ;
  output \LOCKSTEP_Out_reg[3711] ;
  output \LOCKSTEP_Out_reg[3710] ;
  output \LOCKSTEP_Out_reg[3709] ;
  output [119:0]\Data_Addr[0] ;
  output [15:0]\LOCKSTEP_Out_reg[3769] ;
  output wb_read_msb_doublet_sel;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output [15:0]GPR_Op3;
  output [2:0]\WB_MEM_Result_reg[0]_0 ;
  output [15:0]GPR_Op1;
  output [0:0]\mem_byte_selects_reg[0] ;
  output \data_rd_reg_reg[31] ;
  output \data_rd_reg_reg[30] ;
  output \data_rd_reg_reg[29] ;
  output \data_rd_reg_reg[28] ;
  output \data_rd_reg_reg[27] ;
  output \data_rd_reg_reg[26] ;
  output \data_rd_reg_reg[25] ;
  output \data_rd_reg_reg[24] ;
  output \data_rd_reg_reg[23] ;
  output \data_rd_reg_reg[22] ;
  output \data_rd_reg_reg[21] ;
  output \data_rd_reg_reg[20] ;
  output \data_rd_reg_reg[19] ;
  output \data_rd_reg_reg[18] ;
  output \data_rd_reg_reg[17] ;
  output \data_rd_reg_reg[16] ;
  output [15:0]\LOCKSTEP_Out_reg[3769]_0 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output \Using_FPGA.Native_21 ;
  output \Using_FPGA.Native_22 ;
  output \Using_FPGA.Native_23 ;
  output \Using_FPGA.Native_24 ;
  output \Using_FPGA.Native_25 ;
  output \Using_FPGA.Native_26 ;
  output \Using_FPGA.Native_27 ;
  output \Using_FPGA.Native_28 ;
  output \Using_FPGA.Native_29 ;
  output \Using_FPGA.Native_30 ;
  output \Using_FPGA.Native_31 ;
  output \Using_FPGA.Native_32 ;
  output \Using_FPGA.Native_33 ;
  output \Using_FPGA.Native_34 ;
  output \Using_FPGA.Native_35 ;
  output \Using_FPGA.Native_36 ;
  output ex_Interrupt_Brk_combo_reg;
  output \Using_Fast_Interrupt.wb_ie_rising_reg ;
  output [0:0]\Using_FPGA.Native_37 ;
  output [0:31]GPR_Op2;
  output LO;
  output [15:0]\EX_Op2_reg[0] ;
  output [1:0]\LOCKSTEP_Out_reg[3792] ;
  output [0:0]\LOCKSTEP_Out_reg[3800] ;
  output [1:0]\MEM_DataBus_Addr_reg[30] ;
  input of_op1_sel_spr;
  input [15:0]D;
  input I1;
  input \Using_FPGA.Native_38 ;
  input \Using_FPGA.Native_39 ;
  input \Using_FPGA.Native_40 ;
  input \Using_FPGA.Native_41 ;
  input \Using_FPGA.Native_42 ;
  input \Using_FPGA.Native_43 ;
  input \Using_FPGA.Native_44 ;
  input \Using_FPGA.Native_45 ;
  input \Using_FPGA.Native_46 ;
  input \Using_FPGA.Native_47 ;
  input \Using_FPGA.Native_48 ;
  input \Using_FPGA.Native_49 ;
  input \Using_FPGA.Native_50 ;
  input \Using_FPGA.Native_51 ;
  input \Using_FPGA.Native_52 ;
  input \Using_FPGA.Native_53 ;
  input \Using_FPGA.Native_54 ;
  input \Using_FPGA.Native_55 ;
  input \Using_FPGA.Native_56 ;
  input \Using_FPGA.Native_57 ;
  input \Using_FPGA.Native_58 ;
  input \Using_FPGA.Native_59 ;
  input \Using_FPGA.Native_60 ;
  input \Using_FPGA.Native_61 ;
  input \Using_FPGA.Native_62 ;
  input \Using_FPGA.Native_63 ;
  input \Using_FPGA.Native_64 ;
  input \Using_FPGA.Native_65 ;
  input \Using_FPGA.Native_66 ;
  input \Using_FPGA.Native_67 ;
  input \Using_FPGA.Native_68 ;
  input ex_use_carry;
  input DI_0;
  input ex_unsigned_op;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;
  input \EX_Op1_reg[24] ;
  input ex_op1_cmp_equal;
  input ex_op1_cmp_equal_n;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:31]EX_Fwd;
  input Clk;
  input [0:0]out;
  input \Using_FPGA.Native_69 ;
  input \Using_FPGA.Native_70 ;
  input \Using_FPGA.Native_71 ;
  input ex_set_MSR_IE_instr_reg;
  input ex_set_MSR_IE_instr_reg_0;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [31:0]\mem_pc_i_reg[0] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input mem_valid_reg;
  input \wb_exception_kind_i_reg[28]_0 ;
  input mem_daxi_exclusive_failed;
  input ex_reverse_byteorder;
  input ex_doublet_access;
  input ex_byte_access;
  input ex_Take_Intr_or_Exc_reg;
  input wb_sel_spr_shr;
  input ex_move_to_MSR_instr;
  input [15:0]WB_Doublet_Access_reg;
  input [0:1]of_op3_sel;
  input [0:1]of_op1_sel;
  input restore_wb_msr_to_ex;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input wb_byte_access;
  input \wb_read_lsb_1_sel_reg[0] ;
  input \wb_read_lsb_1_sel_reg[0]_0 ;
  input \wb_read_lsb_1_sel_reg[0]_1 ;
  input \wb_read_lsb_1_sel_reg[0]_2 ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ;
  input \wb_read_lsb_1_sel_reg[0]_3 ;
  input \wb_read_lsb_1_sel_reg[0]_4 ;
  input \wb_read_lsb_1_sel_reg[0]_5 ;
  input \wb_read_lsb_1_sel_reg[0]_6 ;
  input ex_cmp_op;
  input ex_swap_byte_instr;
  input mem_sel_msr;
  input [0:0]\control_reg_reg[3] ;
  input Dbg_Disable;
  input Interrupt;
  input of_Take_Interrupt;
  input [1:0]\EX_Sext_Op_reg[0] ;
  input WB_GPR_Wr;
  input WB_Doublet_Access_reg_0;
  input WB_Doublet_Access_reg_1;
  input [0:4]of_gpr_op1_rd_addr;
  input [0:15]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;
  input WB_Doublet_Access_reg_2;
  input WB_Doublet_Access_reg_3;
  input WB_Doublet_Access_reg_4;
  input WB_Doublet_Access_reg_5;
  input WB_Doublet_Access_reg_6;
  input WB_Doublet_Access_reg_7;
  input WB_Doublet_Access_reg_8;
  input WB_Doublet_Access_reg_9;
  input WB_Doublet_Access_reg_10;
  input WB_Doublet_Access_reg_11;
  input WB_Doublet_Access_reg_12;
  input WB_Doublet_Access_reg_13;
  input WB_Doublet_Access_reg_14;
  input WB_Doublet_Access_reg_15;
  input [0:0]E;
  input \Using_FPGA.Native_72 ;
  input [31:0]\interrupt_address_d1_reg[0] ;
  input [3:0]\Using_FPGA.Native_73 ;
  input [0:0]SR;
  input wb_piperun;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [4:0]ADDRD;
  wire \ALL_Bits[0].ALU_Bit_I1/S ;
  wire Byte_Doublet_Handle_gti_I_n_40;
  wire Clk;
  wire [15:0]D;
  wire DI;
  wire DI_0;
  wire [119:0]\Data_Addr[0] ;
  wire Dbg_Disable;
  wire [0:0]E;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:31]EX_Fwd;
  wire \EX_Op1_reg[24] ;
  wire [15:0]\EX_Op2_reg[0] ;
  wire [1:0]\EX_Sext_Op_reg[0] ;
  wire [15:0]GPR_Op1;
  wire [0:31]GPR_Op2;
  wire [15:0]GPR_Op3;
  wire I1;
  wire Interrupt;
  wire LO;
  wire \LOCKSTEP_Out_reg[3709] ;
  wire \LOCKSTEP_Out_reg[3710] ;
  wire \LOCKSTEP_Out_reg[3711] ;
  wire \LOCKSTEP_Out_reg[3712] ;
  wire \LOCKSTEP_Out_reg[3713] ;
  wire \LOCKSTEP_Out_reg[3714] ;
  wire \LOCKSTEP_Out_reg[3715] ;
  wire \LOCKSTEP_Out_reg[3716] ;
  wire \LOCKSTEP_Out_reg[3717] ;
  wire \LOCKSTEP_Out_reg[3718] ;
  wire \LOCKSTEP_Out_reg[3719] ;
  wire \LOCKSTEP_Out_reg[3720] ;
  wire \LOCKSTEP_Out_reg[3721] ;
  wire \LOCKSTEP_Out_reg[3722] ;
  wire \LOCKSTEP_Out_reg[3723] ;
  wire \LOCKSTEP_Out_reg[3724] ;
  wire \LOCKSTEP_Out_reg[3725] ;
  wire \LOCKSTEP_Out_reg[3726] ;
  wire \LOCKSTEP_Out_reg[3727] ;
  wire \LOCKSTEP_Out_reg[3728] ;
  wire \LOCKSTEP_Out_reg[3729] ;
  wire \LOCKSTEP_Out_reg[3730] ;
  wire \LOCKSTEP_Out_reg[3731] ;
  wire \LOCKSTEP_Out_reg[3732] ;
  wire \LOCKSTEP_Out_reg[3733] ;
  wire \LOCKSTEP_Out_reg[3734] ;
  wire \LOCKSTEP_Out_reg[3735] ;
  wire \LOCKSTEP_Out_reg[3736] ;
  wire \LOCKSTEP_Out_reg[3737] ;
  wire \LOCKSTEP_Out_reg[3738] ;
  wire [15:0]\LOCKSTEP_Out_reg[3769] ;
  wire [15:0]\LOCKSTEP_Out_reg[3769]_0 ;
  wire [1:0]\LOCKSTEP_Out_reg[3792] ;
  wire [0:0]\LOCKSTEP_Out_reg[3800] ;
  wire [1:0]\MEM_DataBus_Addr_reg[30] ;
  wire [28:28]MEM_Fwd;
  wire Operand_Select_I_n_136;
  wire Operand_Select_I_n_137;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire R;
  wire [0:0]SR;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ;
  wire [31:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire [0:0]\Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire \Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire \Using_FPGA.Native_47 ;
  wire \Using_FPGA.Native_48 ;
  wire \Using_FPGA.Native_49 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_50 ;
  wire \Using_FPGA.Native_51 ;
  wire \Using_FPGA.Native_52 ;
  wire \Using_FPGA.Native_53 ;
  wire \Using_FPGA.Native_54 ;
  wire \Using_FPGA.Native_55 ;
  wire \Using_FPGA.Native_56 ;
  wire \Using_FPGA.Native_57 ;
  wire \Using_FPGA.Native_58 ;
  wire \Using_FPGA.Native_59 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_60 ;
  wire \Using_FPGA.Native_61 ;
  wire \Using_FPGA.Native_62 ;
  wire \Using_FPGA.Native_63 ;
  wire \Using_FPGA.Native_64 ;
  wire \Using_FPGA.Native_65 ;
  wire \Using_FPGA.Native_66 ;
  wire \Using_FPGA.Native_67 ;
  wire \Using_FPGA.Native_68 ;
  wire \Using_FPGA.Native_69 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_70 ;
  wire \Using_FPGA.Native_71 ;
  wire \Using_FPGA.Native_72 ;
  wire [3:0]\Using_FPGA.Native_73 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_Fast_Interrupt.wb_ie_rising_reg ;
  wire [15:0]WB_Doublet_Access_reg;
  wire WB_Doublet_Access_reg_0;
  wire WB_Doublet_Access_reg_1;
  wire WB_Doublet_Access_reg_10;
  wire WB_Doublet_Access_reg_11;
  wire WB_Doublet_Access_reg_12;
  wire WB_Doublet_Access_reg_13;
  wire WB_Doublet_Access_reg_14;
  wire WB_Doublet_Access_reg_15;
  wire WB_Doublet_Access_reg_2;
  wire WB_Doublet_Access_reg_3;
  wire WB_Doublet_Access_reg_4;
  wire WB_Doublet_Access_reg_5;
  wire WB_Doublet_Access_reg_6;
  wire WB_Doublet_Access_reg_7;
  wire WB_Doublet_Access_reg_8;
  wire WB_Doublet_Access_reg_9;
  wire WB_GPR_Wr;
  wire [29:0]\WB_MEM_Result_reg[0] ;
  wire [2:0]\WB_MEM_Result_reg[0]_0 ;
  wire [0:0]\WB_MEM_Result_reg[29] ;
  wire \Zero_Detecting[0].nibble_Zero_reg ;
  wire \Zero_Detecting[1].nibble_Zero_reg ;
  wire \Zero_Detecting[2].nibble_Zero_reg ;
  wire \Zero_Detecting[3].nibble_Zero_reg ;
  wire \Zero_Detecting[4].nibble_Zero_reg ;
  wire \Zero_Detecting[5].nibble_Zero_reg ;
  wire [0:0]\control_reg_reg[3] ;
  wire \data_rd_reg_reg[16] ;
  wire \data_rd_reg_reg[17] ;
  wire \data_rd_reg_reg[18] ;
  wire \data_rd_reg_reg[19] ;
  wire \data_rd_reg_reg[20] ;
  wire \data_rd_reg_reg[21] ;
  wire \data_rd_reg_reg[22] ;
  wire \data_rd_reg_reg[23] ;
  wire \data_rd_reg_reg[24] ;
  wire \data_rd_reg_reg[25] ;
  wire \data_rd_reg_reg[26] ;
  wire \data_rd_reg_reg[27] ;
  wire \data_rd_reg_reg[28] ;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[30] ;
  wire \data_rd_reg_reg[31] ;
  wire ex_Interrupt_Brk_combo_reg;
  wire [2:0]ex_MSR;
  wire ex_Take_Intr_or_Exc_reg;
  wire ex_alu_carryin;
  wire ex_branch_with_delayslot_reg;
  wire ex_byte_access;
  wire [1:1]ex_byte_selects;
  wire ex_cmp_op;
  wire ex_doublet_access;
  wire ex_move_to_MSR_instr;
  wire ex_op1_cmp_equal;
  wire ex_op1_cmp_equal_n;
  wire ex_op1_zero;
  wire [0:30]ex_op2;
  wire ex_pre_alu_carry;
  wire ex_reverse_byteorder;
  wire ex_set_MSR_IE_instr_reg;
  wire ex_set_MSR_IE_instr_reg_0;
  wire ex_swap_byte_instr;
  wire ex_unsigned_op;
  wire ex_use_carry;
  wire exception_registers_I1_n_80;
  wire exception_registers_I1_n_81;
  wire exception_registers_I1_n_82;
  wire exception_registers_I1_n_83;
  wire exception_registers_I1_n_84;
  wire exception_registers_I1_n_85;
  wire exception_registers_I1_n_86;
  wire exception_registers_I1_n_87;
  wire exception_registers_I1_n_88;
  wire exception_registers_I1_n_89;
  wire exception_registers_I1_n_90;
  wire exception_registers_I1_n_91;
  wire exception_registers_I1_n_92;
  wire exception_registers_I1_n_93;
  wire exception_registers_I1_n_94;
  wire exception_registers_I1_n_95;
  wire [16:31]gpr_op1;
  wire [16:31]gpr_op3;
  wire [31:0]\interrupt_address_d1_reg[0] ;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lopt_4;
  wire [0:0]\mem_byte_selects_reg[0] ;
  wire mem_daxi_exclusive_failed;
  wire [29:30]mem_ex_result;
  wire [31:0]\mem_pc_i_reg[0] ;
  wire mem_sel_msr;
  wire mem_valid_reg;
  wire muxcy_di;
  wire muxcy_sel;
  wire [1:0]of_MSR;
  wire of_Take_Interrupt;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [0:15]of_imm_data;
  wire [0:1]of_op1_sel;
  wire of_op1_sel_spr;
  wire [16:31]of_op3;
  wire [0:1]of_op3_sel;
  wire [0:0]out;
  wire read_register_MSR_1_reg;
  wire restore_wb_msr_to_ex;
  wire [0:0]wb_MSR_cmb;
  wire wb_byte_access;
  wire wb_exception_i_reg;
  wire [0:0]\wb_exception_kind_i_reg[28] ;
  wire \wb_exception_kind_i_reg[28]_0 ;
  wire wb_gpr_wr_dbg;
  wire [16:31]wb_mem_result;
  wire wb_piperun;
  wire \wb_read_lsb_1_sel_reg[0] ;
  wire \wb_read_lsb_1_sel_reg[0]_0 ;
  wire \wb_read_lsb_1_sel_reg[0]_1 ;
  wire \wb_read_lsb_1_sel_reg[0]_2 ;
  wire \wb_read_lsb_1_sel_reg[0]_3 ;
  wire \wb_read_lsb_1_sel_reg[0]_4 ;
  wire \wb_read_lsb_1_sel_reg[0]_5 ;
  wire \wb_read_lsb_1_sel_reg[0]_6 ;
  wire wb_read_msb_doublet_sel;
  wire wb_sel_spr_shr;

  assign lopt = \^lopt_2 ;
  assign lopt_3 = lopt_1;
  assign lopt_4 = lopt_2;
  system_microblaze_0_0_ALU ALU_I
       (.DI_0(DI_0),
        .\Data_Addr[0] (\Data_Addr[0] [119:90]),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_CMP_Op_reg(Operand_Select_I_n_136),
        .EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op1_reg[0] (\Using_FPGA.Native ),
        .LO(LO),
        .\MEM_DataBus_Addr_reg[30] (\MEM_DataBus_Addr_reg[30] ),
        .Q({ex_op2[0],ex_op2[1],ex_op2[2],ex_op2[3],ex_op2[4],ex_op2[5],ex_op2[6],ex_op2[7],ex_op2[8],ex_op2[9],ex_op2[10],ex_op2[11],ex_op2[12],ex_op2[13],ex_op2[14],ex_op2[15],ex_op2[16],ex_op2[17],ex_op2[18],ex_op2[19],ex_op2[20],ex_op2[21],ex_op2[22],ex_op2[23],ex_op2[24],ex_op2[25],ex_op2[26],ex_op2[27],ex_op2[28],ex_op2[29],ex_op2[30],Q}),
        .S(\ALL_Bits[0].ALU_Bit_I1/S ),
        .ex_alu_carryin(ex_alu_carryin),
        .ex_unsigned_op(ex_unsigned_op),
        .ex_use_carry(ex_use_carry),
        .lopt(ex_MSR[1]),
        .lopt_1(muxcy_di),
        .lopt_2(muxcy_sel),
        .lopt_3(\^lopt ),
        .lopt_4(\^lopt_1 ));
  system_microblaze_0_0_Byte_Doublet_Handle_gti Byte_Doublet_Handle_gti_I
       (.Clk(Clk),
        .D({\mem_byte_selects_reg[0] ,ex_byte_selects}),
        .\EX_Op3_reg[24] (\Data_Addr[0] [87:56]),
        .\LOCKSTEP_Out_reg[3792] (\LOCKSTEP_Out_reg[3792] ),
        .\M_AXI_DP_WDATA[31] (\Data_Addr[0] [55:20]),
        .Q({\LOCKSTEP_Out_reg[3800] ,Byte_Doublet_Handle_gti_I_n_40}),
        .\Using_FPGA.Native (\Using_FPGA.Native_73 ),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .ex_byte_access(ex_byte_access),
        .ex_doublet_access(ex_doublet_access),
        .ex_reverse_byteorder(ex_reverse_byteorder),
        .mem_valid_reg(mem_valid_reg),
        .out(out),
        .wb_read_msb_doublet_sel(wb_read_msb_doublet_sel));
  system_microblaze_0_0_Data_Flow_Logic Data_Flow_Logic_I
       (.Clk(Clk),
        .D({\WB_MEM_Result_reg[0]_0 [2],MEM_Fwd,\WB_MEM_Result_reg[0]_0 [1:0]}),
        .EX_Fwd(EX_Fwd),
        .Q({\LOCKSTEP_Out_reg[3769]_0 ,wb_mem_result[16],wb_mem_result[17],wb_mem_result[18],wb_mem_result[19],wb_mem_result[20],wb_mem_result[21],wb_mem_result[22],wb_mem_result[23],wb_mem_result[24],wb_mem_result[25],wb_mem_result[26],wb_mem_result[27],wb_mem_result[28],wb_mem_result[29],wb_mem_result[30],wb_mem_result[31]}),
        .R(R),
        .SR(SR),
        .\WB_MEM_Result_reg[0]_0 (\WB_MEM_Result_reg[0] ),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .mem_ex_result({mem_ex_result[29],mem_ex_result[30]}),
        .mem_valid_reg(mem_valid_reg));
  system_microblaze_0_0_Operand_Select_gti Operand_Select_I
       (.Clk(Clk),
        .D({D,exception_registers_I1_n_80,exception_registers_I1_n_81,exception_registers_I1_n_82,exception_registers_I1_n_83,exception_registers_I1_n_84,exception_registers_I1_n_85,exception_registers_I1_n_86,exception_registers_I1_n_87,exception_registers_I1_n_88,exception_registers_I1_n_89,exception_registers_I1_n_90,exception_registers_I1_n_91,exception_registers_I1_n_92,exception_registers_I1_n_93,exception_registers_I1_n_94,exception_registers_I1_n_95}),
        .\Data_Addr[30] (\Data_Addr[0] [89:56]),
        .E(E),
        .\EX_Op2_reg[0]_0 (\EX_Op2_reg[0] ),
        .\EX_Sext_Op_reg[0] (\EX_Sext_Op_reg[0] ),
        .I1(I1),
        .\MEM_DataBus_Addr_reg[0] ({ex_op2[0],ex_op2[1],ex_op2[2],ex_op2[3],ex_op2[4],ex_op2[5],ex_op2[6],ex_op2[7],ex_op2[8],ex_op2[9],ex_op2[10],ex_op2[11],ex_op2[12],ex_op2[13],ex_op2[14],ex_op2[15],ex_op2[16],ex_op2[17],ex_op2[18],ex_op2[19],ex_op2[20],ex_op2[21],ex_op2[22],ex_op2[23],ex_op2[24],ex_op2[25],ex_op2[26],ex_op2[27],ex_op2[28],ex_op2[29],ex_op2[30],Q}),
        .\MEM_DataBus_Addr_reg[0]_0 (Operand_Select_I_n_136),
        .Q(\Using_FPGA.Native ),
        .S(\ALL_Bits[0].ALU_Bit_I1/S ),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_15 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_16 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_17 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_18 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_19 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_20 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_21 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_22 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_23 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_24 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_25 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_26 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_27 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_28 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_29 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_30 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_31 (\Using_FPGA.Native_34 ),
        .\Using_FPGA.Native_32 (\Using_FPGA.Native_35 ),
        .\Using_FPGA.Native_33 (\Using_FPGA.Native_36 ),
        .\Using_FPGA.Native_34 (Operand_Select_I_n_137),
        .\Using_FPGA.Native_35 (\Using_FPGA.Native_37 ),
        .\Using_FPGA.Native_36 (\Using_FPGA.Native_38 ),
        .\Using_FPGA.Native_37 (\Using_FPGA.Native_39 ),
        .\Using_FPGA.Native_38 (\Using_FPGA.Native_40 ),
        .\Using_FPGA.Native_39 (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_40 (\Using_FPGA.Native_42 ),
        .\Using_FPGA.Native_41 (\Using_FPGA.Native_43 ),
        .\Using_FPGA.Native_42 (\Using_FPGA.Native_44 ),
        .\Using_FPGA.Native_43 (\Using_FPGA.Native_45 ),
        .\Using_FPGA.Native_44 (\Using_FPGA.Native_46 ),
        .\Using_FPGA.Native_45 (\Using_FPGA.Native_47 ),
        .\Using_FPGA.Native_46 (\Using_FPGA.Native_48 ),
        .\Using_FPGA.Native_47 (\Using_FPGA.Native_49 ),
        .\Using_FPGA.Native_48 (\Using_FPGA.Native_50 ),
        .\Using_FPGA.Native_49 (\Using_FPGA.Native_51 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_50 (\Using_FPGA.Native_52 ),
        .\Using_FPGA.Native_51 (\Using_FPGA.Native_53 ),
        .\Using_FPGA.Native_52 (\Using_FPGA.Native_54 ),
        .\Using_FPGA.Native_53 (\Using_FPGA.Native_55 ),
        .\Using_FPGA.Native_54 (\Using_FPGA.Native_56 ),
        .\Using_FPGA.Native_55 (\Using_FPGA.Native_57 ),
        .\Using_FPGA.Native_56 (\Using_FPGA.Native_58 ),
        .\Using_FPGA.Native_57 (\Using_FPGA.Native_59 ),
        .\Using_FPGA.Native_58 (\Using_FPGA.Native_60 ),
        .\Using_FPGA.Native_59 (\Using_FPGA.Native_61 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_60 (\Using_FPGA.Native_62 ),
        .\Using_FPGA.Native_61 (\Using_FPGA.Native_63 ),
        .\Using_FPGA.Native_62 (\Using_FPGA.Native_64 ),
        .\Using_FPGA.Native_63 (\Using_FPGA.Native_65 ),
        .\Using_FPGA.Native_64 (\Using_FPGA.Native_66 ),
        .\Using_FPGA.Native_65 (\Using_FPGA.Native_67 ),
        .\Using_FPGA.Native_66 (\Using_FPGA.Native_68 ),
        .\Using_FPGA.Native_67 (\Using_FPGA.Native_72 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_12 ),
        .WB_Doublet_Access_reg({WB_Doublet_Access_reg,of_op3[16],of_op3[17],of_op3[18],of_op3[19],of_op3[20],of_op3[21],of_op3[22],of_op3[23],of_op3[24],of_op3[25],of_op3[26],of_op3[27],of_op3[28],of_op3[29],of_op3[30],of_op3[31]}),
        .\Zero_Detecting[0].nibble_Zero_reg (\Zero_Detecting[0].nibble_Zero_reg ),
        .\Zero_Detecting[1].nibble_Zero_reg (\Zero_Detecting[1].nibble_Zero_reg ),
        .\Zero_Detecting[2].nibble_Zero_reg (\Zero_Detecting[2].nibble_Zero_reg ),
        .\Zero_Detecting[3].nibble_Zero_reg (\Zero_Detecting[3].nibble_Zero_reg ),
        .\Zero_Detecting[4].nibble_Zero_reg (\Zero_Detecting[4].nibble_Zero_reg ),
        .\Zero_Detecting[5].nibble_Zero_reg (\Zero_Detecting[5].nibble_Zero_reg ),
        .ex_MSR(ex_MSR),
        .ex_Take_Intr_or_Exc_reg(ex_Take_Intr_or_Exc_reg),
        .ex_byte_access(ex_byte_access),
        .ex_cmp_op(ex_cmp_op),
        .ex_doublet_access(ex_doublet_access),
        .ex_move_to_MSR_instr(ex_move_to_MSR_instr),
        .ex_reverse_byteorder(ex_reverse_byteorder),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .\interrupt_address_d1_reg[0] (\interrupt_address_d1_reg[0] ),
        .\mem_byte_selects_reg[0] ({\mem_byte_selects_reg[0] ,ex_byte_selects}),
        .of_imm_data(of_imm_data),
        .of_op1_sel_spr(of_op1_sel_spr),
        .out(out),
        .wb_sel_spr_shr(wb_sel_spr_shr));
  system_microblaze_0_0_Register_File_gti Register_File_I
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .DID({WB_Doublet_Access_reg_0,WB_Doublet_Access_reg_1}),
        .GPR_Op1({GPR_Op1[15],GPR_Op1[14],GPR_Op1[13],GPR_Op1[12],GPR_Op1[11],GPR_Op1[10],GPR_Op1[9],GPR_Op1[8],GPR_Op1[7],GPR_Op1[6],GPR_Op1[5],GPR_Op1[4],GPR_Op1[3],GPR_Op1[2],GPR_Op1[1],GPR_Op1[0],gpr_op1}),
        .GPR_Op2(GPR_Op2),
        .GPR_Op3({GPR_Op3[15],GPR_Op3[14],GPR_Op3[13],GPR_Op3[12],GPR_Op3[11],GPR_Op3[10],GPR_Op3[9],GPR_Op3[8],GPR_Op3[7],GPR_Op3[6],GPR_Op3[5],GPR_Op3[4],GPR_Op3[3],GPR_Op3[2],GPR_Op3[1],GPR_Op3[0],gpr_op3}),
        .WB_Byte_Access_reg(\Data_Addr[0] [15:14]),
        .WB_Byte_Access_reg_0(\Data_Addr[0] [13:12]),
        .WB_Byte_Access_reg_1(\Data_Addr[0] [11:10]),
        .WB_Byte_Access_reg_2(\Data_Addr[0] [9:8]),
        .WB_Doublet_Access_reg({WB_Doublet_Access_reg_2,WB_Doublet_Access_reg_3}),
        .WB_Doublet_Access_reg_0({WB_Doublet_Access_reg_4,WB_Doublet_Access_reg_5}),
        .WB_Doublet_Access_reg_1({WB_Doublet_Access_reg_6,WB_Doublet_Access_reg_7}),
        .WB_Doublet_Access_reg_2({WB_Doublet_Access_reg_8,WB_Doublet_Access_reg_9}),
        .WB_Doublet_Access_reg_3({WB_Doublet_Access_reg_10,WB_Doublet_Access_reg_11}),
        .WB_Doublet_Access_reg_4({WB_Doublet_Access_reg_12,WB_Doublet_Access_reg_13}),
        .WB_Doublet_Access_reg_5({WB_Doublet_Access_reg_14,WB_Doublet_Access_reg_15}),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data({of_imm_data[0],of_imm_data[1],of_imm_data[2],of_imm_data[3],of_imm_data[4]}),
        .\wb_read_lsb_sel_reg[1] (\Data_Addr[0] [7:6]),
        .\wb_read_lsb_sel_reg[1]_0 (\Data_Addr[0] [5:4]),
        .\wb_read_lsb_sel_reg[1]_1 (\Data_Addr[0] [3:2]),
        .\wb_read_lsb_sel_reg[1]_2 (\Data_Addr[0] [1:0]));
  system_microblaze_0_0_Shift_Logic_Module_gti Shift_Logic_Module_I
       (.\EX_Op1_reg[24] (\EX_Op1_reg[24] ),
        .\EX_Op1_reg[24]_0 (Operand_Select_I_n_137),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ));
  system_microblaze_0_0_MB_MUXCY_259 \Using_DAXI_ALU_Carry.Direct_MUXCY_I 
       (.ex_MSR(ex_MSR[1]),
        .ex_pre_alu_carry(ex_pre_alu_carry),
        .muxcy_di(muxcy_di),
        .muxcy_sel(muxcy_sel));
  system_microblaze_0_0_MB_MUXCY_260 \Using_DAXI_ALU_Carry.Post_MUXCY_I 
       (.ex_alu_carryin(ex_alu_carryin),
        .ex_pre_alu_carry(ex_pre_alu_carry),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ));
  system_microblaze_0_0_MB_LUT6_2__parameterized1 \Using_DAXI_ALU_Carry.direct_lut_INST 
       (.mem_daxi_exclusive_failed(mem_daxi_exclusive_failed),
        .muxcy_di(muxcy_di),
        .muxcy_sel(muxcy_sel));
  system_microblaze_0_0_Zero_Detect_gti Zero_Detect_I
       (.\Zero_Detecting[0].nibble_Zero_reg (\Zero_Detecting[0].nibble_Zero_reg ),
        .\Zero_Detecting[1].nibble_Zero_reg (\Zero_Detecting[1].nibble_Zero_reg ),
        .\Zero_Detecting[2].nibble_Zero_reg (\Zero_Detecting[2].nibble_Zero_reg ),
        .\Zero_Detecting[3].nibble_Zero_reg (\Zero_Detecting[3].nibble_Zero_reg ),
        .\Zero_Detecting[4].nibble_Zero_reg (\Zero_Detecting[4].nibble_Zero_reg ),
        .\Zero_Detecting[5].nibble_Zero_reg (\Zero_Detecting[5].nibble_Zero_reg ),
        .ex_op1_cmp_equal(ex_op1_cmp_equal),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .ex_op1_zero(ex_op1_zero),
        .lopt(\^lopt_2 ),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4));
  system_microblaze_0_0_exception_registers_gti exception_registers_I1
       (.Clk(Clk),
        .D({MEM_Fwd,\WB_MEM_Result_reg[0]_0 [1:0]}),
        .DI(DI),
        .\EX_Branch_CMP_Op1_reg[16] ({exception_registers_I1_n_80,exception_registers_I1_n_81,exception_registers_I1_n_82,exception_registers_I1_n_83,exception_registers_I1_n_84,exception_registers_I1_n_85,exception_registers_I1_n_86,exception_registers_I1_n_87,exception_registers_I1_n_88,exception_registers_I1_n_89,exception_registers_I1_n_90,exception_registers_I1_n_91,exception_registers_I1_n_92,exception_registers_I1_n_93,exception_registers_I1_n_94,exception_registers_I1_n_95}),
        .EX_Fwd({EX_Fwd[16],EX_Fwd[17],EX_Fwd[18],EX_Fwd[19],EX_Fwd[20],EX_Fwd[21],EX_Fwd[22],EX_Fwd[23],EX_Fwd[24],EX_Fwd[25],EX_Fwd[26],EX_Fwd[27],EX_Fwd[28],EX_Fwd[29],EX_Fwd[30],EX_Fwd[31]}),
        .\EX_Op3_reg[16] ({of_op3[16],of_op3[17],of_op3[18],of_op3[19],of_op3[20],of_op3[21],of_op3[22],of_op3[23],of_op3[24],of_op3[25],of_op3[26],of_op3[27],of_op3[28],of_op3[29],of_op3[30],of_op3[31]}),
        .GPR_Op1({gpr_op1[16],gpr_op1[17],gpr_op1[18],gpr_op1[19],gpr_op1[20],gpr_op1[21],gpr_op1[22],gpr_op1[23],gpr_op1[24],gpr_op1[25],gpr_op1[26],gpr_op1[27],gpr_op1[28],gpr_op1[29],gpr_op1[30],gpr_op1[31]}),
        .GPR_Op3({gpr_op3[16],gpr_op3[17],gpr_op3[18],gpr_op3[19],gpr_op3[20],gpr_op3[21],gpr_op3[22],gpr_op3[23],gpr_op3[24],gpr_op3[25],gpr_op3[26],gpr_op3[27],gpr_op3[28],gpr_op3[29],gpr_op3[30],gpr_op3[31]}),
        .\LOCKSTEP_Out_reg[3708] ({\Data_Addr[0] [19],\Data_Addr[0] [15:0]}),
        .\LOCKSTEP_Out_reg[3709] (\LOCKSTEP_Out_reg[3709] ),
        .\LOCKSTEP_Out_reg[3710] (\LOCKSTEP_Out_reg[3710] ),
        .\LOCKSTEP_Out_reg[3711] (\LOCKSTEP_Out_reg[3711] ),
        .\LOCKSTEP_Out_reg[3712] (\LOCKSTEP_Out_reg[3712] ),
        .\LOCKSTEP_Out_reg[3713] (\LOCKSTEP_Out_reg[3713] ),
        .\LOCKSTEP_Out_reg[3714] (\LOCKSTEP_Out_reg[3714] ),
        .\LOCKSTEP_Out_reg[3715] (\LOCKSTEP_Out_reg[3715] ),
        .\LOCKSTEP_Out_reg[3716] (\LOCKSTEP_Out_reg[3716] ),
        .\LOCKSTEP_Out_reg[3717] (\LOCKSTEP_Out_reg[3717] ),
        .\LOCKSTEP_Out_reg[3718] (\LOCKSTEP_Out_reg[3718] ),
        .\LOCKSTEP_Out_reg[3719] (\LOCKSTEP_Out_reg[3719] ),
        .\LOCKSTEP_Out_reg[3720] (\LOCKSTEP_Out_reg[3720] ),
        .\LOCKSTEP_Out_reg[3721] (\LOCKSTEP_Out_reg[3721] ),
        .\LOCKSTEP_Out_reg[3722] (\LOCKSTEP_Out_reg[3722] ),
        .\LOCKSTEP_Out_reg[3723] (\LOCKSTEP_Out_reg[3723] ),
        .\LOCKSTEP_Out_reg[3724] (\LOCKSTEP_Out_reg[3724] ),
        .\LOCKSTEP_Out_reg[3725] (\LOCKSTEP_Out_reg[3725] ),
        .\LOCKSTEP_Out_reg[3726] (\LOCKSTEP_Out_reg[3726] ),
        .\LOCKSTEP_Out_reg[3727] (\LOCKSTEP_Out_reg[3727] ),
        .\LOCKSTEP_Out_reg[3728] (\LOCKSTEP_Out_reg[3728] ),
        .\LOCKSTEP_Out_reg[3729] (\LOCKSTEP_Out_reg[3729] ),
        .\LOCKSTEP_Out_reg[3730] (\LOCKSTEP_Out_reg[3730] ),
        .\LOCKSTEP_Out_reg[3731] (\LOCKSTEP_Out_reg[3731] ),
        .\LOCKSTEP_Out_reg[3732] (\LOCKSTEP_Out_reg[3732] ),
        .\LOCKSTEP_Out_reg[3733] (\LOCKSTEP_Out_reg[3733] ),
        .\LOCKSTEP_Out_reg[3734] (\LOCKSTEP_Out_reg[3734] ),
        .\LOCKSTEP_Out_reg[3735] (\LOCKSTEP_Out_reg[3735] ),
        .\LOCKSTEP_Out_reg[3736] (\LOCKSTEP_Out_reg[3736] ),
        .\LOCKSTEP_Out_reg[3737] (\LOCKSTEP_Out_reg[3737] ),
        .\LOCKSTEP_Out_reg[3738] (\LOCKSTEP_Out_reg[3738] ),
        .\LOCKSTEP_Out_reg[3769] (\LOCKSTEP_Out_reg[3769] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q({wb_mem_result[16],wb_mem_result[17],wb_mem_result[18],wb_mem_result[19],wb_mem_result[20],wb_mem_result[21],wb_mem_result[22],wb_mem_result[23],wb_mem_result[24],wb_mem_result[25],wb_mem_result[26],wb_mem_result[27],wb_mem_result[28],wb_mem_result[29],wb_mem_result[30],wb_mem_result[31]}),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[16] (\Use_DLMB.wb_dlmb_valid_read_data_reg[16] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[17] (\Use_DLMB.wb_dlmb_valid_read_data_reg[17] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[18] (\Use_DLMB.wb_dlmb_valid_read_data_reg[18] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[19] (\Use_DLMB.wb_dlmb_valid_read_data_reg[19] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[20] (\Use_DLMB.wb_dlmb_valid_read_data_reg[20] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[21] (\Use_DLMB.wb_dlmb_valid_read_data_reg[21] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[22] (\Use_DLMB.wb_dlmb_valid_read_data_reg[22] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[23] (\Use_DLMB.wb_dlmb_valid_read_data_reg[23] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[24] (\Use_DLMB.wb_dlmb_valid_read_data_reg[24] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[25] (\Use_DLMB.wb_dlmb_valid_read_data_reg[25] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[26] (\Use_DLMB.wb_dlmb_valid_read_data_reg[26] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[27] (\Use_DLMB.wb_dlmb_valid_read_data_reg[27] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[28] (\Use_DLMB.wb_dlmb_valid_read_data_reg[28] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[29] (\Use_DLMB.wb_dlmb_valid_read_data_reg[29] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[30] (\Use_DLMB.wb_dlmb_valid_read_data_reg[30] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[31] (\Use_DLMB.wb_dlmb_valid_read_data_reg[31] ),
        .\Using_FPGA.Native ({\WB_MEM_Result_reg[0] [13:2],\WB_MEM_Result_reg[0] [0]}),
        .\data_rd_reg_reg[16] (\data_rd_reg_reg[16] ),
        .\data_rd_reg_reg[17] (\data_rd_reg_reg[17] ),
        .\data_rd_reg_reg[18] (\data_rd_reg_reg[18] ),
        .\data_rd_reg_reg[19] (\data_rd_reg_reg[19] ),
        .\data_rd_reg_reg[20] (\data_rd_reg_reg[20] ),
        .\data_rd_reg_reg[21] (\data_rd_reg_reg[21] ),
        .\data_rd_reg_reg[22] (\data_rd_reg_reg[22] ),
        .\data_rd_reg_reg[23] (\data_rd_reg_reg[23] ),
        .\data_rd_reg_reg[24] (\data_rd_reg_reg[24] ),
        .\data_rd_reg_reg[25] (\data_rd_reg_reg[25] ),
        .\data_rd_reg_reg[26] (\data_rd_reg_reg[26] ),
        .\data_rd_reg_reg[27] (\data_rd_reg_reg[27] ),
        .\data_rd_reg_reg[28] (\data_rd_reg_reg[28] ),
        .\data_rd_reg_reg[29] (\data_rd_reg_reg[29] ),
        .\data_rd_reg_reg[30] (\data_rd_reg_reg[30] ),
        .\data_rd_reg_reg[31] (\data_rd_reg_reg[31] ),
        .\mem_pc_i_reg[0] (\mem_pc_i_reg[0] ),
        .mem_valid_reg(mem_valid_reg),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .\wb_MSR_i_reg[28] (\Data_Addr[0] [18:17]),
        .\wb_MSR_i_reg[30] (\Data_Addr[0] [16]),
        .wb_byte_access(wb_byte_access),
        .wb_exception_i_reg(wb_exception_i_reg),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ),
        .\wb_exception_kind_i_reg[28]_0 (\wb_exception_kind_i_reg[28]_0 ),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_1_sel_reg[0] (\wb_read_lsb_1_sel_reg[0] ),
        .\wb_read_lsb_1_sel_reg[0]_0 (\wb_read_lsb_1_sel_reg[0]_0 ),
        .\wb_read_lsb_1_sel_reg[0]_1 (\wb_read_lsb_1_sel_reg[0]_1 ),
        .\wb_read_lsb_1_sel_reg[0]_2 (\wb_read_lsb_1_sel_reg[0]_2 ),
        .\wb_read_lsb_1_sel_reg[0]_3 (\wb_read_lsb_1_sel_reg[0]_3 ),
        .\wb_read_lsb_1_sel_reg[0]_4 (\wb_read_lsb_1_sel_reg[0]_4 ),
        .\wb_read_lsb_1_sel_reg[0]_5 (\wb_read_lsb_1_sel_reg[0]_5 ),
        .\wb_read_lsb_1_sel_reg[0]_6 (\wb_read_lsb_1_sel_reg[0]_6 ),
        .\wb_read_lsb_sel_reg[1] (Byte_Doublet_Handle_gti_I_n_40));
  system_microblaze_0_0_msr_reg_gti msr_reg_i
       (.Clk(Clk),
        .D({\WB_MEM_Result_reg[0]_0 [2],MEM_Fwd,\WB_MEM_Result_reg[0]_0 [1:0]}),
        .Dbg_Disable(Dbg_Disable),
        .Interrupt(Interrupt),
        .\LOCKSTEP_Out_reg[3757] (\Data_Addr[0] [18:17]),
        .\LOCKSTEP_Out_reg[3759] (\Data_Addr[0] [16]),
        .\Using_FPGA.Native (\Using_FPGA.Native_69 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_70 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_71 ),
        .\Using_FPGA.Native_2 ({\WB_MEM_Result_reg[0] [29],\WB_MEM_Result_reg[0] [1]}),
        .\Using_Fast_Interrupt.wb_ie_rising_reg (\Using_Fast_Interrupt.wb_ie_rising_reg ),
        .\WB_MEM_Result_reg[28] (wb_MSR_cmb),
        .\WB_MEM_Result_reg[29] (\WB_MEM_Result_reg[29] ),
        .\control_reg_reg[3] (\control_reg_reg[3] ),
        .ex_Interrupt_Brk_combo_reg(ex_Interrupt_Brk_combo_reg),
        .ex_MSR(ex_MSR),
        .ex_set_MSR_IE_instr_reg(ex_set_MSR_IE_instr_reg),
        .ex_set_MSR_IE_instr_reg_0(ex_set_MSR_IE_instr_reg_0),
        .mem_ex_result({mem_ex_result[29],mem_ex_result[30]}),
        .mem_sel_msr(mem_sel_msr),
        .mem_valid_reg(mem_valid_reg),
        .of_MSR(of_MSR),
        .of_Take_Interrupt(of_Take_Interrupt),
        .out(out),
        .restore_wb_msr_to_ex(restore_wb_msr_to_ex),
        .wb_piperun(wb_piperun));
endmodule

(* ORIG_REF_NAME = "Debug" *) 
module system_microblaze_0_0_Debug
   (start_dbg_exec_reg_0,
    executing0,
    command_reg_clear_reg_0,
    \Single_Synchronize.use_async_reset.sync_reg ,
    saved_reset_mode_dbg_halt,
    \Performace_Debug_Control.normal_stop_i_reg_0 ,
    \Single_Synchronize.use_async_reset.sync_reg_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg_0 ,
    \instr_read_reg_reg[0]_0 ,
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ,
    \Performace_Debug_Control.watchpoint_brk_hold_reg_0 ,
    dbg_stop_if_delay_i,
    \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ,
    p_36_out,
    \if_pc_reg[29] ,
    IB_Ready,
    Dbg_TDO,
    LOCKSTEP_Master_Out,
    \LOCKSTEP_Out_reg[0] ,
    \Using_FPGA.Native ,
    Q,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    Dbg_Clk,
    Rst18_out,
    Clk,
    \Using_FPGA.Native_0 ,
    \control_reg_reg[8]_0 ,
    wb_Halted,
    Dbg_Update,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    wb_read_imm_reg_1,
    D,
    wb_read_imm_reg,
    dbg_state_i,
    no_sleeping,
    Dbg_Stop,
    Dbg_Capture,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    exception_reg_0,
    wb_valid_reg,
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ,
    \Performace_Debug_Control.ex_watchpoint_brk_reg_1 ,
    Dbg_Disable,
    wb_gpr_wr_dbg,
    Scan_Reset,
    Scan_Reset_Sel,
    out,
    Reset_Mode,
    wb_pc_valid,
    IReady,
    Sleep_Decode,
    \Dbg_Reg_En_2__s_port_] ,
    \Dbg_Reg_En[2]_0 ,
    Dbg_Reg_En,
    \Dbg_Reg_En[2]_1 ,
    dbg_clean_stop,
    Wakeup,
    ex_branch_with_delayslot_reg,
    ex_Exception_Taken,
    mem_Exception_Taken,
    MEM_DataBus_Access_reg,
    Dbg_Shift,
    mem_valid_reg,
    Dbg_TDI,
    Address,
    \Using_FPGA.Native_1 ,
    wb_gpr_write_dbg_reg,
    wb_gpr_write_dbg_reg_0,
    wb_gpr_write_dbg_reg_1,
    wb_gpr_write_dbg_reg_2,
    wb_gpr_write_dbg_reg_3,
    wb_gpr_write_dbg_reg_4,
    wb_gpr_write_dbg_reg_5,
    wb_gpr_write_dbg_reg_6,
    wb_gpr_write_dbg_reg_7,
    wb_gpr_write_dbg_reg_8,
    wb_gpr_write_dbg_reg_9,
    wb_gpr_write_dbg_reg_10,
    wb_gpr_write_dbg_reg_11,
    wb_gpr_write_dbg_reg_12,
    wb_gpr_write_dbg_reg_13,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    dbg_stop_i);
  output start_dbg_exec_reg_0;
  output executing0;
  output command_reg_clear_reg_0;
  output \Single_Synchronize.use_async_reset.sync_reg ;
  output saved_reset_mode_dbg_halt;
  output \Performace_Debug_Control.normal_stop_i_reg_0 ;
  output \Single_Synchronize.use_async_reset.sync_reg_0 ;
  output \Performace_Debug_Control.dbg_freeze_nohalt_reg_0 ;
  output [1:0]\instr_read_reg_reg[0]_0 ;
  output \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  output \Performace_Debug_Control.watchpoint_brk_hold_reg_0 ;
  output dbg_stop_if_delay_i;
  output \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ;
  output p_36_out;
  output \if_pc_reg[29] ;
  output IB_Ready;
  output Dbg_TDO;
  output [41:0]LOCKSTEP_Master_Out;
  output [0:0]\LOCKSTEP_Out_reg[0] ;
  output \Using_FPGA.Native ;
  output [1:0]Q;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  input Dbg_Clk;
  input Rst18_out;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \control_reg_reg[8]_0 ;
  input wb_Halted;
  input Dbg_Update;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input wb_read_imm_reg_1;
  input [33:0]D;
  input wb_read_imm_reg;
  input dbg_state_i;
  input no_sleeping;
  input Dbg_Stop;
  input Dbg_Capture;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input exception_reg_0;
  input wb_valid_reg;
  input \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ;
  input \Performace_Debug_Control.ex_watchpoint_brk_reg_1 ;
  input Dbg_Disable;
  input wb_gpr_wr_dbg;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input [0:0]out;
  input [0:1]Reset_Mode;
  input wb_pc_valid;
  input IReady;
  input Sleep_Decode;
  input \Dbg_Reg_En_2__s_port_] ;
  input \Dbg_Reg_En[2]_0 ;
  input [0:7]Dbg_Reg_En;
  input \Dbg_Reg_En[2]_1 ;
  input dbg_clean_stop;
  input [0:1]Wakeup;
  input ex_branch_with_delayslot_reg;
  input ex_Exception_Taken;
  input mem_Exception_Taken;
  input [0:0]MEM_DataBus_Access_reg;
  input Dbg_Shift;
  input mem_valid_reg;
  input Dbg_TDI;
  input [0:31]Address;
  input \Using_FPGA.Native_1 ;
  input wb_gpr_write_dbg_reg;
  input wb_gpr_write_dbg_reg_0;
  input wb_gpr_write_dbg_reg_1;
  input wb_gpr_write_dbg_reg_2;
  input wb_gpr_write_dbg_reg_3;
  input wb_gpr_write_dbg_reg_4;
  input wb_gpr_write_dbg_reg_5;
  input wb_gpr_write_dbg_reg_6;
  input wb_gpr_write_dbg_reg_7;
  input wb_gpr_write_dbg_reg_8;
  input wb_gpr_write_dbg_reg_9;
  input wb_gpr_write_dbg_reg_10;
  input wb_gpr_write_dbg_reg_11;
  input wb_gpr_write_dbg_reg_12;
  input wb_gpr_write_dbg_reg_13;
  input \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input dbg_stop_i;

  wire A1;
  wire A2;
  wire A3;
  wire [0:31]Address;
  wire Clk;
  wire Command_Reg_En;
  wire Control_Reg_En;
  wire [33:0]D;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire [0:7]Dbg_Reg_En;
  wire \Dbg_Reg_En[2]_0 ;
  wire \Dbg_Reg_En[2]_1 ;
  wire Dbg_Reg_En_2__s_net_1;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_10_n_0;
  wire Dbg_TDO_INST_0_i_11_n_0;
  wire Dbg_TDO_INST_0_i_13_n_0;
  wire Dbg_TDO_INST_0_i_14_n_0;
  wire Dbg_TDO_INST_0_i_15_n_0;
  wire Dbg_TDO_INST_0_i_16_n_0;
  wire Dbg_TDO_INST_0_i_17_n_0;
  wire Dbg_TDO_INST_0_i_19_n_0;
  wire Dbg_TDO_INST_0_i_20_n_0;
  wire Dbg_TDO_INST_0_i_21_n_0;
  wire Dbg_TDO_INST_0_i_22_n_0;
  wire Dbg_TDO_INST_0_i_23_n_0;
  wire Dbg_TDO_INST_0_i_24_n_0;
  wire Dbg_TDO_INST_0_i_25_n_0;
  wire Dbg_TDO_INST_0_i_26_n_0;
  wire Dbg_TDO_INST_0_i_27_n_0;
  wire Dbg_TDO_INST_0_i_28_n_0;
  wire Dbg_TDO_INST_0_i_29_n_0;
  wire Dbg_TDO_INST_0_i_2_n_0;
  wire Dbg_TDO_INST_0_i_30_n_0;
  wire Dbg_TDO_INST_0_i_31_n_0;
  wire Dbg_TDO_INST_0_i_32_n_0;
  wire Dbg_TDO_INST_0_i_33_n_0;
  wire Dbg_TDO_INST_0_i_34_n_0;
  wire Dbg_TDO_INST_0_i_35_n_0;
  wire Dbg_TDO_INST_0_i_36_n_0;
  wire Dbg_TDO_INST_0_i_37_n_0;
  wire Dbg_TDO_INST_0_i_38_n_0;
  wire Dbg_TDO_INST_0_i_3_n_0;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Full_32_bit;
  wire Full_32_bit_1;
  wire IB_Ready;
  wire IReady;
  wire Instr_Insert_Reg_En;
  wire Instr_Insert_Reg_En_1;
  wire Instr_Insert_Reg_En_1_i_2_n_0;
  wire [41:0]LOCKSTEP_Master_Out;
  wire [0:0]\LOCKSTEP_Out_reg[0] ;
  wire [0:0]MEM_DataBus_Access_reg;
  wire New_Dbg_Instr2_TCK;
  wire New_Dbg_Instr_TCK;
  wire New_Dbg_Instr_TCK_i_1_n_0;
  wire \New_Instr_Reg_TCK[0]_i_1_n_0 ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_i_1_n_0 ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_i_2_n_0 ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg_0 ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[10] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[11] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[12] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[13] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[14] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[15] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[1] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[2] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[3] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[4] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[5] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[6] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[7] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[8] ;
  wire \Performace_Debug_Control.dbg_hit_reg_n_0_[9] ;
  wire \Performace_Debug_Control.dbg_state_nohalt_i_1_n_0 ;
  wire \Performace_Debug_Control.dbg_state_nohalt_i_3_n_0 ;
  wire \Performace_Debug_Control.dbg_state_nohalt_i_5_n_0 ;
  wire \Performace_Debug_Control.dbg_stop_i_reg_n_0 ;
  wire \Performace_Debug_Control.dbg_stop_if_delay_i_i_1_n_0 ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_1_n_0 ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_2_n_0 ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_3_n_0 ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_4_n_0 ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ;
  wire \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ;
  wire \Performace_Debug_Control.ex_watchpoint_brk_reg_1 ;
  wire \Performace_Debug_Control.force_stop_i_i_1_n_0 ;
  wire \Performace_Debug_Control.mem_brki_hit_i_1_n_0 ;
  wire \Performace_Debug_Control.mem_dbg_hit[0]_i_1_n_0 ;
  wire \Performace_Debug_Control.mem_dbg_hit[0]_i_2_n_0 ;
  wire \Performace_Debug_Control.mem_dbg_hit_reg_n_0_[0] ;
  wire \Performace_Debug_Control.normal_stop_i_i_1_n_0 ;
  wire \Performace_Debug_Control.normal_stop_i_reg_0 ;
  wire \Performace_Debug_Control.step_continue_hold_i_1_n_0 ;
  wire \Performace_Debug_Control.watchpoint_brk_hold_i_1_n_0 ;
  wire \Performace_Debug_Control.watchpoint_brk_hold_reg_0 ;
  wire \Performace_Debug_Control.watchpoint_brk_hold_reg_n_0 ;
  wire \Performace_Debug_Control.wb_brki_hit_i_1_n_0 ;
  wire \Performace_Debug_Control.wb_dbg_hit[0]_i_1_n_0 ;
  wire [1:0]Q;
  wire Q0_in;
  wire Q0_out;
  wire Q11_in;
  wire Q2_in;
  wire Q2_out;
  wire Q3_in;
  wire Q3_out;
  wire Q4_out;
  wire Q6_out;
  wire Q_0;
  wire Raw;
  wire [0:1]Reset_Mode;
  wire Rst18_out;
  wire SRL16E_4_n_0;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Single_Synchronize.use_async_reset.sync_reg ;
  wire \Single_Synchronize.use_async_reset.sync_reg_0 ;
  wire Sleep_Decode;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire \Synchronize.use_sync_reset.sync_reg[2]_0 ;
  wire TDO_Data_Reg;
  wire \The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_PC_Breakpoints.All_PC_Brks[0].address_hit_I_n_1 ;
  wire \Using_PC_Breakpoints.All_PC_Brks[0].address_hit_I_n_2 ;
  wire [0:1]Wakeup;
  wire capture_1;
  wire [0:1]command_reg;
  wire \command_reg[0]_i_3_n_0 ;
  wire command_reg_clear;
  wire command_reg_clear_i_1_n_0;
  wire command_reg_clear_reg_0;
  wire command_reg_rst;
  wire continue_from_brk0;
  wire continue_from_brk_TClk;
  wire continue_from_brk_reg_n_0;
  wire continue_from_brk_rst;
  wire \control_reg_reg[8]_0 ;
  wire \control_reg_reg_n_0_[0] ;
  wire \control_reg_reg_n_0_[4] ;
  wire \control_reg_reg_n_0_[5] ;
  wire \data_rd_reg[0]_i_1_n_0 ;
  wire \data_rd_reg[0]_i_2_n_0 ;
  wire \data_rd_reg[10]_i_1_n_0 ;
  wire \data_rd_reg[11]_i_1_n_0 ;
  wire \data_rd_reg[12]_i_1_n_0 ;
  wire \data_rd_reg[13]_i_1_n_0 ;
  wire \data_rd_reg[14]_i_1_n_0 ;
  wire \data_rd_reg[15]_i_1_n_0 ;
  wire \data_rd_reg[1]_i_1_n_0 ;
  wire \data_rd_reg[2]_i_1_n_0 ;
  wire \data_rd_reg[32]_i_1_n_0 ;
  wire \data_rd_reg[32]_i_2_n_0 ;
  wire \data_rd_reg[32]_i_3_n_0 ;
  wire \data_rd_reg[3]_i_1_n_0 ;
  wire \data_rd_reg[4]_i_1_n_0 ;
  wire \data_rd_reg[5]_i_1_n_0 ;
  wire \data_rd_reg[6]_i_1_n_0 ;
  wire \data_rd_reg[7]_i_1_n_0 ;
  wire \data_rd_reg[8]_i_1_n_0 ;
  wire \data_rd_reg[9]_i_1_n_0 ;
  wire \data_rd_reg_reg_n_0_[0] ;
  wire \data_rd_reg_reg_n_0_[10] ;
  wire \data_rd_reg_reg_n_0_[11] ;
  wire \data_rd_reg_reg_n_0_[12] ;
  wire \data_rd_reg_reg_n_0_[13] ;
  wire \data_rd_reg_reg_n_0_[14] ;
  wire \data_rd_reg_reg_n_0_[15] ;
  wire \data_rd_reg_reg_n_0_[16] ;
  wire \data_rd_reg_reg_n_0_[17] ;
  wire \data_rd_reg_reg_n_0_[18] ;
  wire \data_rd_reg_reg_n_0_[19] ;
  wire \data_rd_reg_reg_n_0_[1] ;
  wire \data_rd_reg_reg_n_0_[20] ;
  wire \data_rd_reg_reg_n_0_[21] ;
  wire \data_rd_reg_reg_n_0_[22] ;
  wire \data_rd_reg_reg_n_0_[23] ;
  wire \data_rd_reg_reg_n_0_[24] ;
  wire \data_rd_reg_reg_n_0_[25] ;
  wire \data_rd_reg_reg_n_0_[26] ;
  wire \data_rd_reg_reg_n_0_[27] ;
  wire \data_rd_reg_reg_n_0_[28] ;
  wire \data_rd_reg_reg_n_0_[29] ;
  wire \data_rd_reg_reg_n_0_[2] ;
  wire \data_rd_reg_reg_n_0_[30] ;
  wire \data_rd_reg_reg_n_0_[31] ;
  wire \data_rd_reg_reg_n_0_[32] ;
  wire \data_rd_reg_reg_n_0_[3] ;
  wire \data_rd_reg_reg_n_0_[4] ;
  wire \data_rd_reg_reg_n_0_[5] ;
  wire \data_rd_reg_reg_n_0_[6] ;
  wire \data_rd_reg_reg_n_0_[7] ;
  wire \data_rd_reg_reg_n_0_[8] ;
  wire \data_rd_reg_reg_n_0_[9] ;
  wire [0:32]data_read_reg;
  wire dbg_brki_hit;
  wire dbg_brki_hit_synced;
  wire dbg_clean_stop;
  wire dbg_freeze_nohalt0_in;
  wire dbg_halt_reset_mode_i_1_n_0;
  wire dbg_halt_reset_mode_reg_n_0;
  wire dbg_state_i;
  wire dbg_stop_1;
  wire dbg_stop_i;
  wire dbg_stop_if_delay_i;
  wire dbg_wakeup_i;
  wire delay_slot_instr;
  wire ex_Exception_Taken;
  wire ex_branch_with_delayslot_reg;
  wire ex_brki_hit;
  wire ex_pc_brk;
  wire ex_step_continue_hold;
  wire ex_watchpoint_brk_hold;
  wire exception_reg_0;
  wire executing0;
  wire force_stop_TClk;
  wire force_stop_cmd_1;
  wire force_stop_cmd_i0;
  wire force_stop_cmd_i_reg_n_0;
  wire force_stop_cmd_rst;
  wire force_stop_i;
  wire if_debug_ready_i0;
  wire \if_pc_reg[29] ;
  wire [0:1]instr_read_reg;
  wire [1:0]\instr_read_reg_reg[0]_0 ;
  wire mb_halted_1;
  wire mem_Exception_Taken;
  wire mem_brki_hit;
  wire mem_valid_reg;
  wire new_dbg_instr_shifting_CLK_reg_n_0;
  wire no_sleeping;
  wire normal_stop_TClk;
  wire normal_stop_TClk_i_3_n_0;
  wire normal_stop_cmd_1;
  wire normal_stop_cmd_i0;
  wire normal_stop_cmd_i_reg_n_0;
  wire normal_stop_cmd_rst;
  wire normal_stop_i;
  wire [0:0]out;
  wire p_0_in;
  wire p_0_in59_in;
  wire p_36_out;
  wire p_4_out;
  wire read_register_MSR;
  wire read_register_MSR0;
  wire read_register_PC;
  wire read_register_PC0;
  wire read_register_PC_1_reg_n_0;
  wire reset_mode_sleep;
  wire running_clock;
  wire running_clock_rst;
  wire running_clock_synced;
  wire [0:8]sample_synced;
  wire \sample_synced_1_reg_n_0_[0] ;
  wire \sample_synced_1_reg_n_0_[1] ;
  wire \sample_synced_1_reg_n_0_[2] ;
  wire \sample_synced_1_reg_n_0_[3] ;
  wire \sample_synced_1_reg_n_0_[4] ;
  wire \sample_synced_1_reg_n_0_[6] ;
  wire \sample_synced_1_reg_n_0_[8] ;
  wire saved_reset_mode_dbg_halt;
  wire saved_reset_mode_sleep;
  wire saved_reset_mode_sleep_i_1_n_0;
  wire [0:0]sel0;
  wire [3:1]sel0__0;
  wire \shift_count[0]_i_1_n_0 ;
  wire \shift_count[1]_i_1_n_0 ;
  wire \shift_count[2]_i_1_n_0 ;
  wire \shift_count[3]_i_1_n_0 ;
  wire \shift_count[4]_i_1_n_0 ;
  wire \shift_count[5]_i_1_n_0 ;
  wire \shift_count[5]_i_2_n_0 ;
  wire \shift_count[6]_i_1_n_0 ;
  wire \shift_count[7]_i_1_n_0 ;
  wire \shift_count[7]_i_2_n_0 ;
  wire \shift_count_reg_n_0_[0] ;
  wire \shift_datain_reg_n_0_[10] ;
  wire \shift_datain_reg_n_0_[11] ;
  wire \shift_datain_reg_n_0_[12] ;
  wire \shift_datain_reg_n_0_[13] ;
  wire \shift_datain_reg_n_0_[14] ;
  wire \shift_datain_reg_n_0_[15] ;
  wire \shift_datain_reg_n_0_[16] ;
  wire \shift_datain_reg_n_0_[17] ;
  wire \shift_datain_reg_n_0_[18] ;
  wire \shift_datain_reg_n_0_[19] ;
  wire \shift_datain_reg_n_0_[1] ;
  wire \shift_datain_reg_n_0_[20] ;
  wire \shift_datain_reg_n_0_[21] ;
  wire \shift_datain_reg_n_0_[22] ;
  wire \shift_datain_reg_n_0_[23] ;
  wire \shift_datain_reg_n_0_[24] ;
  wire \shift_datain_reg_n_0_[25] ;
  wire \shift_datain_reg_n_0_[26] ;
  wire \shift_datain_reg_n_0_[27] ;
  wire \shift_datain_reg_n_0_[28] ;
  wire \shift_datain_reg_n_0_[29] ;
  wire \shift_datain_reg_n_0_[2] ;
  wire \shift_datain_reg_n_0_[30] ;
  wire \shift_datain_reg_n_0_[31] ;
  wire \shift_datain_reg_n_0_[3] ;
  wire \shift_datain_reg_n_0_[4] ;
  wire \shift_datain_reg_n_0_[5] ;
  wire \shift_datain_reg_n_0_[6] ;
  wire \shift_datain_reg_n_0_[7] ;
  wire \shift_datain_reg_n_0_[8] ;
  wire \shift_datain_reg_n_0_[9] ;
  wire single_Step_N;
  wire single_Step_N_i_1_n_0;
  wire single_Step_TClk;
  wire [0:1]single_step_count;
  wire \single_step_count[0]_i_1_n_0 ;
  wire \single_step_count[1]_i_1_n_0 ;
  wire sleep_reset_mode_i_1_n_0;
  wire sleep_synced;
  wire stack_violation_occurence_synced;
  wire start_dbg_exec_reg_0;
  wire start_single_cmd;
  wire start_single_cmd0;
  wire start_single_step_i_1_n_0;
  wire start_single_step_reg_n_0;
  wire start_single_step_rst;
  wire \status_reg_reg_n_0_[0] ;
  wire \status_reg_reg_n_0_[10] ;
  wire \status_reg_reg_n_0_[11] ;
  wire \status_reg_reg_n_0_[12] ;
  wire \status_reg_reg_n_0_[13] ;
  wire \status_reg_reg_n_0_[14] ;
  wire \status_reg_reg_n_0_[15] ;
  wire \status_reg_reg_n_0_[16] ;
  wire \status_reg_reg_n_0_[17] ;
  wire \status_reg_reg_n_0_[18] ;
  wire \status_reg_reg_n_0_[19] ;
  wire \status_reg_reg_n_0_[1] ;
  wire \status_reg_reg_n_0_[20] ;
  wire \status_reg_reg_n_0_[21] ;
  wire \status_reg_reg_n_0_[22] ;
  wire \status_reg_reg_n_0_[23] ;
  wire \status_reg_reg_n_0_[24] ;
  wire \status_reg_reg_n_0_[25] ;
  wire \status_reg_reg_n_0_[26] ;
  wire \status_reg_reg_n_0_[27] ;
  wire \status_reg_reg_n_0_[2] ;
  wire \status_reg_reg_n_0_[3] ;
  wire \status_reg_reg_n_0_[4] ;
  wire \status_reg_reg_n_0_[5] ;
  wire \status_reg_reg_n_0_[6] ;
  wire \status_reg_reg_n_0_[7] ;
  wire \status_reg_reg_n_0_[8] ;
  wire \status_reg_reg_n_0_[9] ;
  wire step_continue;
  wire step_continue_hold;
  wire sync;
  wire sync_dbg_hit_n_1;
  wire sync_dbg_hit_n_10;
  wire sync_dbg_hit_n_11;
  wire sync_dbg_hit_n_12;
  wire sync_dbg_hit_n_13;
  wire sync_dbg_hit_n_14;
  wire sync_dbg_hit_n_15;
  wire sync_dbg_hit_n_2;
  wire sync_dbg_hit_n_3;
  wire sync_dbg_hit_n_4;
  wire sync_dbg_hit_n_5;
  wire sync_dbg_hit_n_6;
  wire sync_dbg_hit_n_7;
  wire sync_dbg_hit_n_8;
  wire sync_dbg_hit_n_9;
  wire sync_sample_n_16;
  wire sync_sample_n_17;
  wire sync_stop_CPU_n_0;
  wire sync_trig_ack_in_0_n_1;
  wire sync_trig_out_0_n_1;
  wire sync_trig_out_0_n_2;
  wire tdo_config_word1_0;
  wire trig_ack_in_0_synced;
  wire trig_ack_in_0_synced_1;
  wire trig_out_0_synced;
  wire trig_out_0_synced_1;
  wire wb_Halted;
  wire wb_brki_hit;
  wire wb_dbg_hit;
  wire wb_gpr_wr_dbg;
  wire wb_gpr_write_dbg_reg;
  wire wb_gpr_write_dbg_reg_0;
  wire wb_gpr_write_dbg_reg_1;
  wire wb_gpr_write_dbg_reg_10;
  wire wb_gpr_write_dbg_reg_11;
  wire wb_gpr_write_dbg_reg_12;
  wire wb_gpr_write_dbg_reg_13;
  wire wb_gpr_write_dbg_reg_2;
  wire wb_gpr_write_dbg_reg_3;
  wire wb_gpr_write_dbg_reg_4;
  wire wb_gpr_write_dbg_reg_5;
  wire wb_gpr_write_dbg_reg_6;
  wire wb_gpr_write_dbg_reg_7;
  wire wb_gpr_write_dbg_reg_8;
  wire wb_gpr_write_dbg_reg_9;
  wire wb_pc_valid;
  wire wb_read_imm_reg;
  wire wb_read_imm_reg_1;
  wire wb_valid_reg;

  assign Dbg_Reg_En_2__s_net_1 = \Dbg_Reg_En_2__s_port_] ;
  LUT6 #(
    .INIT(64'hFACFFAC00ACF0AC0)) 
    Dbg_TDO_INST_0_i_10
       (.I0(Dbg_TDO_INST_0_i_19_n_0),
        .I1(Dbg_TDO_INST_0_i_20_n_0),
        .I2(A2),
        .I3(A3),
        .I4(Dbg_TDO_INST_0_i_21_n_0),
        .I5(Dbg_TDO_INST_0_i_22_n_0),
        .O(Dbg_TDO_INST_0_i_10_n_0));
  LUT6 #(
    .INIT(64'hFAABFFABFAFBFFFB)) 
    Dbg_TDO_INST_0_i_11
       (.I0(sel0),
        .I1(Dbg_TDO_INST_0_i_23_n_0),
        .I2(A3),
        .I3(A2),
        .I4(Dbg_TDO_INST_0_i_24_n_0),
        .I5(Dbg_TDO_INST_0_i_25_n_0),
        .O(Dbg_TDO_INST_0_i_11_n_0));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'hA280)) 
    Dbg_TDO_INST_0_i_13
       (.I0(Instr_Insert_Reg_En),
        .I1(\shift_count_reg_n_0_[0] ),
        .I2(instr_read_reg[1]),
        .I3(instr_read_reg[0]),
        .O(Dbg_TDO_INST_0_i_13_n_0));
  LUT6 #(
    .INIT(64'hFFFF01FEFE010000)) 
    Dbg_TDO_INST_0_i_14
       (.I0(A2),
        .I1(A1),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A3),
        .I4(Dbg_TDO_INST_0_i_26_n_0),
        .I5(Dbg_TDO_INST_0_i_27_n_0),
        .O(Dbg_TDO_INST_0_i_14_n_0));
  LUT6 #(
    .INIT(64'hFFFF01FEFE010000)) 
    Dbg_TDO_INST_0_i_15
       (.I0(A2),
        .I1(A1),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A3),
        .I4(Dbg_TDO_INST_0_i_28_n_0),
        .I5(Dbg_TDO_INST_0_i_29_n_0),
        .O(Dbg_TDO_INST_0_i_15_n_0));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    Dbg_TDO_INST_0_i_16
       (.I0(A2),
        .I1(A1),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A3),
        .O(Dbg_TDO_INST_0_i_16_n_0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    Dbg_TDO_INST_0_i_17
       (.I0(data_read_reg[0]),
        .I1(sel0),
        .I2(A2),
        .I3(A1),
        .I4(\shift_count_reg_n_0_[0] ),
        .I5(A3),
        .O(Dbg_TDO_INST_0_i_17_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_19
       (.I0(\status_reg_reg_n_0_[27] ),
        .I1(\status_reg_reg_n_0_[26] ),
        .I2(A1),
        .I3(\status_reg_reg_n_0_[25] ),
        .I4(\shift_count_reg_n_0_[0] ),
        .I5(\status_reg_reg_n_0_[24] ),
        .O(Dbg_TDO_INST_0_i_19_n_0));
  LUT6 #(
    .INIT(64'hEBBBFFFFAAAAAAAA)) 
    Dbg_TDO_INST_0_i_2
       (.I0(Dbg_Reg_En[5]),
        .I1(sel0),
        .I2(A2),
        .I3(A3),
        .I4(Dbg_TDO_INST_0_i_10_n_0),
        .I5(Dbg_TDO_INST_0_i_11_n_0),
        .O(Dbg_TDO_INST_0_i_2_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_20
       (.I0(\status_reg_reg_n_0_[23] ),
        .I1(\status_reg_reg_n_0_[22] ),
        .I2(A1),
        .I3(\status_reg_reg_n_0_[21] ),
        .I4(\shift_count_reg_n_0_[0] ),
        .I5(\status_reg_reg_n_0_[20] ),
        .O(Dbg_TDO_INST_0_i_20_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_21
       (.I0(\status_reg_reg_n_0_[19] ),
        .I1(\status_reg_reg_n_0_[18] ),
        .I2(A1),
        .I3(\status_reg_reg_n_0_[17] ),
        .I4(\shift_count_reg_n_0_[0] ),
        .I5(\status_reg_reg_n_0_[16] ),
        .O(Dbg_TDO_INST_0_i_21_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_22
       (.I0(\status_reg_reg_n_0_[15] ),
        .I1(\status_reg_reg_n_0_[14] ),
        .I2(A1),
        .I3(\status_reg_reg_n_0_[13] ),
        .I4(\shift_count_reg_n_0_[0] ),
        .I5(\status_reg_reg_n_0_[12] ),
        .O(Dbg_TDO_INST_0_i_22_n_0));
  LUT6 #(
    .INIT(64'hF0FFF000AACCAACC)) 
    Dbg_TDO_INST_0_i_23
       (.I0(\status_reg_reg_n_0_[1] ),
        .I1(\status_reg_reg_n_0_[0] ),
        .I2(\status_reg_reg_n_0_[3] ),
        .I3(\shift_count_reg_n_0_[0] ),
        .I4(\status_reg_reg_n_0_[2] ),
        .I5(A1),
        .O(Dbg_TDO_INST_0_i_23_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_24
       (.I0(\status_reg_reg_n_0_[7] ),
        .I1(\status_reg_reg_n_0_[6] ),
        .I2(A1),
        .I3(\status_reg_reg_n_0_[5] ),
        .I4(\shift_count_reg_n_0_[0] ),
        .I5(\status_reg_reg_n_0_[4] ),
        .O(Dbg_TDO_INST_0_i_24_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_25
       (.I0(\status_reg_reg_n_0_[11] ),
        .I1(\status_reg_reg_n_0_[10] ),
        .I2(A1),
        .I3(\status_reg_reg_n_0_[9] ),
        .I4(\shift_count_reg_n_0_[0] ),
        .I5(\status_reg_reg_n_0_[8] ),
        .O(Dbg_TDO_INST_0_i_25_n_0));
  MUXF7 Dbg_TDO_INST_0_i_26
       (.I0(Dbg_TDO_INST_0_i_31_n_0),
        .I1(Dbg_TDO_INST_0_i_32_n_0),
        .O(Dbg_TDO_INST_0_i_26_n_0),
        .S(Dbg_TDO_INST_0_i_30_n_0));
  MUXF7 Dbg_TDO_INST_0_i_27
       (.I0(Dbg_TDO_INST_0_i_33_n_0),
        .I1(Dbg_TDO_INST_0_i_34_n_0),
        .O(Dbg_TDO_INST_0_i_27_n_0),
        .S(Dbg_TDO_INST_0_i_30_n_0));
  MUXF7 Dbg_TDO_INST_0_i_28
       (.I0(Dbg_TDO_INST_0_i_35_n_0),
        .I1(Dbg_TDO_INST_0_i_36_n_0),
        .O(Dbg_TDO_INST_0_i_28_n_0),
        .S(Dbg_TDO_INST_0_i_30_n_0));
  MUXF7 Dbg_TDO_INST_0_i_29
       (.I0(Dbg_TDO_INST_0_i_37_n_0),
        .I1(Dbg_TDO_INST_0_i_38_n_0),
        .O(Dbg_TDO_INST_0_i_29_n_0),
        .S(Dbg_TDO_INST_0_i_30_n_0));
  LUT4 #(
    .INIT(16'h8F0F)) 
    Dbg_TDO_INST_0_i_3
       (.I0(\Dbg_Reg_En[2]_1 ),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_TDO_INST_0_i_13_n_0),
        .I3(Dbg_Reg_En[5]),
        .O(Dbg_TDO_INST_0_i_3_n_0));
  LUT3 #(
    .INIT(8'h1E)) 
    Dbg_TDO_INST_0_i_30
       (.I0(\shift_count_reg_n_0_[0] ),
        .I1(A1),
        .I2(A2),
        .O(Dbg_TDO_INST_0_i_30_n_0));
  LUT6 #(
    .INIT(64'hFACFFAC00ACF0AC0)) 
    Dbg_TDO_INST_0_i_31
       (.I0(data_read_reg[14]),
        .I1(data_read_reg[13]),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[16]),
        .I5(data_read_reg[15]),
        .O(Dbg_TDO_INST_0_i_31_n_0));
  LUT6 #(
    .INIT(64'hFACFFAC00ACF0AC0)) 
    Dbg_TDO_INST_0_i_32
       (.I0(data_read_reg[10]),
        .I1(data_read_reg[9]),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[12]),
        .I5(data_read_reg[11]),
        .O(Dbg_TDO_INST_0_i_32_n_0));
  LUT6 #(
    .INIT(64'hFACFFAC00ACF0AC0)) 
    Dbg_TDO_INST_0_i_33
       (.I0(data_read_reg[6]),
        .I1(data_read_reg[5]),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[8]),
        .I5(data_read_reg[7]),
        .O(Dbg_TDO_INST_0_i_33_n_0));
  LUT6 #(
    .INIT(64'hFACFFAC00ACF0AC0)) 
    Dbg_TDO_INST_0_i_34
       (.I0(data_read_reg[2]),
        .I1(data_read_reg[1]),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[4]),
        .I5(data_read_reg[3]),
        .O(Dbg_TDO_INST_0_i_34_n_0));
  LUT6 #(
    .INIT(64'hFACFFAC00ACF0AC0)) 
    Dbg_TDO_INST_0_i_35
       (.I0(data_read_reg[30]),
        .I1(data_read_reg[29]),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[32]),
        .I5(data_read_reg[31]),
        .O(Dbg_TDO_INST_0_i_35_n_0));
  LUT6 #(
    .INIT(64'hFACFFAC00ACF0AC0)) 
    Dbg_TDO_INST_0_i_36
       (.I0(data_read_reg[26]),
        .I1(data_read_reg[25]),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[28]),
        .I5(data_read_reg[27]),
        .O(Dbg_TDO_INST_0_i_36_n_0));
  LUT6 #(
    .INIT(64'hFACFFAC00ACF0AC0)) 
    Dbg_TDO_INST_0_i_37
       (.I0(data_read_reg[22]),
        .I1(data_read_reg[21]),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[24]),
        .I5(data_read_reg[23]),
        .O(Dbg_TDO_INST_0_i_37_n_0));
  LUT6 #(
    .INIT(64'hFACFFAC00ACF0AC0)) 
    Dbg_TDO_INST_0_i_38
       (.I0(data_read_reg[18]),
        .I1(data_read_reg[17]),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[20]),
        .I5(data_read_reg[19]),
        .O(Dbg_TDO_INST_0_i_38_n_0));
  LUT6 #(
    .INIT(64'hFCFFAFCA0C00A0CA)) 
    Dbg_TDO_INST_0_i_5
       (.I0(Dbg_TDO_INST_0_i_14_n_0),
        .I1(Dbg_TDO_INST_0_i_15_n_0),
        .I2(sel0),
        .I3(Dbg_TDO_INST_0_i_16_n_0),
        .I4(sel0__0[1]),
        .I5(Dbg_TDO_INST_0_i_17_n_0),
        .O(TDO_Data_Reg));
  FDRE Full_32_bit_1_reg
       (.C(Clk),
        .CE(wb_Halted),
        .D(wb_read_imm_reg_1),
        .Q(Full_32_bit_1),
        .R(Rst18_out));
  FDRE Full_32_bit_reg
       (.C(Clk),
        .CE(wb_Halted),
        .D(wb_read_imm_reg),
        .Q(Full_32_bit),
        .R(Rst18_out));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT5 #(
    .INIT(32'hEEEF2222)) 
    I_AS_INST_0_i_1
       (.I0(start_dbg_exec_reg_0),
        .I1(Dbg_Disable),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg_0 ),
        .I3(wb_Halted),
        .I4(IReady),
        .O(IB_Ready));
  LUT5 #(
    .INIT(32'h00000100)) 
    Instr_Insert_Reg_En_1_i_1
       (.I0(Dbg_Reg_En[2]),
        .I1(Dbg_Reg_En[3]),
        .I2(Dbg_Reg_En[1]),
        .I3(Dbg_Reg_En[5]),
        .I4(Instr_Insert_Reg_En_1_i_2_n_0),
        .O(Instr_Insert_Reg_En));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    Instr_Insert_Reg_En_1_i_2
       (.I0(Dbg_Reg_En[7]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[0]),
        .I3(Dbg_Reg_En[6]),
        .O(Instr_Insert_Reg_En_1_i_2_n_0));
  FDCE #(
    .INIT(1'b0)) 
    Instr_Insert_Reg_En_1_reg
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(Instr_Insert_Reg_En),
        .Q(Instr_Insert_Reg_En_1));
  LUT2 #(
    .INIT(4'h2)) 
    \LOCKSTEP_Master_Out[11]_INST_0 
       (.I0(dbg_wakeup_i),
        .I1(Dbg_Disable),
        .O(LOCKSTEP_Master_Out[34]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \LOCKSTEP_Master_Out[12]_INST_0 
       (.I0(\Single_Synchronize.use_async_reset.sync_reg_0 ),
        .I1(Dbg_Disable),
        .O(LOCKSTEP_Master_Out[33]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \LOCKSTEP_Master_Out[13]_INST_0 
       (.I0(dbg_stop_if_delay_i),
        .I1(Dbg_Disable),
        .O(LOCKSTEP_Master_Out[32]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \LOCKSTEP_Master_Out[1]_INST_0 
       (.I0(Dbg_Disable),
        .I1(force_stop_cmd_i_reg_n_0),
        .I2(MEM_DataBus_Access_reg),
        .O(LOCKSTEP_Master_Out[41]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \LOCKSTEP_Master_Out[3]_INST_0 
       (.I0(Q[1]),
        .I1(Dbg_Disable),
        .O(LOCKSTEP_Master_Out[40]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \LOCKSTEP_Master_Out[4]_INST_0 
       (.I0(start_dbg_exec_reg_0),
        .I1(Dbg_Disable),
        .O(LOCKSTEP_Master_Out[39]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT4 #(
    .INIT(16'h00FE)) 
    \LOCKSTEP_Master_Out[5]_INST_0 
       (.I0(wb_Halted),
        .I1(\Performace_Debug_Control.normal_stop_i_reg_0 ),
        .I2(\Single_Synchronize.use_async_reset.sync_reg ),
        .I3(Dbg_Disable),
        .O(LOCKSTEP_Master_Out[38]));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \LOCKSTEP_Master_Out[6]_INST_0 
       (.I0(\Performace_Debug_Control.watchpoint_brk_hold_reg_0 ),
        .I1(Dbg_Disable),
        .O(LOCKSTEP_Master_Out[37]));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \LOCKSTEP_Master_Out[7]_INST_0 
       (.I0(Dbg_Disable),
        .I1(\Performace_Debug_Control.dbg_freeze_nohalt_reg_0 ),
        .I2(wb_Halted),
        .O(LOCKSTEP_Master_Out[36]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \LOCKSTEP_Master_Out[8]_INST_0 
       (.I0(\Performace_Debug_Control.normal_stop_i_reg_0 ),
        .I1(wb_Halted),
        .I2(Dbg_Disable),
        .O(LOCKSTEP_Master_Out[35]));
  FDCE #(
    .INIT(1'b0)) 
    New_Dbg_Instr2_TCK_reg
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(New_Dbg_Instr_TCK),
        .Q(New_Dbg_Instr2_TCK));
  LUT6 #(
    .INIT(64'h0000800000000000)) 
    New_Dbg_Instr_TCK_i_1
       (.I0(A2),
        .I1(A1),
        .I2(sel0),
        .I3(A3),
        .I4(\shift_count_reg_n_0_[0] ),
        .I5(Instr_Insert_Reg_En),
        .O(New_Dbg_Instr_TCK_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    New_Dbg_Instr_TCK_reg
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(New_Dbg_Instr_TCK_i_1_n_0),
        .Q(New_Dbg_Instr_TCK));
  LUT3 #(
    .INIT(8'hAC)) 
    \New_Instr_Reg_TCK[0]_i_1 
       (.I0(Scan_Reset),
        .I1(Dbg_Disable),
        .I2(Scan_Reset_Sel),
        .O(\New_Instr_Reg_TCK[0]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[0] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[1] ),
        .Q(LOCKSTEP_Master_Out[31]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[10] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[11] ),
        .Q(LOCKSTEP_Master_Out[21]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[11] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[12] ),
        .Q(LOCKSTEP_Master_Out[20]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[12] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[13] ),
        .Q(LOCKSTEP_Master_Out[19]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[13] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[14] ),
        .Q(LOCKSTEP_Master_Out[18]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[14] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[15] ),
        .Q(LOCKSTEP_Master_Out[17]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[15] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[16] ),
        .Q(LOCKSTEP_Master_Out[16]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[16] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[17] ),
        .Q(LOCKSTEP_Master_Out[15]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[17] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[18] ),
        .Q(LOCKSTEP_Master_Out[14]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[18] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[19] ),
        .Q(LOCKSTEP_Master_Out[13]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[19] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[20] ),
        .Q(LOCKSTEP_Master_Out[12]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[1] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[2] ),
        .Q(LOCKSTEP_Master_Out[30]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[20] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[21] ),
        .Q(LOCKSTEP_Master_Out[11]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[21] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[22] ),
        .Q(LOCKSTEP_Master_Out[10]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[22] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[23] ),
        .Q(LOCKSTEP_Master_Out[9]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[23] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[24] ),
        .Q(LOCKSTEP_Master_Out[8]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[24] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[25] ),
        .Q(LOCKSTEP_Master_Out[7]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[25] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[26] ),
        .Q(LOCKSTEP_Master_Out[6]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[26] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[27] ),
        .Q(LOCKSTEP_Master_Out[5]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[27] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[28] ),
        .Q(LOCKSTEP_Master_Out[4]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[28] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[29] ),
        .Q(LOCKSTEP_Master_Out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[29] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[30] ),
        .Q(LOCKSTEP_Master_Out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[2] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[3] ),
        .Q(LOCKSTEP_Master_Out[29]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[30] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[31] ),
        .Q(LOCKSTEP_Master_Out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[31] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(Dbg_TDI),
        .Q(LOCKSTEP_Master_Out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[3] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[4] ),
        .Q(LOCKSTEP_Master_Out[28]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[4] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[5] ),
        .Q(LOCKSTEP_Master_Out[27]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[5] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[6] ),
        .Q(LOCKSTEP_Master_Out[26]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[6] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[7] ),
        .Q(LOCKSTEP_Master_Out[25]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[7] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[8] ),
        .Q(LOCKSTEP_Master_Out[24]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[8] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[9] ),
        .Q(LOCKSTEP_Master_Out[23]));
  FDCE #(
    .INIT(1'b0)) 
    \New_Instr_Reg_TCK_reg[9] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[10] ),
        .Q(LOCKSTEP_Master_Out[22]));
  FDRE \Performace_Debug_Control.dbg_brki_hit_reg 
       (.C(Clk),
        .CE(wb_Halted),
        .D(wb_brki_hit),
        .Q(dbg_brki_hit),
        .R(Rst18_out));
  LUT6 #(
    .INIT(64'hAAABAAAAAAA8AAAA)) 
    \Performace_Debug_Control.dbg_freeze_nohalt_i_1 
       (.I0(dbg_freeze_nohalt0_in),
        .I1(Rst18_out),
        .I2(new_dbg_instr_shifting_CLK_reg_n_0),
        .I3(p_4_out),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_i_2_n_0 ),
        .I5(\Performace_Debug_Control.dbg_freeze_nohalt_reg_0 ),
        .O(\Performace_Debug_Control.dbg_freeze_nohalt_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000005555555D)) 
    \Performace_Debug_Control.dbg_freeze_nohalt_i_2 
       (.I0(\Performace_Debug_Control.normal_stop_i_reg_0 ),
        .I1(\control_reg_reg_n_0_[0] ),
        .I2(start_single_step_reg_n_0),
        .I3(out),
        .I4(Dbg_Disable),
        .I5(continue_from_brk_reg_n_0),
        .O(\Performace_Debug_Control.dbg_freeze_nohalt_i_2_n_0 ));
  FDRE \Performace_Debug_Control.dbg_freeze_nohalt_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.dbg_freeze_nohalt_i_1_n_0 ),
        .Q(\Performace_Debug_Control.dbg_freeze_nohalt_reg_0 ),
        .R(1'b0));
  FDRE \Performace_Debug_Control.dbg_hit_reg[0] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(wb_dbg_hit),
        .Q(Raw),
        .R(Rst18_out));
  FDRE \Performace_Debug_Control.dbg_hit_reg[10] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[10] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[11] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[11] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[12] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[12] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[13] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[13] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[14] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[14] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[15] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[15] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[1] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[1] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[2] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[2] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[3] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[3] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[4] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[4] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[5] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[5] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[6] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[6] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[7] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[7] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[8] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[8] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Performace_Debug_Control.dbg_hit_reg[9] 
       (.C(Clk),
        .CE(wb_Halted),
        .D(1'b0),
        .Q(\Performace_Debug_Control.dbg_hit_reg_n_0_[9] ),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  LUT6 #(
    .INIT(64'h2223222222202222)) 
    \Performace_Debug_Control.dbg_state_nohalt_i_1 
       (.I0(dbg_freeze_nohalt0_in),
        .I1(\Performace_Debug_Control.dbg_state_nohalt_i_3_n_0 ),
        .I2(p_4_out),
        .I3(Rst18_out),
        .I4(\Performace_Debug_Control.dbg_state_nohalt_i_5_n_0 ),
        .I5(\Performace_Debug_Control.normal_stop_i_reg_0 ),
        .O(\Performace_Debug_Control.dbg_state_nohalt_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000054FE5454)) 
    \Performace_Debug_Control.dbg_state_nohalt_i_2 
       (.I0(Rst18_out),
        .I1(wb_Halted),
        .I2(dbg_halt_reset_mode_reg_n_0),
        .I3(Reset_Mode[1]),
        .I4(Reset_Mode[0]),
        .I5(continue_from_brk_reg_n_0),
        .O(dbg_freeze_nohalt0_in));
  LUT3 #(
    .INIT(8'h07)) 
    \Performace_Debug_Control.dbg_state_nohalt_i_3 
       (.I0(saved_reset_mode_dbg_halt),
        .I1(dbg_halt_reset_mode_reg_n_0),
        .I2(\control_reg_reg_n_0_[0] ),
        .O(\Performace_Debug_Control.dbg_state_nohalt_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \Performace_Debug_Control.dbg_state_nohalt_i_4 
       (.I0(dbg_halt_reset_mode_reg_n_0),
        .I1(wb_Halted),
        .O(p_4_out));
  LUT6 #(
    .INIT(64'h00000000ABAAFFFF)) 
    \Performace_Debug_Control.dbg_state_nohalt_i_5 
       (.I0(new_dbg_instr_shifting_CLK_reg_n_0),
        .I1(Rst18_out),
        .I2(start_single_step_reg_n_0),
        .I3(\control_reg_reg_n_0_[0] ),
        .I4(\Performace_Debug_Control.normal_stop_i_reg_0 ),
        .I5(continue_from_brk_reg_n_0),
        .O(\Performace_Debug_Control.dbg_state_nohalt_i_5_n_0 ));
  FDRE \Performace_Debug_Control.dbg_state_nohalt_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.dbg_state_nohalt_i_1_n_0 ),
        .Q(\Performace_Debug_Control.normal_stop_i_reg_0 ),
        .R(1'b0));
  FDRE \Performace_Debug_Control.dbg_stop_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Stop),
        .Q(dbg_stop_1),
        .R(Rst18_out));
  FDRE \Performace_Debug_Control.dbg_stop_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(sync_trig_out_0_n_2),
        .Q(\Performace_Debug_Control.dbg_stop_i_reg_n_0 ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000000000FE)) 
    \Performace_Debug_Control.dbg_stop_if_delay_i_i_1 
       (.I0(wb_Halted),
        .I1(\Performace_Debug_Control.normal_stop_i_reg_0 ),
        .I2(\Single_Synchronize.use_async_reset.sync_reg ),
        .I3(Rst18_out),
        .I4(dbg_halt_reset_mode_reg_n_0),
        .I5(saved_reset_mode_sleep),
        .O(\Performace_Debug_Control.dbg_stop_if_delay_i_i_1_n_0 ));
  FDRE \Performace_Debug_Control.dbg_stop_if_delay_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.dbg_stop_if_delay_i_i_1_n_0 ),
        .Q(dbg_stop_if_delay_i),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000FFFB0008)) 
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_1 
       (.I0(\Single_Synchronize.use_async_reset.sync_reg ),
        .I1(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_2_n_0 ),
        .I2(dbg_halt_reset_mode_reg_n_0),
        .I3(wb_Halted),
        .I4(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_3_n_0 ),
        .I5(continue_from_brk_reg_n_0),
        .O(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1010101011101111)) 
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_2 
       (.I0(out),
        .I1(Dbg_Disable),
        .I2(new_dbg_instr_shifting_CLK_reg_n_0),
        .I3(\Single_Synchronize.use_async_reset.sync_reg_0 ),
        .I4(saved_reset_mode_sleep),
        .I5(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_4_n_0 ),
        .O(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h666666666666FFF0)) 
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_3 
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .I2(dbg_halt_reset_mode_reg_n_0),
        .I3(wb_Halted),
        .I4(Dbg_Disable),
        .I5(out),
        .O(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEFFFF00000000)) 
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_4 
       (.I0(Dbg_Disable),
        .I1(out),
        .I2(start_single_step_reg_n_0),
        .I3(continue_from_brk_reg_n_0),
        .I4(\control_reg_reg_n_0_[0] ),
        .I5(\Performace_Debug_Control.normal_stop_i_reg_0 ),
        .O(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_4_n_0 ));
  FDRE \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_i_1_n_0 ),
        .Q(\Single_Synchronize.use_async_reset.sync_reg ),
        .R(1'b0));
  FDRE \Performace_Debug_Control.ex_brki_hit_reg 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\control_reg_reg[8]_0 ),
        .Q(ex_brki_hit),
        .R(Rst18_out));
  FDRE \Performace_Debug_Control.ex_dbg_hit_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Using_PC_Breakpoints.All_PC_Brks[0].address_hit_I_n_1 ),
        .Q(ex_pc_brk),
        .R(Rst18_out));
  FDRE \Performace_Debug_Control.ex_dbg_pc_hit_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ),
        .Q(\Performace_Debug_Control.watchpoint_brk_hold_reg_0 ),
        .R(Rst18_out));
  FDRE \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_PC_Breakpoints.All_PC_Brks[0].address_hit_I_n_2 ),
        .Q(\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ),
        .R(Rst18_out));
  FDRE \Performace_Debug_Control.ex_step_continue_hold_reg 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(step_continue_hold),
        .Q(ex_step_continue_hold),
        .R(Rst18_out));
  FDRE \Performace_Debug_Control.ex_watchpoint_brk_hold_reg 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Performace_Debug_Control.watchpoint_brk_hold_reg_n_0 ),
        .Q(ex_watchpoint_brk_hold),
        .R(Rst18_out));
  FDRE \Performace_Debug_Control.ex_watchpoint_brk_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.ex_watchpoint_brk_reg_1 ),
        .Q(\Performace_Debug_Control.ex_watchpoint_brk_reg_0 ),
        .R(1'b0));
  FDRE \Performace_Debug_Control.force_stop_cmd_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(force_stop_cmd_i_reg_n_0),
        .Q(force_stop_cmd_1),
        .R(Rst18_out));
  LUT6 #(
    .INIT(64'h000000000000ABAA)) 
    \Performace_Debug_Control.force_stop_i_i_1 
       (.I0(force_stop_i),
        .I1(force_stop_cmd_i_reg_n_0),
        .I2(\Performace_Debug_Control.normal_stop_i_reg_0 ),
        .I3(force_stop_cmd_1),
        .I4(Rst18_out),
        .I5(wb_Halted),
        .O(\Performace_Debug_Control.force_stop_i_i_1_n_0 ));
  FDRE \Performace_Debug_Control.force_stop_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.force_stop_i_i_1_n_0 ),
        .Q(force_stop_i),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \Performace_Debug_Control.mem_brki_hit_i_1 
       (.I0(ex_brki_hit),
        .I1(ex_branch_with_delayslot_reg),
        .I2(mem_brki_hit),
        .O(\Performace_Debug_Control.mem_brki_hit_i_1_n_0 ));
  FDRE \Performace_Debug_Control.mem_brki_hit_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.mem_brki_hit_i_1_n_0 ),
        .Q(mem_brki_hit),
        .R(Rst18_out));
  LUT5 #(
    .INIT(32'h004F0040)) 
    \Performace_Debug_Control.mem_dbg_hit[0]_i_1 
       (.I0(ex_watchpoint_brk_hold),
        .I1(ex_pc_brk),
        .I2(\Performace_Debug_Control.mem_dbg_hit[0]_i_2_n_0 ),
        .I3(Rst18_out),
        .I4(\Performace_Debug_Control.mem_dbg_hit_reg_n_0_[0] ),
        .O(\Performace_Debug_Control.mem_dbg_hit[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAAAAAAA8)) 
    \Performace_Debug_Control.mem_dbg_hit[0]_i_2 
       (.I0(ex_branch_with_delayslot_reg),
        .I1(ex_watchpoint_brk_hold),
        .I2(ex_step_continue_hold),
        .I3(\Performace_Debug_Control.ex_watchpoint_brk_reg_0 ),
        .I4(ex_pc_brk),
        .O(\Performace_Debug_Control.mem_dbg_hit[0]_i_2_n_0 ));
  FDRE \Performace_Debug_Control.mem_dbg_hit_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.mem_dbg_hit[0]_i_1_n_0 ),
        .Q(\Performace_Debug_Control.mem_dbg_hit_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \Performace_Debug_Control.normal_stop_cmd_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(normal_stop_cmd_i_reg_n_0),
        .Q(normal_stop_cmd_1),
        .R(Rst18_out));
  LUT6 #(
    .INIT(64'h000000000000ABAA)) 
    \Performace_Debug_Control.normal_stop_i_i_1 
       (.I0(normal_stop_i),
        .I1(normal_stop_cmd_i_reg_n_0),
        .I2(\Performace_Debug_Control.normal_stop_i_reg_0 ),
        .I3(normal_stop_cmd_1),
        .I4(Rst18_out),
        .I5(wb_Halted),
        .O(\Performace_Debug_Control.normal_stop_i_i_1_n_0 ));
  FDRE \Performace_Debug_Control.normal_stop_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.normal_stop_i_i_1_n_0 ),
        .Q(normal_stop_i),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000000000FE)) 
    \Performace_Debug_Control.step_continue_hold_i_1 
       (.I0(step_continue_hold),
        .I1(start_single_step_reg_n_0),
        .I2(continue_from_brk_reg_n_0),
        .I3(Dbg_Disable),
        .I4(out),
        .I5(\Using_FPGA.Native_0 ),
        .O(\Performace_Debug_Control.step_continue_hold_i_1_n_0 ));
  FDRE \Performace_Debug_Control.step_continue_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.step_continue_hold_i_1_n_0 ),
        .Q(step_continue_hold),
        .R(1'b0));
  FDRE \Performace_Debug_Control.trig_ack_out_0_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(sync_trig_out_0_n_1),
        .Q(Dbg_Trig_Ack_Out[1]),
        .R(1'b0));
  FDRE \Performace_Debug_Control.trig_out_0_synced_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(trig_out_0_synced),
        .Q(trig_out_0_synced_1),
        .R(Rst18_out));
  LUT6 #(
    .INIT(64'h0002020202020202)) 
    \Performace_Debug_Control.watchpoint_brk_hold_i_1 
       (.I0(\Performace_Debug_Control.watchpoint_brk_hold_reg_n_0 ),
        .I1(Dbg_Disable),
        .I2(out),
        .I3(ex_Exception_Taken),
        .I4(\Performace_Debug_Control.watchpoint_brk_hold_reg_0 ),
        .I5(ex_branch_with_delayslot_reg),
        .O(\Performace_Debug_Control.watchpoint_brk_hold_i_1_n_0 ));
  FDRE \Performace_Debug_Control.watchpoint_brk_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.watchpoint_brk_hold_i_1_n_0 ),
        .Q(\Performace_Debug_Control.watchpoint_brk_hold_reg_n_0 ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Performace_Debug_Control.wb_brki_hit_i_1 
       (.I0(mem_brki_hit),
        .I1(mem_valid_reg),
        .I2(wb_brki_hit),
        .O(\Performace_Debug_Control.wb_brki_hit_i_1_n_0 ));
  FDRE \Performace_Debug_Control.wb_brki_hit_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.wb_brki_hit_i_1_n_0 ),
        .Q(wb_brki_hit),
        .R(Rst18_out));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Performace_Debug_Control.wb_dbg_hit[0]_i_1 
       (.I0(\Performace_Debug_Control.mem_dbg_hit_reg_n_0_[0] ),
        .I1(mem_valid_reg),
        .I2(wb_dbg_hit),
        .O(\Performace_Debug_Control.wb_dbg_hit[0]_i_1_n_0 ));
  FDRE \Performace_Debug_Control.wb_dbg_hit_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performace_Debug_Control.wb_dbg_hit[0]_i_1_n_0 ),
        .Q(wb_dbg_hit),
        .R(Rst18_out));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'h02)) 
    Read_Strobe_INST_0_i_1
       (.I0(\Performace_Debug_Control.watchpoint_brk_hold_reg_0 ),
        .I1(Dbg_Disable),
        .I2(dbg_stop_if_delay_i),
        .O(\Using_FPGA.Native ));
  system_microblaze_0_0_MB_SRL16E SRL16E_1
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q_0(Q_0));
  system_microblaze_0_0_MB_SRL16E__parameterized1 SRL16E_2
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q11_in(Q11_in));
  system_microblaze_0_0_MB_SRL16E__parameterized19 SRL16E_3
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q2_in(Q2_in));
  system_microblaze_0_0_MB_SRL16E__parameterized21 SRL16E_4
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_TDO(SRL16E_4_n_0),
        .Q({sel0__0[2:1],sel0,A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q0_in(Q0_in),
        .Q0_out(Q0_out),
        .Q2_in(Q2_in),
        .Q3_in(Q3_in),
        .tdo_config_word1_0(tdo_config_word1_0));
  system_microblaze_0_0_MB_SRL16E__parameterized23 SRL16E_7
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q0_in(Q0_in));
  system_microblaze_0_0_MB_SRL16E__parameterized25 SRL16E_8
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .tdo_config_word1_0(tdo_config_word1_0));
  system_microblaze_0_0_MB_SRL16E__parameterized3 \The_Cache_Addresses[1].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q6_out(Q6_out));
  system_microblaze_0_0_MB_SRL16E__parameterized5 \The_Cache_Addresses[2].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En[5]),
        .\Dbg_Reg_En[2] (Dbg_Reg_En_2__s_net_1),
        .\Dbg_Reg_En[2]_0 (\Dbg_Reg_En[2]_0 ),
        .Dbg_TDO(Dbg_TDO),
        .Q({sel0__0,sel0,A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q11_in(Q11_in),
        .Q6_out(Q6_out),
        .Q_0(Q_0),
        .TDO_Data_Reg(TDO_Data_Reg),
        .\shift_count_reg[0] (Dbg_TDO_INST_0_i_3_n_0),
        .\shift_count_reg[4] (Dbg_TDO_INST_0_i_2_n_0),
        .\shift_count_reg[5] (\The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ),
        .\shift_count_reg[5]_0 (SRL16E_4_n_0));
  system_microblaze_0_0_MB_SRL16E__parameterized7 \The_Cache_Addresses[3].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q4_out(Q4_out));
  system_microblaze_0_0_MB_SRL16E__parameterized9 \The_Cache_Addresses[4].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q3_out(Q3_out));
  system_microblaze_0_0_MB_SRL16E__parameterized11 \The_Cache_Addresses[5].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q2_out(Q2_out));
  system_microblaze_0_0_MB_SRL16E__parameterized13 \The_Cache_Addresses[6].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_TDO(\The_Cache_Addresses[6].SRL16E_Cache_I_n_0 ),
        .Q({sel0__0[1],sel0,A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q2_out(Q2_out),
        .Q3_out(Q3_out),
        .Q4_out(Q4_out));
  system_microblaze_0_0_MB_SRL16E__parameterized15 \The_Cache_Addresses[7].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q0_out(Q0_out));
  system_microblaze_0_0_MB_SRL16E__parameterized17 \The_Cache_Addresses[8].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\shift_count_reg_n_0_[0] }),
        .Q3_in(Q3_in));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    Trace_MB_Halted_INST_0
       (.I0(\Performace_Debug_Control.normal_stop_i_reg_0 ),
        .I1(wb_Halted),
        .I2(Dbg_Disable),
        .O(\LOCKSTEP_Out_reg[0] ));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.Native_i_1__79 
       (.I0(Dbg_Disable),
        .I1(dbg_stop_if_delay_i),
        .O(\if_pc_reg[29] ));
  system_microblaze_0_0_address_hit \Using_PC_Breakpoints.All_PC_Brks[0].address_hit_I 
       (.Address(Address),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_TDI(Dbg_TDI),
        .Hit(\Using_PC_Breakpoints.All_PC_Brks[0].address_hit_I_n_1 ),
        .\Performace_Debug_Control.dbg_stop_i_reg (\Performace_Debug_Control.dbg_stop_i_reg_n_0 ),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Single_Synchronize.use_async_reset.sync_reg ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg (\Using_PC_Breakpoints.All_PC_Brks[0].address_hit_I_n_2 ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 (\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ),
        .\Performace_Debug_Control.watchpoint_brk_hold_reg (\Performace_Debug_Control.watchpoint_brk_hold_reg_n_0 ),
        .Q(\control_reg_reg_n_0_[0] ),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\control_reg_reg[8] (\control_reg_reg[8]_0 ),
        .dbg_clean_stop(dbg_clean_stop),
        .ex_Exception_Taken(ex_Exception_Taken),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .force_stop_i(force_stop_i),
        .mem_Exception_Taken(mem_Exception_Taken),
        .normal_stop_i(normal_stop_i),
        .p_36_out(p_36_out),
        .single_Step_N(single_Step_N));
  FDCE #(
    .INIT(1'b0)) 
    capture_1_reg
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(Dbg_Capture),
        .Q(capture_1));
  LUT5 #(
    .INIT(32'h00000100)) 
    \command_reg[0]_i_1 
       (.I0(Dbg_Reg_En[2]),
        .I1(Dbg_Reg_En[3]),
        .I2(Dbg_Reg_En[1]),
        .I3(Dbg_Reg_En[6]),
        .I4(\command_reg[0]_i_3_n_0 ),
        .O(Command_Reg_En));
  LUT4 #(
    .INIT(16'hAAFC)) 
    \command_reg[0]_i_2 
       (.I0(Scan_Reset),
        .I1(command_reg_clear),
        .I2(Dbg_Disable),
        .I3(Scan_Reset_Sel),
        .O(command_reg_rst));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \command_reg[0]_i_3 
       (.I0(Dbg_Reg_En[5]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[0]),
        .I3(Dbg_Reg_En[7]),
        .O(\command_reg[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT2 #(
    .INIT(4'hE)) 
    command_reg_clear_i_1
       (.I0(read_register_PC_1_reg_n_0),
        .I1(command_reg_clear_reg_0),
        .O(command_reg_clear_i_1_n_0));
  FDRE command_reg_clear_reg
       (.C(Clk),
        .CE(1'b1),
        .D(command_reg_clear_i_1_n_0),
        .Q(command_reg_clear),
        .R(Rst18_out));
  FDCE #(
    .INIT(1'b0)) 
    \command_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(command_reg_rst),
        .D(\shift_datain_reg_n_0_[30] ),
        .Q(command_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \command_reg_reg[1] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(command_reg_rst),
        .D(\shift_datain_reg_n_0_[31] ),
        .Q(command_reg[1]));
  LUT4 #(
    .INIT(16'hAAFC)) 
    continue_from_brk_TClk_i_1
       (.I0(Scan_Reset),
        .I1(continue_from_brk_reg_n_0),
        .I2(Dbg_Disable),
        .I3(Scan_Reset_Sel),
        .O(continue_from_brk_rst));
  FDCE #(
    .INIT(1'b0)) 
    continue_from_brk_TClk_reg
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(continue_from_brk_rst),
        .D(\shift_datain_reg_n_0_[24] ),
        .Q(continue_from_brk_TClk));
  FDRE continue_from_brk_reg
       (.C(Clk),
        .CE(1'b1),
        .D(continue_from_brk0),
        .Q(continue_from_brk_reg_n_0),
        .R(Rst18_out));
  FDCE #(
    .INIT(1'b0)) 
    \control_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[22] ),
        .Q(\control_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \control_reg_reg[3] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[25] ),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \control_reg_reg[4] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[26] ),
        .Q(\control_reg_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \control_reg_reg[5] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[27] ),
        .Q(\control_reg_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \control_reg_reg[8] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[30] ),
        .Q(Q[0]));
  LUT4 #(
    .INIT(16'hFEEE)) 
    \data_rd_reg[0]_i_1 
       (.I0(command_reg_clear_reg_0),
        .I1(read_register_PC_1_reg_n_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .O(\data_rd_reg[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[0]_i_2 
       (.I0(D[32]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[16]),
        .O(\data_rd_reg[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[10]_i_1 
       (.I0(D[22]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[6]),
        .O(\data_rd_reg[10]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[11]_i_1 
       (.I0(D[21]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[5]),
        .O(\data_rd_reg[11]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[12]_i_1 
       (.I0(D[20]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[4]),
        .O(\data_rd_reg[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[13]_i_1 
       (.I0(D[19]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[3]),
        .O(\data_rd_reg[13]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[14]_i_1 
       (.I0(D[18]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[2]),
        .O(\data_rd_reg[14]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[15]_i_1 
       (.I0(D[17]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[1]),
        .O(\data_rd_reg[15]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[1]_i_1 
       (.I0(D[31]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[15]),
        .O(\data_rd_reg[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[2]_i_1 
       (.I0(D[30]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[14]),
        .O(\data_rd_reg[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \data_rd_reg[32]_i_1 
       (.I0(\data_rd_reg[32]_i_2_n_0 ),
        .I1(\data_rd_reg[32]_i_3_n_0 ),
        .I2(\data_rd_reg_reg_n_0_[32] ),
        .O(\data_rd_reg[32]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBFBFBFBFBFBFBFA0)) 
    \data_rd_reg[32]_i_2 
       (.I0(wb_gpr_wr_dbg),
        .I1(start_dbg_exec_reg_0),
        .I2(\Single_Synchronize.use_async_reset.sync_reg ),
        .I3(wb_pc_valid),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg_0 ),
        .I5(command_reg_clear_reg_0),
        .O(\data_rd_reg[32]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT5 #(
    .INIT(32'hFFFEEEEE)) 
    \data_rd_reg[32]_i_3 
       (.I0(command_reg_clear_reg_0),
        .I1(read_register_PC_1_reg_n_0),
        .I2(start_dbg_exec_reg_0),
        .I3(wb_gpr_wr_dbg),
        .I4(\Single_Synchronize.use_async_reset.sync_reg ),
        .O(\data_rd_reg[32]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[3]_i_1 
       (.I0(D[29]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[13]),
        .O(\data_rd_reg[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[4]_i_1 
       (.I0(D[28]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[12]),
        .O(\data_rd_reg[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[5]_i_1 
       (.I0(D[27]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[11]),
        .O(\data_rd_reg[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[6]_i_1 
       (.I0(D[26]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[10]),
        .O(\data_rd_reg[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[7]_i_1 
       (.I0(D[25]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[9]),
        .O(\data_rd_reg[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[8]_i_1 
       (.I0(D[24]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[8]),
        .O(\data_rd_reg[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[9]_i_1 
       (.I0(D[23]),
        .I1(command_reg_clear_reg_0),
        .I2(wb_gpr_wr_dbg),
        .I3(\Single_Synchronize.use_async_reset.sync_reg ),
        .I4(D[7]),
        .O(\data_rd_reg[9]_i_1_n_0 ));
  FDRE \data_rd_reg_reg[0] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[0]_i_2_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[0] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[10] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[10]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[10] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[11] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[11]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[11] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[12] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[12]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[12] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[13] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[13]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[13] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[14] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[14]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[14] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[15] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[15]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[15] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[16] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\Using_FPGA.Native_1 ),
        .Q(\data_rd_reg_reg_n_0_[16] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[17] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg),
        .Q(\data_rd_reg_reg_n_0_[17] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[18] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_0),
        .Q(\data_rd_reg_reg_n_0_[18] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[19] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_1),
        .Q(\data_rd_reg_reg_n_0_[19] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[1] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[1]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[1] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[20] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_2),
        .Q(\data_rd_reg_reg_n_0_[20] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[21] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_3),
        .Q(\data_rd_reg_reg_n_0_[21] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[22] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_4),
        .Q(\data_rd_reg_reg_n_0_[22] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[23] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_5),
        .Q(\data_rd_reg_reg_n_0_[23] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[24] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_6),
        .Q(\data_rd_reg_reg_n_0_[24] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[25] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_7),
        .Q(\data_rd_reg_reg_n_0_[25] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[26] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_8),
        .Q(\data_rd_reg_reg_n_0_[26] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[27] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_9),
        .Q(\data_rd_reg_reg_n_0_[27] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[28] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_10),
        .Q(\data_rd_reg_reg_n_0_[28] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[29] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_11),
        .Q(\data_rd_reg_reg_n_0_[29] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[2] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[2]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[2] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[30] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_12),
        .Q(\data_rd_reg_reg_n_0_[30] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[31] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(wb_gpr_write_dbg_reg_13),
        .Q(\data_rd_reg_reg_n_0_[31] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[32] 
       (.C(Clk),
        .CE(1'b1),
        .D(\data_rd_reg[32]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[32] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[3] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[3]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[3] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[4] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[4]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[4] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[5] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[5]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[5] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[6] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[6]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[6] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[7] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[7]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[7] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[8] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[8]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[8] ),
        .R(Rst18_out));
  FDRE \data_rd_reg_reg[9] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg[9]_i_1_n_0 ),
        .Q(\data_rd_reg_reg_n_0_[9] ),
        .R(Rst18_out));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[0] ),
        .Q(data_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[10] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[10] ),
        .Q(data_read_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[11] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[11] ),
        .Q(data_read_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[12] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[12] ),
        .Q(data_read_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[13] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[13] ),
        .Q(data_read_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[14] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[14] ),
        .Q(data_read_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[15] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[15] ),
        .Q(data_read_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[16] ),
        .Q(data_read_reg[16]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[17] ),
        .Q(data_read_reg[17]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[18] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[18] ),
        .Q(data_read_reg[18]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[19] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[19] ),
        .Q(data_read_reg[19]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[1] ),
        .Q(data_read_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[20] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[20] ),
        .Q(data_read_reg[20]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[21] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[21] ),
        .Q(data_read_reg[21]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[22] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[22] ),
        .Q(data_read_reg[22]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[23] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[23] ),
        .Q(data_read_reg[23]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[24] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[24] ),
        .Q(data_read_reg[24]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[25] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[25] ),
        .Q(data_read_reg[25]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[26] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[26] ),
        .Q(data_read_reg[26]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[27] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[27] ),
        .Q(data_read_reg[27]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[28] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[28] ),
        .Q(data_read_reg[28]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[29] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[29] ),
        .Q(data_read_reg[29]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[2] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[2] ),
        .Q(data_read_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[30] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[30] ),
        .Q(data_read_reg[30]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[31] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[31] ),
        .Q(data_read_reg[31]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[32] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[32] ),
        .Q(data_read_reg[32]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[3] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[3] ),
        .Q(data_read_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[4] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[4] ),
        .Q(data_read_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[5] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[5] ),
        .Q(data_read_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[6] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[6] ),
        .Q(data_read_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[7] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[7] ),
        .Q(data_read_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[8] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[8] ),
        .Q(data_read_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \data_read_reg_reg[9] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg_n_0_[9] ),
        .Q(data_read_reg[9]));
  LUT6 #(
    .INIT(64'h4444444400000F00)) 
    dbg_halt_reset_mode_i_1
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .I2(\control_reg_reg_n_0_[0] ),
        .I3(dbg_halt_reset_mode_reg_n_0),
        .I4(step_continue),
        .I5(Rst18_out),
        .O(dbg_halt_reset_mode_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT2 #(
    .INIT(4'hE)) 
    dbg_halt_reset_mode_i_2
       (.I0(continue_from_brk_reg_n_0),
        .I1(start_single_step_reg_n_0),
        .O(step_continue));
  FDRE dbg_halt_reset_mode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(dbg_halt_reset_mode_i_1_n_0),
        .Q(dbg_halt_reset_mode_reg_n_0),
        .R(1'b0));
  FDCE #(
    .INIT(1'b0)) 
    dbg_wakeup_i_reg
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(no_sleeping),
        .D(\shift_datain_reg_n_0_[31] ),
        .Q(dbg_wakeup_i));
  FDRE delay_slot_instr_reg
       (.C(Clk),
        .CE(wb_Halted),
        .D(D[0]),
        .Q(delay_slot_instr),
        .R(Rst18_out));
  FDRE exception_reg
       (.C(Clk),
        .CE(1'b1),
        .D(exception_reg_0),
        .Q(\instr_read_reg_reg[0]_0 [0]),
        .R(1'b0));
  FDRE executing_reg
       (.C(Clk),
        .CE(1'b1),
        .D(wb_valid_reg),
        .Q(\instr_read_reg_reg[0]_0 [1]),
        .R(Rst18_out));
  LUT4 #(
    .INIT(16'hAAFC)) 
    force_stop_TClk_i_1
       (.I0(Scan_Reset),
        .I1(force_stop_cmd_i_reg_n_0),
        .I2(Dbg_Disable),
        .I3(Scan_Reset_Sel),
        .O(force_stop_cmd_rst));
  FDCE #(
    .INIT(1'b0)) 
    force_stop_TClk_reg
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(force_stop_cmd_rst),
        .D(\shift_datain_reg_n_0_[29] ),
        .Q(force_stop_TClk));
  FDRE force_stop_cmd_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(force_stop_cmd_i0),
        .Q(force_stop_cmd_i_reg_n_0),
        .R(Rst18_out));
  FDRE if_debug_ready_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(if_debug_ready_i0),
        .Q(start_dbg_exec_reg_0),
        .R(Rst18_out));
  FDCE #(
    .INIT(1'b0)) 
    \instr_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\instr_read_reg_reg[0]_0 [1]),
        .Q(instr_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \instr_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\instr_read_reg_reg[0]_0 [0]),
        .Q(instr_read_reg[1]));
  FDRE mb_halted_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(dbg_state_i),
        .Q(mb_halted_1),
        .R(Rst18_out));
  FDRE new_dbg_instr_shifting_CLK_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Insert_Reg_En_1),
        .Q(new_dbg_instr_shifting_CLK_reg_n_0),
        .R(Rst18_out));
  LUT5 #(
    .INIT(32'h00000100)) 
    normal_stop_TClk_i_1
       (.I0(Dbg_Reg_En[2]),
        .I1(Dbg_Reg_En[3]),
        .I2(Dbg_Reg_En[1]),
        .I3(Dbg_Reg_En[7]),
        .I4(normal_stop_TClk_i_3_n_0),
        .O(Control_Reg_En));
  LUT4 #(
    .INIT(16'hAAFC)) 
    normal_stop_TClk_i_2
       (.I0(Scan_Reset),
        .I1(normal_stop_cmd_i_reg_n_0),
        .I2(Dbg_Disable),
        .I3(Scan_Reset_Sel),
        .O(normal_stop_cmd_rst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    normal_stop_TClk_i_3
       (.I0(Dbg_Reg_En[5]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[0]),
        .I3(Dbg_Reg_En[6]),
        .O(normal_stop_TClk_i_3_n_0));
  FDCE #(
    .INIT(1'b0)) 
    normal_stop_TClk_reg
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(normal_stop_cmd_rst),
        .D(\shift_datain_reg_n_0_[28] ),
        .Q(normal_stop_TClk));
  FDRE normal_stop_cmd_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(normal_stop_cmd_i0),
        .Q(normal_stop_cmd_i_reg_n_0),
        .R(Rst18_out));
  FDRE read_register_MSR_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_MSR),
        .Q(command_reg_clear_reg_0),
        .R(Rst18_out));
  FDRE read_register_MSR_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_MSR0),
        .Q(read_register_MSR),
        .R(Rst18_out));
  FDRE read_register_PC_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_PC),
        .Q(read_register_PC_1_reg_n_0),
        .R(Rst18_out));
  FDRE read_register_PC_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_PC0),
        .Q(read_register_PC),
        .R(Rst18_out));
  LUT3 #(
    .INIT(8'hAC)) 
    running_clock_i_1
       (.I0(Scan_Reset),
        .I1(capture_1),
        .I2(Scan_Reset_Sel),
        .O(running_clock_rst));
  FDCE #(
    .INIT(1'b0)) 
    running_clock_reg
       (.C(Clk),
        .CE(1'b1),
        .CLR(running_clock_rst),
        .D(1'b1),
        .Q(running_clock));
  FDRE \sample_synced_1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[0]),
        .Q(\sample_synced_1_reg_n_0_[0] ),
        .R(Rst18_out));
  FDRE \sample_synced_1_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[1]),
        .Q(\sample_synced_1_reg_n_0_[1] ),
        .R(Rst18_out));
  FDRE \sample_synced_1_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[2]),
        .Q(\sample_synced_1_reg_n_0_[2] ),
        .R(Rst18_out));
  FDRE \sample_synced_1_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[3]),
        .Q(\sample_synced_1_reg_n_0_[3] ),
        .R(Rst18_out));
  FDRE \sample_synced_1_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[4]),
        .Q(\sample_synced_1_reg_n_0_[4] ),
        .R(Rst18_out));
  FDRE \sample_synced_1_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[5]),
        .Q(p_0_in),
        .R(Rst18_out));
  FDRE \sample_synced_1_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[6]),
        .Q(\sample_synced_1_reg_n_0_[6] ),
        .R(Rst18_out));
  FDRE \sample_synced_1_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[7]),
        .Q(p_0_in59_in),
        .R(Rst18_out));
  FDRE \sample_synced_1_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[8]),
        .Q(\sample_synced_1_reg_n_0_[8] ),
        .R(Rst18_out));
  FDRE saved_reset_mode_dbg_halt_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[2] ),
        .Q(saved_reset_mode_dbg_halt),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT5 #(
    .INIT(32'h222222F0)) 
    saved_reset_mode_sleep_i_1
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .I2(\Single_Synchronize.use_async_reset.sync_reg_0 ),
        .I3(Dbg_Disable),
        .I4(out),
        .O(saved_reset_mode_sleep_i_1_n_0));
  FDRE saved_reset_mode_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(saved_reset_mode_sleep_i_1_n_0),
        .Q(saved_reset_mode_sleep),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \shift_count[0]_i_1 
       (.I0(\shift_count_reg_n_0_[0] ),
        .I1(Dbg_Shift),
        .O(\shift_count[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \shift_count[1]_i_1 
       (.I0(A1),
        .I1(\shift_count_reg_n_0_[0] ),
        .I2(Dbg_Shift),
        .O(\shift_count[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT4 #(
    .INIT(16'h6A00)) 
    \shift_count[2]_i_1 
       (.I0(A2),
        .I1(A1),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(Dbg_Shift),
        .O(\shift_count[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT5 #(
    .INIT(32'h6AAA0000)) 
    \shift_count[3]_i_1 
       (.I0(A3),
        .I1(A2),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(Dbg_Shift),
        .O(\shift_count[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAA00000000)) 
    \shift_count[4]_i_1 
       (.I0(sel0),
        .I1(A3),
        .I2(A1),
        .I3(\shift_count_reg_n_0_[0] ),
        .I4(A2),
        .I5(Dbg_Shift),
        .O(\shift_count[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \shift_count[5]_i_1 
       (.I0(sel0__0[1]),
        .I1(\shift_count[5]_i_2_n_0 ),
        .I2(Dbg_Shift),
        .O(\shift_count[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \shift_count[5]_i_2 
       (.I0(sel0),
        .I1(A2),
        .I2(\shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(A3),
        .O(\shift_count[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \shift_count[6]_i_1 
       (.I0(sel0__0[2]),
        .I1(\shift_count[7]_i_2_n_0 ),
        .I2(Dbg_Shift),
        .O(\shift_count[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT4 #(
    .INIT(16'h6A00)) 
    \shift_count[7]_i_1 
       (.I0(sel0__0[3]),
        .I1(sel0__0[2]),
        .I2(\shift_count[7]_i_2_n_0 ),
        .I3(Dbg_Shift),
        .O(\shift_count[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \shift_count[7]_i_2 
       (.I0(sel0__0[1]),
        .I1(A3),
        .I2(A1),
        .I3(\shift_count_reg_n_0_[0] ),
        .I4(A2),
        .I5(sel0),
        .O(\shift_count[7]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_count_reg[0] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_count[0]_i_1_n_0 ),
        .Q(\shift_count_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_count_reg[1] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_count[1]_i_1_n_0 ),
        .Q(A1));
  FDCE #(
    .INIT(1'b0)) 
    \shift_count_reg[2] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_count[2]_i_1_n_0 ),
        .Q(A2));
  FDCE #(
    .INIT(1'b0)) 
    \shift_count_reg[3] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_count[3]_i_1_n_0 ),
        .Q(A3));
  FDCE #(
    .INIT(1'b0)) 
    \shift_count_reg[4] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_count[4]_i_1_n_0 ),
        .Q(sel0));
  FDCE #(
    .INIT(1'b0)) 
    \shift_count_reg[5] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_count[5]_i_1_n_0 ),
        .Q(sel0__0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_count_reg[6] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_count[6]_i_1_n_0 ),
        .Q(sel0__0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_count_reg[7] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_count[7]_i_1_n_0 ),
        .Q(sel0__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[10] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[11] ),
        .Q(\shift_datain_reg_n_0_[10] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[11] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[12] ),
        .Q(\shift_datain_reg_n_0_[11] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[12] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[13] ),
        .Q(\shift_datain_reg_n_0_[12] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[13] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[14] ),
        .Q(\shift_datain_reg_n_0_[13] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[14] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[15] ),
        .Q(\shift_datain_reg_n_0_[14] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[15] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[16] ),
        .Q(\shift_datain_reg_n_0_[15] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[16] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[17] ),
        .Q(\shift_datain_reg_n_0_[16] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[17] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[18] ),
        .Q(\shift_datain_reg_n_0_[17] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[18] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[19] ),
        .Q(\shift_datain_reg_n_0_[18] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[19] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[20] ),
        .Q(\shift_datain_reg_n_0_[19] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[1] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[2] ),
        .Q(\shift_datain_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[20] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[21] ),
        .Q(\shift_datain_reg_n_0_[20] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[21] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[22] ),
        .Q(\shift_datain_reg_n_0_[21] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[22] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[23] ),
        .Q(\shift_datain_reg_n_0_[22] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[23] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[24] ),
        .Q(\shift_datain_reg_n_0_[23] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[24] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[25] ),
        .Q(\shift_datain_reg_n_0_[24] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[25] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[26] ),
        .Q(\shift_datain_reg_n_0_[25] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[26] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[27] ),
        .Q(\shift_datain_reg_n_0_[26] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[27] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[28] ),
        .Q(\shift_datain_reg_n_0_[27] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[28] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[29] ),
        .Q(\shift_datain_reg_n_0_[28] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[29] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[30] ),
        .Q(\shift_datain_reg_n_0_[29] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[2] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[3] ),
        .Q(\shift_datain_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[30] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[31] ),
        .Q(\shift_datain_reg_n_0_[30] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[31] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(Dbg_TDI),
        .Q(\shift_datain_reg_n_0_[31] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[3] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[4] ),
        .Q(\shift_datain_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[4] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[5] ),
        .Q(\shift_datain_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[5] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[6] ),
        .Q(\shift_datain_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[6] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[7] ),
        .Q(\shift_datain_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[7] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[8] ),
        .Q(\shift_datain_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[8] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[9] ),
        .Q(\shift_datain_reg_n_0_[8] ));
  FDCE #(
    .INIT(1'b0)) 
    \shift_datain_reg[9] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(\shift_datain_reg_n_0_[10] ),
        .Q(\shift_datain_reg_n_0_[9] ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'hFB)) 
    single_Step_N_i_1
       (.I0(single_step_count[1]),
        .I1(start_single_step_reg_n_0),
        .I2(single_step_count[0]),
        .O(single_Step_N_i_1_n_0));
  FDSE single_Step_N_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(single_Step_N_i_1_n_0),
        .Q(single_Step_N),
        .S(Rst18_out));
  LUT4 #(
    .INIT(16'hAAFC)) 
    single_Step_TClk_i_1
       (.I0(Scan_Reset),
        .I1(start_single_step_reg_n_0),
        .I2(Dbg_Disable),
        .I3(Scan_Reset_Sel),
        .O(start_single_step_rst));
  FDCE #(
    .INIT(1'b0)) 
    single_Step_TClk_reg
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(start_single_step_rst),
        .D(\shift_datain_reg_n_0_[23] ),
        .Q(single_Step_TClk));
  LUT5 #(
    .INIT(32'hAACF55C0)) 
    \single_step_count[0]_i_1 
       (.I0(single_step_count[1]),
        .I1(\control_reg_reg_n_0_[4] ),
        .I2(start_single_cmd),
        .I3(\Using_FPGA.Native_0 ),
        .I4(single_step_count[0]),
        .O(\single_step_count[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0BF8)) 
    \single_step_count[1]_i_1 
       (.I0(\control_reg_reg_n_0_[5] ),
        .I1(start_single_cmd),
        .I2(\Using_FPGA.Native_0 ),
        .I3(single_step_count[1]),
        .O(\single_step_count[1]_i_1_n_0 ));
  FDRE \single_step_count_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\single_step_count[0]_i_1_n_0 ),
        .Q(single_step_count[0]),
        .R(Rst18_out));
  FDRE \single_step_count_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\single_step_count[1]_i_1_n_0 ),
        .Q(single_step_count[1]),
        .R(Rst18_out));
  LUT6 #(
    .INIT(64'hAAAA03FFAAAA0000)) 
    sleep_reset_mode_i_1
       (.I0(reset_mode_sleep),
        .I1(Wakeup[1]),
        .I2(Wakeup[0]),
        .I3(saved_reset_mode_sleep),
        .I4(Rst18_out),
        .I5(\Single_Synchronize.use_async_reset.sync_reg_0 ),
        .O(sleep_reset_mode_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT2 #(
    .INIT(4'h2)) 
    sleep_reset_mode_i_2
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .O(reset_mode_sleep));
  FDRE sleep_reset_mode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sleep_reset_mode_i_1_n_0),
        .Q(\Single_Synchronize.use_async_reset.sync_reg_0 ),
        .R(1'b0));
  FDRE start_dbg_exec_reg
       (.C(Clk),
        .CE(1'b1),
        .D(start_dbg_exec_reg_0),
        .Q(executing0),
        .R(Rst18_out));
  FDRE start_single_cmd_reg
       (.C(Clk),
        .CE(1'b1),
        .D(start_single_cmd0),
        .Q(start_single_cmd),
        .R(Rst18_out));
  LUT6 #(
    .INIT(64'h3333222233032222)) 
    start_single_step_i_1
       (.I0(start_single_cmd),
        .I1(Rst18_out),
        .I2(\Using_FPGA.Native_0 ),
        .I3(single_step_count[1]),
        .I4(start_single_step_reg_n_0),
        .I5(single_step_count[0]),
        .O(start_single_step_i_1_n_0));
  FDRE start_single_step_reg
       (.C(Clk),
        .CE(1'b1),
        .D(start_single_step_i_1_n_0),
        .Q(start_single_step_reg_n_0),
        .R(1'b0));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync),
        .Q(\status_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[10] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_10),
        .Q(\status_reg_reg_n_0_[10] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[11] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_11),
        .Q(\status_reg_reg_n_0_[11] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[12] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_12),
        .Q(\status_reg_reg_n_0_[12] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[13] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_13),
        .Q(\status_reg_reg_n_0_[13] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[14] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_14),
        .Q(\status_reg_reg_n_0_[14] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[15] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_15),
        .Q(\status_reg_reg_n_0_[15] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_stop_CPU_n_0),
        .Q(\status_reg_reg_n_0_[16] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(Rst18_out),
        .Q(\status_reg_reg_n_0_[17] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[18] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(Full_32_bit),
        .Q(\status_reg_reg_n_0_[18] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[19] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(delay_slot_instr),
        .Q(\status_reg_reg_n_0_[19] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_1),
        .Q(\status_reg_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[20] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(Full_32_bit_1),
        .Q(\status_reg_reg_n_0_[20] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[21] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(1'b0),
        .Q(\status_reg_reg_n_0_[21] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[22] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(MEM_DataBus_Access_reg),
        .Q(\status_reg_reg_n_0_[22] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[23] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(dbg_brki_hit_synced),
        .Q(\status_reg_reg_n_0_[23] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[24] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(running_clock_synced),
        .Q(\status_reg_reg_n_0_[24] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[25] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(D[33]),
        .Q(\status_reg_reg_n_0_[25] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[26] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(stack_violation_occurence_synced),
        .Q(\status_reg_reg_n_0_[26] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[27] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sleep_synced),
        .Q(\status_reg_reg_n_0_[27] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[2] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_2),
        .Q(\status_reg_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[3] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_3),
        .Q(\status_reg_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[4] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_4),
        .Q(\status_reg_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[5] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_5),
        .Q(\status_reg_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[6] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_6),
        .Q(\status_reg_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[7] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_7),
        .Q(\status_reg_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[8] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_8),
        .Q(\status_reg_reg_n_0_[8] ));
  FDCE #(
    .INIT(1'b0)) 
    \status_reg_reg[9] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(\New_Instr_Reg_TCK[0]_i_1_n_0 ),
        .D(sync_dbg_hit_n_9),
        .Q(\status_reg_reg_n_0_[9] ));
  system_microblaze_0_0_mb_sync_bit__parameterized35 sync_dbg_brk_hit
       (.D(dbg_brki_hit_synced),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .dbg_brki_hit(dbg_brki_hit));
  system_microblaze_0_0_mb_sync_vec sync_dbg_hit
       (.D({sync,sync_dbg_hit_n_1,sync_dbg_hit_n_2,sync_dbg_hit_n_3,sync_dbg_hit_n_4,sync_dbg_hit_n_5,sync_dbg_hit_n_6,sync_dbg_hit_n_7,sync_dbg_hit_n_8,sync_dbg_hit_n_9,sync_dbg_hit_n_10,sync_dbg_hit_n_11,sync_dbg_hit_n_12,sync_dbg_hit_n_13,sync_dbg_hit_n_14,sync_dbg_hit_n_15}),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[10] (\Performace_Debug_Control.dbg_hit_reg_n_0_[10] ),
        .\Performace_Debug_Control.dbg_hit_reg[11] (\Performace_Debug_Control.dbg_hit_reg_n_0_[11] ),
        .\Performace_Debug_Control.dbg_hit_reg[12] (\Performace_Debug_Control.dbg_hit_reg_n_0_[12] ),
        .\Performace_Debug_Control.dbg_hit_reg[13] (\Performace_Debug_Control.dbg_hit_reg_n_0_[13] ),
        .\Performace_Debug_Control.dbg_hit_reg[14] (\Performace_Debug_Control.dbg_hit_reg_n_0_[14] ),
        .\Performace_Debug_Control.dbg_hit_reg[15] (\Performace_Debug_Control.dbg_hit_reg_n_0_[15] ),
        .\Performace_Debug_Control.dbg_hit_reg[1] (\Performace_Debug_Control.dbg_hit_reg_n_0_[1] ),
        .\Performace_Debug_Control.dbg_hit_reg[2] (\Performace_Debug_Control.dbg_hit_reg_n_0_[2] ),
        .\Performace_Debug_Control.dbg_hit_reg[3] (\Performace_Debug_Control.dbg_hit_reg_n_0_[3] ),
        .\Performace_Debug_Control.dbg_hit_reg[4] (\Performace_Debug_Control.dbg_hit_reg_n_0_[4] ),
        .\Performace_Debug_Control.dbg_hit_reg[5] (\Performace_Debug_Control.dbg_hit_reg_n_0_[5] ),
        .\Performace_Debug_Control.dbg_hit_reg[6] (\Performace_Debug_Control.dbg_hit_reg_n_0_[6] ),
        .\Performace_Debug_Control.dbg_hit_reg[7] (\Performace_Debug_Control.dbg_hit_reg_n_0_[7] ),
        .\Performace_Debug_Control.dbg_hit_reg[8] (\Performace_Debug_Control.dbg_hit_reg_n_0_[8] ),
        .\Performace_Debug_Control.dbg_hit_reg[9] (\Performace_Debug_Control.dbg_hit_reg_n_0_[9] ),
        .Raw(Raw),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized37 sync_running_clock
       (.D(running_clock_synced),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .running_clock(running_clock));
  system_microblaze_0_0_mb_sync_vec__parameterized1 sync_sample
       (.Clk(Clk),
        .D({sample_synced[0],sample_synced[1],sample_synced[2],sample_synced[3],sample_synced[4],sample_synced[5],sample_synced[6],sample_synced[7],sample_synced[8]}),
        .Dbg_Disable(Dbg_Disable),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[0]),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[0]),
        .Dbg_Trig_In(Dbg_Trig_In[0]),
        .Dbg_Trig_Out(Dbg_Trig_Out[0]),
        .New_Dbg_Instr2_TCK_reg(New_Dbg_Instr2_TCK),
        .Q({\sample_synced_1_reg_n_0_[0] ,\sample_synced_1_reg_n_0_[1] ,\sample_synced_1_reg_n_0_[2] ,\sample_synced_1_reg_n_0_[3] ,\sample_synced_1_reg_n_0_[4] ,p_0_in,\sample_synced_1_reg_n_0_[6] ,p_0_in59_in,\sample_synced_1_reg_n_0_[8] }),
        .Rst18_out(Rst18_out),
        .\command_reg_reg[0] ({command_reg[0],command_reg[1]}),
        .continue_from_brk0(continue_from_brk0),
        .continue_from_brk_TClk_reg(continue_from_brk_TClk),
        .force_stop_TClk_reg(force_stop_TClk),
        .force_stop_cmd_i0(force_stop_cmd_i0),
        .if_debug_ready_i0(if_debug_ready_i0),
        .normal_stop_TClk_reg(normal_stop_TClk),
        .normal_stop_cmd_i0(normal_stop_cmd_i0),
        .out(out),
        .read_register_MSR0(read_register_MSR0),
        .read_register_PC0(read_register_PC0),
        .single_Step_TClk_reg(single_Step_TClk),
        .start_single_cmd0(start_single_cmd0),
        .trig_ack_out_1_reg(sync_sample_n_17),
        .trig_in_1_reg(sync_sample_n_16));
  system_microblaze_0_0_mb_sync_bit__parameterized41 sync_sleep
       (.D(sleep_synced),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .Sleep_Decode(Sleep_Decode),
        .sleep_reset_mode_reg(\Single_Synchronize.use_async_reset.sync_reg_0 ));
  system_microblaze_0_0_mb_sync_bit__parameterized39 sync_stack_violation_occurence
       (.D(stack_violation_occurence_synced),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized33 sync_stop_CPU
       (.D(sync_stop_CPU_n_0),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Single_Synchronize.use_async_reset.sync_reg ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized52 sync_trig_ack_in_0
       (.Clk(Clk),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[1]),
        .Dbg_Trig_In(Dbg_Trig_In[1]),
        .Rst18_out(Rst18_out),
        .dbg_state_i(dbg_state_i),
        .mb_halted_1(mb_halted_1),
        .trig_ack_in_0_synced(trig_ack_in_0_synced),
        .trig_ack_in_0_synced_1(trig_ack_in_0_synced_1),
        .trig_in_0_reg(sync_trig_ack_in_0_n_1));
  system_microblaze_0_0_mb_sync_bit__parameterized54 sync_trig_out_0
       (.Clk(Clk),
        .Dbg_Disable(Dbg_Disable),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[1]),
        .Dbg_Trig_Out(Dbg_Trig_Out[1]),
        .\Performace_Debug_Control.dbg_stop_i_reg (sync_trig_out_0_n_2),
        .\Performace_Debug_Control.dbg_stop_i_reg_0 (\Performace_Debug_Control.dbg_stop_i_reg_n_0 ),
        .\Performace_Debug_Control.trig_ack_out_0_reg (sync_trig_out_0_n_1),
        .Rst18_out(Rst18_out),
        .dbg_state_i(dbg_state_i),
        .dbg_stop_1(dbg_stop_1),
        .dbg_stop_i(dbg_stop_i),
        .out(out),
        .trig_out_0_synced(trig_out_0_synced),
        .trig_out_0_synced_1(trig_out_0_synced_1));
  FDRE trig_ack_in_0_synced_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(trig_ack_in_0_synced),
        .Q(trig_ack_in_0_synced_1),
        .R(Rst18_out));
  FDRE trig_ack_out_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sync_sample_n_17),
        .Q(Dbg_Trig_Ack_Out[0]),
        .R(1'b0));
  FDRE trig_in_0_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sync_trig_ack_in_0_n_1),
        .Q(Dbg_Trig_In[1]),
        .R(1'b0));
  FDRE trig_in_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sync_sample_n_16),
        .Q(Dbg_Trig_In[0]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "Decode_gti" *) 
module system_microblaze_0_0_Decode_gti
   (use_Reg_Neg_S_reg,
    D,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    of_gpr_op3_rd_addr,
    of_gpr_op1_rd_addr,
    of_imm_data,
    use_Reg_Neg_S_reg_0,
    \Using_FPGA.Native_1 ,
    Trace_WB_Jump_Hit_reg_0,
    ex_byte_access,
    ex_doublet_access,
    ex_reverse_byteorder,
    ex_op1_cmp_equal,
    ex_op1_cmp_equal_n,
    wb_gpr_write_i_reg_0,
    mem_Exception_Taken,
    ex_move_to_MSR_instr,
    ex_Exception_Taken,
    wb_piperun,
    mem_databus_read,
    IFetch,
    mem_databus_write,
    wb_byte_access,
    ex_cmp_op,
    ex_unsigned_op,
    ex_use_carry,
    EX_Enable_ALU,
    EX_ALU_Sel_Logic,
    ex_swap_byte_instr,
    mem_sel_msr,
    MEM_Sel_MEM_Res,
    wb_gpr_wr_dbg,
    wb_read_imm_reg,
    wb_read_imm_reg_1,
    wb_pc_valid,
    dbg_clean_stop,
    wb_sel_spr_shr,
    mem_databus_access,
    DI,
    Q,
    wb_Halted,
    \EX_Op2_reg[0] ,
    EX_Fwd,
    of_Take_Interrupt,
    E,
    restore_wb_msr_to_ex,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    SRI,
    dbg_state_i,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    of_op1_sel_spr,
    \EX_Op3_reg[0] ,
    of_op3_sel,
    \EX_Branch_CMP_Op1_reg[0] ,
    of_op1_sel,
    \Using_FPGA.Native_6 ,
    M_AXI_DP_AWVALID_i,
    \Performace_Debug_Control.dbg_hit_reg[15] ,
    dbg_stop_i,
    Sleep,
    Sleep_Decode,
    no_sleeping,
    M_AXI_DP_AWVALID_i1,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    R,
    exception_reg,
    executing_reg,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ,
    \Performace_Debug_Control.ex_brki_hit_reg ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    I1,
    \EX_Op1_reg[28] ,
    \EX_Op1_reg[29] ,
    \EX_Op1_reg[30] ,
    \EX_Op1_reg[31] ,
    \EX_Op1_reg[27] ,
    \EX_Op1_reg[26] ,
    \EX_Op1_reg[25] ,
    \EX_Op1_reg[24] ,
    \EX_Op1_reg[23] ,
    \EX_Op1_reg[22] ,
    \EX_Op1_reg[21] ,
    \EX_Op1_reg[20] ,
    \EX_Op1_reg[19] ,
    \EX_Op1_reg[18] ,
    \EX_Op1_reg[17] ,
    \EX_Op1_reg[16] ,
    \EX_Op1_reg[15] ,
    \EX_Op1_reg[14] ,
    \EX_Op1_reg[13] ,
    \EX_Op1_reg[12] ,
    \EX_Op1_reg[11] ,
    \EX_Op1_reg[10] ,
    \EX_Op1_reg[9] ,
    \EX_Op1_reg[8] ,
    \EX_Op1_reg[7] ,
    \EX_Op1_reg[6] ,
    \EX_Op1_reg[5] ,
    \EX_Op1_reg[4] ,
    \EX_Op1_reg[3] ,
    \EX_Op1_reg[2] ,
    \EX_Op1_reg[1] ,
    \Performace_Debug_Control.ex_watchpoint_brk_reg ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    Interrupt_Ack,
    out,
    Clk,
    I041_out,
    I139_out,
    ex_op1_zero,
    mem_databus_ready,
    \Performace_Debug_Control.dbg_stop_if_delay_i_reg ,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ,
    \Using_FPGA.Native_14 ,
    flush_pipe,
    IB_Ready,
    GPR_Op2,
    \EX_Op2_reg[0]_0 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \interrupt_address_d1_reg[0] ,
    \Using_FPGA.Native_17 ,
    \control_reg_reg[3] ,
    ex_MSR,
    \EX_Op1_reg[29]_0 ,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    Dbg_Disable,
    wb_MSR_cmb,
    of_MSR,
    \EX_Op1_reg[28]_0 ,
    ex_alu_carry,
    \EX_Op1_reg[0] ,
    dbg_stop_if_delay_i,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 ,
    \imm_reg_reg[0] ,
    GPR_Op3,
    GPR_Op1,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \EX_Op2_reg[31] ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ,
    \WB_MEM_Result_reg[0] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ,
    active_access_d1,
    DWait,
    DReady,
    \Performace_Debug_Control.dbg_state_nohalt_reg ,
    sleep_reset_mode_reg,
    in,
    Scan_Reset,
    Scan_Reset_Sel,
    Wakeup,
    \EX_Op2_reg[30] ,
    \EX_Op1_reg[7]_0 ,
    \EX_Op1_reg[6]_0 ,
    \EX_Op1_reg[5]_0 ,
    \EX_Op1_reg[4]_0 ,
    \EX_Op1_reg[3]_0 ,
    \EX_Op1_reg[2]_0 ,
    \EX_Op1_reg[1]_0 ,
    \EX_Op1_reg[0]_0 ,
    \EX_Op1_reg[15]_0 ,
    \EX_Op1_reg[24]_0 ,
    \EX_Op1_reg[14]_0 ,
    \EX_Op1_reg[13]_0 ,
    \EX_Op1_reg[12]_0 ,
    \EX_Op1_reg[11]_0 ,
    \EX_Op1_reg[10]_0 ,
    \EX_Op1_reg[9]_0 ,
    \EX_Op1_reg[8]_0 ,
    \EX_Op1_reg[23]_0 ,
    \EX_Op1_reg[24]_1 ,
    \EX_Op1_reg[22]_0 ,
    \EX_Op1_reg[21]_0 ,
    \EX_Op1_reg[20]_0 ,
    \EX_Op1_reg[19]_0 ,
    \EX_Op1_reg[18]_0 ,
    \EX_Op1_reg[17]_0 ,
    \EX_Op1_reg[16]_0 ,
    \EX_Op1_reg[31]_0 ,
    \EX_Op1_reg[30]_0 ,
    \EX_Op1_reg[29]_1 ,
    \EX_Op1_reg[28]_1 ,
    \EX_Op1_reg[27]_0 ,
    \EX_Op1_reg[26]_0 ,
    \EX_Op1_reg[25]_0 ,
    \EX_Op1_reg[24]_2 ,
    LOCKSTEP_Master_Out,
    executing_reg_0,
    Rst18_out,
    executing0,
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ,
    p_36_out,
    \control_reg_reg[8] ,
    IReady,
    if_debug_ready_i_reg,
    \EX_Op1_reg[30]_1 ,
    \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ,
    \EX_Branch_CMP_Op1_reg[0]_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output use_Reg_Neg_S_reg;
  output [31:0]D;
  output [1:0]\Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output [0:4]of_gpr_op3_rd_addr;
  output [0:4]of_gpr_op1_rd_addr;
  output [0:15]of_imm_data;
  output [0:0]use_Reg_Neg_S_reg_0;
  output \Using_FPGA.Native_1 ;
  output Trace_WB_Jump_Hit_reg_0;
  output ex_byte_access;
  output ex_doublet_access;
  output ex_reverse_byteorder;
  output ex_op1_cmp_equal;
  output ex_op1_cmp_equal_n;
  output wb_gpr_write_i_reg_0;
  output mem_Exception_Taken;
  output ex_move_to_MSR_instr;
  output ex_Exception_Taken;
  output wb_piperun;
  output mem_databus_read;
  output [135:0]IFetch;
  output mem_databus_write;
  output wb_byte_access;
  output ex_cmp_op;
  output ex_unsigned_op;
  output ex_use_carry;
  output EX_Enable_ALU;
  output EX_ALU_Sel_Logic;
  output ex_swap_byte_instr;
  output mem_sel_msr;
  output MEM_Sel_MEM_Res;
  output wb_gpr_wr_dbg;
  output wb_read_imm_reg;
  output wb_read_imm_reg_1;
  output wb_pc_valid;
  output dbg_clean_stop;
  output wb_sel_spr_shr;
  output mem_databus_access;
  output DI;
  output [1:0]Q;
  output wb_Halted;
  output [31:0]\EX_Op2_reg[0] ;
  output [0:31]EX_Fwd;
  output of_Take_Interrupt;
  output [0:0]E;
  output restore_wb_msr_to_ex;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output SRI;
  output dbg_state_i;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output of_op1_sel_spr;
  output [15:0]\EX_Op3_reg[0] ;
  output [0:1]of_op3_sel;
  output [15:0]\EX_Branch_CMP_Op1_reg[0] ;
  output [0:1]of_op1_sel;
  output \Using_FPGA.Native_6 ;
  output M_AXI_DP_AWVALID_i;
  output \Performace_Debug_Control.dbg_hit_reg[15] ;
  output dbg_stop_i;
  output Sleep;
  output Sleep_Decode;
  output no_sleeping;
  output M_AXI_DP_AWVALID_i1;
  output [1:0]\Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output R;
  output exception_reg;
  output executing_reg;
  output \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  output \Performace_Debug_Control.ex_brki_hit_reg ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output I1;
  output \EX_Op1_reg[28] ;
  output \EX_Op1_reg[29] ;
  output \EX_Op1_reg[30] ;
  output \EX_Op1_reg[31] ;
  output \EX_Op1_reg[27] ;
  output \EX_Op1_reg[26] ;
  output \EX_Op1_reg[25] ;
  output \EX_Op1_reg[24] ;
  output \EX_Op1_reg[23] ;
  output \EX_Op1_reg[22] ;
  output \EX_Op1_reg[21] ;
  output \EX_Op1_reg[20] ;
  output \EX_Op1_reg[19] ;
  output \EX_Op1_reg[18] ;
  output \EX_Op1_reg[17] ;
  output \EX_Op1_reg[16] ;
  output \EX_Op1_reg[15] ;
  output \EX_Op1_reg[14] ;
  output \EX_Op1_reg[13] ;
  output \EX_Op1_reg[12] ;
  output \EX_Op1_reg[11] ;
  output \EX_Op1_reg[10] ;
  output \EX_Op1_reg[9] ;
  output \EX_Op1_reg[8] ;
  output \EX_Op1_reg[7] ;
  output \EX_Op1_reg[6] ;
  output \EX_Op1_reg[5] ;
  output \EX_Op1_reg[4] ;
  output \EX_Op1_reg[3] ;
  output \EX_Op1_reg[2] ;
  output \EX_Op1_reg[1] ;
  output \Performace_Debug_Control.ex_watchpoint_brk_reg ;
  output [0:0]\Using_FPGA.Native_12 ;
  output [31:0]\Using_FPGA.Native_13 ;
  output [0:1]Interrupt_Ack;
  input [0:0]out;
  input Clk;
  input I041_out;
  input I139_out;
  input ex_op1_zero;
  input mem_databus_ready;
  input \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  input \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  input \Using_FPGA.Native_14 ;
  input flush_pipe;
  input IB_Ready;
  input [0:31]GPR_Op2;
  input [45:0]\EX_Op2_reg[0]_0 ;
  input [29:0]\Using_FPGA.Native_15 ;
  input [2:0]\Using_FPGA.Native_16 ;
  input [31:0]\interrupt_address_d1_reg[0] ;
  input [0:0]\Using_FPGA.Native_17 ;
  input \control_reg_reg[3] ;
  input [2:0]ex_MSR;
  input \EX_Op1_reg[29]_0 ;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input Dbg_Disable;
  input [0:0]wb_MSR_cmb;
  input [1:0]of_MSR;
  input \EX_Op1_reg[28]_0 ;
  input ex_alu_carry;
  input [31:0]\EX_Op1_reg[0] ;
  input dbg_stop_if_delay_i;
  input \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 ;
  input [15:0]\imm_reg_reg[0] ;
  input [15:0]GPR_Op3;
  input [15:0]GPR_Op1;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input [0:0]\EX_Op2_reg[31] ;
  input [0:0]\Using_FPGA.Native_18 ;
  input [15:0]\Using_FPGA.Native_19 ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ;
  input [15:0]\WB_MEM_Result_reg[0] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ;
  input active_access_d1;
  input DWait;
  input DReady;
  input \Performace_Debug_Control.dbg_state_nohalt_reg ;
  input sleep_reset_mode_reg;
  input [32:0]in;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input [0:1]Wakeup;
  input [1:0]\EX_Op2_reg[30] ;
  input \EX_Op1_reg[7]_0 ;
  input \EX_Op1_reg[6]_0 ;
  input \EX_Op1_reg[5]_0 ;
  input \EX_Op1_reg[4]_0 ;
  input \EX_Op1_reg[3]_0 ;
  input \EX_Op1_reg[2]_0 ;
  input \EX_Op1_reg[1]_0 ;
  input \EX_Op1_reg[0]_0 ;
  input \EX_Op1_reg[15]_0 ;
  input \EX_Op1_reg[24]_0 ;
  input \EX_Op1_reg[14]_0 ;
  input \EX_Op1_reg[13]_0 ;
  input \EX_Op1_reg[12]_0 ;
  input \EX_Op1_reg[11]_0 ;
  input \EX_Op1_reg[10]_0 ;
  input \EX_Op1_reg[9]_0 ;
  input \EX_Op1_reg[8]_0 ;
  input \EX_Op1_reg[23]_0 ;
  input \EX_Op1_reg[24]_1 ;
  input \EX_Op1_reg[22]_0 ;
  input \EX_Op1_reg[21]_0 ;
  input \EX_Op1_reg[20]_0 ;
  input \EX_Op1_reg[19]_0 ;
  input \EX_Op1_reg[18]_0 ;
  input \EX_Op1_reg[17]_0 ;
  input \EX_Op1_reg[16]_0 ;
  input \EX_Op1_reg[31]_0 ;
  input \EX_Op1_reg[30]_0 ;
  input \EX_Op1_reg[29]_1 ;
  input \EX_Op1_reg[28]_1 ;
  input \EX_Op1_reg[27]_0 ;
  input \EX_Op1_reg[26]_0 ;
  input \EX_Op1_reg[25]_0 ;
  input \EX_Op1_reg[24]_2 ;
  input [1:0]LOCKSTEP_Master_Out;
  input [1:0]executing_reg_0;
  input Rst18_out;
  input executing0;
  input \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  input p_36_out;
  input [0:0]\control_reg_reg[8] ;
  input IReady;
  input if_debug_ready_i_reg;
  input \EX_Op1_reg[30]_1 ;
  input \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ;
  input [0:0]\EX_Branch_CMP_Op1_reg[0]_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  input lopt_5;

  wire Clk;
  wire [31:0]D;
  wire D122_out;
  wire DI;
  wire DReady;
  wire DWait;
  wire \Data_Flow_I/Shift_Logic_Module_I/O ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O0_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O10_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O11_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O12_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O13_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O14_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O15_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O17_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O18_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O19_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O1_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O20_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O21_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O22_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O23_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O24_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O26_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O27_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O28_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O29_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O2_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O30_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O31_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O3_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O4_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O5_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O6_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O7_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O8_out ;
  wire \Data_Flow_I/Shift_Logic_Module_I/O9_out ;
  wire \Data_Flow_I/msr_reg_i/p_20_in ;
  wire Dbg_Disable;
  wire [0:0]E;
  wire EX_ALU_Sel_Logic;
  wire [15:0]\EX_Branch_CMP_Op1_reg[0] ;
  wire [0:0]\EX_Branch_CMP_Op1_reg[0]_0 ;
  wire EX_Enable_ALU;
  wire [0:31]EX_Fwd;
  wire EX_Is_Div_Instr;
  wire EX_MBAR_Stall;
  wire [31:0]\EX_Op1_reg[0] ;
  wire \EX_Op1_reg[0]_0 ;
  wire \EX_Op1_reg[10] ;
  wire \EX_Op1_reg[10]_0 ;
  wire \EX_Op1_reg[11] ;
  wire \EX_Op1_reg[11]_0 ;
  wire \EX_Op1_reg[12] ;
  wire \EX_Op1_reg[12]_0 ;
  wire \EX_Op1_reg[13] ;
  wire \EX_Op1_reg[13]_0 ;
  wire \EX_Op1_reg[14] ;
  wire \EX_Op1_reg[14]_0 ;
  wire \EX_Op1_reg[15] ;
  wire \EX_Op1_reg[15]_0 ;
  wire \EX_Op1_reg[16] ;
  wire \EX_Op1_reg[16]_0 ;
  wire \EX_Op1_reg[17] ;
  wire \EX_Op1_reg[17]_0 ;
  wire \EX_Op1_reg[18] ;
  wire \EX_Op1_reg[18]_0 ;
  wire \EX_Op1_reg[19] ;
  wire \EX_Op1_reg[19]_0 ;
  wire \EX_Op1_reg[1] ;
  wire \EX_Op1_reg[1]_0 ;
  wire \EX_Op1_reg[20] ;
  wire \EX_Op1_reg[20]_0 ;
  wire \EX_Op1_reg[21] ;
  wire \EX_Op1_reg[21]_0 ;
  wire \EX_Op1_reg[22] ;
  wire \EX_Op1_reg[22]_0 ;
  wire \EX_Op1_reg[23] ;
  wire \EX_Op1_reg[23]_0 ;
  wire \EX_Op1_reg[24] ;
  wire \EX_Op1_reg[24]_0 ;
  wire \EX_Op1_reg[24]_1 ;
  wire \EX_Op1_reg[24]_2 ;
  wire \EX_Op1_reg[25] ;
  wire \EX_Op1_reg[25]_0 ;
  wire \EX_Op1_reg[26] ;
  wire \EX_Op1_reg[26]_0 ;
  wire \EX_Op1_reg[27] ;
  wire \EX_Op1_reg[27]_0 ;
  wire \EX_Op1_reg[28] ;
  wire \EX_Op1_reg[28]_0 ;
  wire \EX_Op1_reg[28]_1 ;
  wire \EX_Op1_reg[29] ;
  wire \EX_Op1_reg[29]_0 ;
  wire \EX_Op1_reg[29]_1 ;
  wire \EX_Op1_reg[2] ;
  wire \EX_Op1_reg[2]_0 ;
  wire \EX_Op1_reg[30] ;
  wire \EX_Op1_reg[30]_0 ;
  wire \EX_Op1_reg[30]_1 ;
  wire \EX_Op1_reg[31] ;
  wire \EX_Op1_reg[31]_0 ;
  wire \EX_Op1_reg[3] ;
  wire \EX_Op1_reg[3]_0 ;
  wire \EX_Op1_reg[4] ;
  wire \EX_Op1_reg[4]_0 ;
  wire \EX_Op1_reg[5] ;
  wire \EX_Op1_reg[5]_0 ;
  wire \EX_Op1_reg[6] ;
  wire \EX_Op1_reg[6]_0 ;
  wire \EX_Op1_reg[7] ;
  wire \EX_Op1_reg[7]_0 ;
  wire \EX_Op1_reg[8] ;
  wire \EX_Op1_reg[8]_0 ;
  wire \EX_Op1_reg[9] ;
  wire \EX_Op1_reg[9]_0 ;
  wire \EX_Op2[10]_i_4_n_0 ;
  wire \EX_Op2[11]_i_4_n_0 ;
  wire \EX_Op2[12]_i_4_n_0 ;
  wire \EX_Op2[13]_i_4_n_0 ;
  wire \EX_Op2[14]_i_4_n_0 ;
  wire \EX_Op2[15]_i_4_n_0 ;
  wire \EX_Op2[16]_i_3_n_0 ;
  wire \EX_Op2[17]_i_3_n_0 ;
  wire \EX_Op2[18]_i_3_n_0 ;
  wire \EX_Op2[19]_i_3_n_0 ;
  wire \EX_Op2[1]_i_6_n_0 ;
  wire \EX_Op2[20]_i_3_n_0 ;
  wire \EX_Op2[21]_i_3_n_0 ;
  wire \EX_Op2[22]_i_3_n_0 ;
  wire \EX_Op2[23]_i_3_n_0 ;
  wire \EX_Op2[24]_i_3_n_0 ;
  wire \EX_Op2[25]_i_3_n_0 ;
  wire \EX_Op2[26]_i_3_n_0 ;
  wire \EX_Op2[29]_i_3_n_0 ;
  wire \EX_Op2[2]_i_4_n_0 ;
  wire \EX_Op2[30]_i_3_n_0 ;
  wire \EX_Op2[31]_i_3_n_0 ;
  wire \EX_Op2[3]_i_4_n_0 ;
  wire \EX_Op2[4]_i_4_n_0 ;
  wire \EX_Op2[5]_i_4_n_0 ;
  wire \EX_Op2[6]_i_4_n_0 ;
  wire \EX_Op2[7]_i_4_n_0 ;
  wire \EX_Op2[8]_i_4_n_0 ;
  wire \EX_Op2[9]_i_4_n_0 ;
  wire [31:0]\EX_Op2_reg[0] ;
  wire [45:0]\EX_Op2_reg[0]_0 ;
  wire [1:0]\EX_Op2_reg[30] ;
  wire [0:0]\EX_Op2_reg[31] ;
  wire [15:0]\EX_Op3_reg[0] ;
  wire [15:0]GPR_Op1;
  wire [0:31]GPR_Op2;
  wire [15:0]GPR_Op3;
  wire I0;
  wire I041_out;
  wire I1;
  wire I139_out;
  wire I2;
  wire I4;
  wire IB_Ready;
  wire IF_PC_Write;
  wire [135:0]IFetch;
  wire IReady;
  wire [0:1]Interrupt_Ack;
  wire [1:0]LOCKSTEP_Master_Out;
  wire MEM_Sel_MEM_Res;
  wire MEM_Sel_MEM_Res_I_i_2_n_0;
  wire M_AXI_DP_AWVALID_i;
  wire M_AXI_DP_AWVALID_i1;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.dbg_hit_reg[15] ;
  wire \Performace_Debug_Control.dbg_state_nohalt_reg ;
  wire \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire \Performace_Debug_Control.ex_brki_hit_reg ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  wire \Performace_Debug_Control.ex_watchpoint_brk_reg ;
  wire \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ;
  wire PreFetch_Buffer_I1_n_138;
  wire PreFetch_Buffer_I1_n_141;
  wire PreFetch_Buffer_I1_n_143;
  wire PreFetch_Buffer_I1_n_145;
  wire PreFetch_Buffer_I1_n_146;
  wire PreFetch_Buffer_I1_n_147;
  wire PreFetch_Buffer_I1_n_154;
  wire PreFetch_Buffer_I1_n_155;
  wire PreFetch_Buffer_I1_n_156;
  wire PreFetch_Buffer_I1_n_157;
  wire PreFetch_Buffer_I1_n_158;
  wire PreFetch_Buffer_I1_n_159;
  wire PreFetch_Buffer_I1_n_160;
  wire PreFetch_Buffer_I1_n_161;
  wire PreFetch_Buffer_I1_n_162;
  wire PreFetch_Buffer_I1_n_163;
  wire PreFetch_Buffer_I1_n_164;
  wire PreFetch_Buffer_I1_n_165;
  wire PreFetch_Buffer_I1_n_167;
  wire PreFetch_Buffer_I1_n_168;
  wire PreFetch_Buffer_I1_n_169;
  wire PreFetch_Buffer_I1_n_170;
  wire PreFetch_Buffer_I1_n_171;
  wire PreFetch_Buffer_I1_n_172;
  wire PreFetch_Buffer_I1_n_54;
  wire PreFetch_Buffer_I1_n_92;
  wire PreFetch_Buffer_I1_n_94;
  wire PreFetch_Buffer_I1_n_95;
  wire PreFetch_Buffer_I1_n_96;
  wire [1:0]Q;
  wire R;
  wire Rst18_out;
  wire SRI;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire Sleep;
  wire Sleep_Decode;
  wire Trace_WB_Jump_Hit_reg_0;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ;
  wire \Use_MuxCy[10].OF_Piperun_Stage_n_1 ;
  wire \Use_MuxCy[10].OF_Piperun_Stage_n_2 ;
  wire \Use_MuxCy[10].OF_Piperun_Stage_n_3 ;
  wire \Use_MuxCy[10].OF_Piperun_Stage_n_4 ;
  wire \Use_MuxCy[10].OF_Piperun_Stage_n_6 ;
  wire \Use_MuxCy[10].OF_Piperun_Stage_n_8 ;
  wire \Use_MuxCy[10].OF_Piperun_Stage_n_9 ;
  wire \Use_MuxCy[3].OF_Piperun_Stage_n_1 ;
  wire \Use_MuxCy[3].OF_Piperun_Stage_n_5 ;
  wire \Use_MuxCy[3].OF_Piperun_Stage_n_6 ;
  wire \Use_MuxCy[3].OF_Piperun_Stage_n_7 ;
  wire \Use_MuxCy[3].OF_Piperun_Stage_n_8 ;
  wire [1:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire [0:0]\Using_FPGA.Native_12 ;
  wire [31:0]\Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire [29:0]\Using_FPGA.Native_15 ;
  wire [2:0]\Using_FPGA.Native_16 ;
  wire [0:0]\Using_FPGA.Native_17 ;
  wire [0:0]\Using_FPGA.Native_18 ;
  wire [15:0]\Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire [1:0]\Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_3__33_n_0 ;
  wire \Using_FPGA.Native_i_3_n_0 ;
  wire \Using_FPGA.Native_i_5__1_n_0 ;
  wire \Using_FPGA_2.ex_is_load_instr_Inst_n_3 ;
  wire \Using_FPGA_2.ex_is_lwx_instr_Inst_n_1 ;
  wire \Using_FPGA_2.ex_is_swx_instr_Inst_n_3 ;
  wire \Using_FPGA_2.ex_load_store_instr_Inst_n_3 ;
  wire \Using_FPGA_3.of_clear_MSR_BIP_hold_Inst_n_1 ;
  wire \Using_Fast_Interrupt.Interrupt_Ack[0]_i_1_n_0 ;
  wire \Using_Fast_Interrupt.Interrupt_Ack[1]_i_1_n_0 ;
  wire [15:0]\WB_MEM_Result_reg[0] ;
  wire [0:1]Wakeup;
  wire Write_Strobe_INST_0_i_1_n_0;
  wire active_access_d1;
  wire active_wakeup;
  wire active_wakeup0;
  wire \control_reg_reg[3] ;
  wire [0:0]\control_reg_reg[8] ;
  wire dbg_clean_stop;
  wire dbg_state_i;
  wire dbg_stop_i;
  wire dbg_stop_if_delay_i;
  wire ex_Enable_Sext_Shift;
  wire ex_Exception_Taken;
  wire ex_Instr_Excep_combo;
  wire ex_Interrupt_Brk_combo_i_3_n_0;
  wire ex_Interrupt_i;
  wire [2:0]ex_MSR;
  wire ex_MSR_Load_LWX_SWX_C;
  wire ex_MSR_Set_SW_BIP;
  wire ex_Sel_SPR_BTR;
  wire ex_Sel_SPR_EAR;
  wire ex_Sel_SPR_EDR;
  wire ex_Sel_SPR_ESR;
  wire ex_Sel_SPR_FSR;
  wire ex_Sel_SPR_PVR;
  wire ex_Sel_SPR_SHR;
  wire ex_Sel_SPR_SLR;
  wire ex_Take_Intr_or_Exc;
  (* RTL_KEEP = "true" *) wire ex_Write_DCache_decode_cmb;
  wire ex_Write_ICache_i;
  (* RTL_KEEP = "true" *) wire ex_Write_ICache_i_cmb;
  wire ex_alu_carry;
  wire ex_atomic_Instruction_Pair;
  wire ex_atomic_Instruction_Pair0;
  wire ex_branch_with_delayslot;
  wire ex_byte_access;
  wire ex_cmp_op;
  wire ex_delayslot_Instr;
  wire ex_delayslot_Instr0;
  wire ex_delayslot_Instr2;
  wire ex_div_unsigned;
  wire ex_doublet_access;
  wire ex_enable_sext_shift_i0;
  wire ex_first_cycle;
  wire \ex_gpr_write_addr_reg_n_0_[0] ;
  wire \ex_gpr_write_addr_reg_n_0_[4] ;
  wire ex_gpr_write_dbg;
  wire ex_gpr_write_reg_n_0;
  wire [0:31]ex_instr;
  wire \ex_instr_reg_n_0_[27] ;
  wire \ex_instr_reg_n_0_[30] ;
  wire ex_is_lwx_instr_s;
  wire ex_is_multi_instr2;
  wire ex_is_multi_or_load_instr;
  wire ex_is_multi_or_load_instr0;
  wire ex_is_swx_instr_s;
  wire ex_jump_hold;
  wire ex_jump_nodelay_i_2_n_0;
  wire ex_jump_nodelay_reg_n_0;
  wire ex_jump_q;
  wire ex_load_alu_carry_reg_n_0;
  wire ex_load_shift_carry;
  wire ex_load_store_instr_s;
  wire ex_mbar_decode;
  (* RTL_KEEP = "true" *) wire ex_mbar_decode_cmb;
  wire ex_mbar_is_sleep;
  (* RTL_KEEP = "true" *) wire ex_mbar_is_sleep_cmb;
  wire ex_mbar_sleep;
  wire ex_mbar_sleep0;
  wire ex_mbar_sleep_i_1_n_0;
  wire ex_mbar_stall_no_sleep;
  wire ex_mbar_stall_no_sleep_1;
  wire ex_mbar_stall_no_sleep_10;
  wire ex_mfsmsr_i;
  wire ex_move_to_MSR_instr;
  wire ex_move_to_MSR_instr29_out;
  wire ex_op1_cmp_eq;
  wire ex_op1_cmp_eq1;
  wire ex_op1_cmp_eq_n5_out;
  wire ex_op1_cmp_equal;
  wire ex_op1_cmp_equal_n;
  wire ex_op1_zero;
  wire [0:5]ex_opcode;
  wire ex_read_imm_reg;
  wire ex_read_imm_reg_1;
  wire ex_read_imm_reg_i_1_n_0;
  wire ex_reservation;
  wire ex_reverse_byteorder;
  wire ex_sel_alu;
  wire ex_sel_alu_i0;
  wire ex_set_MSR_IE_instr;
  wire ex_set_bip;
  wire ex_set_bip_reg_n_0;
  wire [0:1]ex_shift_op;
  wire ex_sleep_i_i_1_n_0;
  wire ex_sleep_i_i_2_n_0;
  wire ex_swap_byte_instr;
  wire ex_swap_instr;
  wire ex_unsigned_op;
  wire ex_use_carry;
  wire ex_valid;
  (* RTL_KEEP = "true" *) wire ex_valid_jump;
  wire ex_valid_keep;
  wire \ex_which_branch_reg_n_0_[10] ;
  wire ex_write_dcache_instr;
  wire exception_reg;
  wire executing0;
  wire executing_reg;
  wire [1:0]executing_reg_0;
  wire flush_pipe;
  wire force12_out;
  wire force_Val10_out;
  wire if_debug_ready_i_reg;
  wire if_fetch_for_timing_optimization1;
  wire if_fetch_in_progress;
  (* RTL_KEEP = "true" *) wire if_fetch_without_full_or_jump;
  wire if_missed_fetch;
  wire if_pc_incr_carry0;
  wire if_pc_incr_carry1;
  wire if_pc_incr_carry3;
  wire [1:1]if_pre_buffer_addr;
  wire [0:0]if_sel_input;
  wire [15:0]\imm_reg_reg[0] ;
  wire [32:0]in;
  wire [31:0]\interrupt_address_d1_reg[0] ;
  wire jump_logic_I1_n_10;
  wire jump_logic_I1_n_11;
  wire jump_logic_I1_n_12;
  wire jump_logic_I1_n_13;
  wire jump_logic_I1_n_14;
  wire jump_logic_I1_n_7;
  wire jump_logic_I1_n_8;
  wire jump_logic_I1_n_9;
  wire keep_jump_taken_with_ds;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire mem_Exception_Taken;
  wire mem_PipeRun_carry_and_n_3;
  wire mem_PipeRun_carry_and_n_4;
  wire mem_Write_DCache;
  wire mem_Write_DCache_i_1_n_0;
  wire mem_byte_access;
  wire mem_databus_access;
  wire mem_databus_read;
  wire mem_databus_ready;
  wire mem_databus_write;
  wire mem_delayslot_instr;
  wire mem_doublet_access;
  wire mem_exception_from_ex;
  wire [27:31]mem_exception_kind;
  wire mem_gpr_write;
  wire [0:4]mem_gpr_write_addr;
  wire mem_gpr_write_dbg;
  wire [0:31]mem_instr;
  wire mem_is_msr_instr0;
  wire mem_is_multi_or_load_instr;
  wire mem_is_multi_or_load_instr0;
  wire mem_jump_hit;
  wire mem_jump_hit0;
  wire mem_jump_taken;
  wire mem_jump_taken0;
  wire mem_load_store_access;
  wire mem_load_store_access0;
  wire mem_read_imm_reg;
  wire mem_read_imm_reg_1;
  wire mem_rtid_instr;
  wire mem_sel_msr;
  wire mem_valid_i_2_n_0;
  wire mem_valid_instr;
  wire mem_wait_on_ready_N;
  wire no_sleeping;
  wire of_Interrupt;
  wire [1:0]of_MSR;
  wire [0:3]of_PVR_Select;
  wire of_PipeRun_carry_10;
  wire of_PipeRun_carry_2;
  wire of_PipeRun_carry_3;
  wire of_PipeRun_carry_4;
  wire of_PipeRun_carry_5;
  wire of_PipeRun_carry_6;
  wire of_PipeRun_carry_7;
  wire of_PipeRun_carry_9;
  (* DIRECT_ENABLE *) wire of_PipeRun_for_ce;
  (* RTL_KEEP = "true" *) wire of_Sel_SPR_BTR;
  (* RTL_KEEP = "true" *) wire of_Sel_SPR_EAR;
  (* RTL_KEEP = "true" *) wire of_Sel_SPR_EDR;
  (* RTL_KEEP = "true" *) wire of_Sel_SPR_ESR;
  (* RTL_KEEP = "true" *) wire of_Sel_SPR_FSR;
  wire of_Sel_SPR_MSR3_out;
  (* RTL_KEEP = "true" *) wire of_Sel_SPR_PVR;
  (* RTL_KEEP = "true" *) wire of_Sel_SPR_SHR;
  (* RTL_KEEP = "true" *) wire of_Sel_SPR_SLR;
  wire of_Take_Interrupt;
  wire of_Take_Interrupt_hold;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [0:15]of_imm_data;
  wire [0:5]of_instr;
  wire of_next_ex_valid;
  wire [0:1]of_op1_sel;
  wire of_op1_sel_spr;
  wire [0:1]of_op3_sel;
  wire [5:10]of_pipe_ctrl;
  wire [1:10]of_predecode;
  wire of_read_ex_write_op1_conflict_part2;
  wire of_read_ex_write_op2_conflict_part1;
  wire of_read_ex_write_op2_conflict_part2;
  wire of_read_ex_write_op3_conflict_part1;
  wire of_read_ex_write_op3_conflict_part2;
  wire of_read_imm_reg_ii;
  wire of_read_mem_write_op1_conflict_part1;
  wire of_read_mem_write_op2_conflict_part1;
  wire of_read_mem_write_op2_conflict_part2;
  wire of_read_mem_write_op3_conflict_part2;
  wire of_set_MSR_IE;
  wire of_set_MSR_IE_hold0;
  wire of_set_MSR_IE_hold_reg_n_0;
  wire of_valid;
  wire p_0_in81_in;
  wire p_109_in;
  wire p_112_in;
  wire p_126_in;
  wire p_19_in;
  wire p_36_out;
  wire p_82_in;
  wire p_9_in;
  (* DIRECT_RESET *) wire reset_bool_for_rst;
  wire restore_wb_msr_to_ex;
  wire sleep_reset_mode_reg;
  wire use_Reg_Neg_DI1_out;
  wire use_Reg_Neg_S3_out;
  wire [0:0]use_Reg_Neg_S_reg_0;
  wire wb_Halted;
  wire [0:0]wb_MSR_cmb;
  wire wb_byte_access;
  wire wb_doublet_access;
  wire wb_gpr_wr_dbg;
  wire wb_gpr_write_dbg0;
  wire wb_gpr_write_i;
  wire wb_gpr_write_i0;
  wire wb_gpr_write_i_reg_0;
  wire wb_ie_rising;
  wire [0:4]wb_new_esr_ess_rx;
  wire wb_pc_valid;
  wire wb_piperun;
  wire wb_read_imm_reg;
  wire wb_read_imm_reg_1;
  wire wb_reset;
  wire wb_rtid_instr;
  wire wb_sel_spr_shr;
  wire wb_valid_reg_n_0;

  assign lopt_10 = lopt_4;
  assign lopt_11 = lopt_5;
  assign lopt_9 = lopt_3;
  assign reset_bool_for_rst = out[0];
  assign use_Reg_Neg_S_reg = of_PipeRun_for_ce;
  FDRE Dbg_Clean_Stop_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_160),
        .Q(dbg_clean_stop),
        .R(reset_bool_for_rst));
  FDRE \EX_ALU_Op_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_94),
        .Q(Q[1]),
        .R(reset_bool_for_rst));
  FDRE \EX_ALU_Op_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_95),
        .Q(Q[0]),
        .R(reset_bool_for_rst));
  FDRE EX_CMP_Op_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_161),
        .Q(ex_cmp_op),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[10]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [21]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[10]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[11]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [20]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[11]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[12]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [19]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[12]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[13]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [18]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[13]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[14]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [17]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[14]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[15]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [16]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[15]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[16]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [15]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[16]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[17]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [14]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[17]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[18]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [13]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[18]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[19]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [12]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[19]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[1]_i_6 
       (.I0(\interrupt_address_d1_reg[0] [30]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[1]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[20]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [11]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[20]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[21]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [10]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[21]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[22]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [9]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[22]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[23]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [8]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[23]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[24]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [7]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[24]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[25]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [6]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[25]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[26]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [5]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[26]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[29]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [2]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[29]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[2]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [29]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[30]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [1]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[30]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[31]_i_3 
       (.I0(\interrupt_address_d1_reg[0] [0]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[31]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[3]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [28]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[4]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [27]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[4]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[5]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [26]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[5]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[6]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [25]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[6]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[7]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [24]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[7]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[8]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [23]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[8]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op2[9]_i_4 
       (.I0(\interrupt_address_d1_reg[0] [22]),
        .I1(of_Take_Interrupt),
        .O(\EX_Op2[9]_i_4_n_0 ));
  FDRE EX_SWAP_BYTE_Instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_143),
        .Q(ex_swap_byte_instr),
        .R(reset_bool_for_rst));
  FDRE EX_SWAP_Instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_138),
        .Q(ex_swap_instr),
        .R(reset_bool_for_rst));
  FDRE \EX_Sext_Op_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_154),
        .Q(\Using_FPGA.Native_7 [1]),
        .R(reset_bool_for_rst));
  FDRE \EX_Sext_Op_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_155),
        .Q(\Using_FPGA.Native_7 [0]),
        .R(reset_bool_for_rst));
  FDRE \EX_Shift_Op_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[9]),
        .Q(ex_shift_op[0]),
        .R(reset_bool_for_rst));
  FDRE \EX_Shift_Op_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[10]),
        .Q(ex_shift_op[1]),
        .R(reset_bool_for_rst));
  FDRE EX_Unsigned_Op_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_162),
        .Q(ex_unsigned_op),
        .R(reset_bool_for_rst));
  FDRE EX_Use_Carry_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_163),
        .Q(ex_use_carry),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'h0000000011110001)) 
    IFetch_INST_0_i_1
       (.I0(ex_mbar_sleep),
        .I1(ex_mbar_stall_no_sleep),
        .I2(dbg_state_i),
        .I3(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(reset_bool_for_rst),
        .O(if_fetch_without_full_or_jump));
  LUT5 #(
    .INIT(32'h08080800)) 
    IFetch_INST_0_i_2
       (.I0(ex_mbar_decode),
        .I1(\Using_FPGA.Native_2 ),
        .I2(ex_jump_hold),
        .I3(ex_mbar_stall_no_sleep_1),
        .I4(ex_first_cycle),
        .O(ex_mbar_stall_no_sleep));
  FDRE MEM_DataBus_Access_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA_2.ex_is_swx_instr_Inst_n_3 ),
        .Q(mem_databus_access),
        .R(1'b0));
  FDRE \MEM_DataBus_Addr_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [45]),
        .Q(IFetch[95]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[10] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [35]),
        .Q(IFetch[85]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[11] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [34]),
        .Q(IFetch[84]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[12] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [33]),
        .Q(IFetch[83]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[13] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [32]),
        .Q(IFetch[82]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[14] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [31]),
        .Q(IFetch[81]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[15] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [30]),
        .Q(IFetch[80]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[16] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [29]),
        .Q(IFetch[79]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[17] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [28]),
        .Q(IFetch[78]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[18] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [27]),
        .Q(IFetch[77]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[19] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [26]),
        .Q(IFetch[76]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[1] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [44]),
        .Q(IFetch[94]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[20] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [25]),
        .Q(IFetch[75]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[21] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [24]),
        .Q(IFetch[74]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[22] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [23]),
        .Q(IFetch[73]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[23] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [22]),
        .Q(IFetch[72]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[24] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [21]),
        .Q(IFetch[71]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[25] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [20]),
        .Q(IFetch[70]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[26] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [19]),
        .Q(IFetch[69]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[27] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [18]),
        .Q(IFetch[68]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[28] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [17]),
        .Q(IFetch[67]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[29] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [16]),
        .Q(IFetch[66]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[2] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [43]),
        .Q(IFetch[93]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[30] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[30] [1]),
        .Q(IFetch[65]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[31] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[30] [0]),
        .Q(IFetch[64]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[3] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [42]),
        .Q(IFetch[92]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[4] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [41]),
        .Q(IFetch[91]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[5] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [40]),
        .Q(IFetch[90]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[6] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [39]),
        .Q(IFetch[89]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[7] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [38]),
        .Q(IFetch[88]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[8] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [37]),
        .Q(IFetch[87]),
        .R(reset_bool_for_rst));
  FDRE \MEM_DataBus_Addr_reg[9] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\EX_Op2_reg[0]_0 [36]),
        .Q(IFetch[86]),
        .R(reset_bool_for_rst));
  FDRE MEM_DataBus_Read_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(IFetch[101]),
        .Q(mem_databus_read),
        .R(reset_bool_for_rst));
  FDRE MEM_DataBus_Write_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(IFetch[100]),
        .Q(mem_databus_write),
        .R(reset_bool_for_rst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    MEM_Sel_MEM_Res_I_i_2
       (.I0(ex_Sel_SPR_EDR),
        .I1(ex_Sel_SPR_ESR),
        .I2(ex_Sel_SPR_BTR),
        .I3(ex_Sel_SPR_FSR),
        .O(MEM_Sel_MEM_Res_I_i_2_n_0));
  FDSE MEM_Sel_MEM_Res_I_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\Using_FPGA_2.ex_is_load_instr_Inst_n_3 ),
        .Q(MEM_Sel_MEM_Res),
        .S(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    M_AXI_DP_ARVALID_i_i_2
       (.I0(mem_databus_access),
        .I1(DReady),
        .I2(DWait),
        .I3(active_access_d1),
        .O(M_AXI_DP_AWVALID_i1));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT5 #(
    .INIT(32'h01000000)) 
    M_AXI_DP_AWVALID_i_i_2
       (.I0(active_access_d1),
        .I1(DWait),
        .I2(DReady),
        .I3(mem_databus_access),
        .I4(mem_databus_write),
        .O(M_AXI_DP_AWVALID_i));
  system_microblaze_0_0_PC_Module_gti PC_Module_I
       (.CI(if_pc_incr_carry3),
        .Clk(Clk),
        .D(D),
        .E(\Use_MuxCy[3].OF_Piperun_Stage_n_1 ),
        .\EX_Op2_reg[0] ({\EX_Op2_reg[0]_0 [45:16],\EX_Op2_reg[30] }),
        .\Instr_Addr[0] (IFetch[133:102]),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_0 (of_PipeRun_for_ce),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native [0]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native [1]),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .if_fetch_in_progress_reg(IF_PC_Write),
        .if_pre_buffer_addr(if_pre_buffer_addr),
        .if_sel_input(if_sel_input),
        .lopt(\^lopt_3 ),
        .lopt_1(\^lopt_4 ),
        .lopt_2(\^lopt_5 ),
        .lopt_3(lopt_6),
        .lopt_4(\Performace_Debug_Control.dbg_stop_if_delay_i_reg ),
        .lopt_5(lopt_7),
        .lopt_6(lopt_8),
        .lopt_7(if_fetch_for_timing_optimization1),
        .out(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \Performace_Debug_Control.dbg_hit[1]_i_1 
       (.I0(wb_Halted),
        .I1(reset_bool_for_rst),
        .I2(Dbg_Disable),
        .O(\Performace_Debug_Control.dbg_hit_reg[15] ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \Performace_Debug_Control.dbg_stop_i_i_3 
       (.I0(wb_Halted),
        .I1(reset_bool_for_rst),
        .I2(Dbg_Disable),
        .O(dbg_stop_i));
  system_microblaze_0_0_PreFetch_Buffer_gti PreFetch_Buffer_I1
       (.Clk(Clk),
        .D({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .D122_out(D122_out),
        .Dbg_Clean_Stop_reg(PreFetch_Buffer_I1_n_160),
        .Dbg_Disable(Dbg_Disable),
        .E(E),
        .\EX_ALU_Op_reg[0] ({PreFetch_Buffer_I1_n_94,PreFetch_Buffer_I1_n_95}),
        .\EX_Branch_CMP_Op1_reg[0] (\EX_Branch_CMP_Op1_reg[0] ),
        .\EX_Branch_CMP_Op1_reg[15] (of_op1_sel[0]),
        .\EX_Branch_CMP_Op1_reg[15]_0 (of_op1_sel[1]),
        .EX_CMP_Op_reg(PreFetch_Buffer_I1_n_161),
        .EX_Fwd(EX_Fwd),
        .EX_Is_Div_Instr(EX_Is_Div_Instr),
        .\EX_Op1_reg[10] (\EX_Op1_reg[10] ),
        .\EX_Op1_reg[11] (\EX_Op1_reg[11] ),
        .\EX_Op1_reg[12] (\EX_Op1_reg[12] ),
        .\EX_Op1_reg[13] (\EX_Op1_reg[13] ),
        .\EX_Op1_reg[14] (\EX_Op1_reg[14] ),
        .\EX_Op1_reg[15] (\EX_Op1_reg[15] ),
        .\EX_Op1_reg[16] (\EX_Op1_reg[16] ),
        .\EX_Op1_reg[17] (\EX_Op1_reg[17] ),
        .\EX_Op1_reg[18] (\EX_Op1_reg[18] ),
        .\EX_Op1_reg[19] (\EX_Op1_reg[19] ),
        .\EX_Op1_reg[1] (\EX_Op1_reg[1] ),
        .\EX_Op1_reg[20] (\EX_Op1_reg[20] ),
        .\EX_Op1_reg[21] (\EX_Op1_reg[21] ),
        .\EX_Op1_reg[22] (\EX_Op1_reg[22] ),
        .\EX_Op1_reg[23] (\EX_Op1_reg[23] ),
        .\EX_Op1_reg[24] (\EX_Op1_reg[24] ),
        .\EX_Op1_reg[25] (\EX_Op1_reg[25] ),
        .\EX_Op1_reg[26] (\EX_Op1_reg[26] ),
        .\EX_Op1_reg[27] (\EX_Op1_reg[27] ),
        .\EX_Op1_reg[28] (\EX_Op1_reg[28] ),
        .\EX_Op1_reg[29] (\EX_Op1_reg[29] ),
        .\EX_Op1_reg[2] (\EX_Op1_reg[2] ),
        .\EX_Op1_reg[30] (\EX_Op1_reg[30] ),
        .\EX_Op1_reg[31] (\EX_Op1_reg[31] ),
        .\EX_Op1_reg[3] (\EX_Op1_reg[3] ),
        .\EX_Op1_reg[4] (\EX_Op1_reg[4] ),
        .\EX_Op1_reg[5] (\EX_Op1_reg[5] ),
        .\EX_Op1_reg[6] (\EX_Op1_reg[6] ),
        .\EX_Op1_reg[7] (\EX_Op1_reg[7] ),
        .\EX_Op1_reg[8] (\EX_Op1_reg[8] ),
        .\EX_Op1_reg[9] (\EX_Op1_reg[9] ),
        .\EX_Op2_reg[0] (\EX_Op2_reg[0] ),
        .\EX_Op3_reg[0] (\EX_Op3_reg[0] ),
        .\EX_Op3_reg[15] (of_op3_sel[0]),
        .\EX_Op3_reg[15]_0 (of_op3_sel[1]),
        .EX_SWAP_BYTE_Instr_reg(PreFetch_Buffer_I1_n_143),
        .EX_SWAP_Instr_reg(PreFetch_Buffer_I1_n_138),
        .\EX_Sext_Op_reg[0] ({PreFetch_Buffer_I1_n_154,PreFetch_Buffer_I1_n_155}),
        .EX_Unsigned_Op_reg(PreFetch_Buffer_I1_n_162),
        .EX_Use_Carry_reg(PreFetch_Buffer_I1_n_163),
        .GPR_Op1(GPR_Op1),
        .GPR_Op2(GPR_Op2),
        .GPR_Op3(GPR_Op3),
        .I041_out(I041_out),
        .I1(I1),
        .I139_out(I139_out),
        .IB_Ready(IB_Ready),
        .IFetch(IFetch[135]),
        .IReady(IReady),
        .I_AS(IFetch[134]),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out[1]),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .\Performace_Debug_Control.ex_brki_hit_reg (\Performace_Debug_Control.ex_brki_hit_reg ),
        .Q({mem_gpr_write_addr[0],mem_gpr_write_addr[1],mem_gpr_write_addr[2],mem_gpr_write_addr[3],mem_gpr_write_addr[4]}),
        .\Using_FPGA.Native (\Using_FPGA.Native [0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native [1]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_13 (D),
        .\Using_FPGA.Native_2 (PreFetch_Buffer_I1_n_141),
        .\Using_FPGA.Native_3 (PreFetch_Buffer_I1_n_146),
        .\Using_FPGA.Native_4 (PreFetch_Buffer_I1_n_147),
        .\Using_FPGA.Native_5 (PreFetch_Buffer_I1_n_165),
        .\Using_FPGA.Native_6 (PreFetch_Buffer_I1_n_170),
        .\Using_FPGA.Native_7 (PreFetch_Buffer_I1_n_171),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_9 (of_PipeRun_for_ce),
        .WB_Byte_Access_reg(\EX_Op2_reg[0]_0 [15:0]),
        .WB_Doublet_Access_reg(IFetch[9]),
        .WB_Doublet_Access_reg_0(IFetch[10]),
        .WB_Doublet_Access_reg_1(IFetch[11]),
        .WB_Doublet_Access_reg_10(IFetch[20]),
        .WB_Doublet_Access_reg_11(IFetch[21]),
        .WB_Doublet_Access_reg_12(IFetch[22]),
        .WB_Doublet_Access_reg_13(IFetch[23]),
        .WB_Doublet_Access_reg_14(IFetch[24]),
        .WB_Doublet_Access_reg_2(IFetch[12]),
        .WB_Doublet_Access_reg_3(IFetch[13]),
        .WB_Doublet_Access_reg_4(IFetch[14]),
        .WB_Doublet_Access_reg_5(IFetch[15]),
        .WB_Doublet_Access_reg_6(IFetch[16]),
        .WB_Doublet_Access_reg_7(IFetch[17]),
        .WB_Doublet_Access_reg_8(IFetch[18]),
        .WB_Doublet_Access_reg_9(IFetch[19]),
        .\control_reg_reg[8] (\control_reg_reg[8] ),
        .ex_MSR(ex_MSR),
        .ex_alu_sel_logic_i_reg(PreFetch_Buffer_I1_n_172),
        .ex_atomic_Instruction_Pair0(ex_atomic_Instruction_Pair0),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .ex_branch_with_delayslot_reg(PreFetch_Buffer_I1_n_92),
        .ex_branch_with_delayslot_reg_0(\Using_FPGA.Native_1 ),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .ex_enable_alu_i_reg(PreFetch_Buffer_I1_n_96),
        .ex_enable_sext_shift_i0(ex_enable_sext_shift_i0),
        .\ex_gpr_write_addr_reg[0] ({\ex_gpr_write_addr_reg_n_0_[0] ,I2,I4,I0,\ex_gpr_write_addr_reg_n_0_[4] }),
        .ex_gpr_write_dbg(ex_gpr_write_dbg),
        .ex_gpr_write_dbg_reg(PreFetch_Buffer_I1_n_159),
        .ex_gpr_write_reg(PreFetch_Buffer_I1_n_157),
        .ex_gpr_write_reg_0(ex_gpr_write_reg_n_0),
        .\ex_instr_reg[11] ({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4],of_imm_data[0],of_imm_data[1],of_imm_data[2],of_imm_data[3],of_imm_data[4],of_imm_data[5],of_imm_data[6],of_imm_data[7],of_imm_data[8],of_imm_data[9],of_imm_data[10],of_imm_data[11],of_imm_data[12],of_imm_data[13],of_imm_data[14],of_imm_data[15]}),
        .ex_is_div_instr_I_reg(PreFetch_Buffer_I1_n_158),
        .ex_is_multi_instr2_reg(PreFetch_Buffer_I1_n_145),
        .ex_is_multi_or_load_instr(ex_is_multi_or_load_instr),
        .ex_is_multi_or_load_instr0(ex_is_multi_or_load_instr0),
        .ex_jump_nodelay_reg(ex_jump_nodelay_reg_n_0),
        .ex_jump_q(ex_jump_q),
        .ex_load_alu_carry_reg(PreFetch_Buffer_I1_n_164),
        .ex_load_shift_carry_reg(PreFetch_Buffer_I1_n_168),
        .ex_mbar_decode(ex_mbar_decode),
        .ex_mbar_decode_cmb(ex_mbar_decode_cmb),
        .ex_mbar_is_sleep(ex_mbar_is_sleep),
        .ex_mbar_is_sleep_cmb(ex_mbar_is_sleep_cmb),
        .ex_move_to_MSR_instr29_out(ex_move_to_MSR_instr29_out),
        .ex_op1_cmp_eq(ex_op1_cmp_eq),
        .ex_op1_cmp_eq1(ex_op1_cmp_eq1),
        .ex_op1_cmp_eq_n5_out(ex_op1_cmp_eq_n5_out),
        .ex_sel_alu_i0(ex_sel_alu_i0),
        .ex_set_bip(ex_set_bip),
        .ex_valid(ex_valid),
        .force12_out(force12_out),
        .force_Val10_out(force_Val10_out),
        .force_Val2_N_reg(PreFetch_Buffer_I1_n_54),
        .if_debug_ready_i_reg(if_debug_ready_i_reg),
        .if_fetch_for_timing_optimization1(if_fetch_for_timing_optimization1),
        .if_fetch_in_progress(if_fetch_in_progress),
        .if_fetch_in_progress_reg(PreFetch_Buffer_I1_n_156),
        .if_missed_fetch(if_missed_fetch),
        .if_pre_buffer_addr(if_pre_buffer_addr),
        .\imm_reg_reg[0] (\imm_reg_reg[0] ),
        .in(in),
        .in00(if_fetch_without_full_or_jump),
        .\interrupt_address_d1_reg[0] ({\interrupt_address_d1_reg[0] [31],\interrupt_address_d1_reg[0] [4:3]}),
        .\interrupt_address_d1_reg[10] (\EX_Op2[10]_i_4_n_0 ),
        .\interrupt_address_d1_reg[11] (\EX_Op2[11]_i_4_n_0 ),
        .\interrupt_address_d1_reg[12] (\EX_Op2[12]_i_4_n_0 ),
        .\interrupt_address_d1_reg[13] (\EX_Op2[13]_i_4_n_0 ),
        .\interrupt_address_d1_reg[14] (\EX_Op2[14]_i_4_n_0 ),
        .\interrupt_address_d1_reg[15] (\EX_Op2[15]_i_4_n_0 ),
        .\interrupt_address_d1_reg[16] (\EX_Op2[16]_i_3_n_0 ),
        .\interrupt_address_d1_reg[17] (\EX_Op2[17]_i_3_n_0 ),
        .\interrupt_address_d1_reg[18] (\EX_Op2[18]_i_3_n_0 ),
        .\interrupt_address_d1_reg[19] (\EX_Op2[19]_i_3_n_0 ),
        .\interrupt_address_d1_reg[1] (\EX_Op2[1]_i_6_n_0 ),
        .\interrupt_address_d1_reg[20] (\EX_Op2[20]_i_3_n_0 ),
        .\interrupt_address_d1_reg[21] (\EX_Op2[21]_i_3_n_0 ),
        .\interrupt_address_d1_reg[22] (\EX_Op2[22]_i_3_n_0 ),
        .\interrupt_address_d1_reg[23] (\EX_Op2[23]_i_3_n_0 ),
        .\interrupt_address_d1_reg[24] (\EX_Op2[24]_i_3_n_0 ),
        .\interrupt_address_d1_reg[25] (\EX_Op2[25]_i_3_n_0 ),
        .\interrupt_address_d1_reg[26] (\EX_Op2[26]_i_3_n_0 ),
        .\interrupt_address_d1_reg[29] (\EX_Op2[29]_i_3_n_0 ),
        .\interrupt_address_d1_reg[2] (\EX_Op2[2]_i_4_n_0 ),
        .\interrupt_address_d1_reg[30] (\EX_Op2[30]_i_3_n_0 ),
        .\interrupt_address_d1_reg[31] (\EX_Op2[31]_i_3_n_0 ),
        .\interrupt_address_d1_reg[3] (\EX_Op2[3]_i_4_n_0 ),
        .\interrupt_address_d1_reg[4] (\EX_Op2[4]_i_4_n_0 ),
        .\interrupt_address_d1_reg[5] (\EX_Op2[5]_i_4_n_0 ),
        .\interrupt_address_d1_reg[6] (\EX_Op2[6]_i_4_n_0 ),
        .\interrupt_address_d1_reg[7] (\EX_Op2[7]_i_4_n_0 ),
        .\interrupt_address_d1_reg[8] (\EX_Op2[8]_i_4_n_0 ),
        .\interrupt_address_d1_reg[9] (\EX_Op2[9]_i_4_n_0 ),
        .mem_gpr_write(mem_gpr_write),
        .mem_is_multi_or_load_instr(mem_is_multi_or_load_instr),
        .mem_jump_taken_reg(PreFetch_Buffer_I1_n_169),
        .mem_sel_msr(mem_sel_msr),
        .mem_valid_instr(mem_valid_instr),
        .of_Sel_SPR_MSR3_out(of_Sel_SPR_MSR3_out),
        .of_Take_Interrupt_hold_reg(of_Take_Interrupt),
        .of_instr({of_instr[0],of_instr[1],of_instr[2],of_instr[3],of_instr[4],of_instr[5]}),
        .of_op1_sel_spr(of_op1_sel_spr),
        .of_pipe_ctrl({of_pipe_ctrl[7],of_pipe_ctrl[8],of_pipe_ctrl[9]}),
        .of_predecode({of_predecode[1],of_predecode[2],of_predecode[3],of_predecode[4],of_predecode[5],of_predecode[6],of_predecode[7],of_predecode[8],of_predecode[9],of_predecode[10]}),
        .of_read_ex_write_op2_conflict_part1(of_read_ex_write_op2_conflict_part1),
        .of_read_ex_write_op2_conflict_part2(of_read_ex_write_op2_conflict_part2),
        .of_read_ex_write_op3_conflict_part1(of_read_ex_write_op3_conflict_part1),
        .of_read_ex_write_op3_conflict_part2(of_read_ex_write_op3_conflict_part2),
        .of_read_imm_reg_ii(of_read_imm_reg_ii),
        .of_read_imm_reg_ii_reg(ex_read_imm_reg_i_1_n_0),
        .of_read_mem_write_op2_conflict_part1(of_read_mem_write_op2_conflict_part1),
        .of_read_mem_write_op2_conflict_part2(of_read_mem_write_op2_conflict_part2),
        .of_valid(of_valid),
        .out(reset_bool_for_rst),
        .p_0_in44_in(if_fetch_without_full_or_jump),
        .p_109_in(p_109_in),
        .p_112_in(p_112_in),
        .p_19_in(p_19_in),
        .p_9_in(p_9_in),
        .\status_reg_reg[25] (if_sel_input),
        .use_Reg_Neg_DI1_out(use_Reg_Neg_DI1_out),
        .use_Reg_Neg_S3_out(use_Reg_Neg_S3_out),
        .use_Reg_Neg_S_reg(use_Reg_Neg_S_reg_0),
        .use_Reg_Neg_S_reg_0(PreFetch_Buffer_I1_n_167),
        .wb_MSR_cmb(wb_MSR_cmb),
        .wb_exception_i_reg(wb_gpr_write_i_reg_0),
        .\wb_exception_kind_i_reg[27] (jump_logic_I1_n_12),
        .\wb_exception_kind_i_reg[27]_0 (wb_Halted),
        .\wb_gpr_write_addr_reg[0] ({wb_new_esr_ess_rx[0],wb_new_esr_ess_rx[1],wb_new_esr_ess_rx[2],wb_new_esr_ess_rx[3],wb_new_esr_ess_rx[4]}),
        .wb_gpr_write_i(wb_gpr_write_i),
        .wb_reset(wb_reset),
        .wb_valid_reg(wb_valid_reg_n_0));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    Sleep_INST_0
       (.I0(Sleep_Decode),
        .I1(Dbg_Disable),
        .I2(sleep_reset_mode_reg),
        .O(Sleep));
  LUT6 #(
    .INIT(64'hAAAAAAA2AAAAAAAA)) 
    Trace_Exception_Taken_INST_0
       (.I0(wb_gpr_write_i_reg_0),
        .I1(IFetch[3]),
        .I2(IFetch[7]),
        .I3(IFetch[5]),
        .I4(IFetch[4]),
        .I5(IFetch[6]),
        .O(IFetch[8]));
  LUT6 #(
    .INIT(64'h0000100000000000)) 
    Trace_MB_Halted_INST_0_i_1
       (.I0(IFetch[7]),
        .I1(IFetch[4]),
        .I2(IFetch[3]),
        .I3(wb_gpr_write_i_reg_0),
        .I4(IFetch[5]),
        .I5(IFetch[6]),
        .O(wb_Halted));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[0]_INST_0 
       (.I0(\Using_FPGA.Native_19 [15]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[24] ),
        .I5(\WB_MEM_Result_reg[0] [15]),
        .O(IFetch[24]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[10]_INST_0 
       (.I0(\Using_FPGA.Native_19 [5]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[18] ),
        .I5(\WB_MEM_Result_reg[0] [5]),
        .O(IFetch[14]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[11]_INST_0 
       (.I0(\Using_FPGA.Native_19 [4]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[19] ),
        .I5(\WB_MEM_Result_reg[0] [4]),
        .O(IFetch[13]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[12]_INST_0 
       (.I0(\Using_FPGA.Native_19 [3]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[20] ),
        .I5(\WB_MEM_Result_reg[0] [3]),
        .O(IFetch[12]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[13]_INST_0 
       (.I0(\Using_FPGA.Native_19 [2]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[21] ),
        .I5(\WB_MEM_Result_reg[0] [2]),
        .O(IFetch[11]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[14]_INST_0 
       (.I0(\Using_FPGA.Native_19 [1]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[22] ),
        .I5(\WB_MEM_Result_reg[0] [1]),
        .O(IFetch[10]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[15]_INST_0 
       (.I0(\Using_FPGA.Native_19 [0]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[23] ),
        .I5(\WB_MEM_Result_reg[0] [0]),
        .O(IFetch[9]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[1]_INST_0 
       (.I0(\Using_FPGA.Native_19 [14]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[25] ),
        .I5(\WB_MEM_Result_reg[0] [14]),
        .O(IFetch[23]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[2]_INST_0 
       (.I0(\Using_FPGA.Native_19 [13]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[26] ),
        .I5(\WB_MEM_Result_reg[0] [13]),
        .O(IFetch[22]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[3]_INST_0 
       (.I0(\Using_FPGA.Native_19 [12]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[27] ),
        .I5(\WB_MEM_Result_reg[0] [12]),
        .O(IFetch[21]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[4]_INST_0 
       (.I0(\Using_FPGA.Native_19 [11]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[28] ),
        .I5(\WB_MEM_Result_reg[0] [11]),
        .O(IFetch[20]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[5]_INST_0 
       (.I0(\Using_FPGA.Native_19 [10]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[29] ),
        .I5(\WB_MEM_Result_reg[0] [10]),
        .O(IFetch[19]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[6]_INST_0 
       (.I0(\Using_FPGA.Native_19 [9]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[30] ),
        .I5(\WB_MEM_Result_reg[0] [9]),
        .O(IFetch[18]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[7]_INST_0 
       (.I0(\Using_FPGA.Native_19 [8]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[31] ),
        .I5(\WB_MEM_Result_reg[0] [8]),
        .O(IFetch[17]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[8]_INST_0 
       (.I0(\Using_FPGA.Native_19 [7]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[16] ),
        .I5(\WB_MEM_Result_reg[0] [7]),
        .O(IFetch[16]));
  LUT6 #(
    .INIT(64'hBBBBBBBB888B8888)) 
    \Trace_New_Reg_Value[9]_INST_0 
       (.I0(\Using_FPGA.Native_19 [6]),
        .I1(IFetch[8]),
        .I2(wb_doublet_access),
        .I3(wb_byte_access),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[17] ),
        .I5(\WB_MEM_Result_reg[0] [6]),
        .O(IFetch[15]));
  LUT2 #(
    .INIT(4'h2)) 
    \Trace_Reg_Addr[0]_INST_0 
       (.I0(wb_new_esr_ess_rx[0]),
        .I1(restore_wb_msr_to_ex),
        .O(IFetch[29]));
  LUT2 #(
    .INIT(4'hE)) 
    \Trace_Reg_Addr[1]_INST_0 
       (.I0(restore_wb_msr_to_ex),
        .I1(wb_new_esr_ess_rx[1]),
        .O(IFetch[28]));
  LUT2 #(
    .INIT(4'hE)) 
    \Trace_Reg_Addr[2]_INST_0 
       (.I0(restore_wb_msr_to_ex),
        .I1(wb_new_esr_ess_rx[2]),
        .O(IFetch[27]));
  LUT2 #(
    .INIT(4'hE)) 
    \Trace_Reg_Addr[3]_INST_0 
       (.I0(restore_wb_msr_to_ex),
        .I1(wb_new_esr_ess_rx[3]),
        .O(IFetch[26]));
  LUT2 #(
    .INIT(4'h2)) 
    \Trace_Reg_Addr[4]_INST_0 
       (.I0(wb_new_esr_ess_rx[4]),
        .I1(restore_wb_msr_to_ex),
        .O(IFetch[25]));
  LUT5 #(
    .INIT(32'hFFFFFF20)) 
    Trace_Reg_Write_INST_0
       (.I0(wb_valid_reg_n_0),
        .I1(wb_gpr_write_i_reg_0),
        .I2(wb_gpr_write_i),
        .I3(wb_reset),
        .I4(restore_wb_msr_to_ex),
        .O(IFetch[30]));
  LUT6 #(
    .INIT(64'h0000100000000000)) 
    Trace_Reg_Write_INST_0_i_1
       (.I0(IFetch[7]),
        .I1(IFetch[3]),
        .I2(IFetch[4]),
        .I3(wb_gpr_write_i_reg_0),
        .I4(IFetch[5]),
        .I5(IFetch[6]),
        .O(restore_wb_msr_to_ex));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h2)) 
    Trace_Valid_Instr_INST_0
       (.I0(wb_valid_reg_n_0),
        .I1(wb_Halted),
        .O(IFetch[31]));
  FDRE Trace_WB_Jump_Hit_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_jump_hit),
        .Q(IFetch[0]),
        .R(reset_bool_for_rst));
  FDRE Trace_WB_Jump_Taken_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_jump_taken),
        .Q(IFetch[2]),
        .R(reset_bool_for_rst));
  system_microblaze_0_0_carry_and \Use_MuxCy[10].OF_Piperun_Stage 
       (.Dbg_Disable(Dbg_Disable),
        .\EX_Op1_reg[30] (\EX_Op1_reg[30]_1 ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (ex_jump_nodelay_i_2_n_0),
        .\Performace_Debug_Control.ex_watchpoint_brk_reg (\Performace_Debug_Control.ex_watchpoint_brk_reg ),
        .\Performace_Debug_Control.ex_watchpoint_brk_reg_0 (\Performace_Debug_Control.ex_watchpoint_brk_reg_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_0 (PreFetch_Buffer_I1_n_92),
        .ex_Instr_Excep_combo(ex_Instr_Excep_combo),
        .ex_Instr_Excep_combo_reg(\Use_MuxCy[10].OF_Piperun_Stage_n_6 ),
        .ex_Take_Intr_or_Exc(ex_Take_Intr_or_Exc),
        .ex_Take_Intr_or_Exc_reg(\Use_MuxCy[10].OF_Piperun_Stage_n_1 ),
        .ex_Take_Intr_or_Exc_reg_0(\Using_FPGA.Native_2 ),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .ex_div_unsigned(ex_div_unsigned),
        .ex_first_cycle_reg(\Use_MuxCy[10].OF_Piperun_Stage_n_4 ),
        .ex_is_mul_instr_reg(\Use_MuxCy[10].OF_Piperun_Stage_n_2 ),
        .ex_jump_nodelay_reg(\Use_MuxCy[10].OF_Piperun_Stage_n_9 ),
        .ex_jump_nodelay_reg_0(ex_jump_nodelay_reg_n_0),
        .ex_set_MSR_IE_instr(ex_set_MSR_IE_instr),
        .ex_valid_keep(ex_valid_keep),
        .ex_valid_keep_reg(\Use_MuxCy[10].OF_Piperun_Stage_n_3 ),
        .lopt(lopt_9),
        .lopt_1(lopt_10),
        .lopt_2(lopt_11),
        .lopt_3(lopt_12),
        .lopt_4(lopt_13),
        .lopt_5(lopt_14),
        .lopt_6(lopt_15),
        .lopt_7(lopt_16),
        .lopt_8(lopt_26),
        .lopt_9(lopt_27),
        .of_MSR(of_MSR[0]),
        .of_PipeRun_carry_2(of_PipeRun_carry_2),
        .of_PipeRun_for_ce(of_PipeRun_for_ce),
        .of_Take_Interrupt_hold(of_Take_Interrupt_hold),
        .of_Take_Interrupt_hold_reg(\Use_MuxCy[10].OF_Piperun_Stage_n_8 ),
        .of_Take_Interrupt_hold_reg_0(of_Take_Interrupt),
        .of_next_ex_valid(of_next_ex_valid),
        .of_pipe_ctrl(of_pipe_ctrl[10]),
        .out(reset_bool_for_rst),
        .wb_exception_i_reg(wb_gpr_write_i_reg_0),
        .\wb_exception_kind_i_reg[27] (restore_wb_msr_to_ex));
  system_microblaze_0_0_carry_and_25 \Use_MuxCy[1].OF_Piperun_Stage 
       (.E(Trace_WB_Jump_Hit_reg_0),
        .lopt(lopt_17),
        .lopt_1(jump_logic_I1_n_9),
        .lopt_2(lopt_18),
        .lopt_3(lopt_19),
        .lopt_4(lopt_20),
        .of_PipeRun_carry_10(of_PipeRun_carry_10));
  system_microblaze_0_0_carry_and_26 \Use_MuxCy[2].OF_Piperun_Stage 
       (.EX_MBAR_Stall(EX_MBAR_Stall),
        .ex_Take_Intr_or_Exc(ex_Take_Intr_or_Exc),
        .ex_branch_with_delayslot_reg(jump_logic_I1_n_9),
        .ex_first_cycle(ex_first_cycle),
        .ex_jump_hold(ex_jump_hold),
        .ex_mbar_decode(ex_mbar_decode),
        .ex_mbar_sleep(ex_mbar_sleep),
        .ex_mbar_stall_no_sleep_1(ex_mbar_stall_no_sleep_1),
        .lopt(lopt_17),
        .of_PipeRun_carry_10(of_PipeRun_carry_10),
        .of_PipeRun_carry_9(of_PipeRun_carry_9));
  system_microblaze_0_0_carry_and_27 \Use_MuxCy[3].OF_Piperun_Stage 
       (.Dbg_Disable(Dbg_Disable),
        .E(\Use_MuxCy[3].OF_Piperun_Stage_n_1 ),
        .\EX_Op1_reg[30] (\EX_Op1_reg[30]_1 ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .\Performace_Debug_Control.dbg_stop_if_delay_i_reg (ex_Exception_Taken),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg (\Performace_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 (\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg (\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ),
        .Q(\ex_which_branch_reg_n_0_[10] ),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_1 (of_PipeRun_for_ce),
        .ex_MSR(ex_MSR[0]),
        .ex_Take_Intr_or_Exc_reg(\Using_FPGA.Native_2 ),
        .ex_Write_DCache_decode_cmb(ex_Write_DCache_decode_cmb),
        .ex_Write_ICache_i(ex_Write_ICache_i),
        .ex_Write_ICache_i_cmb(ex_Write_ICache_i_cmb),
        .ex_bt_hit_hold_reg(\Use_MuxCy[3].OF_Piperun_Stage_n_6 ),
        .ex_gpr_write_dbg(ex_gpr_write_dbg),
        .ex_gpr_write_reg(ex_gpr_write_reg_n_0),
        .ex_set_MSR_IE_instr(ex_set_MSR_IE_instr),
        .ex_write_dcache_instr(ex_write_dcache_instr),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(lopt_20),
        .mem_gpr_write(mem_gpr_write),
        .mem_gpr_write_dbg(mem_gpr_write_dbg),
        .mem_gpr_write_dbg_reg(\Use_MuxCy[3].OF_Piperun_Stage_n_7 ),
        .mem_gpr_write_reg(\Use_MuxCy[3].OF_Piperun_Stage_n_5 ),
        .mem_jump_hit0(mem_jump_hit0),
        .mem_valid_reg(mem_Exception_Taken),
        .of_PipeRun_carry_9(of_PipeRun_carry_9),
        .of_set_MSR_IE_hold_reg(\Use_MuxCy[3].OF_Piperun_Stage_n_8 ),
        .of_set_MSR_IE_hold_reg_0(of_set_MSR_IE_hold_reg_n_0),
        .out(reset_bool_for_rst),
        .p_36_out(p_36_out),
        .p_82_in(p_82_in),
        .wb_exception_i_reg(wb_gpr_write_i_reg_0),
        .\wb_exception_kind_i_reg[27] (wb_Halted),
        .\wb_exception_kind_i_reg[27]_0 (restore_wb_msr_to_ex));
  system_microblaze_0_0_carry_and_28 \Use_MuxCy[4].OF_Piperun_Stage 
       (.\Using_FPGA.Native (PreFetch_Buffer_I1_n_167),
        .ex_branch_with_delayslot_reg(\Using_FPGA.Native_1 ),
        .lopt(lopt_21),
        .lopt_1(of_pipe_ctrl[5]),
        .lopt_2(lopt_22),
        .lopt_3(of_pipe_ctrl[6]),
        .lopt_4(lopt_23),
        .lopt_5(lopt_24),
        .lopt_6(of_pipe_ctrl[7]),
        .of_PipeRun_carry_7(of_PipeRun_carry_7));
  system_microblaze_0_0_carry_and_29 \Use_MuxCy[5].OF_Piperun_Stage 
       (.lopt(lopt_21),
        .of_PipeRun_carry_6(of_PipeRun_carry_6),
        .of_PipeRun_carry_7(of_PipeRun_carry_7),
        .of_pipe_ctrl(of_pipe_ctrl[5]));
  system_microblaze_0_0_carry_and_30 \Use_MuxCy[6].OF_Piperun_Stage 
       (.lopt(lopt_22),
        .of_PipeRun_carry_5(of_PipeRun_carry_5),
        .of_PipeRun_carry_6(of_PipeRun_carry_6),
        .of_pipe_ctrl(of_pipe_ctrl[6]));
  system_microblaze_0_0_carry_and_31 \Use_MuxCy[7].OF_Piperun_Stage 
       (.lopt(lopt_23),
        .lopt_1(lopt_24),
        .of_PipeRun_carry_4(of_PipeRun_carry_4),
        .of_PipeRun_carry_5(of_PipeRun_carry_5),
        .of_pipe_ctrl(of_pipe_ctrl[7]));
  system_microblaze_0_0_carry_and_32 \Use_MuxCy[8].OF_Piperun_Stage 
       (.lopt(lopt_25),
        .lopt_1(of_pipe_ctrl[9]),
        .lopt_2(lopt_26),
        .lopt_3(lopt_27),
        .lopt_4(of_pipe_ctrl[10]),
        .of_PipeRun_carry_3(of_PipeRun_carry_3),
        .of_PipeRun_carry_4(of_PipeRun_carry_4),
        .of_pipe_ctrl(of_pipe_ctrl[8]));
  system_microblaze_0_0_carry_and_33 \Use_MuxCy[9].OF_Piperun_Stage 
       (.lopt(lopt_25),
        .of_PipeRun_carry_2(of_PipeRun_carry_2),
        .of_PipeRun_carry_3(of_PipeRun_carry_3),
        .of_pipe_ctrl(of_pipe_ctrl[9]));
  system_microblaze_0_0_MB_FDRE \Using_FPGA.Gen_Bits[27].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .D(mem_exception_kind[27]),
        .ex_branch_with_delayslot_reg(\Using_FPGA.Native_1 ),
        .mem_exception_from_ex(mem_exception_from_ex),
        .out(reset_bool_for_rst));
  system_microblaze_0_0_MB_FDRE_34 \Using_FPGA.Gen_Bits[28].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .D(mem_exception_kind[28]),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg (\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .dbg_stop_if_delay_i(dbg_stop_if_delay_i),
        .ex_Interrupt_i(ex_Interrupt_i),
        .ex_branch_with_delayslot_reg(\Using_FPGA.Native_1 ),
        .ex_valid(ex_valid),
        .mem_exception_from_ex(mem_exception_from_ex),
        .out(reset_bool_for_rst));
  system_microblaze_0_0_MB_FDRE_35 \Using_FPGA.Gen_Bits[29].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .D(mem_exception_kind[29]),
        .ex_branch_with_delayslot_reg(\Using_FPGA.Native_1 ),
        .mem_exception_from_ex(mem_exception_from_ex),
        .out(reset_bool_for_rst));
  system_microblaze_0_0_MB_FDRE_36 \Using_FPGA.Gen_Bits[30].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .D(mem_exception_kind[30]),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg (\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .dbg_stop_if_delay_i(dbg_stop_if_delay_i),
        .ex_Interrupt_i(ex_Interrupt_i),
        .ex_branch_with_delayslot_reg(\Using_FPGA.Native_1 ),
        .ex_valid(ex_valid),
        .mem_exception_from_ex(mem_exception_from_ex),
        .out(reset_bool_for_rst));
  system_microblaze_0_0_MB_FDRE_37 \Using_FPGA.Gen_Bits[31].MEM_EX_Result_Inst 
       (.Clk(Clk),
        .D(mem_exception_kind[31]),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg (\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ),
        .ex_branch_with_delayslot_reg(\Using_FPGA.Native_1 ),
        .mem_exception_from_ex(mem_exception_from_ex),
        .out(reset_bool_for_rst));
  LUT4 #(
    .INIT(16'h1000)) 
    \Using_FPGA.Native_i_1 
       (.I0(EX_ALU_Sel_Logic),
        .I1(ex_use_carry),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(DI));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_11 
       (.I0(ex_gpr_write_reg_n_0),
        .I1(ex_valid),
        .O(p_112_in));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_13 
       (.I0(mem_valid_instr),
        .I1(mem_gpr_write),
        .O(p_109_in));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'hAEAA)) 
    \Using_FPGA.Native_i_15 
       (.I0(wb_reset),
        .I1(wb_gpr_write_i),
        .I2(wb_gpr_write_i_reg_0),
        .I3(wb_valid_reg_n_0),
        .O(p_19_in));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__133 
       (.I0(\EX_Op2_reg[30] [0]),
        .I1(\EX_Op1_reg[7]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[31]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__134 
       (.I0(\EX_Op2_reg[30] [1]),
        .I1(\EX_Op1_reg[6]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O31_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[30]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__135 
       (.I0(\EX_Op2_reg[0]_0 [16]),
        .I1(\EX_Op1_reg[5]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O30_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[29]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__136 
       (.I0(\EX_Op2_reg[0]_0 [17]),
        .I1(\EX_Op1_reg[4]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O29_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[28]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__137 
       (.I0(\EX_Op2_reg[0]_0 [18]),
        .I1(\EX_Op1_reg[3]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O28_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[27]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__138 
       (.I0(\EX_Op2_reg[0]_0 [19]),
        .I1(\EX_Op1_reg[2]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O27_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[26]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__139 
       (.I0(\EX_Op2_reg[0]_0 [20]),
        .I1(\EX_Op1_reg[1]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O26_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[25]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__140 
       (.I0(\EX_Op2_reg[0]_0 [21]),
        .I1(\EX_Op1_reg[0]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O24_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[24]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__141 
       (.I0(\EX_Op2_reg[0]_0 [22]),
        .I1(\EX_Op1_reg[15]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O23_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[23]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__142 
       (.I0(\EX_Op2_reg[0]_0 [23]),
        .I1(\EX_Op1_reg[14]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O22_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[22]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__143 
       (.I0(\EX_Op2_reg[0]_0 [24]),
        .I1(\EX_Op1_reg[13]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O21_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[21]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__144 
       (.I0(\EX_Op2_reg[0]_0 [25]),
        .I1(\EX_Op1_reg[12]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O20_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[20]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__145 
       (.I0(\EX_Op2_reg[0]_0 [26]),
        .I1(\EX_Op1_reg[11]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O19_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[19]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__146 
       (.I0(\EX_Op2_reg[0]_0 [27]),
        .I1(\EX_Op1_reg[10]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O18_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[18]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__147 
       (.I0(\EX_Op2_reg[0]_0 [28]),
        .I1(\EX_Op1_reg[9]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O17_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[17]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__148 
       (.I0(\EX_Op2_reg[0]_0 [29]),
        .I1(\EX_Op1_reg[8]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O15_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[16]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__149 
       (.I0(\EX_Op2_reg[0]_0 [30]),
        .I1(\EX_Op1_reg[23]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O14_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[15]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__150 
       (.I0(\EX_Op2_reg[0]_0 [31]),
        .I1(\EX_Op1_reg[22]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O13_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[14]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__151 
       (.I0(\EX_Op2_reg[0]_0 [32]),
        .I1(\EX_Op1_reg[21]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O12_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[13]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__152 
       (.I0(\EX_Op2_reg[0]_0 [33]),
        .I1(\EX_Op1_reg[20]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O11_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[12]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__153 
       (.I0(\EX_Op2_reg[0]_0 [34]),
        .I1(\EX_Op1_reg[19]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O10_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[11]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__154 
       (.I0(\EX_Op2_reg[0]_0 [35]),
        .I1(\EX_Op1_reg[18]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O9_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[10]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__155 
       (.I0(\EX_Op2_reg[0]_0 [36]),
        .I1(\EX_Op1_reg[17]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O8_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[9]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__156 
       (.I0(\EX_Op2_reg[0]_0 [37]),
        .I1(\EX_Op1_reg[16]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O7_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[8]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__157 
       (.I0(\EX_Op2_reg[0]_0 [38]),
        .I1(\EX_Op1_reg[31]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O6_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[7]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__158 
       (.I0(\EX_Op2_reg[0]_0 [39]),
        .I1(\EX_Op1_reg[30]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O5_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[6]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__159 
       (.I0(\EX_Op2_reg[0]_0 [40]),
        .I1(\EX_Op1_reg[29]_1 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O4_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[5]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__160 
       (.I0(\EX_Op2_reg[0]_0 [41]),
        .I1(\EX_Op1_reg[28]_1 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O3_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[4]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__161 
       (.I0(\EX_Op2_reg[0]_0 [42]),
        .I1(\EX_Op1_reg[27]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O2_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[3]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__162 
       (.I0(\EX_Op2_reg[0]_0 [43]),
        .I1(\EX_Op1_reg[26]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O1_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[2]));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__163 
       (.I0(\EX_Op2_reg[0]_0 [44]),
        .I1(\EX_Op1_reg[25]_0 ),
        .I2(ex_swap_instr),
        .I3(\Data_Flow_I/Shift_Logic_Module_I/O0_out ),
        .I4(ex_sel_alu),
        .O(EX_Fwd[1]));
  LUT3 #(
    .INIT(8'hFE)) 
    \Using_FPGA.Native_i_1__164 
       (.I0(EX_Is_Div_Instr),
        .I1(reset_bool_for_rst),
        .I2(ex_div_unsigned),
        .O(R));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT3 #(
    .INIT(8'h51)) 
    \Using_FPGA.Native_i_1__177 
       (.I0(wb_Halted),
        .I1(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I2(Dbg_Disable),
        .O(\Using_FPGA.Native_9 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__80 
       (.I0(IFetch[6]),
        .O(\Using_FPGA.Native_6 ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__84 
       (.I0(\EX_Op2_reg[0]_0 [45]),
        .I1(\Using_FPGA.Native_i_3__33_n_0 ),
        .I2(ex_sel_alu),
        .O(EX_Fwd[0]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT5 #(
    .INIT(32'h8C808080)) 
    \Using_FPGA.Native_i_3 
       (.I0(ex_alu_carry),
        .I1(\Using_FPGA.Native_2 ),
        .I2(ex_load_alu_carry_reg_n_0),
        .I3(ex_load_shift_carry),
        .I4(\EX_Op1_reg[0] [0]),
        .O(\Using_FPGA.Native_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAA0A8080A00A808)) 
    \Using_FPGA.Native_i_3__10 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_0 ),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\EX_Op1_reg[0] [8]),
        .I4(\Using_FPGA.Native_7 [1]),
        .I5(\EX_Op1_reg[0] [9]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O23_out ));
  LUT6 #(
    .INIT(64'hAAA0A8080A00A808)) 
    \Using_FPGA.Native_i_3__11 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_0 ),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\EX_Op1_reg[0] [9]),
        .I4(\Using_FPGA.Native_7 [1]),
        .I5(\EX_Op1_reg[0] [10]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O22_out ));
  LUT6 #(
    .INIT(64'hAAA0A8080A00A808)) 
    \Using_FPGA.Native_i_3__12 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_0 ),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\EX_Op1_reg[0] [10]),
        .I4(\Using_FPGA.Native_7 [1]),
        .I5(\EX_Op1_reg[0] [11]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O21_out ));
  LUT6 #(
    .INIT(64'hAAA0A8080A00A808)) 
    \Using_FPGA.Native_i_3__13 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_0 ),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\EX_Op1_reg[0] [11]),
        .I4(\Using_FPGA.Native_7 [1]),
        .I5(\EX_Op1_reg[0] [12]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O20_out ));
  LUT6 #(
    .INIT(64'hAAA0A8080A00A808)) 
    \Using_FPGA.Native_i_3__14 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_0 ),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\EX_Op1_reg[0] [12]),
        .I4(\Using_FPGA.Native_7 [1]),
        .I5(\EX_Op1_reg[0] [13]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O19_out ));
  LUT6 #(
    .INIT(64'hAAA0A8080A00A808)) 
    \Using_FPGA.Native_i_3__15 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_0 ),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\EX_Op1_reg[0] [13]),
        .I4(\Using_FPGA.Native_7 [1]),
        .I5(\EX_Op1_reg[0] [14]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O18_out ));
  LUT6 #(
    .INIT(64'hAAA0A8080A00A808)) 
    \Using_FPGA.Native_i_3__16 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_0 ),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\EX_Op1_reg[0] [14]),
        .I4(\Using_FPGA.Native_7 [1]),
        .I5(\EX_Op1_reg[0] [15]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O17_out ));
  LUT6 #(
    .INIT(64'hAAA0A8080A00A808)) 
    \Using_FPGA.Native_i_3__17 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_0 ),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\EX_Op1_reg[0] [15]),
        .I4(\Using_FPGA.Native_7 [1]),
        .I5(\EX_Op1_reg[0] [16]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O15_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__18 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [16]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [17]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O14_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__19 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [17]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [18]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O13_out ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \Using_FPGA.Native_i_3__2 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[0] [0]),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\Using_FPGA.Native_7 [1]),
        .I4(\EX_Op1_reg[0] [1]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__20 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [18]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [19]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O12_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__21 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [19]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [20]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O11_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__22 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [20]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [21]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O10_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__23 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [21]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [22]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O9_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__24 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [22]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [23]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O8_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__25 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [23]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [24]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O7_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__26 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [24]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [25]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O6_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__27 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [25]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [26]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O5_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__28 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [26]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [27]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O4_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__29 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [27]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [28]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O3_out ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \Using_FPGA.Native_i_3__3 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[0] [1]),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\Using_FPGA.Native_7 [1]),
        .I4(\EX_Op1_reg[0] [2]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O31_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__30 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [28]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [29]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O2_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__31 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [29]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [30]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O1_out ));
  LUT6 #(
    .INIT(64'hA8A8A8080808A808)) 
    \Using_FPGA.Native_i_3__32 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[24]_1 ),
        .I2(\Using_FPGA.Native_7 [1]),
        .I3(\EX_Op1_reg[0] [30]),
        .I4(\Using_FPGA.Native_7 [0]),
        .I5(\EX_Op1_reg[0] [31]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O0_out ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \Using_FPGA.Native_i_3__33 
       (.I0(\EX_Op1_reg[24]_2 ),
        .I1(ex_swap_instr),
        .I2(ex_Enable_Sext_Shift),
        .I3(\EX_Op1_reg[24]_1 ),
        .I4(\Using_FPGA.Native_7 [1]),
        .I5(\Using_FPGA.Native_i_5__1_n_0 ),
        .O(\Using_FPGA.Native_i_3__33_n_0 ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \Using_FPGA.Native_i_3__4 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[0] [2]),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\Using_FPGA.Native_7 [1]),
        .I4(\EX_Op1_reg[0] [3]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O30_out ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \Using_FPGA.Native_i_3__5 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[0] [3]),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\Using_FPGA.Native_7 [1]),
        .I4(\EX_Op1_reg[0] [4]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O29_out ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \Using_FPGA.Native_i_3__6 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[0] [4]),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\Using_FPGA.Native_7 [1]),
        .I4(\EX_Op1_reg[0] [5]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O28_out ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \Using_FPGA.Native_i_3__7 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[0] [5]),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\Using_FPGA.Native_7 [1]),
        .I4(\EX_Op1_reg[0] [6]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O27_out ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'hA8880888)) 
    \Using_FPGA.Native_i_3__8 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[0] [6]),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\Using_FPGA.Native_7 [1]),
        .I4(\EX_Op1_reg[0] [7]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O26_out ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \Using_FPGA.Native_i_3__9 
       (.I0(ex_Enable_Sext_Shift),
        .I1(\EX_Op1_reg[0] [7]),
        .I2(\Using_FPGA.Native_7 [0]),
        .I3(\Using_FPGA.Native_7 [1]),
        .I4(\EX_Op1_reg[0] [8]),
        .O(\Data_Flow_I/Shift_Logic_Module_I/O24_out ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \Using_FPGA.Native_i_5 
       (.I0(ex_load_shift_carry),
        .I1(ex_load_alu_carry_reg_n_0),
        .I2(\Using_FPGA.Native_2 ),
        .O(\Data_Flow_I/msr_reg_i/p_20_in ));
  LUT5 #(
    .INIT(32'h0DFF0800)) 
    \Using_FPGA.Native_i_5__1 
       (.I0(ex_shift_op[1]),
        .I1(ex_MSR[1]),
        .I2(ex_shift_op[0]),
        .I3(\Using_FPGA.Native_7 [0]),
        .I4(\EX_Op1_reg[0] [31]),
        .O(\Using_FPGA.Native_i_5__1_n_0 ));
  system_microblaze_0_0_MB_FDRE_38 \Using_FPGA_2.ex_byte_access_i_Inst 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (of_PipeRun_for_ce),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I1_n_146),
        .mem_byte_access_reg(ex_byte_access),
        .out(reset_bool_for_rst));
  system_microblaze_0_0_MB_FDRE_39 \Using_FPGA_2.ex_doublet_access_i_Inst 
       (.\Byte_Enable[0] (IFetch[99:96]),
        .Clk(Clk),
        .\EX_Op1_reg[31] (\EX_Op1_reg[0] [0]),
        .\EX_Op2_reg[31] (\EX_Op2_reg[31] ),
        .\Using_FPGA.Native_0 (of_PipeRun_for_ce),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I1_n_147),
        .\Using_FPGA.Native_2 (ex_reverse_byteorder),
        .\Using_FPGA.Native_3 (ex_byte_access),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_18 ),
        .mem_doublet_access_reg(ex_doublet_access),
        .out(reset_bool_for_rst));
  system_microblaze_0_0_MB_FDRE_40 \Using_FPGA_2.ex_is_load_instr_Inst 
       (.Clk(Clk),
        .MEM_Sel_MEM_Res_I_reg(\Using_FPGA_2.ex_is_load_instr_Inst_n_3 ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg (\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ),
        .Read_Strobe(IFetch[101:100]),
        .\Using_FPGA.Native_0 (of_PipeRun_for_ce),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I1_n_170),
        .ex_Interrupt_i(ex_Interrupt_i),
        .ex_Sel_SPR_EAR(ex_Sel_SPR_EAR),
        .ex_Sel_SPR_EDR_reg(MEM_Sel_MEM_Res_I_i_2_n_0),
        .ex_Sel_SPR_PVR(ex_Sel_SPR_PVR),
        .ex_Sel_SPR_SHR(ex_Sel_SPR_SHR),
        .ex_Sel_SPR_SLR(ex_Sel_SPR_SLR),
        .ex_Take_Intr_or_Exc(ex_Take_Intr_or_Exc),
        .ex_div_unsigned(ex_div_unsigned),
        .ex_is_multi_instr2(ex_is_multi_instr2),
        .ex_is_swx_instr_s(ex_is_swx_instr_s),
        .ex_load_store_instr_s(ex_load_store_instr_s),
        .ex_reservation(ex_reservation),
        .ex_valid(ex_valid),
        .ex_valid_reg(Write_Strobe_INST_0_i_1_n_0),
        .mem_is_multi_or_load_instr0(mem_is_multi_or_load_instr0),
        .out(reset_bool_for_rst));
  system_microblaze_0_0_MB_FDRE_41 \Using_FPGA_2.ex_is_lwx_instr_Inst 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (of_PipeRun_for_ce),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I1_n_141),
        .\Using_FPGA.Native_2 (\Using_FPGA_2.ex_load_store_instr_Inst_n_3 ),
        .\Using_LWX_SWX_instr.ex_reservation_reg (\Using_FPGA_2.ex_is_lwx_instr_Inst_n_1 ),
        .ex_MSR_Set_SW_BIP(ex_MSR_Set_SW_BIP),
        .ex_is_lwx_instr_s(ex_is_lwx_instr_s),
        .ex_load_store_instr_s(ex_load_store_instr_s),
        .ex_reservation(ex_reservation),
        .ex_valid_reg(Write_Strobe_INST_0_i_1_n_0),
        .mem_exception_from_ex(mem_exception_from_ex),
        .mem_valid_instr(mem_valid_instr),
        .out(reset_bool_for_rst),
        .wb_exception_i_reg(wb_gpr_write_i_reg_0),
        .\wb_exception_kind_i_reg[27] (wb_Halted));
  system_microblaze_0_0_MB_FDRE_42 \Using_FPGA_2.ex_is_swx_instr_Inst 
       (.Clk(Clk),
        .D122_out(D122_out),
        .E(Trace_WB_Jump_Hit_reg_0),
        .\EX_Op1_reg[29] (\EX_Op1_reg[29]_0 ),
        .MEM_DataBus_Access_reg(\Using_FPGA_2.ex_is_swx_instr_Inst_n_3 ),
        .MEM_DataBus_Access_reg_0(mem_databus_access),
        .SRI(SRI),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_1 (of_PipeRun_for_ce),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_17 ),
        .ex_MSR(ex_MSR[1]),
        .ex_MSR_Load_LWX_SWX_C(ex_MSR_Load_LWX_SWX_C),
        .ex_branch_with_delayslot_reg(\Using_FPGA.Native_1 ),
        .ex_is_swx_instr_s(ex_is_swx_instr_s),
        .ex_load_alu_carry_reg(\Using_FPGA.Native_i_3_n_0 ),
        .ex_reservation(ex_reservation),
        .out(reset_bool_for_rst),
        .p_126_in(p_126_in),
        .p_20_in(\Data_Flow_I/msr_reg_i/p_20_in ),
        .\wb_exception_kind_i_reg[27] (restore_wb_msr_to_ex));
  system_microblaze_0_0_MB_FDRE_43 \Using_FPGA_2.ex_load_store_instr_Inst 
       (.Clk(Clk),
        .\Performace_Debug_Control.dbg_stop_if_delay_i_reg (ex_Exception_Taken),
        .\Using_FPGA.Native_0 (of_PipeRun_for_ce),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I1_n_165),
        .\Using_LWX_SWX_instr.ex_reservation_reg (\Using_FPGA_2.ex_load_store_instr_Inst_n_3 ),
        .ex_MSR_Load_LWX_SWX_C(ex_MSR_Load_LWX_SWX_C),
        .ex_Take_Intr_or_Exc(ex_Take_Intr_or_Exc),
        .ex_branch_with_delayslot_reg(\Using_FPGA.Native_1 ),
        .ex_is_lwx_instr_s(ex_is_lwx_instr_s),
        .ex_is_swx_instr_s(ex_is_swx_instr_s),
        .ex_load_store_instr_s(ex_load_store_instr_s),
        .ex_reservation(ex_reservation),
        .ex_valid_reg(Write_Strobe_INST_0_i_1_n_0),
        .mem_exception_from_ex(mem_exception_from_ex),
        .mem_load_store_access0(mem_load_store_access0),
        .mem_valid_instr(mem_valid_instr),
        .out(reset_bool_for_rst),
        .p_126_in(p_126_in),
        .wb_exception_i_reg(wb_gpr_write_i_reg_0));
  system_microblaze_0_0_MB_FDRE_44 \Using_FPGA_2.ex_reverse_mem_access_inst 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (of_PipeRun_for_ce),
        .\Using_FPGA.Native_1 (PreFetch_Buffer_I1_n_171),
        .ex_reverse_byteorder(ex_reverse_byteorder),
        .out(reset_bool_for_rst));
  system_microblaze_0_0_MB_FDRE_45 \Using_FPGA_3.ex_clear_MSR_BIP_instr_Inst 
       (.Clk(Clk),
        .\EX_Op1_reg[28] (\EX_Op1_reg[28]_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_2 (of_PipeRun_for_ce),
        .ex_MSR(ex_MSR[2]),
        .ex_MSR_Set_SW_BIP(ex_MSR_Set_SW_BIP),
        .ex_Take_Intr_or_Exc_reg(\Using_FPGA.Native_2 ),
        .ex_branch_with_delayslot_reg(\Using_FPGA.Native_1 ),
        .ex_set_bip_reg(ex_set_bip_reg_n_0),
        .\ex_which_branch_reg[9] (\Using_FPGA_3.of_clear_MSR_BIP_hold_Inst_n_1 ),
        .of_MSR(of_MSR[1]),
        .out(reset_bool_for_rst),
        .wb_MSR_cmb(wb_MSR_cmb),
        .\wb_exception_kind_i_reg[27] (restore_wb_msr_to_ex));
  system_microblaze_0_0_MB_FDR \Using_FPGA_3.of_clear_MSR_BIP_hold_Inst 
       (.Clk(Clk),
        .Q({ex_opcode[0],ex_opcode[1],ex_opcode[2],ex_opcode[3],ex_opcode[4],ex_opcode[5]}),
        .\Using_FPGA.Native_0 (\Using_FPGA_3.of_clear_MSR_BIP_hold_Inst_n_1 ),
        .\Using_FPGA.Native_1 (of_PipeRun_for_ce),
        .ex_Take_Intr_or_Exc_reg(\Using_FPGA.Native_2 ),
        .ex_branch_with_delayslot_reg(\Using_FPGA.Native_1 ),
        .\ex_which_branch_reg[9] (p_0_in81_in),
        .out(reset_bool_for_rst),
        .p_82_in(p_82_in));
  system_microblaze_0_0_MB_LUT6__parameterized10 \Using_FPGA_4.of_read_ex_write_op1_conflict_INST1 
       (.Q({\ex_gpr_write_addr_reg_n_0_[0] ,I2,I4}),
        .ex_is_multi_or_load_instr(ex_is_multi_or_load_instr),
        .of_pipe_ctrl(of_pipe_ctrl[5]),
        .of_predecode({of_predecode[1],of_predecode[2],of_predecode[3]}),
        .of_read_ex_write_op1_conflict_part2(of_read_ex_write_op1_conflict_part2));
  system_microblaze_0_0_MB_LUT6__parameterized12 \Using_FPGA_4.of_read_ex_write_op1_conflict_INST2 
       (.Q({I0,\ex_gpr_write_addr_reg_n_0_[4] }),
        .ex_gpr_write_reg(ex_gpr_write_reg_n_0),
        .ex_valid(ex_valid),
        .of_predecode({of_predecode[4],of_predecode[5]}),
        .of_read_ex_write_op1_conflict_part2(of_read_ex_write_op1_conflict_part2));
  system_microblaze_0_0_MB_LUT6__parameterized18 \Using_FPGA_4.of_read_ex_write_op2_conflict_INST1 
       (.Q({\ex_gpr_write_addr_reg_n_0_[0] ,I2,I4}),
        .of_predecode({of_predecode[6],of_predecode[7],of_predecode[8]}),
        .of_read_ex_write_op2_conflict_part1(of_read_ex_write_op2_conflict_part1));
  system_microblaze_0_0_MB_LUT6__parameterized20 \Using_FPGA_4.of_read_ex_write_op2_conflict_INST2 
       (.Q({I0,\ex_gpr_write_addr_reg_n_0_[4] }),
        .ex_gpr_write_reg(ex_gpr_write_reg_n_0),
        .ex_valid(ex_valid),
        .of_predecode({of_predecode[9],of_predecode[10]}),
        .of_read_ex_write_op2_conflict_part2(of_read_ex_write_op2_conflict_part2));
  system_microblaze_0_0_MB_LUT6__parameterized26 \Using_FPGA_4.of_read_ex_write_op3_conflict_INST1 
       (.D({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2]}),
        .Q({\ex_gpr_write_addr_reg_n_0_[0] ,I2,I4}),
        .of_read_ex_write_op3_conflict_part1(of_read_ex_write_op3_conflict_part1));
  system_microblaze_0_0_MB_LUT6__parameterized28 \Using_FPGA_4.of_read_ex_write_op3_conflict_INST2 
       (.D({of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .Q({I0,\ex_gpr_write_addr_reg_n_0_[4] }),
        .ex_gpr_write_reg(ex_gpr_write_reg_n_0),
        .ex_valid(ex_valid),
        .of_read_ex_write_op3_conflict_part2(of_read_ex_write_op3_conflict_part2));
  system_microblaze_0_0_MB_LUT6__parameterized14 \Using_FPGA_4.of_read_mem_write_op1_conflict_INST1 
       (.Q({mem_gpr_write_addr[0],mem_gpr_write_addr[1],mem_gpr_write_addr[2]}),
        .of_predecode({of_predecode[1],of_predecode[2],of_predecode[3]}),
        .of_read_mem_write_op1_conflict_part1(of_read_mem_write_op1_conflict_part1));
  system_microblaze_0_0_MB_LUT6__parameterized16 \Using_FPGA_4.of_read_mem_write_op1_conflict_INST2 
       (.Q({mem_gpr_write_addr[3],mem_gpr_write_addr[4]}),
        .mem_gpr_write(mem_gpr_write),
        .mem_is_multi_or_load_instr(mem_is_multi_or_load_instr),
        .mem_valid_instr(mem_valid_instr),
        .of_pipe_ctrl(of_pipe_ctrl[6]),
        .of_predecode({of_predecode[4],of_predecode[5]}),
        .of_read_mem_write_op1_conflict_part1(of_read_mem_write_op1_conflict_part1));
  system_microblaze_0_0_MB_LUT6__parameterized22 \Using_FPGA_4.of_read_mem_write_op2_conflict_INST1 
       (.Q({mem_gpr_write_addr[0],mem_gpr_write_addr[1],mem_gpr_write_addr[2]}),
        .of_predecode({of_predecode[6],of_predecode[7],of_predecode[8]}),
        .of_read_mem_write_op2_conflict_part1(of_read_mem_write_op2_conflict_part1));
  system_microblaze_0_0_MB_LUT6__parameterized24 \Using_FPGA_4.of_read_mem_write_op2_conflict_INST2 
       (.Q({mem_gpr_write_addr[3],mem_gpr_write_addr[4]}),
        .mem_gpr_write(mem_gpr_write),
        .mem_valid_instr(mem_valid_instr),
        .of_predecode({of_predecode[9],of_predecode[10]}),
        .of_read_mem_write_op2_conflict_part2(of_read_mem_write_op2_conflict_part2));
  system_microblaze_0_0_MB_LUT6__parameterized30 \Using_FPGA_4.of_read_mem_write_op3_conflict_INST1 
       (.D({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2]}),
        .Q({mem_gpr_write_addr[0],mem_gpr_write_addr[1],mem_gpr_write_addr[2]}),
        .\Using_FPGA.Native_0 (use_Reg_Neg_S_reg_0),
        .mem_is_multi_or_load_instr(mem_is_multi_or_load_instr),
        .of_pipe_ctrl(of_pipe_ctrl[10]),
        .of_read_mem_write_op3_conflict_part2(of_read_mem_write_op3_conflict_part2));
  system_microblaze_0_0_MB_LUT6__parameterized32 \Using_FPGA_4.of_read_mem_write_op3_conflict_INST2 
       (.D({of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .Q({mem_gpr_write_addr[3],mem_gpr_write_addr[4]}),
        .mem_gpr_write(mem_gpr_write),
        .mem_valid_instr(mem_valid_instr),
        .of_read_mem_write_op3_conflict_part2(of_read_mem_write_op3_conflict_part2));
  LUT5 #(
    .INIT(32'h000000EA)) 
    \Using_Fast_Interrupt.Interrupt_Ack[0]_i_1 
       (.I0(wb_ie_rising),
        .I1(wb_valid_reg_n_0),
        .I2(wb_rtid_instr),
        .I3(reset_bool_for_rst),
        .I4(restore_wb_msr_to_ex),
        .O(\Using_Fast_Interrupt.Interrupt_Ack[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    \Using_Fast_Interrupt.Interrupt_Ack[1]_i_1 
       (.I0(restore_wb_msr_to_ex),
        .I1(wb_valid_reg_n_0),
        .I2(wb_rtid_instr),
        .I3(wb_ie_rising),
        .O(\Using_Fast_Interrupt.Interrupt_Ack[1]_i_1_n_0 ));
  FDRE \Using_Fast_Interrupt.Interrupt_Ack_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_Fast_Interrupt.Interrupt_Ack[0]_i_1_n_0 ),
        .Q(Interrupt_Ack[0]),
        .R(1'b0));
  FDRE \Using_Fast_Interrupt.Interrupt_Ack_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_Fast_Interrupt.Interrupt_Ack[1]_i_1_n_0 ),
        .Q(Interrupt_Ack[1]),
        .R(reset_bool_for_rst));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_Fast_Interrupt.mem_rtid_instr_i_1 
       (.I0(\ex_which_branch_reg_n_0_[10] ),
        .I1(p_82_in),
        .O(of_set_MSR_IE));
  FDRE \Using_Fast_Interrupt.mem_rtid_instr_reg 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(of_set_MSR_IE),
        .Q(mem_rtid_instr),
        .R(1'b0));
  FDRE \Using_Fast_Interrupt.wb_ie_rising_reg 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(\Using_FPGA.Native_14 ),
        .Q(wb_ie_rising),
        .R(1'b0));
  FDRE \Using_Fast_Interrupt.wb_rtid_instr_reg 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_rtid_instr),
        .Q(wb_rtid_instr),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_LWX_SWX_instr.ex_reservation_i_4 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(ex_set_bip_reg_n_0),
        .O(ex_MSR_Set_SW_BIP));
  FDRE \Using_LWX_SWX_instr.ex_reservation_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA_2.ex_is_lwx_instr_Inst_n_1 ),
        .Q(ex_reservation),
        .R(1'b0));
  system_microblaze_0_0_carry_and_46 \Using_PC_Incr_Dbg_or_Prot.if_pc_incr_carry_and_1 
       (.\Performace_Debug_Control.dbg_stop_if_delay_i_reg (\Performace_Debug_Control.dbg_stop_if_delay_i_reg ),
        .if_pc_incr_carry0(if_pc_incr_carry0),
        .if_pc_incr_carry1(if_pc_incr_carry1),
        .lopt(lopt_6));
  FDRE WB_Byte_Access_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_byte_access),
        .Q(wb_byte_access),
        .R(reset_bool_for_rst));
  FDRE WB_DelaySlot_Instr_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_delayslot_instr),
        .Q(IFetch[1]),
        .R(reset_bool_for_rst));
  FDRE WB_Doublet_Access_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_doublet_access),
        .Q(wb_doublet_access),
        .R(reset_bool_for_rst));
  FDRE WB_PC_Valid_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_valid_instr),
        .Q(wb_pc_valid),
        .R(reset_bool_for_rst));
  FDRE WB_Read_Imm_Reg_1_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_read_imm_reg_1),
        .Q(wb_read_imm_reg_1),
        .R(reset_bool_for_rst));
  FDRE WB_Read_Imm_Reg_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_read_imm_reg),
        .Q(wb_read_imm_reg),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'h000000000000A8AA)) 
    Write_Strobe_INST_0_i_1
       (.I0(ex_valid),
        .I1(dbg_stop_if_delay_i),
        .I2(Dbg_Disable),
        .I3(\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .I4(ex_Take_Intr_or_Exc),
        .I5(ex_Interrupt_i),
        .O(Write_Strobe_INST_0_i_1_n_0));
  LUT3 #(
    .INIT(8'hA8)) 
    active_wakeup_i_1
       (.I0(Sleep_Decode),
        .I1(Wakeup[0]),
        .I2(Wakeup[1]),
        .O(active_wakeup0));
  FDRE active_wakeup_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_wakeup0),
        .Q(active_wakeup),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT5 #(
    .INIT(32'hAAAACCCF)) 
    dbg_wakeup_i_i_1
       (.I0(Scan_Reset),
        .I1(Dbg_Disable),
        .I2(Sleep_Decode),
        .I3(sleep_reset_mode_reg),
        .I4(Scan_Reset_Sel),
        .O(no_sleeping));
  FDRE ex_Instr_Excep_combo_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_MuxCy[10].OF_Piperun_Stage_n_6 ),
        .Q(ex_Instr_Excep_combo),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h4C4C4C0C)) 
    ex_Interrupt_Brk_combo_i_1
       (.I0(ex_atomic_Instruction_Pair),
        .I1(\control_reg_reg[3] ),
        .I2(ex_valid_keep),
        .I3(ex_Take_Intr_or_Exc),
        .I4(ex_Interrupt_Brk_combo_i_3_n_0),
        .O(of_Interrupt));
  LUT6 #(
    .INIT(64'hAAAEAAAEAAAEFFFF)) 
    ex_Interrupt_Brk_combo_i_3
       (.I0(ex_Interrupt_i),
        .I1(\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .I2(Dbg_Disable),
        .I3(dbg_stop_if_delay_i),
        .I4(ex_move_to_MSR_instr),
        .I5(wb_sel_spr_shr),
        .O(ex_Interrupt_Brk_combo_i_3_n_0));
  FDRE ex_Interrupt_Brk_combo_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_Interrupt),
        .Q(ex_Interrupt_i),
        .R(reset_bool_for_rst));
  FDRE ex_MSR_set_decode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(wb_sel_spr_shr),
        .Q(wb_sel_spr_shr),
        .R(reset_bool_for_rst));
  FDRE ex_Sel_SPR_BTR_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_Sel_SPR_BTR),
        .Q(ex_Sel_SPR_BTR),
        .R(reset_bool_for_rst));
  FDRE ex_Sel_SPR_EAR_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_Sel_SPR_EAR),
        .Q(ex_Sel_SPR_EAR),
        .R(reset_bool_for_rst));
  FDRE ex_Sel_SPR_EDR_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_Sel_SPR_EDR),
        .Q(ex_Sel_SPR_EDR),
        .R(reset_bool_for_rst));
  FDRE ex_Sel_SPR_ESR_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_Sel_SPR_ESR),
        .Q(ex_Sel_SPR_ESR),
        .R(reset_bool_for_rst));
  FDRE ex_Sel_SPR_FSR_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_Sel_SPR_FSR),
        .Q(ex_Sel_SPR_FSR),
        .R(reset_bool_for_rst));
  FDRE ex_Sel_SPR_PVR_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_Sel_SPR_PVR),
        .Q(ex_Sel_SPR_PVR),
        .R(reset_bool_for_rst));
  FDRE ex_Sel_SPR_SHR_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_Sel_SPR_SHR),
        .Q(ex_Sel_SPR_SHR),
        .R(reset_bool_for_rst));
  FDRE ex_Sel_SPR_SLR_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_Sel_SPR_SLR),
        .Q(ex_Sel_SPR_SLR),
        .R(reset_bool_for_rst));
  FDRE ex_Take_Intr_or_Exc_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_MuxCy[10].OF_Piperun_Stage_n_1 ),
        .Q(ex_Take_Intr_or_Exc),
        .R(1'b0));
  FDRE ex_Write_DCache_decode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Write_DCache_decode_cmb),
        .Q(ex_write_dcache_instr),
        .R(reset_bool_for_rst));
  FDRE ex_Write_ICache_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_Write_ICache_i_cmb),
        .Q(ex_Write_ICache_i),
        .R(reset_bool_for_rst));
  FDSE ex_alu_sel_logic_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_172),
        .Q(EX_ALU_Sel_Logic),
        .S(reset_bool_for_rst));
  FDRE ex_atomic_Instruction_Pair_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_atomic_Instruction_Pair0),
        .Q(ex_atomic_Instruction_Pair),
        .R(reset_bool_for_rst));
  FDRE ex_branch_with_delayslot_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_92),
        .Q(ex_branch_with_delayslot),
        .R(reset_bool_for_rst));
  FDRE ex_bt_hit_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_MuxCy[3].OF_Piperun_Stage_n_6 ),
        .Q(mem_jump_hit0),
        .R(1'b0));
  FDRE ex_delayslot_Instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_delayslot_Instr0),
        .Q(ex_delayslot_Instr),
        .R(reset_bool_for_rst));
  FDRE ex_enable_alu_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_96),
        .Q(EX_Enable_ALU),
        .R(reset_bool_for_rst));
  FDRE ex_enable_sext_shift_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_enable_sext_shift_i0),
        .Q(ex_Enable_Sext_Shift),
        .R(reset_bool_for_rst));
  FDRE ex_first_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_MuxCy[10].OF_Piperun_Stage_n_4 ),
        .Q(ex_first_cycle),
        .R(1'b0));
  FDRE \ex_gpr_write_addr_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[0]),
        .Q(\ex_gpr_write_addr_reg_n_0_[0] ),
        .R(reset_bool_for_rst));
  FDRE \ex_gpr_write_addr_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[1]),
        .Q(I2),
        .R(reset_bool_for_rst));
  FDRE \ex_gpr_write_addr_reg[2] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[2]),
        .Q(I4),
        .R(reset_bool_for_rst));
  FDRE \ex_gpr_write_addr_reg[3] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[3]),
        .Q(I0),
        .R(reset_bool_for_rst));
  FDRE \ex_gpr_write_addr_reg[4] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[4]),
        .Q(\ex_gpr_write_addr_reg_n_0_[4] ),
        .R(reset_bool_for_rst));
  FDRE ex_gpr_write_dbg_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I1_n_159),
        .Q(ex_gpr_write_dbg),
        .R(1'b0));
  FDRE ex_gpr_write_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I1_n_157),
        .Q(ex_gpr_write_reg_n_0),
        .R(1'b0));
  FDRE \ex_instr_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[0]),
        .Q(ex_instr[0]),
        .R(1'b0));
  FDRE \ex_instr_reg[10] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[4]),
        .Q(ex_instr[10]),
        .R(1'b0));
  FDRE \ex_instr_reg[11] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op1_rd_addr[0]),
        .Q(ex_instr[11]),
        .R(1'b0));
  FDRE \ex_instr_reg[12] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op1_rd_addr[1]),
        .Q(ex_instr[12]),
        .R(1'b0));
  FDRE \ex_instr_reg[13] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op1_rd_addr[2]),
        .Q(ex_instr[13]),
        .R(1'b0));
  FDRE \ex_instr_reg[14] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op1_rd_addr[3]),
        .Q(ex_instr[14]),
        .R(1'b0));
  FDRE \ex_instr_reg[15] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op1_rd_addr[4]),
        .Q(ex_instr[15]),
        .R(1'b0));
  FDRE \ex_instr_reg[16] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[0]),
        .Q(ex_instr[16]),
        .R(1'b0));
  FDRE \ex_instr_reg[17] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[1]),
        .Q(ex_instr[17]),
        .R(1'b0));
  FDRE \ex_instr_reg[18] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[2]),
        .Q(ex_instr[18]),
        .R(1'b0));
  FDRE \ex_instr_reg[19] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[3]),
        .Q(ex_instr[19]),
        .R(1'b0));
  FDRE \ex_instr_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[1]),
        .Q(ex_instr[1]),
        .R(1'b0));
  FDRE \ex_instr_reg[20] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[4]),
        .Q(ex_instr[20]),
        .R(1'b0));
  FDRE \ex_instr_reg[21] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[5]),
        .Q(ex_instr[21]),
        .R(1'b0));
  FDRE \ex_instr_reg[22] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[6]),
        .Q(ex_instr[22]),
        .R(1'b0));
  FDRE \ex_instr_reg[23] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[7]),
        .Q(ex_instr[23]),
        .R(1'b0));
  FDRE \ex_instr_reg[24] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[8]),
        .Q(ex_instr[24]),
        .R(1'b0));
  FDRE \ex_instr_reg[25] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[9]),
        .Q(ex_instr[25]),
        .R(1'b0));
  FDRE \ex_instr_reg[26] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[10]),
        .Q(ex_instr[26]),
        .R(1'b0));
  FDRE \ex_instr_reg[27] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[11]),
        .Q(\ex_instr_reg_n_0_[27] ),
        .R(1'b0));
  FDRE \ex_instr_reg[28] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[12]),
        .Q(ex_instr[28]),
        .R(1'b0));
  FDRE \ex_instr_reg[29] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[13]),
        .Q(ex_instr[29]),
        .R(1'b0));
  FDRE \ex_instr_reg[2] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[2]),
        .Q(ex_instr[2]),
        .R(1'b0));
  FDRE \ex_instr_reg[30] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[14]),
        .Q(\ex_instr_reg_n_0_[30] ),
        .R(1'b0));
  FDRE \ex_instr_reg[31] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_imm_data[15]),
        .Q(ex_instr[31]),
        .R(1'b0));
  FDRE \ex_instr_reg[3] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[3]),
        .Q(ex_instr[3]),
        .R(1'b0));
  FDRE \ex_instr_reg[4] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[4]),
        .Q(ex_instr[4]),
        .R(1'b0));
  FDRE \ex_instr_reg[5] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[5]),
        .Q(ex_instr[5]),
        .R(1'b0));
  FDRE \ex_instr_reg[6] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[0]),
        .Q(ex_instr[6]),
        .R(1'b0));
  FDRE \ex_instr_reg[7] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[1]),
        .Q(ex_instr[7]),
        .R(1'b0));
  FDRE \ex_instr_reg[8] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[2]),
        .Q(ex_instr[8]),
        .R(1'b0));
  FDRE \ex_instr_reg[9] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[3]),
        .Q(ex_instr[9]),
        .R(1'b0));
  FDRE ex_is_div_instr_I_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I1_n_158),
        .Q(EX_Is_Div_Instr),
        .R(1'b0));
  FDRE ex_is_mul_instr_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_MuxCy[10].OF_Piperun_Stage_n_2 ),
        .Q(ex_div_unsigned),
        .R(1'b0));
  FDRE ex_is_multi_instr2_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_145),
        .Q(ex_is_multi_instr2),
        .R(reset_bool_for_rst));
  FDRE ex_is_multi_or_load_instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_is_multi_or_load_instr0),
        .Q(ex_is_multi_or_load_instr),
        .R(reset_bool_for_rst));
  FDRE ex_jump_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(jump_logic_I1_n_13),
        .Q(ex_jump_hold),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAFFAA0200000000)) 
    ex_jump_nodelay_i_2
       (.I0(IReady),
        .I1(wb_Halted),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(Dbg_Disable),
        .I4(if_debug_ready_i_reg),
        .I5(if_missed_fetch),
        .O(ex_jump_nodelay_i_2_n_0));
  FDRE ex_jump_nodelay_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_MuxCy[10].OF_Piperun_Stage_n_9 ),
        .Q(ex_jump_nodelay_reg_n_0),
        .R(1'b0));
  FDRE ex_load_alu_carry_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_164),
        .Q(ex_load_alu_carry_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE ex_load_shift_carry_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PreFetch_Buffer_I1_n_168),
        .Q(ex_load_shift_carry),
        .R(reset_bool_for_rst));
  FDRE ex_mbar_decode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_mbar_decode_cmb),
        .Q(ex_mbar_decode),
        .R(reset_bool_for_rst));
  FDRE ex_mbar_is_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_mbar_is_sleep_cmb),
        .Q(ex_mbar_is_sleep),
        .R(reset_bool_for_rst));
  LUT4 #(
    .INIT(16'h000E)) 
    ex_mbar_sleep_i_1
       (.I0(ex_mbar_sleep),
        .I1(ex_mbar_sleep0),
        .I2(active_wakeup),
        .I3(reset_bool_for_rst),
        .O(ex_mbar_sleep_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    ex_mbar_sleep_i_2
       (.I0(ex_first_cycle),
        .I1(ex_mbar_is_sleep),
        .I2(\Using_FPGA.Native_2 ),
        .I3(ex_mbar_decode),
        .O(ex_mbar_sleep0));
  FDRE ex_mbar_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_mbar_sleep_i_1_n_0),
        .Q(ex_mbar_sleep),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h4F44)) 
    ex_mbar_stall_no_sleep_1_i_1
       (.I0(\ex_gpr_write_addr_reg_n_0_[4] ),
        .I1(if_fetch_in_progress),
        .I2(I0),
        .I3(mem_valid_instr),
        .O(ex_mbar_stall_no_sleep_10));
  FDRE ex_mbar_stall_no_sleep_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_mbar_stall_no_sleep_10),
        .Q(ex_mbar_stall_no_sleep_1),
        .R(reset_bool_for_rst));
  FDRE ex_mfsmsr_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_Sel_SPR_MSR3_out),
        .Q(ex_mfsmsr_i),
        .R(reset_bool_for_rst));
  FDRE ex_move_to_MSR_instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_move_to_MSR_instr29_out),
        .Q(ex_move_to_MSR_instr),
        .R(reset_bool_for_rst));
  FDRE \ex_opcode_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[0]),
        .Q(ex_opcode[0]),
        .R(reset_bool_for_rst));
  FDRE \ex_opcode_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[1]),
        .Q(ex_opcode[1]),
        .R(reset_bool_for_rst));
  FDRE \ex_opcode_reg[2] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[2]),
        .Q(ex_opcode[2]),
        .R(reset_bool_for_rst));
  FDRE \ex_opcode_reg[3] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[3]),
        .Q(ex_opcode[3]),
        .R(reset_bool_for_rst));
  FDRE \ex_opcode_reg[4] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[4]),
        .Q(ex_opcode[4]),
        .R(reset_bool_for_rst));
  FDRE \ex_opcode_reg[5] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[5]),
        .Q(ex_opcode[5]),
        .R(reset_bool_for_rst));
  FDRE ex_read_imm_reg_1_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_read_imm_reg),
        .Q(ex_read_imm_reg_1),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'hAA02)) 
    ex_read_imm_reg_i_1
       (.I0(of_read_imm_reg_ii),
        .I1(wb_Halted),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(Dbg_Disable),
        .O(ex_read_imm_reg_i_1_n_0));
  FDRE ex_read_imm_reg_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_read_imm_reg_i_1_n_0),
        .Q(ex_read_imm_reg),
        .R(reset_bool_for_rst));
  FDSE ex_sel_alu_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_sel_alu_i0),
        .Q(ex_sel_alu),
        .S(reset_bool_for_rst));
  LUT3 #(
    .INIT(8'hF8)) 
    ex_set_MSR_IE_instr_i_1
       (.I0(\ex_which_branch_reg_n_0_[10] ),
        .I1(p_82_in),
        .I2(of_set_MSR_IE_hold_reg_n_0),
        .O(of_set_MSR_IE_hold0));
  FDRE ex_set_MSR_IE_instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_set_MSR_IE_hold0),
        .Q(ex_set_MSR_IE_instr),
        .R(reset_bool_for_rst));
  FDRE ex_set_bip_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_set_bip),
        .Q(ex_set_bip_reg_n_0),
        .R(reset_bool_for_rst));
  LUT4 #(
    .INIT(16'h000E)) 
    ex_sleep_i_i_1
       (.I0(Sleep_Decode),
        .I1(ex_sleep_i_i_2_n_0),
        .I2(reset_bool_for_rst),
        .I3(active_wakeup),
        .O(ex_sleep_i_i_1_n_0));
  LUT6 #(
    .INIT(64'hAA02AAAAAAAAAAAA)) 
    ex_sleep_i_i_2
       (.I0(ex_mbar_sleep),
        .I1(ex_first_cycle),
        .I2(ex_mbar_stall_no_sleep_1),
        .I3(ex_jump_hold),
        .I4(\Using_FPGA.Native_2 ),
        .I5(ex_mbar_decode),
        .O(ex_sleep_i_i_2_n_0));
  FDRE ex_sleep_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_sleep_i_i_1_n_0),
        .Q(Sleep_Decode),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE ex_valid_jump_reg
       (.C(Clk),
        .CE(1'b1),
        .D(jump_logic_I1_n_10),
        .Q(ex_valid_jump),
        .R(1'b0));
  FDRE ex_valid_keep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_MuxCy[10].OF_Piperun_Stage_n_3 ),
        .Q(ex_valid_keep),
        .R(1'b0));
  FDRE ex_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(jump_logic_I1_n_11),
        .Q(ex_valid),
        .R(1'b0));
  FDRE \ex_which_branch_reg[10] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[4]),
        .Q(\ex_which_branch_reg_n_0_[10] ),
        .R(reset_bool_for_rst));
  FDRE \ex_which_branch_reg[9] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_gpr_op3_rd_addr[3]),
        .Q(p_0_in81_in),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'h000000000000BA8A)) 
    exception_i_1
       (.I0(executing_reg_0[0]),
        .I1(wb_Halted),
        .I2(wb_valid_reg_n_0),
        .I3(IFetch[8]),
        .I4(Rst18_out),
        .I5(executing0),
        .O(exception_reg));
  LUT4 #(
    .INIT(16'hFBF0)) 
    executing_i_1
       (.I0(wb_Halted),
        .I1(wb_valid_reg_n_0),
        .I2(executing0),
        .I3(executing_reg_0[1]),
        .O(executing_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(of_Sel_SPR_FSR));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(of_Sel_SPR_PVR));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(of_PVR_Select[2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(of_PVR_Select[3]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(of_Sel_SPR_EAR));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(of_Sel_SPR_SLR));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(of_Sel_SPR_SHR));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(of_Sel_SPR_ESR));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(of_Sel_SPR_EDR));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(of_Sel_SPR_BTR));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(of_PVR_Select[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(of_PVR_Select[1]));
  FDRE if_fetch_in_progress_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PreFetch_Buffer_I1_n_156),
        .Q(if_fetch_in_progress),
        .R(1'b0));
  FDRE if_missed_fetch_reg
       (.C(Clk),
        .CE(1'b1),
        .D(jump_logic_I1_n_7),
        .Q(if_missed_fetch),
        .R(1'b0));
  system_microblaze_0_0_carry_and_47 if_pc_incr_carry_and_0
       (.if_missed_fetch(if_missed_fetch),
        .if_pc_incr_carry0(if_pc_incr_carry0),
        .lopt(\^lopt_3 ),
        .lopt_1(\^lopt_4 ),
        .lopt_2(\^lopt_5 ));
  system_microblaze_0_0_carry_and_48 if_pc_incr_carry_and_3
       (.if_fetch_for_timing_optimization1(if_fetch_for_timing_optimization1),
        .if_pc_incr_carry1(if_pc_incr_carry1),
        .if_pc_incr_carry3(if_pc_incr_carry3),
        .lopt(lopt_7),
        .lopt_1(lopt_8));
  system_microblaze_0_0_jump_logic jump_logic_I1
       (.Clk(Clk),
        .Dbg_Disable(Dbg_Disable),
        .\EX_Branch_CMP_Op1_reg[0] (\EX_Branch_CMP_Op1_reg[0]_0 ),
        .EX_MBAR_Stall(EX_MBAR_Stall),
        .EX_Valid(ex_valid_jump),
        .IB_Ready(IB_Ready),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .\Performace_Debug_Control.dbg_stop_if_delay_i_reg (ex_Exception_Taken),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg (\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .\Using_FPGA.Native (jump_logic_I1_n_9),
        .\Using_FPGA.Native_0 (jump_logic_I1_n_12),
        .\Using_FPGA.Native_1 (of_PipeRun_for_ce),
        .\Using_FPGA.Native_2 (PreFetch_Buffer_I1_n_54),
        .dbg_stop_if_delay_i(dbg_stop_if_delay_i),
        .ex_Instr_Excep_combo(ex_Instr_Excep_combo),
        .ex_Interrupt_i(ex_Interrupt_i),
        .ex_Take_Intr_or_Exc(ex_Take_Intr_or_Exc),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .ex_branch_with_delayslot_reg(PreFetch_Buffer_I1_n_169),
        .ex_branch_with_delayslot_reg_0(\Using_FPGA.Native_1 ),
        .ex_delayslot_Instr0(ex_delayslot_Instr0),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .ex_first_cycle(ex_first_cycle),
        .ex_jump_hold(ex_jump_hold),
        .ex_jump_hold_reg(jump_logic_I1_n_13),
        .ex_jump_nodelay_reg(ex_jump_nodelay_reg_n_0),
        .ex_jump_q(ex_jump_q),
        .ex_mbar_decode(ex_mbar_decode),
        .ex_mbar_sleep(ex_mbar_sleep),
        .ex_mbar_stall_no_sleep_1(ex_mbar_stall_no_sleep_1),
        .ex_op1_cmp_eq(ex_op1_cmp_eq),
        .ex_op1_cmp_eq1(ex_op1_cmp_eq1),
        .ex_op1_cmp_eq_n5_out(ex_op1_cmp_eq_n5_out),
        .ex_op1_cmp_equal(ex_op1_cmp_equal),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .ex_op1_zero(ex_op1_zero),
        .ex_valid(ex_valid),
        .ex_valid_jump_reg(jump_logic_I1_n_10),
        .ex_valid_jump_reg_0(ex_valid_jump),
        .ex_valid_reg(jump_logic_I1_n_11),
        .force12_out(force12_out),
        .force_Val10_out(force_Val10_out),
        .if_fetch_in_progress_reg(IFetch[134]),
        .if_missed_fetch(if_missed_fetch),
        .if_missed_fetch_reg(jump_logic_I1_n_7),
        .\if_pc_reg[0] (IF_PC_Write),
        .keep_jump_taken_with_ds(keep_jump_taken_with_ds),
        .keep_jump_taken_with_ds_reg(jump_logic_I1_n_14),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .mem_exception_from_ex(mem_exception_from_ex),
        .mem_jump_taken0(mem_jump_taken0),
        .mem_valid_instr(mem_valid_instr),
        .mem_valid_reg(mem_Exception_Taken),
        .of_Take_Interrupt_hold_reg(of_Take_Interrupt),
        .of_next_ex_valid(of_next_ex_valid),
        .of_read_imm_reg_ii(of_read_imm_reg_ii),
        .of_read_imm_reg_ii_reg(jump_logic_I1_n_8),
        .of_valid(of_valid),
        .out(reset_bool_for_rst),
        .p_9_in(p_9_in),
        .use_Reg_Neg_DI1_out(use_Reg_Neg_DI1_out),
        .use_Reg_Neg_S3_out(use_Reg_Neg_S3_out),
        .wb_exception_i_reg(wb_gpr_write_i_reg_0),
        .\wb_exception_kind_i_reg[27] (wb_Halted));
  FDRE keep_jump_taken_with_ds_reg
       (.C(Clk),
        .CE(1'b1),
        .D(jump_logic_I1_n_14),
        .Q(keep_jump_taken_with_ds),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    mb_halted_1_i_1
       (.I0(wb_Halted),
        .I1(\Performace_Debug_Control.dbg_state_nohalt_reg ),
        .O(dbg_state_i));
  system_microblaze_0_0_carry_and_49 mem_PipeRun_carry_and
       (.E(Trace_WB_Jump_Hit_reg_0),
        .ex_branch_with_delayslot_reg(\Using_FPGA.Native_1 ),
        .ex_valid_reg(mem_valid_i_2_n_0),
        .flush_pipe(flush_pipe),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .lopt_2(lopt_16),
        .mem_exception_from_ex(mem_exception_from_ex),
        .mem_gpr_write(mem_gpr_write),
        .mem_gpr_write_dbg(mem_gpr_write_dbg),
        .mem_valid_instr(mem_valid_instr),
        .mem_valid_reg(mem_PipeRun_carry_and_n_3),
        .mem_wait_on_ready_N(mem_wait_on_ready_N),
        .out(reset_bool_for_rst),
        .wb_exception_i_reg(wb_gpr_write_i_reg_0),
        .wb_gpr_write_dbg0(wb_gpr_write_dbg0),
        .wb_gpr_write_i0(wb_gpr_write_i0),
        .wb_piperun(wb_piperun),
        .wb_valid_reg(mem_PipeRun_carry_and_n_4),
        .wb_valid_reg_0(wb_valid_reg_n_0));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT5 #(
    .INIT(32'h07000000)) 
    mem_Write_DCache_i_1
       (.I0(mem_valid_instr),
        .I1(mem_exception_from_ex),
        .I2(wb_gpr_write_i_reg_0),
        .I3(\Using_FPGA.Native_2 ),
        .I4(ex_write_dcache_instr),
        .O(mem_Write_DCache_i_1_n_0));
  FDRE mem_Write_DCache_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(mem_Write_DCache_i_1_n_0),
        .Q(mem_Write_DCache),
        .R(reset_bool_for_rst));
  FDRE mem_byte_access_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_byte_access),
        .Q(mem_byte_access),
        .R(reset_bool_for_rst));
  FDRE mem_delayslot_instr_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_delayslot_Instr),
        .Q(mem_delayslot_instr),
        .R(reset_bool_for_rst));
  FDRE mem_doublet_access_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_doublet_access),
        .Q(mem_doublet_access),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'hFFFF001000000000)) 
    mem_exception_from_ex_i_1
       (.I0(dbg_stop_if_delay_i),
        .I1(Dbg_Disable),
        .I2(\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .I3(ex_Take_Intr_or_Exc),
        .I4(ex_Interrupt_i),
        .I5(ex_valid),
        .O(ex_Exception_Taken));
  FDRE mem_exception_from_ex_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_Exception_Taken),
        .Q(mem_exception_from_ex),
        .R(reset_bool_for_rst));
  FDRE \mem_gpr_write_addr_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\ex_gpr_write_addr_reg_n_0_[0] ),
        .Q(mem_gpr_write_addr[0]),
        .R(reset_bool_for_rst));
  FDRE \mem_gpr_write_addr_reg[1] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(I2),
        .Q(mem_gpr_write_addr[1]),
        .R(reset_bool_for_rst));
  FDRE \mem_gpr_write_addr_reg[2] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(I4),
        .Q(mem_gpr_write_addr[2]),
        .R(reset_bool_for_rst));
  FDRE \mem_gpr_write_addr_reg[3] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(I0),
        .Q(mem_gpr_write_addr[3]),
        .R(reset_bool_for_rst));
  FDRE \mem_gpr_write_addr_reg[4] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\ex_gpr_write_addr_reg_n_0_[4] ),
        .Q(mem_gpr_write_addr[4]),
        .R(reset_bool_for_rst));
  FDRE mem_gpr_write_dbg_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_MuxCy[3].OF_Piperun_Stage_n_7 ),
        .Q(mem_gpr_write_dbg),
        .R(flush_pipe));
  FDRE mem_gpr_write_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_MuxCy[3].OF_Piperun_Stage_n_5 ),
        .Q(mem_gpr_write),
        .R(1'b0));
  FDRE \mem_instr_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[0]),
        .Q(mem_instr[0]),
        .R(1'b0));
  FDRE \mem_instr_reg[10] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[10]),
        .Q(mem_instr[10]),
        .R(1'b0));
  FDRE \mem_instr_reg[11] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[11]),
        .Q(mem_instr[11]),
        .R(1'b0));
  FDRE \mem_instr_reg[12] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[12]),
        .Q(mem_instr[12]),
        .R(1'b0));
  FDRE \mem_instr_reg[13] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[13]),
        .Q(mem_instr[13]),
        .R(1'b0));
  FDRE \mem_instr_reg[14] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[14]),
        .Q(mem_instr[14]),
        .R(1'b0));
  FDRE \mem_instr_reg[15] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[15]),
        .Q(mem_instr[15]),
        .R(1'b0));
  FDRE \mem_instr_reg[16] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[16]),
        .Q(mem_instr[16]),
        .R(1'b0));
  FDRE \mem_instr_reg[17] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[17]),
        .Q(mem_instr[17]),
        .R(1'b0));
  FDRE \mem_instr_reg[18] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[18]),
        .Q(mem_instr[18]),
        .R(1'b0));
  FDRE \mem_instr_reg[19] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[19]),
        .Q(mem_instr[19]),
        .R(1'b0));
  FDRE \mem_instr_reg[1] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[1]),
        .Q(mem_instr[1]),
        .R(1'b0));
  FDRE \mem_instr_reg[20] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[20]),
        .Q(mem_instr[20]),
        .R(1'b0));
  FDRE \mem_instr_reg[21] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[21]),
        .Q(mem_instr[21]),
        .R(1'b0));
  FDRE \mem_instr_reg[22] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[22]),
        .Q(mem_instr[22]),
        .R(1'b0));
  FDRE \mem_instr_reg[23] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[23]),
        .Q(mem_instr[23]),
        .R(1'b0));
  FDRE \mem_instr_reg[24] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[24]),
        .Q(mem_instr[24]),
        .R(1'b0));
  FDRE \mem_instr_reg[25] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[25]),
        .Q(mem_instr[25]),
        .R(1'b0));
  FDRE \mem_instr_reg[26] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[26]),
        .Q(mem_instr[26]),
        .R(1'b0));
  FDRE \mem_instr_reg[27] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\ex_instr_reg_n_0_[27] ),
        .Q(mem_instr[27]),
        .R(1'b0));
  FDRE \mem_instr_reg[28] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[28]),
        .Q(mem_instr[28]),
        .R(1'b0));
  FDRE \mem_instr_reg[29] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[29]),
        .Q(mem_instr[29]),
        .R(1'b0));
  FDRE \mem_instr_reg[2] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[2]),
        .Q(mem_instr[2]),
        .R(1'b0));
  FDRE \mem_instr_reg[30] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(\ex_instr_reg_n_0_[30] ),
        .Q(mem_instr[30]),
        .R(1'b0));
  FDRE \mem_instr_reg[31] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[31]),
        .Q(mem_instr[31]),
        .R(1'b0));
  FDRE \mem_instr_reg[3] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[3]),
        .Q(mem_instr[3]),
        .R(1'b0));
  FDRE \mem_instr_reg[4] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[4]),
        .Q(mem_instr[4]),
        .R(1'b0));
  FDRE \mem_instr_reg[5] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[5]),
        .Q(mem_instr[5]),
        .R(1'b0));
  FDRE \mem_instr_reg[6] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[6]),
        .Q(mem_instr[6]),
        .R(1'b0));
  FDRE \mem_instr_reg[7] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[7]),
        .Q(mem_instr[7]),
        .R(1'b0));
  FDRE \mem_instr_reg[8] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[8]),
        .Q(mem_instr[8]),
        .R(1'b0));
  FDRE \mem_instr_reg[9] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_instr[9]),
        .Q(mem_instr[9]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hF8)) 
    mem_is_msr_instr_i_1
       (.I0(\Using_FPGA.Native_2 ),
        .I1(wb_sel_spr_shr),
        .I2(ex_mfsmsr_i),
        .O(mem_is_msr_instr0));
  LUT6 #(
    .INIT(64'h0404040404040004)) 
    mem_is_msr_instr_i_2
       (.I0(ex_Take_Intr_or_Exc),
        .I1(ex_valid),
        .I2(ex_Interrupt_i),
        .I3(\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .I4(Dbg_Disable),
        .I5(dbg_stop_if_delay_i),
        .O(\Using_FPGA.Native_2 ));
  FDRE mem_is_msr_instr_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(mem_is_msr_instr0),
        .Q(mem_sel_msr),
        .R(reset_bool_for_rst));
  FDRE mem_is_multi_or_load_instr_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(mem_is_multi_or_load_instr0),
        .Q(mem_is_multi_or_load_instr),
        .R(reset_bool_for_rst));
  FDRE mem_jump_hit_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(mem_jump_hit0),
        .Q(mem_jump_hit),
        .R(reset_bool_for_rst));
  FDRE mem_jump_taken_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(mem_jump_taken0),
        .Q(mem_jump_taken),
        .R(reset_bool_for_rst));
  FDRE mem_load_store_access_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(mem_load_store_access0),
        .Q(mem_load_store_access),
        .R(reset_bool_for_rst));
  FDRE mem_read_imm_reg_1_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_read_imm_reg_1),
        .Q(mem_read_imm_reg_1),
        .R(reset_bool_for_rst));
  FDRE mem_read_imm_reg_reg
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(ex_read_imm_reg),
        .Q(mem_read_imm_reg),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h2)) 
    mem_valid_i_2
       (.I0(ex_valid),
        .I1(ex_Take_Intr_or_Exc),
        .O(mem_valid_i_2_n_0));
  FDRE mem_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mem_PipeRun_carry_and_n_3),
        .Q(mem_valid_instr),
        .R(1'b0));
  system_microblaze_0_0_carry_or_50 mem_wait_on_ready_N_carry_or
       (.lopt(lopt_12),
        .lopt_1(lopt_13),
        .mem_Write_DCache(mem_Write_DCache),
        .mem_databus_ready(mem_databus_ready),
        .mem_load_store_access(mem_load_store_access),
        .mem_valid_instr(mem_valid_instr),
        .mem_wait_on_ready_N(mem_wait_on_ready_N));
  LUT2 #(
    .INIT(4'hE)) 
    of_Take_Interrupt_hold_i_2
       (.I0(of_Take_Interrupt_hold),
        .I1(restore_wb_msr_to_ex),
        .O(of_Take_Interrupt));
  FDRE of_Take_Interrupt_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_MuxCy[10].OF_Piperun_Stage_n_8 ),
        .Q(of_Take_Interrupt_hold),
        .R(1'b0));
  FDRE of_read_imm_reg_ii_reg
       (.C(Clk),
        .CE(1'b1),
        .D(jump_logic_I1_n_8),
        .Q(of_read_imm_reg_ii),
        .R(1'b0));
  FDRE of_set_MSR_IE_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_MuxCy[3].OF_Piperun_Stage_n_8 ),
        .Q(of_set_MSR_IE_hold_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT3 #(
    .INIT(8'h02)) 
    sign_16_23_inferred_i_1
       (.I0(\EX_Op1_reg[0] [7]),
        .I1(\Using_FPGA.Native_7 [0]),
        .I2(\Using_FPGA.Native_7 [1]),
        .O(\Using_FPGA.Native_8 ));
  FDRE wb_PipeRun_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_WB_Jump_Hit_reg_0),
        .Q(wb_piperun),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT2 #(
    .INIT(4'h8)) 
    wb_exception_i_i_1
       (.I0(mem_valid_instr),
        .I1(mem_exception_from_ex),
        .O(mem_Exception_Taken));
  FDRE wb_exception_i_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_Exception_Taken),
        .Q(wb_gpr_write_i_reg_0),
        .R(reset_bool_for_rst));
  FDRE \wb_exception_kind_i_reg[27] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_exception_kind[27]),
        .Q(IFetch[7]),
        .R(reset_bool_for_rst));
  FDRE \wb_exception_kind_i_reg[28] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_exception_kind[28]),
        .Q(IFetch[6]),
        .R(reset_bool_for_rst));
  FDRE \wb_exception_kind_i_reg[29] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_exception_kind[29]),
        .Q(IFetch[5]),
        .R(reset_bool_for_rst));
  FDRE \wb_exception_kind_i_reg[30] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_exception_kind[30]),
        .Q(IFetch[4]),
        .R(reset_bool_for_rst));
  FDRE \wb_exception_kind_i_reg[31] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_exception_kind[31]),
        .Q(IFetch[3]),
        .R(reset_bool_for_rst));
  FDRE \wb_gpr_write_addr_reg[0] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_gpr_write_addr[0]),
        .Q(wb_new_esr_ess_rx[0]),
        .R(reset_bool_for_rst));
  FDRE \wb_gpr_write_addr_reg[1] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_gpr_write_addr[1]),
        .Q(wb_new_esr_ess_rx[1]),
        .R(reset_bool_for_rst));
  FDRE \wb_gpr_write_addr_reg[2] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_gpr_write_addr[2]),
        .Q(wb_new_esr_ess_rx[2]),
        .R(reset_bool_for_rst));
  FDRE \wb_gpr_write_addr_reg[3] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_gpr_write_addr[3]),
        .Q(wb_new_esr_ess_rx[3]),
        .R(reset_bool_for_rst));
  FDRE \wb_gpr_write_addr_reg[4] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_gpr_write_addr[4]),
        .Q(wb_new_esr_ess_rx[4]),
        .R(reset_bool_for_rst));
  FDRE wb_gpr_write_dbg_reg
       (.C(Clk),
        .CE(1'b1),
        .D(wb_gpr_write_dbg0),
        .Q(wb_gpr_wr_dbg),
        .R(1'b0));
  FDRE wb_gpr_write_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(wb_gpr_write_i0),
        .Q(wb_gpr_write_i),
        .R(1'b0));
  FDRE \wb_instr_reg[0] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[0]),
        .Q(IFetch[63]),
        .R(1'b0));
  FDRE \wb_instr_reg[10] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[10]),
        .Q(IFetch[53]),
        .R(1'b0));
  FDRE \wb_instr_reg[11] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[11]),
        .Q(IFetch[52]),
        .R(1'b0));
  FDRE \wb_instr_reg[12] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[12]),
        .Q(IFetch[51]),
        .R(1'b0));
  FDRE \wb_instr_reg[13] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[13]),
        .Q(IFetch[50]),
        .R(1'b0));
  FDRE \wb_instr_reg[14] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[14]),
        .Q(IFetch[49]),
        .R(1'b0));
  FDRE \wb_instr_reg[15] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[15]),
        .Q(IFetch[48]),
        .R(1'b0));
  FDRE \wb_instr_reg[16] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[16]),
        .Q(IFetch[47]),
        .R(1'b0));
  FDRE \wb_instr_reg[17] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[17]),
        .Q(IFetch[46]),
        .R(1'b0));
  FDRE \wb_instr_reg[18] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[18]),
        .Q(IFetch[45]),
        .R(1'b0));
  FDRE \wb_instr_reg[19] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[19]),
        .Q(IFetch[44]),
        .R(1'b0));
  FDRE \wb_instr_reg[1] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[1]),
        .Q(IFetch[62]),
        .R(1'b0));
  FDRE \wb_instr_reg[20] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[20]),
        .Q(IFetch[43]),
        .R(1'b0));
  FDRE \wb_instr_reg[21] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[21]),
        .Q(IFetch[42]),
        .R(1'b0));
  FDRE \wb_instr_reg[22] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[22]),
        .Q(IFetch[41]),
        .R(1'b0));
  FDRE \wb_instr_reg[23] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[23]),
        .Q(IFetch[40]),
        .R(1'b0));
  FDRE \wb_instr_reg[24] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[24]),
        .Q(IFetch[39]),
        .R(1'b0));
  FDRE \wb_instr_reg[25] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[25]),
        .Q(IFetch[38]),
        .R(1'b0));
  FDRE \wb_instr_reg[26] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[26]),
        .Q(IFetch[37]),
        .R(1'b0));
  FDRE \wb_instr_reg[27] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[27]),
        .Q(IFetch[36]),
        .R(1'b0));
  FDRE \wb_instr_reg[28] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[28]),
        .Q(IFetch[35]),
        .R(1'b0));
  FDRE \wb_instr_reg[29] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[29]),
        .Q(IFetch[34]),
        .R(1'b0));
  FDRE \wb_instr_reg[2] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[2]),
        .Q(IFetch[61]),
        .R(1'b0));
  FDRE \wb_instr_reg[30] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[30]),
        .Q(IFetch[33]),
        .R(1'b0));
  FDRE \wb_instr_reg[31] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[31]),
        .Q(IFetch[32]),
        .R(1'b0));
  FDRE \wb_instr_reg[3] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[3]),
        .Q(IFetch[60]),
        .R(1'b0));
  FDRE \wb_instr_reg[4] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[4]),
        .Q(IFetch[59]),
        .R(1'b0));
  FDRE \wb_instr_reg[5] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[5]),
        .Q(IFetch[58]),
        .R(1'b0));
  FDRE \wb_instr_reg[6] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[6]),
        .Q(IFetch[57]),
        .R(1'b0));
  FDRE \wb_instr_reg[7] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[7]),
        .Q(IFetch[56]),
        .R(1'b0));
  FDRE \wb_instr_reg[8] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[8]),
        .Q(IFetch[55]),
        .R(1'b0));
  FDRE \wb_instr_reg[9] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg_0),
        .D(mem_instr[9]),
        .Q(IFetch[54]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    wb_reset_reg
       (.C(Clk),
        .CE(1'b1),
        .D(reset_bool_for_rst),
        .Q(wb_reset),
        .R(1'b0));
  FDRE wb_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(mem_PipeRun_carry_and_n_4),
        .Q(wb_valid_reg_n_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module system_microblaze_0_0_MB_AND2B1L
   (D,
    mem_valid_reg,
    SRI);
  output [0:0]D;
  input mem_valid_reg;
  input SRI;

  wire [0:0]D;
  wire SRI;
  wire mem_valid_reg;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(mem_valid_reg),
        .O(D),
        .SRI(SRI));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE
   (\LOCKSTEP_Out_reg[3708] ,
    mem_valid_reg,
    wb_PC_II_31,
    Clk);
  output [0:0]\LOCKSTEP_Out_reg[3708] ;
  input mem_valid_reg;
  input wb_PC_II_31;
  input Clk;

  wire Clk;
  wire [0:0]\LOCKSTEP_Out_reg[3708] ;
  wire mem_valid_reg;
  wire wb_PC_II_31;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_31),
        .Q(\LOCKSTEP_Out_reg[3708] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_272
   (\LOCKSTEP_Out_reg[3718] ,
    mem_valid_reg,
    wb_PC_II_21,
    Clk);
  output \LOCKSTEP_Out_reg[3718] ;
  input mem_valid_reg;
  input wb_PC_II_21;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3718] ;
  wire mem_valid_reg;
  wire wb_PC_II_21;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_21),
        .Q(\LOCKSTEP_Out_reg[3718] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_274
   (\LOCKSTEP_Out_reg[3719] ,
    mem_valid_reg,
    wb_PC_II_20,
    Clk);
  output \LOCKSTEP_Out_reg[3719] ;
  input mem_valid_reg;
  input wb_PC_II_20;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3719] ;
  wire mem_valid_reg;
  wire wb_PC_II_20;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_20),
        .Q(\LOCKSTEP_Out_reg[3719] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_276
   (\LOCKSTEP_Out_reg[3720] ,
    mem_valid_reg,
    wb_PC_II_19,
    Clk);
  output \LOCKSTEP_Out_reg[3720] ;
  input mem_valid_reg;
  input wb_PC_II_19;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3720] ;
  wire mem_valid_reg;
  wire wb_PC_II_19;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_19),
        .Q(\LOCKSTEP_Out_reg[3720] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_278
   (\LOCKSTEP_Out_reg[3721] ,
    mem_valid_reg,
    wb_PC_II_18,
    Clk);
  output \LOCKSTEP_Out_reg[3721] ;
  input mem_valid_reg;
  input wb_PC_II_18;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3721] ;
  wire mem_valid_reg;
  wire wb_PC_II_18;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_18),
        .Q(\LOCKSTEP_Out_reg[3721] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_280
   (\LOCKSTEP_Out_reg[3722] ,
    mem_valid_reg,
    wb_PC_II_17,
    Clk);
  output \LOCKSTEP_Out_reg[3722] ;
  input mem_valid_reg;
  input wb_PC_II_17;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3722] ;
  wire mem_valid_reg;
  wire wb_PC_II_17;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_17),
        .Q(\LOCKSTEP_Out_reg[3722] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_282
   (\LOCKSTEP_Out_reg[3723] ,
    mem_valid_reg,
    wb_PC_II_16,
    Clk);
  output \LOCKSTEP_Out_reg[3723] ;
  input mem_valid_reg;
  input wb_PC_II_16;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3723] ;
  wire mem_valid_reg;
  wire wb_PC_II_16;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_16),
        .Q(\LOCKSTEP_Out_reg[3723] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_284
   (\LOCKSTEP_Out_reg[3724] ,
    \data_rd_reg_reg[16] ,
    mem_valid_reg,
    wb_PC_II_15,
    Clk,
    read_register_MSR_1_reg,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    WB_Byte_Access_reg);
  output \LOCKSTEP_Out_reg[3724] ;
  output \data_rd_reg_reg[16] ;
  input mem_valid_reg;
  input wb_PC_II_15;
  input Clk;
  input read_register_MSR_1_reg;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input [0:0]WB_Byte_Access_reg;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3724] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]WB_Byte_Access_reg;
  wire \data_rd_reg_reg[16] ;
  wire mem_valid_reg;
  wire read_register_MSR_1_reg;
  wire wb_PC_II_15;
  wire wb_gpr_wr_dbg;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_15),
        .Q(\LOCKSTEP_Out_reg[3724] ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hF2220222)) 
    \data_rd_reg[16]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3724] ),
        .I1(read_register_MSR_1_reg),
        .I2(wb_gpr_wr_dbg),
        .I3(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I4(WB_Byte_Access_reg),
        .O(\data_rd_reg_reg[16] ));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_286
   (\LOCKSTEP_Out_reg[3725] ,
    mem_valid_reg,
    wb_PC_II_14,
    Clk);
  output \LOCKSTEP_Out_reg[3725] ;
  input mem_valid_reg;
  input wb_PC_II_14;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3725] ;
  wire mem_valid_reg;
  wire wb_PC_II_14;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_14),
        .Q(\LOCKSTEP_Out_reg[3725] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_288
   (\LOCKSTEP_Out_reg[3726] ,
    mem_valid_reg,
    wb_PC_II_13,
    Clk);
  output \LOCKSTEP_Out_reg[3726] ;
  input mem_valid_reg;
  input wb_PC_II_13;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3726] ;
  wire mem_valid_reg;
  wire wb_PC_II_13;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_13),
        .Q(\LOCKSTEP_Out_reg[3726] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_290
   (\LOCKSTEP_Out_reg[3727] ,
    mem_valid_reg,
    wb_PC_II_12,
    Clk);
  output \LOCKSTEP_Out_reg[3727] ;
  input mem_valid_reg;
  input wb_PC_II_12;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3727] ;
  wire mem_valid_reg;
  wire wb_PC_II_12;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_12),
        .Q(\LOCKSTEP_Out_reg[3727] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_292
   (\LOCKSTEP_Out_reg[3709] ,
    mem_valid_reg,
    wb_PC_II_30,
    Clk);
  output \LOCKSTEP_Out_reg[3709] ;
  input mem_valid_reg;
  input wb_PC_II_30;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3709] ;
  wire mem_valid_reg;
  wire wb_PC_II_30;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_30),
        .Q(\LOCKSTEP_Out_reg[3709] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_294
   (\LOCKSTEP_Out_reg[3728] ,
    mem_valid_reg,
    wb_PC_II_11,
    Clk);
  output \LOCKSTEP_Out_reg[3728] ;
  input mem_valid_reg;
  input wb_PC_II_11;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3728] ;
  wire mem_valid_reg;
  wire wb_PC_II_11;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_11),
        .Q(\LOCKSTEP_Out_reg[3728] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_296
   (\LOCKSTEP_Out_reg[3729] ,
    mem_valid_reg,
    wb_PC_II_10,
    Clk);
  output \LOCKSTEP_Out_reg[3729] ;
  input mem_valid_reg;
  input wb_PC_II_10;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3729] ;
  wire mem_valid_reg;
  wire wb_PC_II_10;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_10),
        .Q(\LOCKSTEP_Out_reg[3729] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_298
   (\LOCKSTEP_Out_reg[3730] ,
    mem_valid_reg,
    wb_PC_II_9,
    Clk);
  output \LOCKSTEP_Out_reg[3730] ;
  input mem_valid_reg;
  input wb_PC_II_9;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3730] ;
  wire mem_valid_reg;
  wire wb_PC_II_9;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_9),
        .Q(\LOCKSTEP_Out_reg[3730] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_300
   (\LOCKSTEP_Out_reg[3731] ,
    mem_valid_reg,
    wb_PC_II_8,
    Clk);
  output \LOCKSTEP_Out_reg[3731] ;
  input mem_valid_reg;
  input wb_PC_II_8;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3731] ;
  wire mem_valid_reg;
  wire wb_PC_II_8;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_8),
        .Q(\LOCKSTEP_Out_reg[3731] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_302
   (\LOCKSTEP_Out_reg[3732] ,
    mem_valid_reg,
    wb_PC_II_7,
    Clk);
  output \LOCKSTEP_Out_reg[3732] ;
  input mem_valid_reg;
  input wb_PC_II_7;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3732] ;
  wire mem_valid_reg;
  wire wb_PC_II_7;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_7),
        .Q(\LOCKSTEP_Out_reg[3732] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_304
   (\LOCKSTEP_Out_reg[3733] ,
    mem_valid_reg,
    wb_PC_II_6,
    Clk);
  output \LOCKSTEP_Out_reg[3733] ;
  input mem_valid_reg;
  input wb_PC_II_6;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3733] ;
  wire mem_valid_reg;
  wire wb_PC_II_6;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_6),
        .Q(\LOCKSTEP_Out_reg[3733] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_306
   (\LOCKSTEP_Out_reg[3734] ,
    mem_valid_reg,
    wb_PC_II_5,
    Clk);
  output \LOCKSTEP_Out_reg[3734] ;
  input mem_valid_reg;
  input wb_PC_II_5;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3734] ;
  wire mem_valid_reg;
  wire wb_PC_II_5;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_5),
        .Q(\LOCKSTEP_Out_reg[3734] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_308
   (\LOCKSTEP_Out_reg[3735] ,
    mem_valid_reg,
    wb_PC_II_4,
    Clk);
  output \LOCKSTEP_Out_reg[3735] ;
  input mem_valid_reg;
  input wb_PC_II_4;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3735] ;
  wire mem_valid_reg;
  wire wb_PC_II_4;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_4),
        .Q(\LOCKSTEP_Out_reg[3735] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_310
   (\LOCKSTEP_Out_reg[3736] ,
    mem_valid_reg,
    wb_PC_II_3,
    Clk);
  output \LOCKSTEP_Out_reg[3736] ;
  input mem_valid_reg;
  input wb_PC_II_3;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3736] ;
  wire mem_valid_reg;
  wire wb_PC_II_3;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_3),
        .Q(\LOCKSTEP_Out_reg[3736] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_312
   (\LOCKSTEP_Out_reg[3737] ,
    mem_valid_reg,
    wb_PC_II_2,
    Clk);
  output \LOCKSTEP_Out_reg[3737] ;
  input mem_valid_reg;
  input wb_PC_II_2;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3737] ;
  wire mem_valid_reg;
  wire wb_PC_II_2;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_2),
        .Q(\LOCKSTEP_Out_reg[3737] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_314
   (\LOCKSTEP_Out_reg[3710] ,
    mem_valid_reg,
    wb_PC_II_29,
    Clk);
  output \LOCKSTEP_Out_reg[3710] ;
  input mem_valid_reg;
  input wb_PC_II_29;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3710] ;
  wire mem_valid_reg;
  wire wb_PC_II_29;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_29),
        .Q(\LOCKSTEP_Out_reg[3710] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_316
   (\LOCKSTEP_Out_reg[3738] ,
    mem_valid_reg,
    wb_PC_II_1,
    Clk);
  output \LOCKSTEP_Out_reg[3738] ;
  input mem_valid_reg;
  input wb_PC_II_1;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3738] ;
  wire mem_valid_reg;
  wire wb_PC_II_1;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_1),
        .Q(\LOCKSTEP_Out_reg[3738] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_318
   (DI,
    mem_valid_reg,
    wb_PC_II_0,
    Clk);
  output DI;
  input mem_valid_reg;
  input wb_PC_II_0;
  input Clk;

  wire Clk;
  wire DI;
  wire mem_valid_reg;
  wire wb_PC_II_0;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_0),
        .Q(DI),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_320
   (\LOCKSTEP_Out_reg[3711] ,
    mem_valid_reg,
    wb_PC_II_28,
    Clk);
  output \LOCKSTEP_Out_reg[3711] ;
  input mem_valid_reg;
  input wb_PC_II_28;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3711] ;
  wire mem_valid_reg;
  wire wb_PC_II_28;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_28),
        .Q(\LOCKSTEP_Out_reg[3711] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_322
   (\LOCKSTEP_Out_reg[3712] ,
    mem_valid_reg,
    wb_PC_II_27,
    Clk);
  output \LOCKSTEP_Out_reg[3712] ;
  input mem_valid_reg;
  input wb_PC_II_27;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3712] ;
  wire mem_valid_reg;
  wire wb_PC_II_27;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_27),
        .Q(\LOCKSTEP_Out_reg[3712] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_324
   (\LOCKSTEP_Out_reg[3713] ,
    mem_valid_reg,
    wb_PC_II_26,
    Clk);
  output \LOCKSTEP_Out_reg[3713] ;
  input mem_valid_reg;
  input wb_PC_II_26;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3713] ;
  wire mem_valid_reg;
  wire wb_PC_II_26;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_26),
        .Q(\LOCKSTEP_Out_reg[3713] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_326
   (\LOCKSTEP_Out_reg[3714] ,
    mem_valid_reg,
    wb_PC_II_25,
    Clk);
  output \LOCKSTEP_Out_reg[3714] ;
  input mem_valid_reg;
  input wb_PC_II_25;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3714] ;
  wire mem_valid_reg;
  wire wb_PC_II_25;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_25),
        .Q(\LOCKSTEP_Out_reg[3714] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_328
   (\LOCKSTEP_Out_reg[3715] ,
    mem_valid_reg,
    wb_PC_II_24,
    Clk);
  output \LOCKSTEP_Out_reg[3715] ;
  input mem_valid_reg;
  input wb_PC_II_24;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3715] ;
  wire mem_valid_reg;
  wire wb_PC_II_24;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_24),
        .Q(\LOCKSTEP_Out_reg[3715] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_330
   (\LOCKSTEP_Out_reg[3716] ,
    mem_valid_reg,
    wb_PC_II_23,
    Clk);
  output \LOCKSTEP_Out_reg[3716] ;
  input mem_valid_reg;
  input wb_PC_II_23;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3716] ;
  wire mem_valid_reg;
  wire wb_PC_II_23;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_23),
        .Q(\LOCKSTEP_Out_reg[3716] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDE" *) 
module system_microblaze_0_0_MB_FDE_332
   (\LOCKSTEP_Out_reg[3717] ,
    mem_valid_reg,
    wb_PC_II_22,
    Clk);
  output \LOCKSTEP_Out_reg[3717] ;
  input mem_valid_reg;
  input wb_PC_II_22;
  input Clk;

  wire Clk;
  wire \LOCKSTEP_Out_reg[3717] ;
  wire mem_valid_reg;
  wire wb_PC_II_22;

  (* XILINX_LEGACY_PRIM = "FDE" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(mem_valid_reg),
        .D(wb_PC_II_22),
        .Q(\LOCKSTEP_Out_reg[3717] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR
   (p_82_in,
    \Using_FPGA.Native_0 ,
    out,
    Clk,
    ex_Take_Intr_or_Exc_reg,
    Q,
    \ex_which_branch_reg[9] ,
    ex_branch_with_delayslot_reg,
    \Using_FPGA.Native_1 );
  output p_82_in;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input Clk;
  input ex_Take_Intr_or_Exc_reg;
  input [5:0]Q;
  input [0:0]\ex_which_branch_reg[9] ;
  input ex_branch_with_delayslot_reg;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire [5:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__185_n_0 ;
  wire \Using_FPGA.Native_i_3__1_n_0 ;
  wire ex_Take_Intr_or_Exc_reg;
  wire ex_branch_with_delayslot_reg;
  wire [0:0]\ex_which_branch_reg[9] ;
  wire of_clear_MSR_BIP_hold_s;
  wire [0:0]out;
  wire p_82_in;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__185_n_0 ),
        .Q(of_clear_MSR_BIP_hold_s),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \Using_FPGA.Native_i_1__184 
       (.I0(\ex_which_branch_reg[9] ),
        .I1(p_82_in),
        .I2(of_clear_MSR_BIP_hold_s),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT5 #(
    .INIT(32'h0000F8F0)) 
    \Using_FPGA.Native_i_1__185 
       (.I0(\ex_which_branch_reg[9] ),
        .I1(p_82_in),
        .I2(of_clear_MSR_BIP_hold_s),
        .I3(ex_branch_with_delayslot_reg),
        .I4(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_1__185_n_0 ));
  LUT5 #(
    .INIT(32'h40000000)) 
    \Using_FPGA.Native_i_2__34 
       (.I0(\Using_FPGA.Native_i_3__1_n_0 ),
        .I1(ex_Take_Intr_or_Exc_reg),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(p_82_in));
  LUT3 #(
    .INIT(8'hFB)) 
    \Using_FPGA.Native_i_3__1 
       (.I0(Q[4]),
        .I1(Q[5]),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_i_3__1_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE
   (D,
    out,
    ex_branch_with_delayslot_reg,
    Clk,
    mem_exception_from_ex);
  output [0:0]D;
  input [0:0]out;
  input ex_branch_with_delayslot_reg;
  input Clk;
  input mem_exception_from_ex;

  wire Clk;
  wire [0:0]D;
  wire Q3_out;
  wire ex_branch_with_delayslot_reg;
  wire mem_exception_from_ex;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(1'b0),
        .Q(Q3_out),
        .R(out));
  LUT2 #(
    .INIT(4'h8)) 
    \wb_exception_kind_i[27]_i_1 
       (.I0(mem_exception_from_ex),
        .I1(Q3_out),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_34
   (D,
    out,
    ex_branch_with_delayslot_reg,
    Clk,
    ex_Interrupt_i,
    ex_valid,
    dbg_stop_if_delay_i,
    Dbg_Disable,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ,
    mem_exception_from_ex);
  output [0:0]D;
  input [0:0]out;
  input ex_branch_with_delayslot_reg;
  input Clk;
  input ex_Interrupt_i;
  input ex_valid;
  input dbg_stop_if_delay_i;
  input Dbg_Disable;
  input \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  input mem_exception_from_ex;

  wire Clk;
  wire [0:0]D;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire Q2_out;
  wire \Using_FPGA.Native_i_1__73_n_0 ;
  wire dbg_stop_if_delay_i;
  wire ex_Interrupt_i;
  wire ex_branch_with_delayslot_reg;
  wire ex_valid;
  wire mem_exception_from_ex;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\Using_FPGA.Native_i_1__73_n_0 ),
        .Q(Q2_out),
        .R(out));
  LUT5 #(
    .INIT(32'h888F8888)) 
    \Using_FPGA.Native_i_1__73 
       (.I0(ex_Interrupt_i),
        .I1(ex_valid),
        .I2(dbg_stop_if_delay_i),
        .I3(Dbg_Disable),
        .I4(\Performace_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .O(\Using_FPGA.Native_i_1__73_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \wb_exception_kind_i[28]_i_1 
       (.I0(mem_exception_from_ex),
        .I1(Q2_out),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_35
   (D,
    out,
    ex_branch_with_delayslot_reg,
    Clk,
    mem_exception_from_ex);
  output [0:0]D;
  input [0:0]out;
  input ex_branch_with_delayslot_reg;
  input Clk;
  input mem_exception_from_ex;

  wire Clk;
  wire [0:0]D;
  wire Q1_out;
  wire ex_branch_with_delayslot_reg;
  wire mem_exception_from_ex;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(1'b0),
        .Q(Q1_out),
        .R(out));
  LUT2 #(
    .INIT(4'h8)) 
    \wb_exception_kind_i[29]_i_1 
       (.I0(mem_exception_from_ex),
        .I1(Q1_out),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_36
   (D,
    out,
    ex_branch_with_delayslot_reg,
    Clk,
    mem_exception_from_ex,
    ex_Interrupt_i,
    ex_valid,
    dbg_stop_if_delay_i,
    Dbg_Disable,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg );
  output [0:0]D;
  input [0:0]out;
  input ex_branch_with_delayslot_reg;
  input Clk;
  input mem_exception_from_ex;
  input ex_Interrupt_i;
  input ex_valid;
  input dbg_stop_if_delay_i;
  input Dbg_Disable;
  input \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;

  wire Clk;
  wire [0:0]D;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire Q0_out;
  wire \Using_FPGA.Native_i_1__175_n_0 ;
  wire dbg_stop_if_delay_i;
  wire ex_Interrupt_i;
  wire ex_branch_with_delayslot_reg;
  wire ex_valid;
  wire mem_exception_from_ex;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\Using_FPGA.Native_i_1__175_n_0 ),
        .Q(Q0_out),
        .R(out));
  LUT5 #(
    .INIT(32'h88808888)) 
    \Using_FPGA.Native_i_1__175 
       (.I0(ex_Interrupt_i),
        .I1(ex_valid),
        .I2(dbg_stop_if_delay_i),
        .I3(Dbg_Disable),
        .I4(\Performace_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .O(\Using_FPGA.Native_i_1__175_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \wb_exception_kind_i[30]_i_1 
       (.I0(mem_exception_from_ex),
        .I1(Q0_out),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_37
   (D,
    out,
    ex_branch_with_delayslot_reg,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ,
    Clk,
    mem_exception_from_ex);
  output [0:0]D;
  input [0:0]out;
  input ex_branch_with_delayslot_reg;
  input \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  input Clk;
  input mem_exception_from_ex;

  wire Clk;
  wire [0:0]D;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Using_FPGA.Native_n_0 ;
  wire ex_branch_with_delayslot_reg;
  wire mem_exception_from_ex;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(\Performace_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .Q(\Using_FPGA.Native_n_0 ),
        .R(out));
  LUT2 #(
    .INIT(4'h8)) 
    \wb_exception_kind_i[31]_i_1 
       (.I0(mem_exception_from_ex),
        .I1(\Using_FPGA.Native_n_0 ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_38
   (mem_byte_access_reg,
    out,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output mem_byte_access_reg;
  input [0:0]out;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire mem_byte_access_reg;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Using_FPGA.Native_1 ),
        .Q(mem_byte_access_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_387
   (\WB_MEM_Result_reg[0] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[0] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[0] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[0] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_388
   (\WB_MEM_Result_reg[10] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[10] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[10] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[10] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_389
   (\WB_MEM_Result_reg[11] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[11] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[11] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[11] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_39
   (mem_doublet_access_reg,
    \Byte_Enable[0] ,
    out,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    \EX_Op1_reg[31] ,
    \EX_Op2_reg[31] ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output mem_doublet_access_reg;
  output [3:0]\Byte_Enable[0] ;
  input [0:0]out;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input [0:0]\EX_Op1_reg[31] ;
  input [0:0]\EX_Op2_reg[31] ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input [0:0]\Using_FPGA.Native_4 ;

  wire [3:0]\Byte_Enable[0] ;
  wire Clk;
  wire [0:0]\EX_Op1_reg[31] ;
  wire [0:0]\EX_Op2_reg[31] ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]\Using_FPGA.Native_4 ;
  wire mem_doublet_access_reg;
  wire [0:0]out;

  LUT6 #(
    .INIT(64'h00005555C33CFFFF)) 
    \Byte_Enable[0]_INST_0 
       (.I0(mem_doublet_access_reg),
        .I1(\EX_Op1_reg[31] ),
        .I2(\EX_Op2_reg[31] ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(\Byte_Enable[0] [3]));
  LUT6 #(
    .INIT(64'h111111113FF3F33F)) 
    \Byte_Enable[1]_INST_0 
       (.I0(mem_doublet_access_reg),
        .I1(\Using_FPGA.Native_3 ),
        .I2(\EX_Op1_reg[31] ),
        .I3(\EX_Op2_reg[31] ),
        .I4(\Using_FPGA.Native_2 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(\Byte_Enable[0] [2]));
  LUT6 #(
    .INIT(64'hC33CFFFF00005555)) 
    \Byte_Enable[2]_INST_0 
       (.I0(mem_doublet_access_reg),
        .I1(\EX_Op1_reg[31] ),
        .I2(\EX_Op2_reg[31] ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(\Byte_Enable[0] [1]));
  LUT6 #(
    .INIT(64'h3CC3FFFF00005555)) 
    \Byte_Enable[3]_INST_0 
       (.I0(mem_doublet_access_reg),
        .I1(\EX_Op1_reg[31] ),
        .I2(\EX_Op2_reg[31] ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(\Byte_Enable[0] [0]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Using_FPGA.Native_1 ),
        .Q(mem_doublet_access_reg),
        .R(out));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_390
   (\WB_MEM_Result_reg[12] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[12] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[12] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[12] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_391
   (\WB_MEM_Result_reg[13] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[13] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[13] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[13] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_392
   (\WB_MEM_Result_reg[14] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[14] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[14] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[14] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_393
   (\WB_MEM_Result_reg[15] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[15] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[15] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[15] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_394
   (\WB_MEM_Result_reg[16] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[16] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[16] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[16] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_395
   (\WB_MEM_Result_reg[17] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[17] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[17] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[17] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_396
   (\WB_MEM_Result_reg[18] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[18] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[18] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[18] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_397
   (\WB_MEM_Result_reg[19] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[19] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[19] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[19] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_398
   (\WB_MEM_Result_reg[1] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[1] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[1] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[1] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_399
   (\WB_MEM_Result_reg[20] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[20] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[20] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[20] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_40
   (Read_Strobe,
    mem_is_multi_or_load_instr0,
    MEM_Sel_MEM_Res_I_reg,
    out,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    ex_Interrupt_i,
    ex_Take_Intr_or_Exc,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ,
    ex_valid,
    ex_is_multi_instr2,
    ex_load_store_instr_s,
    ex_valid_reg,
    ex_reservation,
    ex_is_swx_instr_s,
    ex_Sel_SPR_PVR,
    ex_Sel_SPR_EAR,
    ex_Sel_SPR_EDR_reg,
    ex_Sel_SPR_SLR,
    ex_div_unsigned,
    ex_Sel_SPR_SHR);
  output [1:0]Read_Strobe;
  output mem_is_multi_or_load_instr0;
  output MEM_Sel_MEM_Res_I_reg;
  input [0:0]out;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input ex_Interrupt_i;
  input ex_Take_Intr_or_Exc;
  input \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  input ex_valid;
  input ex_is_multi_instr2;
  input ex_load_store_instr_s;
  input ex_valid_reg;
  input ex_reservation;
  input ex_is_swx_instr_s;
  input ex_Sel_SPR_PVR;
  input ex_Sel_SPR_EAR;
  input ex_Sel_SPR_EDR_reg;
  input ex_Sel_SPR_SLR;
  input ex_div_unsigned;
  input ex_Sel_SPR_SHR;

  wire Clk;
  wire MEM_Sel_MEM_Res_I_i_3_n_0;
  wire MEM_Sel_MEM_Res_I_reg;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire [1:0]Read_Strobe;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_Interrupt_i;
  wire ex_Sel_SPR_EAR;
  wire ex_Sel_SPR_EDR_reg;
  wire ex_Sel_SPR_PVR;
  wire ex_Sel_SPR_SHR;
  wire ex_Sel_SPR_SLR;
  wire ex_Take_Intr_or_Exc;
  wire ex_div_unsigned;
  wire ex_is_load_instr_s;
  wire ex_is_multi_instr2;
  wire ex_is_swx_instr_s;
  wire ex_load_store_instr_s;
  wire ex_reservation;
  wire ex_valid;
  wire ex_valid_reg;
  wire mem_is_multi_or_load_instr0;
  wire [0:0]out;

  LUT4 #(
    .INIT(16'h0001)) 
    MEM_Sel_MEM_Res_I_i_1
       (.I0(ex_Sel_SPR_PVR),
        .I1(ex_Sel_SPR_EAR),
        .I2(ex_Sel_SPR_EDR_reg),
        .I3(MEM_Sel_MEM_Res_I_i_3_n_0),
        .O(MEM_Sel_MEM_Res_I_reg));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    MEM_Sel_MEM_Res_I_i_3
       (.I0(ex_is_load_instr_s),
        .I1(ex_Sel_SPR_SLR),
        .I2(ex_div_unsigned),
        .I3(ex_Sel_SPR_SHR),
        .O(MEM_Sel_MEM_Res_I_i_3_n_0));
  LUT5 #(
    .INIT(32'h01000000)) 
    Read_Strobe_INST_0
       (.I0(ex_Interrupt_i),
        .I1(ex_Take_Intr_or_Exc),
        .I2(\Performace_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .I3(ex_valid),
        .I4(ex_is_load_instr_s),
        .O(Read_Strobe[1]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Using_FPGA.Native_1 ),
        .Q(ex_is_load_instr_s),
        .R(out));
  LUT5 #(
    .INIT(32'h40004040)) 
    Write_Strobe_INST_0
       (.I0(ex_is_load_instr_s),
        .I1(ex_load_store_instr_s),
        .I2(ex_valid_reg),
        .I3(ex_reservation),
        .I4(ex_is_swx_instr_s),
        .O(Read_Strobe[0]));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT2 #(
    .INIT(4'hE)) 
    mem_is_multi_or_load_instr_i_1
       (.I0(ex_is_multi_instr2),
        .I1(ex_is_load_instr_s),
        .O(mem_is_multi_or_load_instr0));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_400
   (\WB_MEM_Result_reg[21] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[21] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[21] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[21] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_401
   (\WB_MEM_Result_reg[22] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[22] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[22] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[22] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_402
   (\WB_MEM_Result_reg[23] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[23] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[23] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[23] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_403
   (\WB_MEM_Result_reg[24] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[24] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[24] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[24] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_404
   (\WB_MEM_Result_reg[25] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[25] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[25] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[25] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_405
   (\WB_MEM_Result_reg[26] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[26] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[26] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[26] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_406
   (\WB_MEM_Result_reg[27] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[27] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[27] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[27] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_407
   (\WB_MEM_Result_reg[28] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[28] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[28] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[28] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_408
   (mem_ex_result,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]mem_ex_result;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire ex_branch_with_delayslot_reg;
  wire [0:0]mem_ex_result;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(mem_ex_result),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_409
   (\WB_MEM_Result_reg[2] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[2] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[2] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[2] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_41
   (ex_is_lwx_instr_s,
    \Using_LWX_SWX_instr.ex_reservation_reg ,
    out,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    ex_load_store_instr_s,
    ex_valid_reg,
    mem_exception_from_ex,
    mem_valid_instr,
    wb_exception_i_reg,
    ex_reservation,
    \Using_FPGA.Native_2 ,
    ex_MSR_Set_SW_BIP,
    \wb_exception_kind_i_reg[27] );
  output ex_is_lwx_instr_s;
  output \Using_LWX_SWX_instr.ex_reservation_reg ;
  input [0:0]out;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input ex_load_store_instr_s;
  input ex_valid_reg;
  input mem_exception_from_ex;
  input mem_valid_instr;
  input wb_exception_i_reg;
  input ex_reservation;
  input \Using_FPGA.Native_2 ;
  input ex_MSR_Set_SW_BIP;
  input \wb_exception_kind_i_reg[27] ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_LWX_SWX_instr.ex_reservation_reg ;
  wire ex_MSR_Set_SW_BIP;
  wire ex_is_lwx_instr_s;
  wire ex_load_store_instr_s;
  wire ex_reservation;
  wire ex_valid_reg;
  wire mem_exception_from_ex;
  wire mem_valid_instr;
  wire [0:0]out;
  wire p_40_out;
  wire wb_exception_i_reg;
  wire \wb_exception_kind_i_reg[27] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Using_FPGA.Native_1 ),
        .Q(ex_is_lwx_instr_s),
        .R(out));
  LUT6 #(
    .INIT(64'h000E0000000E000E)) 
    \Using_LWX_SWX_instr.ex_reservation_i_1 
       (.I0(ex_reservation),
        .I1(p_40_out),
        .I2(\Using_FPGA.Native_2 ),
        .I3(ex_MSR_Set_SW_BIP),
        .I4(\wb_exception_kind_i_reg[27] ),
        .I5(wb_exception_i_reg),
        .O(\Using_LWX_SWX_instr.ex_reservation_reg ));
  LUT6 #(
    .INIT(64'h0000000000808080)) 
    \Using_LWX_SWX_instr.ex_reservation_i_2 
       (.I0(ex_is_lwx_instr_s),
        .I1(ex_load_store_instr_s),
        .I2(ex_valid_reg),
        .I3(mem_exception_from_ex),
        .I4(mem_valid_instr),
        .I5(wb_exception_i_reg),
        .O(p_40_out));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_410
   (mem_ex_result,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]mem_ex_result;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire ex_branch_with_delayslot_reg;
  wire [0:0]mem_ex_result;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(mem_ex_result),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_411
   (\WB_MEM_Result_reg[31] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[31] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[31] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[31] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_412
   (\WB_MEM_Result_reg[3] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[3] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[3] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[3] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_413
   (\WB_MEM_Result_reg[4] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[4] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[4] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[4] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_414
   (\WB_MEM_Result_reg[5] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[5] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[5] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[5] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_415
   (\WB_MEM_Result_reg[6] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[6] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[6] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[6] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_416
   (\WB_MEM_Result_reg[7] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[7] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[7] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[7] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_417
   (\WB_MEM_Result_reg[8] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[8] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[8] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[8] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_418
   (\WB_MEM_Result_reg[9] ,
    R,
    ex_branch_with_delayslot_reg,
    EX_Fwd,
    Clk);
  output [0:0]\WB_MEM_Result_reg[9] ;
  input R;
  input ex_branch_with_delayslot_reg;
  input [0:0]EX_Fwd;
  input Clk;

  wire Clk;
  wire [0:0]EX_Fwd;
  wire R;
  wire [0:0]\WB_MEM_Result_reg[9] ;
  wire ex_branch_with_delayslot_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(ex_branch_with_delayslot_reg),
        .D(EX_Fwd),
        .Q(\WB_MEM_Result_reg[9] ),
        .R(R));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_42
   (ex_is_swx_instr_s,
    \Using_FPGA.Native_0 ,
    SRI,
    MEM_DataBus_Access_reg,
    out,
    \Using_FPGA.Native_1 ,
    D122_out,
    Clk,
    \Using_FPGA.Native_2 ,
    ex_branch_with_delayslot_reg,
    ex_MSR,
    \wb_exception_kind_i_reg[27] ,
    ex_reservation,
    ex_load_alu_carry_reg,
    ex_MSR_Load_LWX_SWX_C,
    p_20_in,
    \EX_Op1_reg[29] ,
    p_126_in,
    MEM_DataBus_Access_reg_0,
    E);
  output ex_is_swx_instr_s;
  output \Using_FPGA.Native_0 ;
  output SRI;
  output MEM_DataBus_Access_reg;
  input [0:0]out;
  input \Using_FPGA.Native_1 ;
  input D122_out;
  input Clk;
  input [0:0]\Using_FPGA.Native_2 ;
  input ex_branch_with_delayslot_reg;
  input [0:0]ex_MSR;
  input \wb_exception_kind_i_reg[27] ;
  input ex_reservation;
  input ex_load_alu_carry_reg;
  input ex_MSR_Load_LWX_SWX_C;
  input p_20_in;
  input \EX_Op1_reg[29] ;
  input p_126_in;
  input MEM_DataBus_Access_reg_0;
  input [0:0]E;

  wire Clk;
  wire D122_out;
  wire [0:0]E;
  wire \EX_Op1_reg[29] ;
  wire MEM_DataBus_Access_i_2_n_0;
  wire MEM_DataBus_Access_reg;
  wire MEM_DataBus_Access_reg_0;
  wire SRI;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_2__32_n_0 ;
  wire [0:0]ex_MSR;
  wire ex_MSR_Load_LWX_SWX_C;
  wire ex_branch_with_delayslot_reg;
  wire ex_is_swx_instr_s;
  wire ex_load_alu_carry_reg;
  wire ex_reservation;
  wire [0:0]out;
  wire p_126_in;
  wire p_20_in;
  wire \wb_exception_kind_i_reg[27] ;

  LUT6 #(
    .INIT(64'h00000000C0C000AA)) 
    MEM_DataBus_Access_i_1
       (.I0(MEM_DataBus_Access_reg_0),
        .I1(MEM_DataBus_Access_i_2_n_0),
        .I2(p_126_in),
        .I3(E),
        .I4(ex_branch_with_delayslot_reg),
        .I5(out),
        .O(MEM_DataBus_Access_reg));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT2 #(
    .INIT(4'hB)) 
    MEM_DataBus_Access_i_2
       (.I0(ex_reservation),
        .I1(ex_is_swx_instr_s),
        .O(MEM_DataBus_Access_i_2_n_0));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_1 ),
        .D(D122_out),
        .Q(ex_is_swx_instr_s),
        .R(out));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__34 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_FPGA.Native_i_2__32_n_0 ),
        .I2(ex_branch_with_delayslot_reg),
        .I3(ex_MSR),
        .I4(\wb_exception_kind_i_reg[27] ),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT3 #(
    .INIT(8'h4F)) 
    \Using_FPGA.Native_i_1__35 
       (.I0(ex_reservation),
        .I1(ex_is_swx_instr_s),
        .I2(p_126_in),
        .O(SRI));
  LUT6 #(
    .INIT(64'hF2FFF0F0F2F0F0F0)) 
    \Using_FPGA.Native_i_2__32 
       (.I0(ex_is_swx_instr_s),
        .I1(ex_reservation),
        .I2(ex_load_alu_carry_reg),
        .I3(ex_MSR_Load_LWX_SWX_C),
        .I4(p_20_in),
        .I5(\EX_Op1_reg[29] ),
        .O(\Using_FPGA.Native_i_2__32_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_43
   (ex_load_store_instr_s,
    ex_MSR_Load_LWX_SWX_C,
    p_126_in,
    \Using_LWX_SWX_instr.ex_reservation_reg ,
    mem_load_store_access0,
    out,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk,
    ex_is_lwx_instr_s,
    ex_is_swx_instr_s,
    ex_branch_with_delayslot_reg,
    wb_exception_i_reg,
    mem_valid_instr,
    mem_exception_from_ex,
    ex_valid_reg,
    ex_Take_Intr_or_Exc,
    ex_reservation,
    \Performace_Debug_Control.dbg_stop_if_delay_i_reg );
  output ex_load_store_instr_s;
  output ex_MSR_Load_LWX_SWX_C;
  output p_126_in;
  output \Using_LWX_SWX_instr.ex_reservation_reg ;
  output mem_load_store_access0;
  input [0:0]out;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input ex_is_lwx_instr_s;
  input ex_is_swx_instr_s;
  input ex_branch_with_delayslot_reg;
  input wb_exception_i_reg;
  input mem_valid_instr;
  input mem_exception_from_ex;
  input ex_valid_reg;
  input ex_Take_Intr_or_Exc;
  input ex_reservation;
  input \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;

  wire Clk;
  wire \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_LWX_SWX_instr.ex_reservation_reg ;
  wire ex_MSR_Load_LWX_SWX_C;
  wire ex_Take_Intr_or_Exc;
  wire ex_branch_with_delayslot_reg;
  wire ex_is_lwx_instr_s;
  wire ex_is_swx_instr_s;
  wire ex_load_store_instr_s;
  wire ex_reservation;
  wire ex_valid_reg;
  wire mem_exception_from_ex;
  wire mem_load_store_access0;
  wire mem_valid_instr;
  wire [0:0]out;
  wire p_126_in;
  wire wb_exception_i_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Using_FPGA.Native_1 ),
        .Q(ex_load_store_instr_s),
        .R(out));
  LUT5 #(
    .INIT(32'h15000000)) 
    \Using_FPGA.Native_i_2__33 
       (.I0(wb_exception_i_reg),
        .I1(mem_valid_instr),
        .I2(mem_exception_from_ex),
        .I3(ex_valid_reg),
        .I4(ex_load_store_instr_s),
        .O(p_126_in));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \Using_FPGA.Native_i_4 
       (.I0(p_126_in),
        .I1(ex_is_lwx_instr_s),
        .I2(ex_is_swx_instr_s),
        .O(ex_MSR_Load_LWX_SWX_C));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hFF80)) 
    \Using_LWX_SWX_instr.ex_reservation_i_3 
       (.I0(p_126_in),
        .I1(ex_is_swx_instr_s),
        .I2(ex_branch_with_delayslot_reg),
        .I3(out),
        .O(\Using_LWX_SWX_instr.ex_reservation_reg ));
  LUT5 #(
    .INIT(32'h00002022)) 
    mem_load_store_access_i_1
       (.I0(ex_load_store_instr_s),
        .I1(ex_Take_Intr_or_Exc),
        .I2(ex_reservation),
        .I3(ex_is_swx_instr_s),
        .I4(\Performace_Debug_Control.dbg_stop_if_delay_i_reg ),
        .O(mem_load_store_access0));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_44
   (ex_reverse_byteorder,
    out,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Clk);
  output ex_reverse_byteorder;
  input [0:0]out;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_reverse_byteorder;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(\Using_FPGA.Native_1 ),
        .Q(ex_reverse_byteorder),
        .R(out));
endmodule

(* ORIG_REF_NAME = "MB_FDRE" *) 
module system_microblaze_0_0_MB_FDRE_45
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    out,
    \Using_FPGA.Native_2 ,
    \ex_which_branch_reg[9] ,
    Clk,
    wb_MSR_cmb,
    of_MSR,
    ex_MSR_Set_SW_BIP,
    \wb_exception_kind_i_reg[27] ,
    ex_branch_with_delayslot_reg,
    ex_MSR,
    ex_set_bip_reg,
    ex_Take_Intr_or_Exc_reg,
    \EX_Op1_reg[28] );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input [0:0]out;
  input \Using_FPGA.Native_2 ;
  input \ex_which_branch_reg[9] ;
  input Clk;
  input [0:0]wb_MSR_cmb;
  input [0:0]of_MSR;
  input ex_MSR_Set_SW_BIP;
  input \wb_exception_kind_i_reg[27] ;
  input ex_branch_with_delayslot_reg;
  input [0:0]ex_MSR;
  input ex_set_bip_reg;
  input ex_Take_Intr_or_Exc_reg;
  input \EX_Op1_reg[28] ;

  wire Clk;
  wire \EX_Op1_reg[28] ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_2__35_n_0 ;
  wire [0:0]ex_MSR;
  wire ex_MSR_Set_SW_BIP;
  wire ex_Take_Intr_or_Exc_reg;
  wire ex_branch_with_delayslot_reg;
  wire ex_clear_MSR_BIP_instr_s;
  wire ex_set_bip_reg;
  wire \ex_which_branch_reg[9] ;
  wire [0:0]of_MSR;
  wire [0:0]out;
  wire [0:0]wb_MSR_cmb;
  wire \wb_exception_kind_i_reg[27] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(\Using_FPGA.Native_2 ),
        .D(\ex_which_branch_reg[9] ),
        .Q(ex_clear_MSR_BIP_instr_s),
        .R(out));
  LUT6 #(
    .INIT(64'hAAAAAAAACFCFCFC0)) 
    \Using_FPGA.Native_i_1__36 
       (.I0(wb_MSR_cmb),
        .I1(\Using_FPGA.Native_i_2__35_n_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(of_MSR),
        .I4(ex_MSR_Set_SW_BIP),
        .I5(\wb_exception_kind_i_reg[27] ),
        .O(\Using_FPGA.Native_0 ));
  LUT5 #(
    .INIT(32'hAAAACFC0)) 
    \Using_FPGA.Native_i_1__37 
       (.I0(wb_MSR_cmb),
        .I1(\Using_FPGA.Native_i_2__35_n_0 ),
        .I2(ex_branch_with_delayslot_reg),
        .I3(ex_MSR),
        .I4(\wb_exception_kind_i_reg[27] ),
        .O(\Using_FPGA.Native_1 ));
  LUT4 #(
    .INIT(16'hBFA0)) 
    \Using_FPGA.Native_i_2__35 
       (.I0(ex_set_bip_reg),
        .I1(ex_clear_MSR_BIP_instr_s),
        .I2(ex_Take_Intr_or_Exc_reg),
        .I3(\EX_Op1_reg[28] ),
        .O(\Using_FPGA.Native_i_2__35_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_101
   (\ex_instr_reg[1] ,
    ex_op1_cmp_eq_n5_out,
    force2_reg,
    use_Reg_Neg_DI1_out,
    force_Val10_out,
    use_Reg_Neg_S3_out,
    force12_out,
    I0165_out,
    ex_op1_cmp_eq,
    ex_enable_sext_shift_i0,
    \EX_Sext_Op_reg[0] ,
    ex_alu_sel_logic_i_reg,
    out,
    of_instr_ii_41,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    in,
    \Using_FPGA.Native_3 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    EX_ALU_Op1);
  output \ex_instr_reg[1] ;
  output ex_op1_cmp_eq_n5_out;
  output force2_reg;
  output use_Reg_Neg_DI1_out;
  output force_Val10_out;
  output use_Reg_Neg_S3_out;
  output force12_out;
  output I0165_out;
  output ex_op1_cmp_eq;
  output ex_enable_sext_shift_i0;
  output \EX_Sext_Op_reg[0] ;
  output ex_alu_sel_logic_i_reg;
  input [0:0]out;
  input of_instr_ii_41;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]in;
  input \Using_FPGA.Native_3 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input EX_ALU_Op1;

  wire Clk;
  wire EX_ALU_Op1;
  wire \EX_Sext_Op_reg[0] ;
  wire I0165_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire ex_alu_sel_logic_i_reg;
  wire ex_enable_sext_shift_i0;
  wire \ex_instr_reg[1] ;
  wire ex_op1_cmp_eq;
  wire ex_op1_cmp_eq_n5_out;
  wire force12_out;
  wire force2_reg;
  wire force_Val10_out;
  wire [0:0]in;
  wire of_instr_ii_41;
  wire [0:0]out;
  wire use_Reg_Neg_DI1_out;
  wire use_Reg_Neg_S3_out;

  LUT4 #(
    .INIT(16'hFEFF)) 
    \EX_Sext_Op[0]_i_2 
       (.I0(\ex_instr_reg[1] ),
        .I1(\Using_FPGA.Native_8 ),
        .I2(\Using_FPGA.Native_7 ),
        .I3(\Using_FPGA.Native_4 ),
        .O(\EX_Sext_Op_reg[0] ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_41),
        .Q(\ex_instr_reg[1] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__105 
       (.I0(in),
        .I1(\ex_instr_reg[1] ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0165_out));
  LUT4 #(
    .INIT(16'h0006)) 
    ex_alu_sel_logic_i_i_1
       (.I0(\ex_instr_reg[1] ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(EX_ALU_Op1),
        .O(ex_alu_sel_logic_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'h40)) 
    ex_enable_sext_shift_i_i_1
       (.I0(\ex_instr_reg[1] ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_5 ),
        .O(ex_enable_sext_shift_i0));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'hFDDF)) 
    ex_op1_cmp_eq_i_1
       (.I0(force2_reg),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .O(ex_op1_cmp_eq));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'h0220)) 
    ex_op1_cmp_eq_n_i_1
       (.I0(force2_reg),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .O(ex_op1_cmp_eq_n5_out));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'h02)) 
    force1_i_1
       (.I0(force2_reg),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_0 ),
        .O(force12_out));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT5 #(
    .INIT(32'h40000000)) 
    force2_i_1
       (.I0(\ex_instr_reg[1] ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FPGA.Native_6 ),
        .I4(\Using_FPGA.Native_7 ),
        .O(force2_reg));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'h20)) 
    force_Val1_i_1
       (.I0(force2_reg),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_0 ),
        .O(force_Val10_out));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'h0820)) 
    use_Reg_Neg_DI_i_1
       (.I0(force2_reg),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .O(use_Reg_Neg_DI1_out));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'h0820)) 
    use_Reg_Neg_S_i_1
       (.I0(force2_reg),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_1 ),
        .O(use_Reg_Neg_S3_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_103
   (\ex_instr_reg[20] ,
    I089_out,
    out,
    of_instr_ii_22,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \ex_instr_reg[20] ;
  output I089_out;
  input [0:0]out;
  input of_instr_ii_22;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I089_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \ex_instr_reg[20] ;
  wire [0:0]in;
  wire of_instr_ii_22;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_22),
        .Q(\ex_instr_reg[20] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__108 
       (.I0(in),
        .I1(\ex_instr_reg[20] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I089_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_105
   (\ex_instr_reg[21] ,
    I085_out,
    \Performace_Debug_Control.ex_brki_hit_reg ,
    out,
    of_instr_ii_21,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    in,
    \Using_FPGA.Native_4 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \control_reg_reg[8] );
  output \ex_instr_reg[21] ;
  output I085_out;
  output \Performace_Debug_Control.ex_brki_hit_reg ;
  input [0:0]out;
  input of_instr_ii_21;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [2:0]\Using_FPGA.Native_3 ;
  input [0:0]in;
  input \Using_FPGA.Native_4 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input [0:0]\control_reg_reg[8] ;

  wire Clk;
  wire I085_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.ex_brki_hit_i_2_n_0 ;
  wire \Performace_Debug_Control.ex_brki_hit_i_5_n_0 ;
  wire \Performace_Debug_Control.ex_brki_hit_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [2:0]\Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire [0:0]\control_reg_reg[8] ;
  wire \ex_instr_reg[21] ;
  wire [0:0]in;
  wire of_instr_ii_21;
  wire [0:0]out;

  LUT4 #(
    .INIT(16'h0100)) 
    \Performace_Debug_Control.ex_brki_hit_i_1 
       (.I0(\Performace_Debug_Control.ex_brki_hit_i_2_n_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(\Using_FPGA.Native_6 ),
        .I3(\control_reg_reg[8] ),
        .O(\Performace_Debug_Control.ex_brki_hit_reg ));
  LUT4 #(
    .INIT(16'hFFFD)) 
    \Performace_Debug_Control.ex_brki_hit_i_2 
       (.I0(\Performace_Debug_Control.ex_brki_hit_i_5_n_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .O(\Performace_Debug_Control.ex_brki_hit_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \Performace_Debug_Control.ex_brki_hit_i_5 
       (.I0(\ex_instr_reg[21] ),
        .I1(\Using_FPGA.Native_3 [2]),
        .I2(\Using_FPGA.Native_3 [0]),
        .I3(\Using_FPGA.Native_3 [1]),
        .O(\Performace_Debug_Control.ex_brki_hit_i_5_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_21),
        .Q(\ex_instr_reg[21] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__95 
       (.I0(in),
        .I1(\ex_instr_reg[21] ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I085_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_107
   (\ex_instr_reg[22] ,
    I081_out,
    \Using_FPGA.Native_0 ,
    out,
    of_instr_ii_20,
    Clk,
    in,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_2 );
  output [0:0]\ex_instr_reg[22] ;
  output I081_out;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input of_instr_ii_20;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_2 ;

  wire Clk;
  wire I081_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]\ex_instr_reg[22] ;
  wire [0:0]in;
  wire of_instr_ii_20;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_20),
        .Q(\ex_instr_reg[22] ),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__182 
       (.I0(\ex_instr_reg[22] ),
        .I1(\Using_FPGA.Native_2 ),
        .O(\Using_FPGA.Native_0 ));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__94 
       (.I0(in),
        .I1(\ex_instr_reg[22] ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I081_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_109
   (\ex_instr_reg[23] ,
    I077_out,
    out,
    of_instr_ii_19,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]\ex_instr_reg[23] ;
  output I077_out;
  input [0:0]out;
  input of_instr_ii_19;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I077_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\ex_instr_reg[23] ;
  wire [0:0]in;
  wire of_instr_ii_19;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_19),
        .Q(\ex_instr_reg[23] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__93 
       (.I0(in),
        .I1(\ex_instr_reg[23] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I077_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_111
   (\ex_instr_reg[24] ,
    I073_out,
    out,
    of_instr_ii_18,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \ex_instr_reg[24] ;
  output I073_out;
  input [0:0]out;
  input of_instr_ii_18;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I073_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \ex_instr_reg[24] ;
  wire [0:0]in;
  wire of_instr_ii_18;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_18),
        .Q(\ex_instr_reg[24] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__92 
       (.I0(in),
        .I1(\ex_instr_reg[24] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I073_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_113
   (\EX_Shift_Op_reg[0] ,
    I069_out,
    \EX_Sext_Op_reg[0] ,
    out,
    of_instr_ii_17,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 );
  output \EX_Shift_Op_reg[0] ;
  output I069_out;
  output [0:0]\EX_Sext_Op_reg[0] ;
  input [0:0]out;
  input of_instr_ii_17;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire [0:0]\EX_Sext_Op_reg[0] ;
  wire \EX_Shift_Op_reg[0] ;
  wire I069_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [0:0]in;
  wire of_instr_ii_17;
  wire [0:0]out;

  LUT5 #(
    .INIT(32'hFFFFF7FF)) 
    \EX_Sext_Op[0]_i_1 
       (.I0(\EX_Shift_Op_reg[0] ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_4 ),
        .O(\EX_Sext_Op_reg[0] ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_17),
        .Q(\EX_Shift_Op_reg[0] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__91 
       (.I0(in),
        .I1(\EX_Shift_Op_reg[0] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I069_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_115
   (\EX_Shift_Op_reg[1] ,
    EX_SWAP_Instr_reg,
    I065_out,
    \EX_Sext_Op_reg[1] ,
    out,
    of_instr_ii_16,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    in,
    \Using_FPGA.Native_8 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_9 );
  output \EX_Shift_Op_reg[1] ;
  output EX_SWAP_Instr_reg;
  output I065_out;
  output [0:0]\EX_Sext_Op_reg[1] ;
  input [0:0]out;
  input of_instr_ii_16;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input [0:0]\Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input [0:0]in;
  input \Using_FPGA.Native_8 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_9 ;

  wire Clk;
  wire EX_SWAP_Instr_i_2_n_0;
  wire EX_SWAP_Instr_reg;
  wire \EX_Sext_Op[1]_i_2_n_0 ;
  wire [0:0]\EX_Sext_Op_reg[1] ;
  wire \EX_Shift_Op_reg[1] ;
  wire I065_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [0:0]\Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [0:0]in;
  wire of_instr_ii_16;
  wire [0:0]out;

  LUT5 #(
    .INIT(32'h00000001)) 
    EX_SWAP_Instr_i_1
       (.I0(EX_SWAP_Instr_i_2_n_0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(EX_SWAP_Instr_reg));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    EX_SWAP_Instr_i_2
       (.I0(\EX_Shift_Op_reg[1] ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Using_FPGA.Native_6 ),
        .I4(\Using_FPGA.Native_7 ),
        .O(EX_SWAP_Instr_i_2_n_0));
  LUT5 #(
    .INIT(32'h00000001)) 
    \EX_Sext_Op[1]_i_1 
       (.I0(\EX_Sext_Op[1]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .O(\EX_Sext_Op_reg[1] ));
  LUT5 #(
    .INIT(32'h08FFFFFF)) 
    \EX_Sext_Op[1]_i_2 
       (.I0(\EX_Shift_Op_reg[1] ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_9 ),
        .I3(\Using_FPGA.Native_6 ),
        .I4(\Using_FPGA.Native_7 ),
        .O(\EX_Sext_Op[1]_i_2_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_16),
        .Q(\EX_Shift_Op_reg[1] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__90 
       (.I0(in),
        .I1(\EX_Shift_Op_reg[1] ),
        .I2(\Using_FPGA.Native_8 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I065_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_117
   (\ex_instr_reg[27] ,
    \EX_Op2_reg[27] ,
    I061_out,
    out,
    of_instr_ii_15,
    Clk,
    GPR_Op2,
    of_op2_sel_imm,
    of_op2_sel,
    \interrupt_address_d1_reg[27] ,
    of_Take_Interrupt_hold_reg,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \ex_instr_reg[27] ;
  output \EX_Op2_reg[27] ;
  output I061_out;
  input [0:0]out;
  input of_instr_ii_15;
  input Clk;
  input [0:0]GPR_Op2;
  input of_op2_sel_imm;
  input [0:0]of_op2_sel;
  input [0:0]\interrupt_address_d1_reg[27] ;
  input of_Take_Interrupt_hold_reg;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire \EX_Op2_reg[27] ;
  wire [0:0]GPR_Op2;
  wire I061_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \ex_instr_reg[27] ;
  wire [0:0]in;
  wire [0:0]\interrupt_address_d1_reg[27] ;
  wire of_Take_Interrupt_hold_reg;
  wire of_instr_ii_15;
  wire [0:0]of_op2_sel;
  wire of_op2_sel_imm;
  wire [0:0]out;

  LUT6 #(
    .INIT(64'hFF00FFFFFF53FF53)) 
    \EX_Op2[27]_i_3 
       (.I0(\ex_instr_reg[27] ),
        .I1(GPR_Op2),
        .I2(of_op2_sel_imm),
        .I3(of_op2_sel),
        .I4(\interrupt_address_d1_reg[27] ),
        .I5(of_Take_Interrupt_hold_reg),
        .O(\EX_Op2_reg[27] ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_15),
        .Q(\ex_instr_reg[27] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__89 
       (.I0(in),
        .I1(\ex_instr_reg[27] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I061_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_119
   (\ex_instr_reg[28] ,
    \EX_Op2_reg[28] ,
    \Performace_Debug_Control.ex_brki_hit_reg ,
    I057_out,
    of_Sel_SPR_MSR3_out,
    out,
    of_instr_ii_14,
    Clk,
    GPR_Op2,
    of_op2_sel_imm,
    of_op2_sel,
    \interrupt_address_d1_reg[28] ,
    of_Take_Interrupt_hold_reg,
    \Using_FPGA.Native_0 ,
    in,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_2 );
  output \ex_instr_reg[28] ;
  output \EX_Op2_reg[28] ;
  output \Performace_Debug_Control.ex_brki_hit_reg ;
  output I057_out;
  output of_Sel_SPR_MSR3_out;
  input [0:0]out;
  input of_instr_ii_14;
  input Clk;
  input [0:0]GPR_Op2;
  input of_op2_sel_imm;
  input [0:0]of_op2_sel;
  input [0:0]\interrupt_address_d1_reg[28] ;
  input of_Take_Interrupt_hold_reg;
  input [6:0]\Using_FPGA.Native_0 ;
  input [0:0]in;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_2 ;

  wire Clk;
  wire \EX_Op2_reg[28] ;
  wire [0:0]GPR_Op2;
  wire I057_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.ex_brki_hit_reg ;
  wire [6:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \ex_instr_reg[28] ;
  wire [0:0]in;
  wire [0:0]\interrupt_address_d1_reg[28] ;
  wire of_Sel_SPR_MSR3_out;
  wire of_Take_Interrupt_hold_reg;
  wire of_instr_ii_14;
  wire [0:0]of_op2_sel;
  wire of_op2_sel_imm;
  wire [0:0]out;

  LUT6 #(
    .INIT(64'hFF00FFFFFF53FF53)) 
    \EX_Op2[28]_i_3 
       (.I0(\ex_instr_reg[28] ),
        .I1(GPR_Op2),
        .I2(of_op2_sel_imm),
        .I3(of_op2_sel),
        .I4(\interrupt_address_d1_reg[28] ),
        .I5(of_Take_Interrupt_hold_reg),
        .O(\EX_Op2_reg[28] ));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \Performace_Debug_Control.ex_brki_hit_i_4 
       (.I0(\ex_instr_reg[28] ),
        .I1(\Using_FPGA.Native_0 [4]),
        .I2(\Using_FPGA.Native_0 [3]),
        .I3(\Using_FPGA.Native_0 [5]),
        .I4(\Using_FPGA.Native_0 [6]),
        .O(\Performace_Debug_Control.ex_brki_hit_reg ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_14),
        .Q(\ex_instr_reg[28] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__88 
       (.I0(in),
        .I1(\ex_instr_reg[28] ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I057_out));
  LUT5 #(
    .INIT(32'h01000000)) 
    ex_mfsmsr_i_i_1
       (.I0(\ex_instr_reg[28] ),
        .I1(\Using_FPGA.Native_0 [1]),
        .I2(\Using_FPGA.Native_0 [2]),
        .I3(\Using_FPGA.Native_0 [0]),
        .I4(\Using_FPGA.Native_2 ),
        .O(of_Sel_SPR_MSR3_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_121
   (\ex_instr_reg[29] ,
    ex_move_to_MSR_instr29_out,
    I053_out,
    out,
    of_instr_ii_13,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    in,
    \Using_FPGA.Native_2 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]\ex_instr_reg[29] ;
  output ex_move_to_MSR_instr29_out;
  output I053_out;
  input [0:0]out;
  input of_instr_ii_13;
  input Clk;
  input [3:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]in;
  input \Using_FPGA.Native_2 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I053_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [3:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]\ex_instr_reg[29] ;
  wire ex_move_to_MSR_instr29_out;
  wire [0:0]in;
  wire of_instr_ii_13;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_13),
        .Q(\ex_instr_reg[29] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__87 
       (.I0(in),
        .I1(\ex_instr_reg[29] ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I053_out));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    ex_move_to_MSR_instr_i_1
       (.I0(\ex_instr_reg[29] ),
        .I1(\Using_FPGA.Native_0 [2]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(\Using_FPGA.Native_0 [3]),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Using_FPGA.Native_0 [0]),
        .O(ex_move_to_MSR_instr29_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_123
   (\ex_instr_reg[2] ,
    I0161_out,
    ex_move_to_MSR_instr_reg,
    \EX_ALU_Op_reg[1] ,
    out,
    of_instr_ii_40,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 );
  output \ex_instr_reg[2] ;
  output I0161_out;
  output ex_move_to_MSR_instr_reg;
  output \EX_ALU_Op_reg[1] ;
  input [0:0]out;
  input of_instr_ii_40;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;

  wire Clk;
  wire \EX_ALU_Op_reg[1] ;
  wire I0161_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \ex_instr_reg[2] ;
  wire ex_move_to_MSR_instr_reg;
  wire [0:0]in;
  wire of_instr_ii_40;
  wire [0:0]out;

  LUT3 #(
    .INIT(8'h04)) 
    \EX_ALU_Op[0]_i_2 
       (.I0(\ex_instr_reg[2] ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_2 ),
        .O(\EX_ALU_Op_reg[1] ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_40),
        .Q(\ex_instr_reg[2] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__104 
       (.I0(in),
        .I1(\ex_instr_reg[2] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0161_out));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    ex_move_to_MSR_instr_i_2
       (.I0(\ex_instr_reg[2] ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(ex_move_to_MSR_instr_reg));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_125
   (\ex_instr_reg[30] ,
    \Performace_Debug_Control.ex_brki_hit_reg ,
    EX_SWAP_BYTE_Instr_reg,
    I049_out,
    out,
    of_instr_ii_12,
    Clk,
    \Using_FPGA.Native_0 ,
    ex_set_bip0,
    p_1_in16_in,
    \Using_FPGA.Native_1 ,
    in,
    \Using_FPGA.Native_2 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]\ex_instr_reg[30] ;
  output \Performace_Debug_Control.ex_brki_hit_reg ;
  output EX_SWAP_BYTE_Instr_reg;
  output I049_out;
  input [0:0]out;
  input of_instr_ii_12;
  input Clk;
  input [1:0]\Using_FPGA.Native_0 ;
  input ex_set_bip0;
  input p_1_in16_in;
  input [0:0]\Using_FPGA.Native_1 ;
  input [0:0]in;
  input \Using_FPGA.Native_2 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire EX_SWAP_BYTE_Instr_reg;
  wire I049_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.ex_brki_hit_reg ;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]\ex_instr_reg[30] ;
  wire ex_set_bip0;
  wire [0:0]in;
  wire of_instr_ii_12;
  wire [0:0]out;
  wire p_1_in16_in;

  LUT1 #(
    .INIT(2'h1)) 
    EX_SWAP_BYTE_Instr_i_1
       (.I0(\ex_instr_reg[30] ),
        .O(EX_SWAP_BYTE_Instr_reg));
  LUT6 #(
    .INIT(64'hFEFFFFFFFFFFFFFF)) 
    \Performace_Debug_Control.ex_brki_hit_i_3 
       (.I0(\ex_instr_reg[30] ),
        .I1(\Using_FPGA.Native_0 [0]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(ex_set_bip0),
        .I4(p_1_in16_in),
        .I5(\Using_FPGA.Native_1 ),
        .O(\Performace_Debug_Control.ex_brki_hit_reg ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_12),
        .Q(\ex_instr_reg[30] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__86 
       (.I0(in),
        .I1(\ex_instr_reg[30] ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I049_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_127
   (\ex_instr_reg[31] ,
    I045_out,
    out,
    of_instr_ii_11,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]\ex_instr_reg[31] ;
  output I045_out;
  input [0:0]out;
  input of_instr_ii_11;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I045_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\ex_instr_reg[31] ;
  wire [0:0]in;
  wire of_instr_ii_11;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_11),
        .Q(\ex_instr_reg[31] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__85 
       (.I0(in),
        .I1(\ex_instr_reg[31] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I045_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_129
   (use_Reg_Neg_S_reg,
    \EX_Op3_reg[15] ,
    \EX_Op3_reg[15]_0 ,
    \EX_Op3_reg[15]_1 ,
    of_pipe_ctrl,
    out,
    of_instr_ii_10,
    Clk,
    mem_gpr_write,
    mem_valid_instr,
    wb_valid_reg,
    wb_exception_i_reg,
    wb_gpr_write_i,
    wb_reset,
    \ex_gpr_write_addr_reg[0] ,
    \Using_FPGA.Native_0 ,
    \ex_gpr_write_addr_reg[4] ,
    \Using_FPGA.Native_1 ,
    of_read_ex_write_op3_conflict_part1,
    of_read_ex_write_op3_conflict_part2,
    ex_is_multi_or_load_instr);
  output use_Reg_Neg_S_reg;
  output \EX_Op3_reg[15] ;
  output \EX_Op3_reg[15]_0 ;
  output \EX_Op3_reg[15]_1 ;
  output [0:0]of_pipe_ctrl;
  input [0:0]out;
  input of_instr_ii_10;
  input Clk;
  input mem_gpr_write;
  input mem_valid_instr;
  input wb_valid_reg;
  input wb_exception_i_reg;
  input wb_gpr_write_i;
  input wb_reset;
  input [1:0]\ex_gpr_write_addr_reg[0] ;
  input \Using_FPGA.Native_0 ;
  input \ex_gpr_write_addr_reg[4] ;
  input \Using_FPGA.Native_1 ;
  input of_read_ex_write_op3_conflict_part1;
  input of_read_ex_write_op3_conflict_part2;
  input ex_is_multi_or_load_instr;

  wire Clk;
  wire \EX_Op3_reg[15] ;
  wire \EX_Op3_reg[15]_0 ;
  wire \EX_Op3_reg[15]_1 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [1:0]\ex_gpr_write_addr_reg[0] ;
  wire \ex_gpr_write_addr_reg[4] ;
  wire ex_is_multi_or_load_instr;
  wire mem_gpr_write;
  wire mem_valid_instr;
  wire of_instr_ii_10;
  wire [0:0]of_pipe_ctrl;
  wire of_read_ex_write_op3_conflict_part1;
  wire of_read_ex_write_op3_conflict_part2;
  wire [0:0]out;
  wire use_Reg_Neg_S_reg;
  wire wb_exception_i_reg;
  wire wb_gpr_write_i;
  wire wb_reset;
  wire wb_valid_reg;

  LUT5 #(
    .INIT(32'hAAAA0800)) 
    \EX_Op3[0]_i_11 
       (.I0(use_Reg_Neg_S_reg),
        .I1(wb_valid_reg),
        .I2(wb_exception_i_reg),
        .I3(wb_gpr_write_i),
        .I4(wb_reset),
        .O(\EX_Op3_reg[15]_0 ));
  LUT6 #(
    .INIT(64'h8200000000008200)) 
    \EX_Op3[0]_i_4 
       (.I0(use_Reg_Neg_S_reg),
        .I1(\ex_gpr_write_addr_reg[0] [1]),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\ex_gpr_write_addr_reg[4] ),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\ex_gpr_write_addr_reg[0] [0]),
        .O(\EX_Op3_reg[15]_1 ));
  LUT3 #(
    .INIT(8'h80)) 
    \EX_Op3[0]_i_9 
       (.I0(use_Reg_Neg_S_reg),
        .I1(mem_gpr_write),
        .I2(mem_valid_instr),
        .O(\EX_Op3_reg[15] ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_10),
        .Q(use_Reg_Neg_S_reg),
        .R(out));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Using_FPGA.Native_i_1__129 
       (.I0(use_Reg_Neg_S_reg),
        .I1(of_read_ex_write_op3_conflict_part1),
        .I2(of_read_ex_write_op3_conflict_part2),
        .I3(ex_is_multi_or_load_instr),
        .O(of_pipe_ctrl));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_131
   (\Using_FPGA.Native_0 ,
    \EX_Branch_CMP_Op1_reg[0] ,
    \EX_Branch_CMP_Op1_reg[15] ,
    \EX_Branch_CMP_Op1_reg[15]_0 ,
    I037_out,
    out,
    of_instr_ii_9,
    Clk,
    WB_Doublet_Access_reg,
    EX_Fwd,
    \Using_FPGA.Native_1 ,
    GPR_Op1,
    WB_Doublet_Access_reg_0,
    WB_Doublet_Access_reg_1,
    WB_Doublet_Access_reg_2,
    WB_Doublet_Access_reg_3,
    WB_Doublet_Access_reg_4,
    WB_Doublet_Access_reg_5,
    WB_Doublet_Access_reg_6,
    WB_Doublet_Access_reg_7,
    WB_Doublet_Access_reg_8,
    WB_Doublet_Access_reg_9,
    WB_Doublet_Access_reg_10,
    WB_Doublet_Access_reg_11,
    WB_Doublet_Access_reg_12,
    WB_Doublet_Access_reg_13,
    WB_Doublet_Access_reg_14,
    \Using_FPGA.Native_2 ,
    Q,
    \mem_gpr_write_addr_reg[4] ,
    \Using_FPGA.Native_3 ,
    p_109_in,
    \wb_gpr_write_addr_reg[0] ,
    \wb_gpr_write_addr_reg[4] ,
    p_19_in,
    \ex_gpr_write_addr_reg[0] ,
    \ex_gpr_write_addr_reg[4] ,
    p_112_in,
    in,
    \Using_FPGA.Native_4 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \Using_FPGA.Native_0 ;
  output [15:0]\EX_Branch_CMP_Op1_reg[0] ;
  output \EX_Branch_CMP_Op1_reg[15] ;
  output \EX_Branch_CMP_Op1_reg[15]_0 ;
  output I037_out;
  input [0:0]out;
  input of_instr_ii_9;
  input Clk;
  input WB_Doublet_Access_reg;
  input [15:0]EX_Fwd;
  input [14:0]\Using_FPGA.Native_1 ;
  input [15:0]GPR_Op1;
  input WB_Doublet_Access_reg_0;
  input WB_Doublet_Access_reg_1;
  input WB_Doublet_Access_reg_2;
  input WB_Doublet_Access_reg_3;
  input WB_Doublet_Access_reg_4;
  input WB_Doublet_Access_reg_5;
  input WB_Doublet_Access_reg_6;
  input WB_Doublet_Access_reg_7;
  input WB_Doublet_Access_reg_8;
  input WB_Doublet_Access_reg_9;
  input WB_Doublet_Access_reg_10;
  input WB_Doublet_Access_reg_11;
  input WB_Doublet_Access_reg_12;
  input WB_Doublet_Access_reg_13;
  input WB_Doublet_Access_reg_14;
  input [0:0]\Using_FPGA.Native_2 ;
  input [1:0]Q;
  input \mem_gpr_write_addr_reg[4] ;
  input \Using_FPGA.Native_3 ;
  input p_109_in;
  input [1:0]\wb_gpr_write_addr_reg[0] ;
  input \wb_gpr_write_addr_reg[4] ;
  input p_19_in;
  input [1:0]\ex_gpr_write_addr_reg[0] ;
  input \ex_gpr_write_addr_reg[4] ;
  input p_112_in;
  input [0:0]in;
  input \Using_FPGA.Native_4 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [15:0]\EX_Branch_CMP_Op1_reg[0] ;
  wire \EX_Branch_CMP_Op1_reg[15] ;
  wire \EX_Branch_CMP_Op1_reg[15]_0 ;
  wire [15:0]EX_Fwd;
  wire [15:0]GPR_Op1;
  wire I037_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [14:0]\Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire WB_Doublet_Access_reg;
  wire WB_Doublet_Access_reg_0;
  wire WB_Doublet_Access_reg_1;
  wire WB_Doublet_Access_reg_10;
  wire WB_Doublet_Access_reg_11;
  wire WB_Doublet_Access_reg_12;
  wire WB_Doublet_Access_reg_13;
  wire WB_Doublet_Access_reg_14;
  wire WB_Doublet_Access_reg_2;
  wire WB_Doublet_Access_reg_3;
  wire WB_Doublet_Access_reg_4;
  wire WB_Doublet_Access_reg_5;
  wire WB_Doublet_Access_reg_6;
  wire WB_Doublet_Access_reg_7;
  wire WB_Doublet_Access_reg_8;
  wire WB_Doublet_Access_reg_9;
  wire [1:0]\ex_gpr_write_addr_reg[0] ;
  wire \ex_gpr_write_addr_reg[4] ;
  wire [0:0]in;
  wire \mem_gpr_write_addr_reg[4] ;
  wire of_instr_ii_9;
  wire of_read_ex_write_op1_conflict;
  wire of_read_mem_write_op1_conflict;
  wire of_read_wb_write_op1_conflict;
  wire [0:0]out;
  wire p_109_in;
  wire p_112_in;
  wire p_19_in;
  wire [1:0]\wb_gpr_write_addr_reg[0] ;
  wire \wb_gpr_write_addr_reg[4] ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_9),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__125 
       (.I0(in),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I037_out));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__58 
       (.I0(WB_Doublet_Access_reg),
        .I1(EX_Fwd[0]),
        .I2(\Using_FPGA.Native_1 [0]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[0]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [0]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__59 
       (.I0(WB_Doublet_Access_reg_0),
        .I1(EX_Fwd[1]),
        .I2(\Using_FPGA.Native_1 [1]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[1]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [1]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__60 
       (.I0(WB_Doublet_Access_reg_1),
        .I1(EX_Fwd[2]),
        .I2(\Using_FPGA.Native_1 [2]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[2]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [2]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__61 
       (.I0(WB_Doublet_Access_reg_2),
        .I1(EX_Fwd[3]),
        .I2(\Using_FPGA.Native_1 [3]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[3]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [3]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__62 
       (.I0(WB_Doublet_Access_reg_3),
        .I1(EX_Fwd[4]),
        .I2(\Using_FPGA.Native_1 [4]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[4]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [4]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__63 
       (.I0(WB_Doublet_Access_reg_4),
        .I1(EX_Fwd[5]),
        .I2(\Using_FPGA.Native_1 [5]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[5]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [5]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__64 
       (.I0(WB_Doublet_Access_reg_5),
        .I1(EX_Fwd[6]),
        .I2(\Using_FPGA.Native_1 [6]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[6]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [6]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__65 
       (.I0(WB_Doublet_Access_reg_6),
        .I1(EX_Fwd[7]),
        .I2(\Using_FPGA.Native_1 [7]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[7]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [7]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__66 
       (.I0(WB_Doublet_Access_reg_7),
        .I1(EX_Fwd[8]),
        .I2(\Using_FPGA.Native_1 [8]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[8]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [8]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__67 
       (.I0(WB_Doublet_Access_reg_8),
        .I1(EX_Fwd[9]),
        .I2(\Using_FPGA.Native_1 [9]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[9]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [9]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__68 
       (.I0(WB_Doublet_Access_reg_9),
        .I1(EX_Fwd[10]),
        .I2(\Using_FPGA.Native_1 [10]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[10]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [10]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__69 
       (.I0(WB_Doublet_Access_reg_10),
        .I1(EX_Fwd[11]),
        .I2(\Using_FPGA.Native_1 [11]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[11]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [11]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__70 
       (.I0(WB_Doublet_Access_reg_11),
        .I1(EX_Fwd[12]),
        .I2(\Using_FPGA.Native_1 [12]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[12]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [12]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__71 
       (.I0(WB_Doublet_Access_reg_12),
        .I1(EX_Fwd[13]),
        .I2(\Using_FPGA.Native_1 [13]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[13]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [13]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__72 
       (.I0(WB_Doublet_Access_reg_13),
        .I1(EX_Fwd[14]),
        .I2(\Using_FPGA.Native_1 [14]),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[14]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [14]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_2__38 
       (.I0(WB_Doublet_Access_reg_14),
        .I1(EX_Fwd[15]),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\EX_Branch_CMP_Op1_reg[15] ),
        .I4(GPR_Op1[15]),
        .I5(\EX_Branch_CMP_Op1_reg[15]_0 ),
        .O(\EX_Branch_CMP_Op1_reg[0] [15]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \Using_FPGA.Native_i_4__0 
       (.I0(of_read_ex_write_op1_conflict),
        .I1(of_read_mem_write_op1_conflict),
        .I2(of_read_wb_write_op1_conflict),
        .O(\EX_Branch_CMP_Op1_reg[15] ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    \Using_FPGA.Native_i_5__0 
       (.I0(of_read_ex_write_op1_conflict),
        .I1(of_read_mem_write_op1_conflict),
        .I2(of_read_wb_write_op1_conflict),
        .O(\EX_Branch_CMP_Op1_reg[15]_0 ));
  LUT6 #(
    .INIT(64'h9000009000000000)) 
    \Using_FPGA.Native_i_7 
       (.I0(\ex_gpr_write_addr_reg[0] [1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\ex_gpr_write_addr_reg[4] ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\ex_gpr_write_addr_reg[0] [0]),
        .I5(p_112_in),
        .O(of_read_ex_write_op1_conflict));
  LUT6 #(
    .INIT(64'h9000009000000000)) 
    \Using_FPGA.Native_i_8 
       (.I0(Q[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\mem_gpr_write_addr_reg[4] ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(Q[0]),
        .I5(p_109_in),
        .O(of_read_mem_write_op1_conflict));
  LUT6 #(
    .INIT(64'h9000009000000000)) 
    \Using_FPGA.Native_i_9 
       (.I0(\wb_gpr_write_addr_reg[0] [1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\wb_gpr_write_addr_reg[4] ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\wb_gpr_write_addr_reg[0] [0]),
        .I5(p_19_in),
        .O(of_read_wb_write_op1_conflict));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_133
   (of_predecode,
    I033_out,
    out,
    of_instr_ii_8,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]of_predecode;
  output I033_out;
  input [0:0]out;
  input of_instr_ii_8;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I033_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]in;
  wire of_instr_ii_8;
  wire [0:0]of_predecode;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_8),
        .Q(of_predecode),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__123 
       (.I0(in),
        .I1(of_predecode),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I033_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_135
   (\Using_FPGA.Native_0 ,
    I029_out,
    out,
    of_instr_ii_7,
    Clk,
    in,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \Using_FPGA.Native_0 ;
  output I029_out;
  input [0:0]out;
  input of_instr_ii_7;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I029_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]in;
  wire of_instr_ii_7;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_7),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__121 
       (.I0(in),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I029_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_137
   (\Using_FPGA.Native_0 ,
    I025_out,
    out,
    of_instr_ii_6,
    Clk,
    in,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \Using_FPGA.Native_0 ;
  output I025_out;
  input [0:0]out;
  input of_instr_ii_6;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I025_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]in;
  wire of_instr_ii_6;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_6),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__119 
       (.I0(in),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I025_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_139
   (\Using_FPGA.Native_0 ,
    I021_out,
    \EX_Branch_CMP_Op1_reg[15] ,
    \EX_Branch_CMP_Op1_reg[15]_0 ,
    \EX_Branch_CMP_Op1_reg[15]_1 ,
    out,
    of_instr_ii_5,
    Clk,
    in,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    Q,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \wb_gpr_write_addr_reg[2] ,
    \ex_gpr_write_addr_reg[2] );
  output \Using_FPGA.Native_0 ;
  output I021_out;
  output \EX_Branch_CMP_Op1_reg[15] ;
  output \EX_Branch_CMP_Op1_reg[15]_0 ;
  output \EX_Branch_CMP_Op1_reg[15]_1 ;
  input [0:0]out;
  input of_instr_ii_5;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input [2:0]Q;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input [2:0]\wb_gpr_write_addr_reg[2] ;
  input [2:0]\ex_gpr_write_addr_reg[2] ;

  wire Clk;
  wire \EX_Branch_CMP_Op1_reg[15] ;
  wire \EX_Branch_CMP_Op1_reg[15]_0 ;
  wire \EX_Branch_CMP_Op1_reg[15]_1 ;
  wire I021_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [2:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [2:0]\ex_gpr_write_addr_reg[2] ;
  wire [0:0]in;
  wire of_instr_ii_5;
  wire [0:0]out;
  wire [2:0]\wb_gpr_write_addr_reg[2] ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_5),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_10 
       (.I0(\ex_gpr_write_addr_reg[2] [0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\ex_gpr_write_addr_reg[2] [2]),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\ex_gpr_write_addr_reg[2] [1]),
        .O(\EX_Branch_CMP_Op1_reg[15]_1 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_12 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(Q[2]),
        .I4(\Using_FPGA.Native_3 ),
        .I5(Q[1]),
        .O(\EX_Branch_CMP_Op1_reg[15] ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_14 
       (.I0(\wb_gpr_write_addr_reg[2] [0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\wb_gpr_write_addr_reg[2] [2]),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\wb_gpr_write_addr_reg[2] [1]),
        .O(\EX_Branch_CMP_Op1_reg[15]_0 ));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__117 
       (.I0(in),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I021_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_141
   (\Using_FPGA.Native_0 ,
    \EX_Op2_reg[0] ,
    of_op2_sel,
    I017_out,
    out,
    of_instr_ii_4,
    Clk,
    \Using_FPGA.Native_1 ,
    GPR_Op2,
    of_op2_sel_imm,
    WB_Byte_Access_reg,
    EX_Fwd,
    \Using_FPGA.Native_2 ,
    \interrupt_address_d1_reg[31] ,
    \Using_FPGA.Native_3 ,
    \interrupt_address_d1_reg[30] ,
    \interrupt_address_d1_reg[29] ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \interrupt_address_d1_reg[26] ,
    \Using_FPGA.Native_7 ,
    \interrupt_address_d1_reg[25] ,
    \Using_FPGA.Native_8 ,
    \interrupt_address_d1_reg[24] ,
    \interrupt_address_d1_reg[23] ,
    \interrupt_address_d1_reg[22] ,
    \interrupt_address_d1_reg[21] ,
    \interrupt_address_d1_reg[20] ,
    \interrupt_address_d1_reg[19] ,
    \interrupt_address_d1_reg[18] ,
    \interrupt_address_d1_reg[17] ,
    \interrupt_address_d1_reg[16] ,
    \imm_reg_reg[15] ,
    WB_Doublet_Access_reg,
    \interrupt_address_d1_reg[15] ,
    \imm_reg_reg[14] ,
    WB_Doublet_Access_reg_0,
    \interrupt_address_d1_reg[14] ,
    \imm_reg_reg[13] ,
    WB_Doublet_Access_reg_1,
    \interrupt_address_d1_reg[13] ,
    \imm_reg_reg[12] ,
    WB_Doublet_Access_reg_2,
    \interrupt_address_d1_reg[12] ,
    \imm_reg_reg[11] ,
    WB_Doublet_Access_reg_3,
    \interrupt_address_d1_reg[11] ,
    \imm_reg_reg[10] ,
    WB_Doublet_Access_reg_4,
    \interrupt_address_d1_reg[10] ,
    \imm_reg_reg[9] ,
    WB_Doublet_Access_reg_5,
    \interrupt_address_d1_reg[9] ,
    \imm_reg_reg[8] ,
    WB_Doublet_Access_reg_6,
    \interrupt_address_d1_reg[8] ,
    \imm_reg_reg[7] ,
    WB_Doublet_Access_reg_7,
    \interrupt_address_d1_reg[7] ,
    \imm_reg_reg[6] ,
    WB_Doublet_Access_reg_8,
    \interrupt_address_d1_reg[6] ,
    \imm_reg_reg[5] ,
    WB_Doublet_Access_reg_9,
    \interrupt_address_d1_reg[5] ,
    \imm_reg_reg[4] ,
    WB_Doublet_Access_reg_10,
    \interrupt_address_d1_reg[4] ,
    \imm_reg_reg[3] ,
    WB_Doublet_Access_reg_11,
    \interrupt_address_d1_reg[3] ,
    \imm_reg_reg[2] ,
    WB_Doublet_Access_reg_12,
    \interrupt_address_d1_reg[2] ,
    \imm_reg_reg[1] ,
    WB_Doublet_Access_reg_13,
    \interrupt_address_d1_reg[1] ,
    \interrupt_address_d1_reg[0] ,
    \imm_reg_reg[0] ,
    of_Take_Interrupt_hold_reg,
    \Using_FPGA.Native_9 ,
    mem_sel_msr,
    WB_Doublet_Access_reg_14,
    of_use_op2_s,
    Q,
    \mem_gpr_write_addr_reg[4] ,
    \Using_FPGA.Native_10 ,
    p_109_in,
    \ex_gpr_write_addr_reg[0] ,
    \ex_gpr_write_addr_reg[4] ,
    p_112_in,
    \wb_gpr_write_addr_reg[0] ,
    \wb_gpr_write_addr_reg[4] ,
    p_19_in,
    in,
    \Using_FPGA.Native_11 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    wb_MSR_cmb);
  output \Using_FPGA.Native_0 ;
  output [31:0]\EX_Op2_reg[0] ;
  output [0:0]of_op2_sel;
  output I017_out;
  input [0:0]out;
  input of_instr_ii_4;
  input Clk;
  input [6:0]\Using_FPGA.Native_1 ;
  input [28:0]GPR_Op2;
  input of_op2_sel_imm;
  input [15:0]WB_Byte_Access_reg;
  input [0:31]EX_Fwd;
  input [29:0]\Using_FPGA.Native_2 ;
  input \interrupt_address_d1_reg[31] ;
  input [1:0]\Using_FPGA.Native_3 ;
  input \interrupt_address_d1_reg[30] ;
  input \interrupt_address_d1_reg[29] ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \interrupt_address_d1_reg[26] ;
  input \Using_FPGA.Native_7 ;
  input \interrupt_address_d1_reg[25] ;
  input [4:0]\Using_FPGA.Native_8 ;
  input \interrupt_address_d1_reg[24] ;
  input \interrupt_address_d1_reg[23] ;
  input \interrupt_address_d1_reg[22] ;
  input \interrupt_address_d1_reg[21] ;
  input \interrupt_address_d1_reg[20] ;
  input \interrupt_address_d1_reg[19] ;
  input \interrupt_address_d1_reg[18] ;
  input \interrupt_address_d1_reg[17] ;
  input \interrupt_address_d1_reg[16] ;
  input \imm_reg_reg[15] ;
  input WB_Doublet_Access_reg;
  input \interrupt_address_d1_reg[15] ;
  input \imm_reg_reg[14] ;
  input WB_Doublet_Access_reg_0;
  input \interrupt_address_d1_reg[14] ;
  input \imm_reg_reg[13] ;
  input WB_Doublet_Access_reg_1;
  input \interrupt_address_d1_reg[13] ;
  input \imm_reg_reg[12] ;
  input WB_Doublet_Access_reg_2;
  input \interrupt_address_d1_reg[12] ;
  input \imm_reg_reg[11] ;
  input WB_Doublet_Access_reg_3;
  input \interrupt_address_d1_reg[11] ;
  input \imm_reg_reg[10] ;
  input WB_Doublet_Access_reg_4;
  input \interrupt_address_d1_reg[10] ;
  input \imm_reg_reg[9] ;
  input WB_Doublet_Access_reg_5;
  input \interrupt_address_d1_reg[9] ;
  input \imm_reg_reg[8] ;
  input WB_Doublet_Access_reg_6;
  input \interrupt_address_d1_reg[8] ;
  input \imm_reg_reg[7] ;
  input WB_Doublet_Access_reg_7;
  input \interrupt_address_d1_reg[7] ;
  input \imm_reg_reg[6] ;
  input WB_Doublet_Access_reg_8;
  input \interrupt_address_d1_reg[6] ;
  input \imm_reg_reg[5] ;
  input WB_Doublet_Access_reg_9;
  input \interrupt_address_d1_reg[5] ;
  input \imm_reg_reg[4] ;
  input WB_Doublet_Access_reg_10;
  input \interrupt_address_d1_reg[4] ;
  input \imm_reg_reg[3] ;
  input WB_Doublet_Access_reg_11;
  input \interrupt_address_d1_reg[3] ;
  input \imm_reg_reg[2] ;
  input WB_Doublet_Access_reg_12;
  input \interrupt_address_d1_reg[2] ;
  input \imm_reg_reg[1] ;
  input WB_Doublet_Access_reg_13;
  input \interrupt_address_d1_reg[1] ;
  input [0:0]\interrupt_address_d1_reg[0] ;
  input \imm_reg_reg[0] ;
  input of_Take_Interrupt_hold_reg;
  input [0:0]\Using_FPGA.Native_9 ;
  input mem_sel_msr;
  input WB_Doublet_Access_reg_14;
  input of_use_op2_s;
  input [1:0]Q;
  input \mem_gpr_write_addr_reg[4] ;
  input \Using_FPGA.Native_10 ;
  input p_109_in;
  input [1:0]\ex_gpr_write_addr_reg[0] ;
  input \ex_gpr_write_addr_reg[4] ;
  input p_112_in;
  input [1:0]\wb_gpr_write_addr_reg[0] ;
  input \wb_gpr_write_addr_reg[4] ;
  input p_19_in;
  input [0:0]in;
  input \Using_FPGA.Native_11 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input [0:0]wb_MSR_cmb;

  wire Clk;
  wire [0:31]EX_Fwd;
  wire \EX_Op2[0]_i_2_n_0 ;
  wire \EX_Op2[0]_i_3_n_0 ;
  wire \EX_Op2[0]_i_5_n_0 ;
  wire \EX_Op2[10]_i_2_n_0 ;
  wire \EX_Op2[11]_i_2_n_0 ;
  wire \EX_Op2[12]_i_2_n_0 ;
  wire \EX_Op2[13]_i_2_n_0 ;
  wire \EX_Op2[14]_i_2_n_0 ;
  wire \EX_Op2[15]_i_2_n_0 ;
  wire \EX_Op2[16]_i_2_n_0 ;
  wire \EX_Op2[17]_i_2_n_0 ;
  wire \EX_Op2[18]_i_2_n_0 ;
  wire \EX_Op2[19]_i_2_n_0 ;
  wire \EX_Op2[1]_i_2_n_0 ;
  wire \EX_Op2[1]_i_5_n_0 ;
  wire \EX_Op2[20]_i_2_n_0 ;
  wire \EX_Op2[21]_i_2_n_0 ;
  wire \EX_Op2[22]_i_2_n_0 ;
  wire \EX_Op2[23]_i_2_n_0 ;
  wire \EX_Op2[24]_i_2_n_0 ;
  wire \EX_Op2[25]_i_2_n_0 ;
  wire \EX_Op2[26]_i_2_n_0 ;
  wire \EX_Op2[28]_i_2_n_0 ;
  wire \EX_Op2[29]_i_2_n_0 ;
  wire \EX_Op2[2]_i_2_n_0 ;
  wire \EX_Op2[30]_i_2_n_0 ;
  wire \EX_Op2[31]_i_2_n_0 ;
  wire \EX_Op2[3]_i_2_n_0 ;
  wire \EX_Op2[4]_i_2_n_0 ;
  wire \EX_Op2[5]_i_2_n_0 ;
  wire \EX_Op2[6]_i_2_n_0 ;
  wire \EX_Op2[7]_i_2_n_0 ;
  wire \EX_Op2[8]_i_2_n_0 ;
  wire \EX_Op2[9]_i_2_n_0 ;
  wire [31:0]\EX_Op2_reg[0] ;
  wire [28:0]GPR_Op2;
  wire I017_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [6:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire [29:0]\Using_FPGA.Native_2 ;
  wire [1:0]\Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire [4:0]\Using_FPGA.Native_8 ;
  wire [0:0]\Using_FPGA.Native_9 ;
  wire [15:0]WB_Byte_Access_reg;
  wire WB_Doublet_Access_reg;
  wire WB_Doublet_Access_reg_0;
  wire WB_Doublet_Access_reg_1;
  wire WB_Doublet_Access_reg_10;
  wire WB_Doublet_Access_reg_11;
  wire WB_Doublet_Access_reg_12;
  wire WB_Doublet_Access_reg_13;
  wire WB_Doublet_Access_reg_14;
  wire WB_Doublet_Access_reg_2;
  wire WB_Doublet_Access_reg_3;
  wire WB_Doublet_Access_reg_4;
  wire WB_Doublet_Access_reg_5;
  wire WB_Doublet_Access_reg_6;
  wire WB_Doublet_Access_reg_7;
  wire WB_Doublet_Access_reg_8;
  wire WB_Doublet_Access_reg_9;
  wire [1:0]\ex_gpr_write_addr_reg[0] ;
  wire \ex_gpr_write_addr_reg[4] ;
  wire \imm_reg_reg[0] ;
  wire \imm_reg_reg[10] ;
  wire \imm_reg_reg[11] ;
  wire \imm_reg_reg[12] ;
  wire \imm_reg_reg[13] ;
  wire \imm_reg_reg[14] ;
  wire \imm_reg_reg[15] ;
  wire \imm_reg_reg[1] ;
  wire \imm_reg_reg[2] ;
  wire \imm_reg_reg[3] ;
  wire \imm_reg_reg[4] ;
  wire \imm_reg_reg[5] ;
  wire \imm_reg_reg[6] ;
  wire \imm_reg_reg[7] ;
  wire \imm_reg_reg[8] ;
  wire \imm_reg_reg[9] ;
  wire [0:0]in;
  wire [0:0]\interrupt_address_d1_reg[0] ;
  wire \interrupt_address_d1_reg[10] ;
  wire \interrupt_address_d1_reg[11] ;
  wire \interrupt_address_d1_reg[12] ;
  wire \interrupt_address_d1_reg[13] ;
  wire \interrupt_address_d1_reg[14] ;
  wire \interrupt_address_d1_reg[15] ;
  wire \interrupt_address_d1_reg[16] ;
  wire \interrupt_address_d1_reg[17] ;
  wire \interrupt_address_d1_reg[18] ;
  wire \interrupt_address_d1_reg[19] ;
  wire \interrupt_address_d1_reg[1] ;
  wire \interrupt_address_d1_reg[20] ;
  wire \interrupt_address_d1_reg[21] ;
  wire \interrupt_address_d1_reg[22] ;
  wire \interrupt_address_d1_reg[23] ;
  wire \interrupt_address_d1_reg[24] ;
  wire \interrupt_address_d1_reg[25] ;
  wire \interrupt_address_d1_reg[26] ;
  wire \interrupt_address_d1_reg[29] ;
  wire \interrupt_address_d1_reg[2] ;
  wire \interrupt_address_d1_reg[30] ;
  wire \interrupt_address_d1_reg[31] ;
  wire \interrupt_address_d1_reg[3] ;
  wire \interrupt_address_d1_reg[4] ;
  wire \interrupt_address_d1_reg[5] ;
  wire \interrupt_address_d1_reg[6] ;
  wire \interrupt_address_d1_reg[7] ;
  wire \interrupt_address_d1_reg[8] ;
  wire \interrupt_address_d1_reg[9] ;
  wire \mem_gpr_write_addr_reg[4] ;
  wire mem_sel_msr;
  wire of_Take_Interrupt_hold_reg;
  wire of_instr_ii_4;
  wire [0:0]of_op2_sel;
  wire [1:1]of_op2_sel__0;
  wire of_op2_sel_imm;
  wire of_read_ex_write_op2_conflict;
  wire of_read_mem_write_op2_conflict;
  wire of_read_wb_write_op2_conflict;
  wire of_use_op2_s;
  wire [0:0]out;
  wire p_109_in;
  wire p_112_in;
  wire p_19_in;
  wire [0:0]wb_MSR_cmb;
  wire [1:0]\wb_gpr_write_addr_reg[0] ;
  wire \wb_gpr_write_addr_reg[4] ;

  LUT6 #(
    .INIT(64'hBFBF3F3FFF3F3F3F)) 
    \EX_Op2[0]_i_1 
       (.I0(\interrupt_address_d1_reg[0] ),
        .I1(\EX_Op2[0]_i_2_n_0 ),
        .I2(\EX_Op2[0]_i_3_n_0 ),
        .I3(\imm_reg_reg[0] ),
        .I4(\EX_Op2[0]_i_5_n_0 ),
        .I5(of_Take_Interrupt_hold_reg),
        .O(\EX_Op2_reg[0] [31]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT5 #(
    .INIT(32'hFFFF775F)) 
    \EX_Op2[0]_i_2 
       (.I0(of_op2_sel),
        .I1(\Using_FPGA.Native_9 ),
        .I2(\Using_FPGA.Native_2 [29]),
        .I3(mem_sel_msr),
        .I4(of_op2_sel__0),
        .O(\EX_Op2[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h57DF)) 
    \EX_Op2[0]_i_3 
       (.I0(of_op2_sel__0),
        .I1(of_op2_sel),
        .I2(EX_Fwd[0]),
        .I3(WB_Doublet_Access_reg_14),
        .O(\EX_Op2[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \EX_Op2[0]_i_5 
       (.I0(of_op2_sel__0),
        .I1(of_op2_sel),
        .O(\EX_Op2[0]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[10]_i_1 
       (.I0(\EX_Op2[10]_i_2_n_0 ),
        .I1(\imm_reg_reg[10] ),
        .I2(GPR_Op2[19]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [21]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[10]_i_2 
       (.I0(WB_Doublet_Access_reg_4),
        .I1(EX_Fwd[10]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [19]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[10] ),
        .O(\EX_Op2[10]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[11]_i_1 
       (.I0(\EX_Op2[11]_i_2_n_0 ),
        .I1(\imm_reg_reg[11] ),
        .I2(GPR_Op2[18]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [20]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[11]_i_2 
       (.I0(WB_Doublet_Access_reg_3),
        .I1(EX_Fwd[11]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [18]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[11] ),
        .O(\EX_Op2[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[12]_i_1 
       (.I0(\EX_Op2[12]_i_2_n_0 ),
        .I1(\imm_reg_reg[12] ),
        .I2(GPR_Op2[17]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [19]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[12]_i_2 
       (.I0(WB_Doublet_Access_reg_2),
        .I1(EX_Fwd[12]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [17]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[12] ),
        .O(\EX_Op2[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[13]_i_1 
       (.I0(\EX_Op2[13]_i_2_n_0 ),
        .I1(\imm_reg_reg[13] ),
        .I2(GPR_Op2[16]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [18]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[13]_i_2 
       (.I0(WB_Doublet_Access_reg_1),
        .I1(EX_Fwd[13]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [16]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[13] ),
        .O(\EX_Op2[13]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[14]_i_1 
       (.I0(\EX_Op2[14]_i_2_n_0 ),
        .I1(\imm_reg_reg[14] ),
        .I2(GPR_Op2[15]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [17]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[14]_i_2 
       (.I0(WB_Doublet_Access_reg_0),
        .I1(EX_Fwd[14]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [15]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[14] ),
        .O(\EX_Op2[14]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[15]_i_1 
       (.I0(\EX_Op2[15]_i_2_n_0 ),
        .I1(\imm_reg_reg[15] ),
        .I2(GPR_Op2[14]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [16]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[15]_i_2 
       (.I0(WB_Doublet_Access_reg),
        .I1(EX_Fwd[15]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [14]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[15] ),
        .O(\EX_Op2[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[16]_i_1 
       (.I0(\EX_Op2[16]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_1 [6]),
        .I2(GPR_Op2[13]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [15]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[16]_i_2 
       (.I0(WB_Byte_Access_reg[15]),
        .I1(EX_Fwd[16]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [13]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[16] ),
        .O(\EX_Op2[16]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[17]_i_1 
       (.I0(\EX_Op2[17]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_1 [5]),
        .I2(GPR_Op2[12]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [14]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[17]_i_2 
       (.I0(WB_Byte_Access_reg[14]),
        .I1(EX_Fwd[17]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [12]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[17] ),
        .O(\EX_Op2[17]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[18]_i_1 
       (.I0(\EX_Op2[18]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_1 [4]),
        .I2(GPR_Op2[11]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [13]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[18]_i_2 
       (.I0(WB_Byte_Access_reg[13]),
        .I1(EX_Fwd[18]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [11]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[18] ),
        .O(\EX_Op2[18]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[19]_i_1 
       (.I0(\EX_Op2[19]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_1 [3]),
        .I2(GPR_Op2[10]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [12]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[19]_i_2 
       (.I0(WB_Byte_Access_reg[12]),
        .I1(EX_Fwd[19]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [10]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[19] ),
        .O(\EX_Op2[19]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[1]_i_1 
       (.I0(\EX_Op2[1]_i_2_n_0 ),
        .I1(\imm_reg_reg[1] ),
        .I2(GPR_Op2[28]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [30]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[1]_i_2 
       (.I0(WB_Doublet_Access_reg_13),
        .I1(EX_Fwd[1]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [28]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[1] ),
        .O(\EX_Op2[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \EX_Op2[1]_i_5 
       (.I0(of_op2_sel),
        .I1(of_op2_sel__0),
        .I2(of_Take_Interrupt_hold_reg),
        .O(\EX_Op2[1]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[20]_i_1 
       (.I0(\EX_Op2[20]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_8 [4]),
        .I2(GPR_Op2[9]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [11]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[20]_i_2 
       (.I0(WB_Byte_Access_reg[11]),
        .I1(EX_Fwd[20]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [9]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[20] ),
        .O(\EX_Op2[20]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[21]_i_1 
       (.I0(\EX_Op2[21]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_8 [3]),
        .I2(GPR_Op2[8]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [10]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[21]_i_2 
       (.I0(WB_Byte_Access_reg[10]),
        .I1(EX_Fwd[21]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [8]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[21] ),
        .O(\EX_Op2[21]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[22]_i_1 
       (.I0(\EX_Op2[22]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_8 [2]),
        .I2(GPR_Op2[7]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [9]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[22]_i_2 
       (.I0(WB_Byte_Access_reg[9]),
        .I1(EX_Fwd[22]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [7]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[22] ),
        .O(\EX_Op2[22]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[23]_i_1 
       (.I0(\EX_Op2[23]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_8 [1]),
        .I2(GPR_Op2[6]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [8]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[23]_i_2 
       (.I0(WB_Byte_Access_reg[8]),
        .I1(EX_Fwd[23]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [6]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[23] ),
        .O(\EX_Op2[23]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[24]_i_1 
       (.I0(\EX_Op2[24]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(GPR_Op2[5]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [7]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[24]_i_2 
       (.I0(WB_Byte_Access_reg[7]),
        .I1(EX_Fwd[24]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [5]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[24] ),
        .O(\EX_Op2[24]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[25]_i_1 
       (.I0(\EX_Op2[25]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_7 ),
        .I2(GPR_Op2[4]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [6]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[25]_i_2 
       (.I0(WB_Byte_Access_reg[6]),
        .I1(EX_Fwd[25]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [4]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[25] ),
        .O(\EX_Op2[25]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hD5DDD555)) 
    \EX_Op2[26]_i_1 
       (.I0(\EX_Op2[26]_i_2_n_0 ),
        .I1(\EX_Op2[1]_i_5_n_0 ),
        .I2(\Using_FPGA.Native_6 ),
        .I3(of_op2_sel_imm),
        .I4(GPR_Op2[3]),
        .O(\EX_Op2_reg[0] [5]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[26]_i_2 
       (.I0(WB_Byte_Access_reg[5]),
        .I1(EX_Fwd[26]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [3]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[26] ),
        .O(\EX_Op2[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hACACACACF000FFFF)) 
    \EX_Op2[27]_i_1 
       (.I0(WB_Byte_Access_reg[4]),
        .I1(EX_Fwd[27]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [2]),
        .I4(\Using_FPGA.Native_5 ),
        .I5(of_op2_sel__0),
        .O(\EX_Op2_reg[0] [4]));
  LUT5 #(
    .INIT(32'h00005400)) 
    \EX_Op2[27]_i_2 
       (.I0(of_read_ex_write_op2_conflict),
        .I1(of_read_wb_write_op2_conflict),
        .I2(of_read_mem_write_op2_conflict),
        .I3(of_use_op2_s),
        .I4(of_Take_Interrupt_hold_reg),
        .O(of_op2_sel));
  LUT5 #(
    .INIT(32'h44440040)) 
    \EX_Op2[27]_i_4 
       (.I0(of_Take_Interrupt_hold_reg),
        .I1(of_use_op2_s),
        .I2(of_read_wb_write_op2_conflict),
        .I3(of_read_mem_write_op2_conflict),
        .I4(of_read_ex_write_op2_conflict),
        .O(of_op2_sel__0));
  LUT6 #(
    .INIT(64'h9000009000000000)) 
    \EX_Op2[27]_i_5 
       (.I0(\ex_gpr_write_addr_reg[0] [1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\ex_gpr_write_addr_reg[4] ),
        .I3(\Using_FPGA.Native_10 ),
        .I4(\ex_gpr_write_addr_reg[0] [0]),
        .I5(p_112_in),
        .O(of_read_ex_write_op2_conflict));
  LUT6 #(
    .INIT(64'h9000009000000000)) 
    \EX_Op2[27]_i_6 
       (.I0(\wb_gpr_write_addr_reg[0] [1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\wb_gpr_write_addr_reg[4] ),
        .I3(\Using_FPGA.Native_10 ),
        .I4(\wb_gpr_write_addr_reg[0] [0]),
        .I5(p_19_in),
        .O(of_read_wb_write_op2_conflict));
  LUT6 #(
    .INIT(64'h9000009000000000)) 
    \EX_Op2[27]_i_7 
       (.I0(Q[1]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\mem_gpr_write_addr_reg[4] ),
        .I3(\Using_FPGA.Native_10 ),
        .I4(Q[0]),
        .I5(p_109_in),
        .O(of_read_mem_write_op2_conflict));
  LUT6 #(
    .INIT(64'hB8B8B8B800FFFFFF)) 
    \EX_Op2[28]_i_1 
       (.I0(WB_Byte_Access_reg[3]),
        .I1(of_op2_sel),
        .I2(EX_Fwd[28]),
        .I3(\EX_Op2[28]_i_2_n_0 ),
        .I4(\Using_FPGA.Native_4 ),
        .I5(of_op2_sel__0),
        .O(\EX_Op2_reg[0] [3]));
  LUT4 #(
    .INIT(16'h1BFF)) 
    \EX_Op2[28]_i_2 
       (.I0(mem_sel_msr),
        .I1(\Using_FPGA.Native_2 [1]),
        .I2(wb_MSR_cmb),
        .I3(of_op2_sel),
        .O(\EX_Op2[28]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[29]_i_1 
       (.I0(\EX_Op2[29]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_1 [2]),
        .I2(GPR_Op2[2]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [2]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[29]_i_2 
       (.I0(WB_Byte_Access_reg[2]),
        .I1(EX_Fwd[29]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_3 [1]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[29] ),
        .O(\EX_Op2[29]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[2]_i_1 
       (.I0(\EX_Op2[2]_i_2_n_0 ),
        .I1(\imm_reg_reg[2] ),
        .I2(GPR_Op2[27]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [29]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[2]_i_2 
       (.I0(WB_Doublet_Access_reg_12),
        .I1(EX_Fwd[2]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [27]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[2] ),
        .O(\EX_Op2[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[30]_i_1 
       (.I0(\EX_Op2[30]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_1 [1]),
        .I2(GPR_Op2[1]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [1]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[30]_i_2 
       (.I0(WB_Byte_Access_reg[1]),
        .I1(EX_Fwd[30]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_3 [0]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[30] ),
        .O(\EX_Op2[30]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[31]_i_1 
       (.I0(\EX_Op2[31]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_1 [0]),
        .I2(GPR_Op2[0]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [0]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[31]_i_2 
       (.I0(WB_Byte_Access_reg[0]),
        .I1(EX_Fwd[31]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [0]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[31] ),
        .O(\EX_Op2[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[3]_i_1 
       (.I0(\EX_Op2[3]_i_2_n_0 ),
        .I1(\imm_reg_reg[3] ),
        .I2(GPR_Op2[26]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [28]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[3]_i_2 
       (.I0(WB_Doublet_Access_reg_11),
        .I1(EX_Fwd[3]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [26]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[3] ),
        .O(\EX_Op2[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[4]_i_1 
       (.I0(\EX_Op2[4]_i_2_n_0 ),
        .I1(\imm_reg_reg[4] ),
        .I2(GPR_Op2[25]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [27]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[4]_i_2 
       (.I0(WB_Doublet_Access_reg_10),
        .I1(EX_Fwd[4]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [25]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[4] ),
        .O(\EX_Op2[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[5]_i_1 
       (.I0(\EX_Op2[5]_i_2_n_0 ),
        .I1(\imm_reg_reg[5] ),
        .I2(GPR_Op2[24]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [26]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[5]_i_2 
       (.I0(WB_Doublet_Access_reg_9),
        .I1(EX_Fwd[5]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [24]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[5] ),
        .O(\EX_Op2[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[6]_i_1 
       (.I0(\EX_Op2[6]_i_2_n_0 ),
        .I1(\imm_reg_reg[6] ),
        .I2(GPR_Op2[23]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [25]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[6]_i_2 
       (.I0(WB_Doublet_Access_reg_8),
        .I1(EX_Fwd[6]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [23]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[6] ),
        .O(\EX_Op2[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[7]_i_1 
       (.I0(\EX_Op2[7]_i_2_n_0 ),
        .I1(\imm_reg_reg[7] ),
        .I2(GPR_Op2[22]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [24]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[7]_i_2 
       (.I0(WB_Doublet_Access_reg_7),
        .I1(EX_Fwd[7]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [22]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[7] ),
        .O(\EX_Op2[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[8]_i_1 
       (.I0(\EX_Op2[8]_i_2_n_0 ),
        .I1(\imm_reg_reg[8] ),
        .I2(GPR_Op2[21]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [23]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[8]_i_2 
       (.I0(WB_Doublet_Access_reg_6),
        .I1(EX_Fwd[8]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [21]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[8] ),
        .O(\EX_Op2[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hDDF55555)) 
    \EX_Op2[9]_i_1 
       (.I0(\EX_Op2[9]_i_2_n_0 ),
        .I1(\imm_reg_reg[9] ),
        .I2(GPR_Op2[20]),
        .I3(of_op2_sel_imm),
        .I4(\EX_Op2[1]_i_5_n_0 ),
        .O(\EX_Op2_reg[0] [22]));
  LUT6 #(
    .INIT(64'h53530FFF535300F0)) 
    \EX_Op2[9]_i_2 
       (.I0(WB_Doublet_Access_reg_5),
        .I1(EX_Fwd[9]),
        .I2(of_op2_sel),
        .I3(\Using_FPGA.Native_2 [20]),
        .I4(of_op2_sel__0),
        .I5(\interrupt_address_d1_reg[9] ),
        .O(\EX_Op2[9]_i_2_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_4),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__115 
       (.I0(in),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_11 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I017_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_143
   (of_predecode,
    I013_out,
    out,
    of_instr_ii_3,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]of_predecode;
  output I013_out;
  input [0:0]out;
  input of_instr_ii_3;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I013_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]in;
  wire of_instr_ii_3;
  wire [0:0]of_predecode;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_3),
        .Q(of_predecode),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__113 
       (.I0(in),
        .I1(of_predecode),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I013_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_145
   (\ex_instr_reg[3] ,
    \Using_FPGA.Native_0 ,
    I0157_out,
    ex_sel_alu_i0,
    ex_load_alu_carry_reg,
    out,
    of_instr_ii_39,
    Clk,
    \Using_FPGA.Native_1 ,
    in,
    \Using_FPGA.Native_2 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    EX_ALU_Op1);
  output \ex_instr_reg[3] ;
  output \Using_FPGA.Native_0 ;
  output I0157_out;
  output ex_sel_alu_i0;
  output ex_load_alu_carry_reg;
  input [0:0]out;
  input of_instr_ii_39;
  input Clk;
  input [0:0]\Using_FPGA.Native_1 ;
  input [0:0]in;
  input \Using_FPGA.Native_2 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input EX_ALU_Op1;

  wire Clk;
  wire EX_ALU_Op1;
  wire I0157_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \ex_instr_reg[3] ;
  wire ex_load_alu_carry_reg;
  wire ex_sel_alu_i0;
  wire [0:0]in;
  wire of_instr_ii_39;
  wire [0:0]out;
  wire p_1_in89_in;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_39),
        .Q(\ex_instr_reg[3] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__103 
       (.I0(in),
        .I1(\ex_instr_reg[3] ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0157_out));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__74 
       (.I0(p_1_in89_in),
        .I1(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \Using_FPGA.Native_i_2__83 
       (.I0(\ex_instr_reg[3] ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_6 ),
        .I5(\Using_FPGA.Native_7 ),
        .O(p_1_in89_in));
  LUT4 #(
    .INIT(16'h0001)) 
    ex_load_alu_carry_i_1
       (.I0(\ex_instr_reg[3] ),
        .I1(\Using_FPGA.Native_3 ),
        .I2(\Using_FPGA.Native_7 ),
        .I3(EX_ALU_Op1),
        .O(ex_load_alu_carry_reg));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h5F1F)) 
    ex_sel_alu_i_i_1
       (.I0(\ex_instr_reg[3] ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\Using_FPGA.Native_4 ),
        .O(ex_sel_alu_i0));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_147
   (\Using_FPGA.Native_0 ,
    I09_out,
    out,
    of_instr_ii_2,
    Clk,
    in,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \Using_FPGA.Native_0 ;
  output I09_out;
  input [0:0]out;
  input of_instr_ii_2;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I09_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]in;
  wire of_instr_ii_2;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_2),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__111 
       (.I0(in),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I09_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_149
   (\Using_FPGA.Native_0 ,
    I05_out,
    out,
    of_instr_ii_1,
    Clk,
    in,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \Using_FPGA.Native_0 ;
  output I05_out;
  input [0:0]out;
  input of_instr_ii_1;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I05_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]in;
  wire of_instr_ii_1;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_1),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__109 
       (.I0(in),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I05_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_151
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \EX_Op2_reg[27] ,
    \EX_Op2_reg[27]_0 ,
    \EX_Op2_reg[27]_1 ,
    out,
    of_instr_ii_0,
    Clk,
    in,
    \Using_FPGA.Native_2 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    Q,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \wb_gpr_write_addr_reg[2] ,
    \ex_gpr_write_addr_reg[2] );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \EX_Op2_reg[27] ;
  output \EX_Op2_reg[27]_0 ;
  output \EX_Op2_reg[27]_1 ;
  input [0:0]out;
  input of_instr_ii_0;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_2 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input [2:0]Q;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input [2:0]\wb_gpr_write_addr_reg[2] ;
  input [2:0]\ex_gpr_write_addr_reg[2] ;

  wire Clk;
  wire \EX_Op2_reg[27] ;
  wire \EX_Op2_reg[27]_0 ;
  wire \EX_Op2_reg[27]_1 ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [2:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [2:0]\ex_gpr_write_addr_reg[2] ;
  wire [0:0]in;
  wire of_instr_ii_0;
  wire [0:0]out;
  wire [2:0]\wb_gpr_write_addr_reg[2] ;

  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op2[27]_i_10 
       (.I0(Q[0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(Q[2]),
        .I4(\Using_FPGA.Native_4 ),
        .I5(Q[1]),
        .O(\EX_Op2_reg[27] ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op2[27]_i_8 
       (.I0(\ex_gpr_write_addr_reg[2] [0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\ex_gpr_write_addr_reg[2] [2]),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\ex_gpr_write_addr_reg[2] [1]),
        .O(\EX_Op2_reg[27]_1 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op2[27]_i_9 
       (.I0(\wb_gpr_write_addr_reg[2] [0]),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\wb_gpr_write_addr_reg[2] [2]),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\wb_gpr_write_addr_reg[2] [1]),
        .O(\EX_Op2_reg[27]_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_0),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__107 
       (.I0(in),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_153
   (\ex_instr_reg[4] ,
    force_Val2_N_reg,
    of_pipe_ctrl,
    of_use_op2_s,
    of_op2_sel_imm,
    ex_is_multi_or_load_instr0,
    ex_is_multi_instr2_reg,
    \Using_FPGA.Native_0 ,
    I0153_out,
    p_1_in16_in,
    I1,
    \EX_Op1_reg[28] ,
    \EX_Op1_reg[29] ,
    \EX_Op1_reg[30] ,
    \EX_Op1_reg[31] ,
    \EX_Op1_reg[27] ,
    \EX_Op1_reg[26] ,
    \EX_Op1_reg[25] ,
    \EX_Op1_reg[24] ,
    \EX_Op1_reg[23] ,
    \EX_Op1_reg[22] ,
    \EX_Op1_reg[21] ,
    \EX_Op1_reg[20] ,
    \EX_Op1_reg[19] ,
    \EX_Op1_reg[18] ,
    \EX_Op1_reg[17] ,
    \EX_Op1_reg[16] ,
    \EX_Op1_reg[15] ,
    \EX_Op1_reg[14] ,
    \EX_Op1_reg[13] ,
    \EX_Op1_reg[12] ,
    \EX_Op1_reg[11] ,
    \EX_Op1_reg[10] ,
    \EX_Op1_reg[9] ,
    \EX_Op1_reg[8] ,
    \EX_Op1_reg[7] ,
    \EX_Op1_reg[6] ,
    \EX_Op1_reg[5] ,
    \EX_Op1_reg[4] ,
    \EX_Op1_reg[3] ,
    \EX_Op1_reg[2] ,
    \EX_Op1_reg[1] ,
    out,
    of_instr_ii_38,
    Clk,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    ex_is_multi_or_load_instr,
    of_read_ex_write_op2_conflict_part2,
    of_read_ex_write_op2_conflict_part1,
    of_read_mem_write_op2_conflict_part2,
    mem_is_multi_or_load_instr,
    of_read_mem_write_op2_conflict_part1,
    in,
    \Using_FPGA.Native_6 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    ex_MSR);
  output \ex_instr_reg[4] ;
  output force_Val2_N_reg;
  output [1:0]of_pipe_ctrl;
  output of_use_op2_s;
  output of_op2_sel_imm;
  output ex_is_multi_or_load_instr0;
  output ex_is_multi_instr2_reg;
  output \Using_FPGA.Native_0 ;
  output I0153_out;
  output p_1_in16_in;
  output I1;
  output \EX_Op1_reg[28] ;
  output \EX_Op1_reg[29] ;
  output \EX_Op1_reg[30] ;
  output \EX_Op1_reg[31] ;
  output \EX_Op1_reg[27] ;
  output \EX_Op1_reg[26] ;
  output \EX_Op1_reg[25] ;
  output \EX_Op1_reg[24] ;
  output \EX_Op1_reg[23] ;
  output \EX_Op1_reg[22] ;
  output \EX_Op1_reg[21] ;
  output \EX_Op1_reg[20] ;
  output \EX_Op1_reg[19] ;
  output \EX_Op1_reg[18] ;
  output \EX_Op1_reg[17] ;
  output \EX_Op1_reg[16] ;
  output \EX_Op1_reg[15] ;
  output \EX_Op1_reg[14] ;
  output \EX_Op1_reg[13] ;
  output \EX_Op1_reg[12] ;
  output \EX_Op1_reg[11] ;
  output \EX_Op1_reg[10] ;
  output \EX_Op1_reg[9] ;
  output \EX_Op1_reg[8] ;
  output \EX_Op1_reg[7] ;
  output \EX_Op1_reg[6] ;
  output \EX_Op1_reg[5] ;
  output \EX_Op1_reg[4] ;
  output \EX_Op1_reg[3] ;
  output \EX_Op1_reg[2] ;
  output \EX_Op1_reg[1] ;
  input [0:0]out;
  input of_instr_ii_38;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input ex_is_multi_or_load_instr;
  input of_read_ex_write_op2_conflict_part2;
  input of_read_ex_write_op2_conflict_part1;
  input of_read_mem_write_op2_conflict_part2;
  input mem_is_multi_or_load_instr;
  input of_read_mem_write_op2_conflict_part1;
  input [0:0]in;
  input \Using_FPGA.Native_6 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_7 ;
  input [1:0]\Using_FPGA.Native_8 ;
  input [31:0]\Using_FPGA.Native_9 ;
  input [2:0]ex_MSR;

  wire Clk;
  wire \EX_Op1_reg[10] ;
  wire \EX_Op1_reg[11] ;
  wire \EX_Op1_reg[12] ;
  wire \EX_Op1_reg[13] ;
  wire \EX_Op1_reg[14] ;
  wire \EX_Op1_reg[15] ;
  wire \EX_Op1_reg[16] ;
  wire \EX_Op1_reg[17] ;
  wire \EX_Op1_reg[18] ;
  wire \EX_Op1_reg[19] ;
  wire \EX_Op1_reg[1] ;
  wire \EX_Op1_reg[20] ;
  wire \EX_Op1_reg[21] ;
  wire \EX_Op1_reg[22] ;
  wire \EX_Op1_reg[23] ;
  wire \EX_Op1_reg[24] ;
  wire \EX_Op1_reg[25] ;
  wire \EX_Op1_reg[26] ;
  wire \EX_Op1_reg[27] ;
  wire \EX_Op1_reg[28] ;
  wire \EX_Op1_reg[29] ;
  wire \EX_Op1_reg[2] ;
  wire \EX_Op1_reg[30] ;
  wire \EX_Op1_reg[31] ;
  wire \EX_Op1_reg[3] ;
  wire \EX_Op1_reg[4] ;
  wire \EX_Op1_reg[5] ;
  wire \EX_Op1_reg[6] ;
  wire \EX_Op1_reg[7] ;
  wire \EX_Op1_reg[8] ;
  wire \EX_Op1_reg[9] ;
  wire I0153_out;
  wire I1;
  wire OF_Op1_Sel_SPR_PC0;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire [1:0]\Using_FPGA.Native_8 ;
  wire [31:0]\Using_FPGA.Native_9 ;
  wire [2:0]ex_MSR;
  wire \ex_instr_reg[4] ;
  wire ex_is_multi_instr2_reg;
  wire ex_is_multi_or_load_instr;
  wire ex_is_multi_or_load_instr0;
  wire force_Val2_N_reg;
  wire [0:0]in;
  wire mem_is_multi_or_load_instr;
  wire of_instr_ii_38;
  wire of_op2_sel_imm;
  wire [1:0]of_pipe_ctrl;
  wire of_read_ex_write_op2_conflict_part1;
  wire of_read_ex_write_op2_conflict_part2;
  wire of_read_mem_write_op2_conflict_part1;
  wire of_read_mem_write_op2_conflict_part2;
  wire of_use_op2_s;
  wire [0:0]out;
  wire p_1_in16_in;

  LUT6 #(
    .INIT(64'hFFFFFFFF04000000)) 
    \EX_Op2[1]_i_4 
       (.I0(\ex_instr_reg[4] ),
        .I1(\Using_FPGA.Native_3 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_5 ),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_1 ),
        .O(of_op2_sel_imm));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_38),
        .Q(\ex_instr_reg[4] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__102 
       (.I0(in),
        .I1(\ex_instr_reg[4] ),
        .I2(\Using_FPGA.Native_6 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0153_out));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Using_FPGA.Native_i_1__40 
       (.I0(of_use_op2_s),
        .I1(ex_is_multi_or_load_instr),
        .I2(of_read_ex_write_op2_conflict_part2),
        .I3(of_read_ex_write_op2_conflict_part1),
        .O(of_pipe_ctrl[1]));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Using_FPGA.Native_i_1__41 
       (.I0(of_use_op2_s),
        .I1(of_read_mem_write_op2_conflict_part2),
        .I2(mem_is_multi_or_load_instr),
        .I3(of_read_mem_write_op2_conflict_part1),
        .O(of_pipe_ctrl[0]));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1__77 
       (.I0(\ex_instr_reg[4] ),
        .I1(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_0 ));
  LUT5 #(
    .INIT(32'h32333333)) 
    \Using_FPGA.Native_i_2__116 
       (.I0(\ex_instr_reg[4] ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_5 ),
        .I4(\Using_FPGA.Native_4 ),
        .O(of_use_op2_s));
  LUT5 #(
    .INIT(32'hFF45BA00)) 
    \Using_FPGA.Native_i_2__119 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [3]),
        .I4(ex_MSR[2]),
        .O(\EX_Op1_reg[28] ));
  LUT5 #(
    .INIT(32'hFF45BA00)) 
    \Using_FPGA.Native_i_2__120 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [2]),
        .I4(ex_MSR[1]),
        .O(\EX_Op1_reg[29] ));
  LUT5 #(
    .INIT(32'hFF45BA00)) 
    \Using_FPGA.Native_i_2__121 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [1]),
        .I4(ex_MSR[0]),
        .O(\EX_Op1_reg[30] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__122 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [0]),
        .O(\EX_Op1_reg[31] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__123 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [4]),
        .O(\EX_Op1_reg[27] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__124 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [5]),
        .O(\EX_Op1_reg[26] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__125 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [6]),
        .O(\EX_Op1_reg[25] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__126 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [7]),
        .O(\EX_Op1_reg[24] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__127 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [8]),
        .O(\EX_Op1_reg[23] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__128 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [9]),
        .O(\EX_Op1_reg[22] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__129 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [10]),
        .O(\EX_Op1_reg[21] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__130 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [11]),
        .O(\EX_Op1_reg[20] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__131 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [12]),
        .O(\EX_Op1_reg[19] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__132 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [13]),
        .O(\EX_Op1_reg[18] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__133 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [14]),
        .O(\EX_Op1_reg[17] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__134 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [15]),
        .O(\EX_Op1_reg[16] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__135 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [16]),
        .O(\EX_Op1_reg[15] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__136 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [17]),
        .O(\EX_Op1_reg[14] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__137 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [18]),
        .O(\EX_Op1_reg[13] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__138 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [19]),
        .O(\EX_Op1_reg[12] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__139 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [20]),
        .O(\EX_Op1_reg[11] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__140 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [21]),
        .O(\EX_Op1_reg[10] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__141 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [22]),
        .O(\EX_Op1_reg[9] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__142 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [23]),
        .O(\EX_Op1_reg[8] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__143 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [24]),
        .O(\EX_Op1_reg[7] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__144 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [25]),
        .O(\EX_Op1_reg[6] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__145 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [26]),
        .O(\EX_Op1_reg[5] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__146 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [27]),
        .O(\EX_Op1_reg[4] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__147 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [28]),
        .O(\EX_Op1_reg[3] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__148 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [29]),
        .O(\EX_Op1_reg[2] ));
  LUT4 #(
    .INIT(16'hBA00)) 
    \Using_FPGA.Native_i_2__149 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [30]),
        .O(\EX_Op1_reg[1] ));
  LUT5 #(
    .INIT(32'hFF45BA00)) 
    \Using_FPGA.Native_i_3__34 
       (.I0(OF_Op1_Sel_SPR_PC0),
        .I1(\Using_FPGA.Native_8 [0]),
        .I2(ex_is_multi_instr2_reg),
        .I3(\Using_FPGA.Native_9 [31]),
        .I4(ex_MSR[1]),
        .O(I1));
  LUT4 #(
    .INIT(16'h0080)) 
    \Using_FPGA.Native_i_6__0 
       (.I0(\ex_instr_reg[4] ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Using_FPGA.Native_2 ),
        .O(OF_Op1_Sel_SPR_PC0));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    ex_is_multi_instr2_i_1
       (.I0(\ex_instr_reg[4] ),
        .I1(\Using_FPGA.Native_3 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_7 ),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Using_FPGA.Native_8 [1]),
        .O(ex_is_multi_instr2_reg));
  LUT4 #(
    .INIT(16'hBAFA)) 
    ex_is_multi_or_load_instr_i_1
       (.I0(ex_is_multi_instr2_reg),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_5 ),
        .O(ex_is_multi_or_load_instr0));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    ex_mbar_decode_cmb_inferred_i_2
       (.I0(\ex_instr_reg[4] ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FPGA.Native_5 ),
        .I4(\Using_FPGA.Native_2 ),
        .I5(\Using_FPGA.Native_3 ),
        .O(p_1_in16_in));
  LUT6 #(
    .INIT(64'hFBF5FFFFFFFFFFFF)) 
    force_Val2_N_i_1
       (.I0(\ex_instr_reg[4] ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(force_Val2_N_reg));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_155
   (\ex_instr_reg[5] ,
    \EX_ALU_Op_reg[0] ,
    EX_ALU_Op1,
    ex_enable_alu_i_reg,
    D122_out,
    \Using_FPGA.Native_0 ,
    I0149_out,
    ex_set_bip,
    p_9_in,
    ex_gpr_write_reg,
    ex_is_div_instr_I_reg,
    ex_gpr_write_dbg_reg,
    ex_load_shift_carry_reg,
    out,
    of_instr_ii_37,
    Clk,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    of_Take_Interrupt_hold_reg,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    in,
    \Using_FPGA.Native_10 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    ex_set_bip0,
    ex_gpr_write_reg_0,
    \Using_FPGA.Native_11 ,
    ex_gpr_write27_out,
    wb_exception_i_reg,
    EX_Is_Div_Instr,
    ex_branch_with_delayslot_reg,
    ex_gpr_write_dbg);
  output \ex_instr_reg[5] ;
  output [1:0]\EX_ALU_Op_reg[0] ;
  output EX_ALU_Op1;
  output ex_enable_alu_i_reg;
  output D122_out;
  output \Using_FPGA.Native_0 ;
  output I0149_out;
  output ex_set_bip;
  output p_9_in;
  output ex_gpr_write_reg;
  output ex_is_div_instr_I_reg;
  output ex_gpr_write_dbg_reg;
  output ex_load_shift_carry_reg;
  input [0:0]out;
  input of_instr_ii_37;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input [0:0]\Using_FPGA.Native_7 ;
  input of_Take_Interrupt_hold_reg;
  input [6:0]\Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input [0:0]in;
  input \Using_FPGA.Native_10 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input ex_set_bip0;
  input ex_gpr_write_reg_0;
  input \Using_FPGA.Native_11 ;
  input ex_gpr_write27_out;
  input wb_exception_i_reg;
  input EX_Is_Div_Instr;
  input ex_branch_with_delayslot_reg;
  input ex_gpr_write_dbg;

  wire Clk;
  wire D122_out;
  wire EX_ALU_Op1;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_Is_Div_Instr;
  wire I0149_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire [0:0]\Using_FPGA.Native_7 ;
  wire [6:0]\Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire ex_branch_with_delayslot_reg;
  wire ex_enable_alu_i_reg;
  wire ex_gpr_write;
  wire ex_gpr_write27_out;
  wire ex_gpr_write_dbg;
  wire ex_gpr_write_dbg_reg;
  wire ex_gpr_write_i_4_n_0;
  wire ex_gpr_write_reg;
  wire ex_gpr_write_reg_0;
  wire \ex_instr_reg[5] ;
  wire ex_is_div_instr_I0;
  wire ex_is_div_instr_I_reg;
  wire ex_load_shift_carry_reg;
  wire ex_set_bip;
  wire ex_set_bip0;
  wire [0:0]in;
  wire of_Take_Interrupt_hold_reg;
  wire of_instr_ii_37;
  wire [0:0]out;
  wire p_18_in;
  wire p_1_in21_in;
  wire p_9_in;
  wire wb_exception_i_reg;

  LUT6 #(
    .INIT(64'h5555555555555445)) 
    \EX_ALU_Op[0]_i_1 
       (.I0(EX_ALU_Op1),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(\EX_ALU_Op_reg[0] [1]));
  LUT6 #(
    .INIT(64'hAAAAABAAABAAFFAA)) 
    \EX_ALU_Op[1]_i_1 
       (.I0(EX_ALU_Op1),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\ex_instr_reg[5] ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(\EX_ALU_Op_reg[0] [0]));
  LUT3 #(
    .INIT(8'hEA)) 
    EX_CMP_Op_i_2
       (.I0(of_Take_Interrupt_hold_reg),
        .I1(p_18_in),
        .I2(\Using_FPGA.Native_8 [6]),
        .O(EX_ALU_Op1));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'h10000000)) 
    EX_CMP_Op_i_3
       (.I0(\ex_instr_reg[5] ),
        .I1(\Using_FPGA.Native_3 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_4 ),
        .I4(\Using_FPGA.Native_5 ),
        .O(p_18_in));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_37),
        .Q(\ex_instr_reg[5] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__101 
       (.I0(in),
        .I1(\ex_instr_reg[5] ),
        .I2(\Using_FPGA.Native_10 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0149_out));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    \Using_FPGA.Native_i_1__75 
       (.I0(\ex_instr_reg[5] ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\Using_FPGA.Native_9 ),
        .I4(\Using_FPGA.Native_5 ),
        .I5(\Using_FPGA.Native_7 ),
        .O(D122_out));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__78 
       (.I0(\ex_instr_reg[5] ),
        .I1(\Using_FPGA.Native_5 ),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEBFFFF)) 
    ex_enable_alu_i_i_1
       (.I0(EX_ALU_Op1),
        .I1(\Using_FPGA.Native_3 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FPGA.Native_6 ),
        .I4(\Using_FPGA.Native_7 ),
        .I5(\Using_FPGA.Native_1 ),
        .O(ex_enable_alu_i_reg));
  LUT6 #(
    .INIT(64'h0202000302020000)) 
    ex_gpr_write_dbg_i_1
       (.I0(ex_gpr_write),
        .I1(wb_exception_i_reg),
        .I2(out),
        .I3(ex_branch_with_delayslot_reg),
        .I4(\Using_FPGA.Native_11 ),
        .I5(ex_gpr_write_dbg),
        .O(ex_gpr_write_dbg_reg));
  LUT6 #(
    .INIT(64'h00000000000000E2)) 
    ex_gpr_write_i_1
       (.I0(ex_gpr_write_reg_0),
        .I1(\Using_FPGA.Native_11 ),
        .I2(ex_gpr_write),
        .I3(ex_gpr_write27_out),
        .I4(out),
        .I5(wb_exception_i_reg),
        .O(ex_gpr_write_reg));
  LUT6 #(
    .INIT(64'h000000E2E2E2E2E2)) 
    ex_gpr_write_i_2
       (.I0(ex_gpr_write_i_4_n_0),
        .I1(p_18_in),
        .I2(\Using_FPGA.Native_8 [5]),
        .I3(\Using_FPGA.Native_8 [0]),
        .I4(\Using_FPGA.Native_8 [1]),
        .I5(p_1_in21_in),
        .O(ex_gpr_write));
  LUT6 #(
    .INIT(64'hFFA5FF01FFA5FF03)) 
    ex_gpr_write_i_4
       (.I0(\ex_instr_reg[5] ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(\Using_FPGA.Native_9 ),
        .I4(\Using_FPGA.Native_5 ),
        .I5(\Using_FPGA.Native_8 [4]),
        .O(ex_gpr_write_i_4_n_0));
  LUT5 #(
    .INIT(32'h0000CC0A)) 
    ex_is_div_instr_I_i_1
       (.I0(EX_Is_Div_Instr),
        .I1(ex_is_div_instr_I0),
        .I2(ex_branch_with_delayslot_reg),
        .I3(\Using_FPGA.Native_11 ),
        .I4(out),
        .O(ex_is_div_instr_I_reg));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'h00001000)) 
    ex_is_div_instr_I_i_2
       (.I0(\ex_instr_reg[5] ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_4 ),
        .O(ex_is_div_instr_I0));
  LUT3 #(
    .INIT(8'h2A)) 
    ex_load_shift_carry_i_1
       (.I0(p_1_in21_in),
        .I1(\Using_FPGA.Native_8 [3]),
        .I2(\Using_FPGA.Native_8 [2]),
        .O(ex_load_shift_carry_reg));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    ex_load_shift_carry_i_2
       (.I0(\ex_instr_reg[5] ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_6 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(p_1_in21_in));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    ex_set_bip_i_1
       (.I0(\ex_instr_reg[5] ),
        .I1(\Using_FPGA.Native_3 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ex_set_bip0),
        .I4(\Using_FPGA.Native_4 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(ex_set_bip));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    of_read_imm_reg_ii_i_3
       (.I0(\ex_instr_reg[5] ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_4 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_5 ),
        .O(p_9_in));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_157
   (\ex_gpr_write_addr_reg[0] ,
    ex_atomic_Instruction_Pair0,
    ex_branch_with_delayslot_reg,
    \EX_Op3_reg[0] ,
    \EX_Op3_reg[15] ,
    \EX_Op3_reg[15]_0 ,
    ex_mbar_is_sleep_reg,
    I0145_out,
    ex_branch_with_delayslot_i_reg,
    out,
    of_instr_ii_36,
    Clk,
    E,
    WB_Doublet_Access_reg,
    EX_Fwd,
    \Using_FPGA.Native_0 ,
    GPR_Op3,
    WB_Doublet_Access_reg_0,
    WB_Doublet_Access_reg_1,
    WB_Doublet_Access_reg_2,
    WB_Doublet_Access_reg_3,
    WB_Doublet_Access_reg_4,
    WB_Doublet_Access_reg_5,
    WB_Doublet_Access_reg_6,
    WB_Doublet_Access_reg_7,
    WB_Doublet_Access_reg_8,
    WB_Doublet_Access_reg_9,
    WB_Doublet_Access_reg_10,
    WB_Doublet_Access_reg_11,
    WB_Doublet_Access_reg_12,
    WB_Doublet_Access_reg_13,
    WB_Doublet_Access_reg_14,
    \Using_FPGA.Native_1 ,
    Q,
    \mem_gpr_write_addr_reg[4] ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    ex_mbar_is_sleep,
    in,
    \Using_FPGA.Native_5 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \wb_gpr_write_addr_reg[0] ,
    \wb_gpr_write_addr_reg[4] ,
    \Using_FPGA.Native_10 ,
    ex_branch_with_delayslot_i,
    \wb_exception_kind_i_reg[27] ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    of_Take_Interrupt_hold_reg,
    ex_valid,
    ex_gpr_write_reg,
    \Using_FPGA.Native_14 );
  output \ex_gpr_write_addr_reg[0] ;
  output ex_atomic_Instruction_Pair0;
  output ex_branch_with_delayslot_reg;
  output [15:0]\EX_Op3_reg[0] ;
  output \EX_Op3_reg[15] ;
  output \EX_Op3_reg[15]_0 ;
  output ex_mbar_is_sleep_reg;
  output I0145_out;
  output ex_branch_with_delayslot_i_reg;
  input [0:0]out;
  input of_instr_ii_36;
  input Clk;
  input [0:0]E;
  input WB_Doublet_Access_reg;
  input [15:0]EX_Fwd;
  input [14:0]\Using_FPGA.Native_0 ;
  input [15:0]GPR_Op3;
  input WB_Doublet_Access_reg_0;
  input WB_Doublet_Access_reg_1;
  input WB_Doublet_Access_reg_2;
  input WB_Doublet_Access_reg_3;
  input WB_Doublet_Access_reg_4;
  input WB_Doublet_Access_reg_5;
  input WB_Doublet_Access_reg_6;
  input WB_Doublet_Access_reg_7;
  input WB_Doublet_Access_reg_8;
  input WB_Doublet_Access_reg_9;
  input WB_Doublet_Access_reg_10;
  input WB_Doublet_Access_reg_11;
  input WB_Doublet_Access_reg_12;
  input WB_Doublet_Access_reg_13;
  input WB_Doublet_Access_reg_14;
  input [0:0]\Using_FPGA.Native_1 ;
  input [1:0]Q;
  input \mem_gpr_write_addr_reg[4] ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input ex_mbar_is_sleep;
  input [0:0]in;
  input \Using_FPGA.Native_5 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input [0:0]\Using_FPGA.Native_9 ;
  input [1:0]\wb_gpr_write_addr_reg[0] ;
  input \wb_gpr_write_addr_reg[4] ;
  input \Using_FPGA.Native_10 ;
  input ex_branch_with_delayslot_i;
  input \wb_exception_kind_i_reg[27] ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input of_Take_Interrupt_hold_reg;
  input ex_valid;
  input ex_gpr_write_reg;
  input \Using_FPGA.Native_14 ;

  wire Clk;
  wire [0:0]E;
  wire [15:0]EX_Fwd;
  wire [15:0]\EX_Op3_reg[0] ;
  wire \EX_Op3_reg[15] ;
  wire \EX_Op3_reg[15]_0 ;
  wire [15:0]GPR_Op3;
  wire I0145_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [1:0]Q;
  wire [14:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire [0:0]\Using_FPGA.Native_9 ;
  wire WB_Doublet_Access_reg;
  wire WB_Doublet_Access_reg_0;
  wire WB_Doublet_Access_reg_1;
  wire WB_Doublet_Access_reg_10;
  wire WB_Doublet_Access_reg_11;
  wire WB_Doublet_Access_reg_12;
  wire WB_Doublet_Access_reg_13;
  wire WB_Doublet_Access_reg_14;
  wire WB_Doublet_Access_reg_2;
  wire WB_Doublet_Access_reg_3;
  wire WB_Doublet_Access_reg_4;
  wire WB_Doublet_Access_reg_5;
  wire WB_Doublet_Access_reg_6;
  wire WB_Doublet_Access_reg_7;
  wire WB_Doublet_Access_reg_8;
  wire WB_Doublet_Access_reg_9;
  wire ex_atomic_Instruction_Pair0;
  wire ex_branch_with_delayslot_i;
  wire ex_branch_with_delayslot_i_2_n_0;
  wire ex_branch_with_delayslot_i_reg;
  wire ex_branch_with_delayslot_reg;
  wire \ex_gpr_write_addr_reg[0] ;
  wire ex_gpr_write_reg;
  wire ex_mbar_is_sleep;
  wire ex_mbar_is_sleep_reg;
  wire ex_valid;
  wire [0:0]in;
  wire \mem_gpr_write_addr_reg[4] ;
  wire of_Take_Interrupt_hold_reg;
  wire of_instr_ii_36;
  wire of_read_mem_write_op3_conflict;
  wire of_read_wb_write_op3_conflict;
  wire [0:0]out;
  wire \wb_exception_kind_i_reg[27] ;
  wire [1:0]\wb_gpr_write_addr_reg[0] ;
  wire \wb_gpr_write_addr_reg[4] ;

  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[0]_i_1 
       (.I0(WB_Doublet_Access_reg_14),
        .I1(EX_Fwd[15]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[15]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [15]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT5 #(
    .INIT(32'h7F7F7F00)) 
    \EX_Op3[0]_i_2 
       (.I0(ex_valid),
        .I1(ex_gpr_write_reg),
        .I2(\Using_FPGA.Native_14 ),
        .I3(of_read_mem_write_op3_conflict),
        .I4(of_read_wb_write_op3_conflict),
        .O(\EX_Op3_reg[15] ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT5 #(
    .INIT(32'h80FF8080)) 
    \EX_Op3[0]_i_3 
       (.I0(ex_valid),
        .I1(ex_gpr_write_reg),
        .I2(\Using_FPGA.Native_14 ),
        .I3(of_read_mem_write_op3_conflict),
        .I4(of_read_wb_write_op3_conflict),
        .O(\EX_Op3_reg[15]_0 ));
  LUT6 #(
    .INIT(64'h9000009000000000)) 
    \EX_Op3[0]_i_5 
       (.I0(Q[1]),
        .I1(\ex_gpr_write_addr_reg[0] ),
        .I2(\mem_gpr_write_addr_reg[4] ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(Q[0]),
        .I5(\Using_FPGA.Native_3 ),
        .O(of_read_mem_write_op3_conflict));
  LUT6 #(
    .INIT(64'h9000009000000000)) 
    \EX_Op3[0]_i_6 
       (.I0(\wb_gpr_write_addr_reg[0] [1]),
        .I1(\ex_gpr_write_addr_reg[0] ),
        .I2(\wb_gpr_write_addr_reg[4] ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\wb_gpr_write_addr_reg[0] [0]),
        .I5(\Using_FPGA.Native_10 ),
        .O(of_read_wb_write_op3_conflict));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[10]_i_1 
       (.I0(WB_Doublet_Access_reg_4),
        .I1(EX_Fwd[5]),
        .I2(\Using_FPGA.Native_0 [5]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[5]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [5]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[11]_i_1 
       (.I0(WB_Doublet_Access_reg_3),
        .I1(EX_Fwd[4]),
        .I2(\Using_FPGA.Native_0 [4]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[4]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [4]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[12]_i_1 
       (.I0(WB_Doublet_Access_reg_2),
        .I1(EX_Fwd[3]),
        .I2(\Using_FPGA.Native_0 [3]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[3]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [3]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[13]_i_1 
       (.I0(WB_Doublet_Access_reg_1),
        .I1(EX_Fwd[2]),
        .I2(\Using_FPGA.Native_0 [2]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[2]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [2]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[14]_i_1 
       (.I0(WB_Doublet_Access_reg_0),
        .I1(EX_Fwd[1]),
        .I2(\Using_FPGA.Native_0 [1]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[1]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [1]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[15]_i_1 
       (.I0(WB_Doublet_Access_reg),
        .I1(EX_Fwd[0]),
        .I2(\Using_FPGA.Native_0 [0]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[0]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [0]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[1]_i_1 
       (.I0(WB_Doublet_Access_reg_13),
        .I1(EX_Fwd[14]),
        .I2(\Using_FPGA.Native_0 [14]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[14]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [14]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[2]_i_1 
       (.I0(WB_Doublet_Access_reg_12),
        .I1(EX_Fwd[13]),
        .I2(\Using_FPGA.Native_0 [13]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[13]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [13]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[3]_i_1 
       (.I0(WB_Doublet_Access_reg_11),
        .I1(EX_Fwd[12]),
        .I2(\Using_FPGA.Native_0 [12]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[12]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [12]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[4]_i_1 
       (.I0(WB_Doublet_Access_reg_10),
        .I1(EX_Fwd[11]),
        .I2(\Using_FPGA.Native_0 [11]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[11]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [11]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[5]_i_1 
       (.I0(WB_Doublet_Access_reg_9),
        .I1(EX_Fwd[10]),
        .I2(\Using_FPGA.Native_0 [10]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[10]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [10]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[6]_i_1 
       (.I0(WB_Doublet_Access_reg_8),
        .I1(EX_Fwd[9]),
        .I2(\Using_FPGA.Native_0 [9]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[9]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [9]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[7]_i_1 
       (.I0(WB_Doublet_Access_reg_7),
        .I1(EX_Fwd[8]),
        .I2(\Using_FPGA.Native_0 [8]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[8]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [8]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[8]_i_1 
       (.I0(WB_Doublet_Access_reg_6),
        .I1(EX_Fwd[7]),
        .I2(\Using_FPGA.Native_0 [7]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[7]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [7]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[9]_i_1 
       (.I0(WB_Doublet_Access_reg_5),
        .I1(EX_Fwd[6]),
        .I2(\Using_FPGA.Native_0 [6]),
        .I3(\EX_Op3_reg[15] ),
        .I4(GPR_Op3[6]),
        .I5(\EX_Op3_reg[15]_0 ),
        .O(\EX_Op3_reg[0] [6]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_36),
        .Q(\ex_gpr_write_addr_reg[0] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__100 
       (.I0(in),
        .I1(\ex_gpr_write_addr_reg[0] ),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0145_out));
  LUT2 #(
    .INIT(4'hE)) 
    ex_atomic_Instruction_Pair_i_1
       (.I0(ex_branch_with_delayslot_reg),
        .I1(E),
        .O(ex_atomic_Instruction_Pair0));
  LUT5 #(
    .INIT(32'h00000080)) 
    ex_branch_with_delayslot_i_1
       (.I0(ex_branch_with_delayslot_i_2_n_0),
        .I1(\Using_FPGA.Native_11 ),
        .I2(\Using_FPGA.Native_12 ),
        .I3(\Using_FPGA.Native_13 ),
        .I4(of_Take_Interrupt_hold_reg),
        .O(ex_branch_with_delayslot_reg));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    ex_branch_with_delayslot_i_2
       (.I0(\ex_gpr_write_addr_reg[0] ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_7 ),
        .I3(\Using_FPGA.Native_8 ),
        .I4(\Using_FPGA.Native_9 ),
        .O(ex_branch_with_delayslot_i_2_n_0));
  LUT5 #(
    .INIT(32'h000000E2)) 
    ex_branch_with_delayslot_i_i_1
       (.I0(ex_branch_with_delayslot_i),
        .I1(\Using_FPGA.Native_4 ),
        .I2(ex_branch_with_delayslot_reg),
        .I3(out),
        .I4(\wb_exception_kind_i_reg[27] ),
        .O(ex_branch_with_delayslot_i_reg));
  LUT3 #(
    .INIT(8'hB8)) 
    ex_mbar_is_sleep_cmb_inferred_i_1
       (.I0(\ex_gpr_write_addr_reg[0] ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(ex_mbar_is_sleep),
        .O(ex_mbar_is_sleep_reg));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_159
   (\ex_gpr_write_addr_reg[1] ,
    I0141_out,
    out,
    of_instr_ii_35,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \ex_gpr_write_addr_reg[1] ;
  output I0141_out;
  input [0:0]out;
  input of_instr_ii_35;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I0141_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \ex_gpr_write_addr_reg[1] ;
  wire [0:0]in;
  wire of_instr_ii_35;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_35),
        .Q(\ex_gpr_write_addr_reg[1] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__99 
       (.I0(in),
        .I1(\ex_gpr_write_addr_reg[1] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0141_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_161
   (\ex_gpr_write_addr_reg[2] ,
    ex_gpr_write27_out,
    I0137_out,
    out,
    of_instr_ii_34,
    Clk,
    \Using_FPGA.Native_0 ,
    D,
    in,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \ex_gpr_write_addr_reg[2] ;
  output ex_gpr_write27_out;
  output I0137_out;
  input [0:0]out;
  input of_instr_ii_34;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input [3:0]D;
  input [0:0]in;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [3:0]D;
  wire I0137_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_gpr_write27_out;
  wire \ex_gpr_write_addr_reg[2] ;
  wire [0:0]in;
  wire of_instr_ii_34;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_34),
        .Q(\ex_gpr_write_addr_reg[2] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__98 
       (.I0(in),
        .I1(\ex_gpr_write_addr_reg[2] ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0137_out));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    ex_gpr_write_i_3
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\ex_gpr_write_addr_reg[2] ),
        .I2(D[3]),
        .I3(D[0]),
        .I4(D[1]),
        .I5(D[2]),
        .O(ex_gpr_write27_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_163
   (D,
    I0133_out,
    out,
    of_instr_ii_33,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I0133_out;
  input [0:0]out;
  input of_instr_ii_33;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I0133_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]in;
  wire of_instr_ii_33;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_33),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__97 
       (.I0(in),
        .I1(D),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0133_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_165
   (\imm_reg_reg[15] ,
    E,
    Dbg_Clean_Stop_reg,
    use_Reg_Neg_S_reg,
    mem_jump_taken_reg,
    out,
    of_Valid_II,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    ex_delayslot_Instr2,
    ex_jump_nodelay_reg,
    \Using_FPGA.Native_5 ,
    \wb_exception_kind_i_reg[27] ,
    ex_branch_with_delayslot,
    ex_jump_q);
  output \imm_reg_reg[15] ;
  output [0:0]E;
  output Dbg_Clean_Stop_reg;
  output use_Reg_Neg_S_reg;
  output mem_jump_taken_reg;
  input [0:0]out;
  input of_Valid_II;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input ex_delayslot_Instr2;
  input ex_jump_nodelay_reg;
  input \Using_FPGA.Native_5 ;
  input \wb_exception_kind_i_reg[27] ;
  input ex_branch_with_delayslot;
  input ex_jump_q;

  wire Clk;
  wire Dbg_Clean_Stop_reg;
  wire [0:0]E;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire ex_branch_with_delayslot;
  wire ex_delayslot_Instr2;
  wire ex_jump_nodelay_reg;
  wire ex_jump_q;
  wire \imm_reg_reg[15] ;
  wire mem_jump_taken_reg;
  wire of_Valid_II;
  wire [0:0]out;
  wire use_Reg_Neg_S_reg;
  wire \wb_exception_kind_i_reg[27] ;

  LUT4 #(
    .INIT(16'h888F)) 
    Dbg_Clean_Stop_i_1
       (.I0(ex_delayslot_Instr2),
        .I1(ex_jump_nodelay_reg),
        .I2(E),
        .I3(\Using_FPGA.Native_5 ),
        .O(Dbg_Clean_Stop_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_Valid_II),
        .Q(\imm_reg_reg[15] ),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__178 
       (.I0(\imm_reg_reg[15] ),
        .I1(\wb_exception_kind_i_reg[27] ),
        .O(use_Reg_Neg_S_reg));
  LUT3 #(
    .INIT(8'h0D)) 
    \Using_FPGA.Native_i_1__180 
       (.I0(ex_branch_with_delayslot),
        .I1(\imm_reg_reg[15] ),
        .I2(ex_jump_q),
        .O(mem_jump_taken_reg));
  LUT6 #(
    .INIT(64'h0000000000020000)) 
    \imm_reg[0]_i_1 
       (.I0(\imm_reg_reg[15] ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(E));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_195
   (D,
    I0125_out,
    out,
    of_pc_ii_31,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I0125_out;
  input [0:0]out;
  input of_pc_ii_31;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I0125_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_31;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_31),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__0 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I0125_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_197
   (D,
    I085_out,
    out,
    of_pc_ii_21,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I085_out;
  input [0:0]out;
  input of_pc_ii_21;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I085_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_21;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_21),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__10 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I085_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_199
   (D,
    I081_out,
    out,
    of_pc_ii_20,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I081_out;
  input [0:0]out;
  input of_pc_ii_20;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I081_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_20;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_20),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__11 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I081_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_201
   (D,
    I077_out,
    out,
    of_pc_ii_19,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I077_out;
  input [0:0]out;
  input of_pc_ii_19;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I077_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_19;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_19),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__12 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I077_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_203
   (D,
    I073_out,
    out,
    of_pc_ii_18,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I073_out;
  input [0:0]out;
  input of_pc_ii_18;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I073_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_18;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_18),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__13 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I073_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_205
   (D,
    I069_out,
    out,
    of_pc_ii_17,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I069_out;
  input [0:0]out;
  input of_pc_ii_17;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I069_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_17;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_17),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__14 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I069_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_207
   (D,
    I065_out,
    out,
    of_pc_ii_16,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I065_out;
  input [0:0]out;
  input of_pc_ii_16;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I065_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_16;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_16),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__15 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I065_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_209
   (D,
    I061_out,
    out,
    of_pc_ii_15,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I061_out;
  input [0:0]out;
  input of_pc_ii_15;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I061_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_15;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_15),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__16 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I061_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_211
   (D,
    I057_out,
    out,
    of_pc_ii_14,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I057_out;
  input [0:0]out;
  input of_pc_ii_14;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I057_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_14;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_14),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__17 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I057_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_213
   (D,
    I053_out,
    out,
    of_pc_ii_13,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I053_out;
  input [0:0]out;
  input of_pc_ii_13;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I053_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_13;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_13),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__18 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I053_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_215
   (D,
    I049_out,
    out,
    of_pc_ii_12,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I049_out;
  input [0:0]out;
  input of_pc_ii_12;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I049_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_12;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_12),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__19 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I049_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_217
   (D,
    I0121_out,
    out,
    of_pc_ii_30,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I0121_out;
  input [0:0]out;
  input of_pc_ii_30;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I0121_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_30;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_30),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__1 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I0121_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_219
   (D,
    I045_out,
    out,
    of_pc_ii_11,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I045_out;
  input [0:0]out;
  input of_pc_ii_11;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I045_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_11;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_11),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__20 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I045_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_221
   (D,
    I041_out,
    out,
    of_pc_ii_10,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I041_out;
  input [0:0]out;
  input of_pc_ii_10;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I041_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_10;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_10),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__21 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I041_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_223
   (D,
    I037_out,
    out,
    of_pc_ii_9,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I037_out;
  input [0:0]out;
  input of_pc_ii_9;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I037_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_9;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_9),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__22 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I037_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_225
   (D,
    I033_out,
    out,
    of_pc_ii_8,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I033_out;
  input [0:0]out;
  input of_pc_ii_8;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I033_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_8;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_8),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__23 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I033_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_227
   (D,
    I029_out,
    out,
    of_pc_ii_7,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I029_out;
  input [0:0]out;
  input of_pc_ii_7;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I029_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_7;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_7),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__24 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I029_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_229
   (D,
    I025_out,
    out,
    of_pc_ii_6,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I025_out;
  input [0:0]out;
  input of_pc_ii_6;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I025_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_6;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_6),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__25 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I025_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_231
   (D,
    I021_out,
    out,
    of_pc_ii_5,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I021_out;
  input [0:0]out;
  input of_pc_ii_5;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I021_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_5;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_5),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__26 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I021_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_233
   (D,
    I017_out,
    out,
    of_pc_ii_4,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I017_out;
  input [0:0]out;
  input of_pc_ii_4;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I017_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_4;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_4),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__27 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I017_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_235
   (D,
    I013_out,
    out,
    of_pc_ii_3,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I013_out;
  input [0:0]out;
  input of_pc_ii_3;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I013_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_3;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_3),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__28 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I013_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_237
   (D,
    I09_out,
    out,
    of_pc_ii_2,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I09_out;
  input [0:0]out;
  input of_pc_ii_2;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I09_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_2;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_2),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__29 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I09_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_239
   (D,
    I0117_out,
    out,
    of_pc_ii_29,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I0117_out;
  input [0:0]out;
  input of_pc_ii_29;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I0117_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_29;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_29),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__2 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I0117_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_241
   (D,
    I05_out,
    out,
    of_pc_ii_1,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I05_out;
  input [0:0]out;
  input of_pc_ii_1;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I05_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_1;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_1),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__30 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I05_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_243
   (D,
    I0,
    out,
    of_pc_ii_0,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I0;
  input [0:0]out;
  input of_pc_ii_0;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I0;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_0;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_0),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__31 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I0));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_245
   (D,
    I0113_out,
    out,
    of_pc_ii_28,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I0113_out;
  input [0:0]out;
  input of_pc_ii_28;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I0113_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_28;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_28),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__3 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I0113_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_247
   (D,
    I0109_out,
    out,
    of_pc_ii_27,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I0109_out;
  input [0:0]out;
  input of_pc_ii_27;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I0109_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_27;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_27),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__4 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I0109_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_249
   (D,
    I0105_out,
    out,
    of_pc_ii_26,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I0105_out;
  input [0:0]out;
  input of_pc_ii_26;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I0105_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_26;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_26),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__5 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I0105_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_251
   (D,
    I0101_out,
    out,
    of_pc_ii_25,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I0101_out;
  input [0:0]out;
  input of_pc_ii_25;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I0101_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_25;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_25),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__6 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I0101_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_253
   (D,
    I097_out,
    out,
    of_pc_ii_24,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I097_out;
  input [0:0]out;
  input of_pc_ii_24;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I097_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_24;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_24),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__7 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I097_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_255
   (D,
    I093_out,
    out,
    of_pc_ii_23,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I093_out;
  input [0:0]out;
  input of_pc_ii_23;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I093_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_23;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_23),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__8 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I093_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_257
   (D,
    I089_out,
    out,
    of_pc_ii_22,
    Clk,
    Q,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]D;
  output I089_out;
  input [0:0]out;
  input of_pc_ii_22;
  input Clk;
  input [0:0]Q;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire [0:0]D;
  wire I089_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire of_pc_ii_22;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_pc_ii_22),
        .Q(D),
        .R(out));
  LUT4 #(
    .INIT(16'hBF80)) 
    \Using_FPGA.Native_i_1__9 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(D),
        .O(I089_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_261
   (\WB_MEM_Result_reg[28] ,
    D,
    out,
    \Using_FPGA.Native_0 ,
    Clk,
    \Using_FPGA.Native_1 ,
    mem_sel_msr);
  output \WB_MEM_Result_reg[28] ;
  output [0:0]D;
  input [0:0]out;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input [0:0]\Using_FPGA.Native_1 ;
  input mem_sel_msr;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \WB_MEM_Result_reg[28] ;
  wire mem_sel_msr;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(\WB_MEM_Result_reg[28] ),
        .R(out));
  LUT3 #(
    .INIT(8'hAC)) 
    \WB_MEM_Result[28]_i_1 
       (.I0(\WB_MEM_Result_reg[28] ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(mem_sel_msr),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_262
   (\WB_MEM_Result_reg[29] ,
    D,
    out,
    \Using_FPGA.Native_0 ,
    Clk,
    mem_ex_result,
    mem_sel_msr,
    \Using_FPGA.Native_1 );
  output \WB_MEM_Result_reg[29] ;
  output [1:0]D;
  input [0:0]out;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input [0:0]mem_ex_result;
  input mem_sel_msr;
  input [0:0]\Using_FPGA.Native_1 ;

  wire Clk;
  wire [1:0]D;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \WB_MEM_Result_reg[29] ;
  wire [0:0]mem_ex_result;
  wire mem_sel_msr;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(\WB_MEM_Result_reg[29] ),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \WB_MEM_Result[0]_i_2 
       (.I0(\WB_MEM_Result_reg[29] ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(mem_sel_msr),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \WB_MEM_Result[29]_i_1 
       (.I0(\WB_MEM_Result_reg[29] ),
        .I1(mem_ex_result),
        .I2(mem_sel_msr),
        .O(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_263
   (mem_MSR,
    D,
    \Using_Fast_Interrupt.wb_ie_rising_reg ,
    out,
    \Using_FPGA.Native_0 ,
    Clk,
    mem_ex_result,
    mem_sel_msr,
    \wb_MSR_i_reg[30] );
  output [0:0]mem_MSR;
  output [0:0]D;
  output \Using_Fast_Interrupt.wb_ie_rising_reg ;
  input [0:0]out;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input [0:0]mem_ex_result;
  input mem_sel_msr;
  input \wb_MSR_i_reg[30] ;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_Fast_Interrupt.wb_ie_rising_reg ;
  wire [0:0]mem_MSR;
  wire [0:0]mem_ex_result;
  wire mem_sel_msr;
  wire [0:0]out;
  wire \wb_MSR_i_reg[30] ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(mem_MSR),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_Fast_Interrupt.wb_ie_rising_i_1 
       (.I0(mem_MSR),
        .I1(\wb_MSR_i_reg[30] ),
        .O(\Using_Fast_Interrupt.wb_ie_rising_reg ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \WB_MEM_Result[30]_i_1 
       (.I0(mem_MSR),
        .I1(mem_ex_result),
        .I2(mem_sel_msr),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_264
   (ex_MSR,
    \Using_FPGA.Native_0 ,
    out,
    \Using_FPGA.Native_1 ,
    Clk,
    mem_valid_reg,
    \Using_FPGA.Native_2 ,
    restore_wb_msr_to_ex);
  output [0:0]ex_MSR;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input mem_valid_reg;
  input \Using_FPGA.Native_2 ;
  input restore_wb_msr_to_ex;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]ex_MSR;
  wire mem_valid_reg;
  wire [0:0]out;
  wire restore_wb_msr_to_ex;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(ex_MSR),
        .R(out));
  LUT4 #(
    .INIT(16'hF0B8)) 
    \Using_FPGA.Native_i_1__83 
       (.I0(ex_MSR),
        .I1(mem_valid_reg),
        .I2(\Using_FPGA.Native_2 ),
        .I3(restore_wb_msr_to_ex),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_265
   (of_MSR,
    out,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]of_MSR;
  input [0:0]out;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]of_MSR;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(of_MSR),
        .R(out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_266
   (ex_MSR,
    \Using_FPGA.Native_0 ,
    out,
    \Using_FPGA.Native_1 ,
    Clk,
    mem_valid_reg,
    \Using_FPGA.Native_2 ,
    restore_wb_msr_to_ex);
  output [0:0]ex_MSR;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input mem_valid_reg;
  input \Using_FPGA.Native_2 ;
  input restore_wb_msr_to_ex;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]ex_MSR;
  wire mem_valid_reg;
  wire [0:0]out;
  wire restore_wb_msr_to_ex;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(ex_MSR),
        .R(out));
  LUT4 #(
    .INIT(16'hF0B8)) 
    \Using_FPGA.Native_i_1__82 
       (.I0(ex_MSR),
        .I1(mem_valid_reg),
        .I2(\Using_FPGA.Native_2 ),
        .I3(restore_wb_msr_to_ex),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_267
   (ex_MSR,
    \Using_FPGA.Native_0 ,
    out,
    ex_set_MSR_IE_instr_reg,
    Clk,
    mem_valid_reg,
    mem_MSR,
    restore_wb_msr_to_ex);
  output [0:0]ex_MSR;
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input ex_set_MSR_IE_instr_reg;
  input Clk;
  input mem_valid_reg;
  input [0:0]mem_MSR;
  input restore_wb_msr_to_ex;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_MSR;
  wire ex_set_MSR_IE_instr_reg;
  wire [0:0]mem_MSR;
  wire mem_valid_reg;
  wire [0:0]out;
  wire restore_wb_msr_to_ex;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_set_MSR_IE_instr_reg),
        .Q(ex_MSR),
        .R(out));
  LUT4 #(
    .INIT(16'h00B8)) 
    \Using_FPGA.Native_i_1__81 
       (.I0(ex_MSR),
        .I1(mem_valid_reg),
        .I2(mem_MSR),
        .I3(restore_wb_msr_to_ex),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_268
   (of_MSR,
    ex_Interrupt_Brk_combo_reg,
    out,
    ex_set_MSR_IE_instr_reg,
    Clk,
    \control_reg_reg[3] ,
    Dbg_Disable,
    Interrupt,
    \Using_FPGA.Native_0 ,
    of_Take_Interrupt);
  output [0:0]of_MSR;
  output ex_Interrupt_Brk_combo_reg;
  input [0:0]out;
  input ex_set_MSR_IE_instr_reg;
  input Clk;
  input [0:0]\control_reg_reg[3] ;
  input Dbg_Disable;
  input Interrupt;
  input [0:0]\Using_FPGA.Native_0 ;
  input of_Take_Interrupt;

  wire Clk;
  wire Dbg_Disable;
  wire Interrupt;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire [0:0]\control_reg_reg[3] ;
  wire ex_Interrupt_Brk_combo_reg;
  wire ex_set_MSR_IE_instr_reg;
  wire [0:0]of_MSR;
  wire of_Take_Interrupt;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_set_MSR_IE_instr_reg),
        .Q(of_MSR),
        .R(out));
  LUT6 #(
    .INIT(64'h000000000000D000)) 
    ex_Interrupt_Brk_combo_i_2
       (.I0(\control_reg_reg[3] ),
        .I1(Dbg_Disable),
        .I2(of_MSR),
        .I3(Interrupt),
        .I4(\Using_FPGA.Native_0 ),
        .I5(of_Take_Interrupt),
        .O(ex_Interrupt_Brk_combo_reg));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_72
   (\status_reg_reg[25] ,
    I_AS,
    IFetch,
    if_fetch_for_timing_optimization1,
    if_fetch_in_progress_reg,
    out,
    sel_input_iii_3,
    Clk,
    p_0_in44_in,
    IB_Ready,
    if_fetch_in_progress,
    ex_delayslot_Instr2,
    if_sel_input,
    in00,
    LOCKSTEP_Master_Out);
  output \status_reg_reg[25] ;
  output I_AS;
  output [0:0]IFetch;
  output if_fetch_for_timing_optimization1;
  output if_fetch_in_progress_reg;
  input [0:0]out;
  input sel_input_iii_3;
  input Clk;
  input p_0_in44_in;
  input IB_Ready;
  input if_fetch_in_progress;
  input ex_delayslot_Instr2;
  input [0:0]if_sel_input;
  input in00;
  input [0:0]LOCKSTEP_Master_Out;

  wire Clk;
  wire IB_Ready;
  wire [0:0]IFetch;
  wire I_AS;
  wire [0:0]LOCKSTEP_Master_Out;
  wire ex_delayslot_Instr2;
  wire if_fetch_for_timing_optimization1;
  wire if_fetch_in_progress;
  wire if_fetch_in_progress_reg;
  wire [0:0]if_sel_input;
  wire in00;
  wire [0:0]out;
  wire p_0_in44_in;
  wire sel_input_iii_3;
  wire \status_reg_reg[25] ;

  LUT5 #(
    .INIT(32'hEEEFAAAA)) 
    IFetch_INST_0
       (.I0(if_fetch_in_progress),
        .I1(ex_delayslot_Instr2),
        .I2(\status_reg_reg[25] ),
        .I3(if_sel_input),
        .I4(in00),
        .O(IFetch));
  LUT6 #(
    .INIT(64'h8A008A008A008A8A)) 
    I_AS_INST_0
       (.I0(p_0_in44_in),
        .I1(IB_Ready),
        .I2(if_fetch_in_progress),
        .I3(ex_delayslot_Instr2),
        .I4(\status_reg_reg[25] ),
        .I5(if_sel_input),
        .O(I_AS));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(sel_input_iii_3),
        .Q(\status_reg_reg[25] ),
        .R(out));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1__32 
       (.I0(\status_reg_reg[25] ),
        .I1(if_sel_input),
        .O(if_fetch_for_timing_optimization1));
  LUT5 #(
    .INIT(32'h000000F2)) 
    if_fetch_in_progress_i_1
       (.I0(if_fetch_in_progress),
        .I1(IB_Ready),
        .I2(I_AS),
        .I3(out),
        .I4(LOCKSTEP_Master_Out),
        .O(if_fetch_in_progress_reg));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_73
   (if_sel_input,
    addr,
    out,
    sel_input_iii_2,
    Clk,
    \Using_FPGA.Native_0 );
  output [0:0]if_sel_input;
  output [0:0]addr;
  input [0:0]out;
  input sel_input_iii_2;
  input Clk;
  input \Using_FPGA.Native_0 ;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]addr;
  wire [0:0]if_sel_input;
  wire [0:0]out;
  wire sel_input_iii_2;

  LUT2 #(
    .INIT(4'h2)) 
    \PC_Buffer_reg[3][0]_srl4_i_2 
       (.I0(if_sel_input),
        .I1(\Using_FPGA.Native_0 ),
        .O(addr));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(sel_input_iii_2),
        .Q(if_sel_input),
        .R(out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_75
   (if_sel_input,
    out,
    sel_input_iii_1,
    Clk);
  output [0:0]if_sel_input;
  input [0:0]out;
  input sel_input_iii_1;
  input Clk;

  wire Clk;
  wire [0:0]if_sel_input;
  wire [0:0]out;
  wire sel_input_iii_1;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(sel_input_iii_1),
        .Q(if_sel_input),
        .R(out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_77
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    I13_out,
    I17_out,
    I111_out,
    I115_out,
    I119_out,
    I123_out,
    I127_out,
    I131_out,
    I135_out,
    I143_out,
    I147_out,
    I151_out,
    I155_out,
    I159_out,
    I163_out,
    I167_out,
    I171_out,
    I175_out,
    I179_out,
    I183_out,
    I187_out,
    I191_out,
    I195_out,
    I199_out,
    I1103_out,
    I1107_out,
    I1111_out,
    I1115_out,
    I1119_out,
    I1123_out,
    I1127_out,
    I1131_out,
    I1135_out,
    I1139_out,
    I1143_out,
    I1147_out,
    I1151_out,
    I1155_out,
    I1159_out,
    I1163_out,
    I1167_out,
    out,
    sel_input_i_1,
    Clk,
    in,
    \Using_FPGA.Native_2 );
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output I13_out;
  output I17_out;
  output I111_out;
  output I115_out;
  output I119_out;
  output I123_out;
  output I127_out;
  output I131_out;
  output I135_out;
  output I143_out;
  output I147_out;
  output I151_out;
  output I155_out;
  output I159_out;
  output I163_out;
  output I167_out;
  output I171_out;
  output I175_out;
  output I179_out;
  output I183_out;
  output I187_out;
  output I191_out;
  output I195_out;
  output I199_out;
  output I1103_out;
  output I1107_out;
  output I1111_out;
  output I1115_out;
  output I1119_out;
  output I1123_out;
  output I1127_out;
  output I1131_out;
  output I1135_out;
  output I1139_out;
  output I1143_out;
  output I1147_out;
  output I1151_out;
  output I1155_out;
  output I1159_out;
  output I1163_out;
  output I1167_out;
  input [0:0]out;
  input sel_input_i_1;
  input Clk;
  input [31:0]in;
  input [41:0]\Using_FPGA.Native_2 ;

  wire Clk;
  wire I1103_out;
  wire I1107_out;
  wire I1111_out;
  wire I1115_out;
  wire I1119_out;
  wire I111_out;
  wire I1123_out;
  wire I1127_out;
  wire I1131_out;
  wire I1135_out;
  wire I1139_out;
  wire I1143_out;
  wire I1147_out;
  wire I1151_out;
  wire I1155_out;
  wire I1159_out;
  wire I115_out;
  wire I1163_out;
  wire I1167_out;
  wire I119_out;
  wire I123_out;
  wire I127_out;
  wire I131_out;
  wire I135_out;
  wire I13_out;
  wire I143_out;
  wire I147_out;
  wire I151_out;
  wire I155_out;
  wire I159_out;
  wire I163_out;
  wire I167_out;
  wire I171_out;
  wire I175_out;
  wire I179_out;
  wire I17_out;
  wire I183_out;
  wire I187_out;
  wire I191_out;
  wire I195_out;
  wire I199_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [41:0]\Using_FPGA.Native_2 ;
  wire [31:0]in;
  wire [0:0]out;
  wire sel_input_i_1;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(sel_input_i_1),
        .Q(\Using_FPGA.Native_0 ),
        .R(out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__39 
       (.I0(in[0]),
        .I1(\Using_FPGA.Native_2 [0]),
        .I2(\Using_FPGA.Native_0 ),
        .O(\Using_FPGA.Native_1 ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__40 
       (.I0(in[1]),
        .I1(\Using_FPGA.Native_2 [1]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I13_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__41 
       (.I0(in[2]),
        .I1(\Using_FPGA.Native_2 [2]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I17_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__42 
       (.I0(in[3]),
        .I1(\Using_FPGA.Native_2 [3]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I111_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__43 
       (.I0(in[4]),
        .I1(\Using_FPGA.Native_2 [4]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I115_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__44 
       (.I0(in[5]),
        .I1(\Using_FPGA.Native_2 [5]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I119_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__45 
       (.I0(in[6]),
        .I1(\Using_FPGA.Native_2 [6]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I123_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__46 
       (.I0(in[7]),
        .I1(\Using_FPGA.Native_2 [7]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I127_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__47 
       (.I0(in[8]),
        .I1(\Using_FPGA.Native_2 [8]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I131_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__48 
       (.I0(in[9]),
        .I1(\Using_FPGA.Native_2 [9]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I135_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__50 
       (.I0(in[10]),
        .I1(\Using_FPGA.Native_2 [10]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I143_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__51 
       (.I0(in[11]),
        .I1(\Using_FPGA.Native_2 [11]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I147_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__52 
       (.I0(in[12]),
        .I1(\Using_FPGA.Native_2 [12]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I151_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__53 
       (.I0(in[13]),
        .I1(\Using_FPGA.Native_2 [13]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I155_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__54 
       (.I0(in[14]),
        .I1(\Using_FPGA.Native_2 [14]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I159_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__55 
       (.I0(in[15]),
        .I1(\Using_FPGA.Native_2 [15]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I163_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__56 
       (.I0(in[16]),
        .I1(\Using_FPGA.Native_2 [16]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I167_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__57 
       (.I0(in[17]),
        .I1(\Using_FPGA.Native_2 [17]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I171_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__58 
       (.I0(in[18]),
        .I1(\Using_FPGA.Native_2 [18]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I175_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__59 
       (.I0(in[19]),
        .I1(\Using_FPGA.Native_2 [19]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I179_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__60 
       (.I0(in[20]),
        .I1(\Using_FPGA.Native_2 [20]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I183_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__61 
       (.I0(in[0]),
        .I1(\Using_FPGA.Native_2 [21]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I187_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__62 
       (.I0(in[1]),
        .I1(\Using_FPGA.Native_2 [22]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I191_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__63 
       (.I0(in[2]),
        .I1(\Using_FPGA.Native_2 [23]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I195_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__64 
       (.I0(in[3]),
        .I1(\Using_FPGA.Native_2 [24]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I199_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__65 
       (.I0(in[4]),
        .I1(\Using_FPGA.Native_2 [25]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1103_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__66 
       (.I0(in[5]),
        .I1(\Using_FPGA.Native_2 [26]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1107_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__67 
       (.I0(in[6]),
        .I1(\Using_FPGA.Native_2 [27]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1111_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__68 
       (.I0(in[7]),
        .I1(\Using_FPGA.Native_2 [28]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1115_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__69 
       (.I0(in[8]),
        .I1(\Using_FPGA.Native_2 [29]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1119_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__70 
       (.I0(in[9]),
        .I1(\Using_FPGA.Native_2 [30]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1123_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__71 
       (.I0(in[21]),
        .I1(\Using_FPGA.Native_2 [31]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1127_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__72 
       (.I0(in[22]),
        .I1(\Using_FPGA.Native_2 [32]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1131_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__73 
       (.I0(in[23]),
        .I1(\Using_FPGA.Native_2 [33]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1135_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__74 
       (.I0(in[24]),
        .I1(\Using_FPGA.Native_2 [34]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1139_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__75 
       (.I0(in[25]),
        .I1(\Using_FPGA.Native_2 [35]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1143_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__76 
       (.I0(in[26]),
        .I1(\Using_FPGA.Native_2 [36]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1147_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__77 
       (.I0(in[27]),
        .I1(\Using_FPGA.Native_2 [37]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1151_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__78 
       (.I0(in[28]),
        .I1(\Using_FPGA.Native_2 [38]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1155_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__79 
       (.I0(in[29]),
        .I1(\Using_FPGA.Native_2 [39]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1159_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__80 
       (.I0(in[30]),
        .I1(\Using_FPGA.Native_2 [40]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1163_out));
  LUT3 #(
    .INIT(8'hAC)) 
    \Using_FPGA.Native_i_2__81 
       (.I0(in[31]),
        .I1(\Using_FPGA.Native_2 [41]),
        .I2(\Using_FPGA.Native_0 ),
        .O(I1167_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_79
   (\ex_instr_reg[0] ,
    I0169_out,
    \imm_reg_reg[15] ,
    EX_CMP_Op_reg,
    EX_Unsigned_Op_reg,
    EX_Use_Carry_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    out,
    of_instr_ii_42,
    Clk,
    in,
    \Using_FPGA.Native_2 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    EX_ALU_Op1,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    ex_delayslot_Instr2,
    ex_jump_nodelay_reg);
  output \ex_instr_reg[0] ;
  output I0169_out;
  output \imm_reg_reg[15] ;
  output EX_CMP_Op_reg;
  output EX_Unsigned_Op_reg;
  output EX_Use_Carry_reg;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input [0:0]out;
  input of_instr_ii_42;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_2 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input EX_ALU_Op1;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input ex_delayslot_Instr2;
  input ex_jump_nodelay_reg;

  wire Clk;
  wire EX_ALU_Op1;
  wire EX_CMP_Op_reg;
  wire EX_Unsigned_Op_reg;
  wire EX_Use_Carry_reg;
  wire I0169_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire ex_delayslot_Instr2;
  wire \ex_instr_reg[0] ;
  wire ex_jump_nodelay_reg;
  wire \imm_reg_reg[15] ;
  wire [0:0]in;
  wire of_instr_ii_42;
  wire [0:0]out;

  LUT5 #(
    .INIT(32'h00000010)) 
    EX_CMP_Op_i_1
       (.I0(\ex_instr_reg[0] ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Using_FPGA.Native_6 ),
        .I4(EX_ALU_Op1),
        .O(EX_CMP_Op_reg));
  LUT5 #(
    .INIT(32'h00000010)) 
    EX_Unsigned_Op_i_1
       (.I0(\ex_instr_reg[0] ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_7 ),
        .I3(\Using_FPGA.Native_6 ),
        .I4(EX_ALU_Op1),
        .O(EX_Unsigned_Op_reg));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    EX_Use_Carry_i_1
       (.I0(\ex_instr_reg[0] ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_8 ),
        .I3(EX_ALU_Op1),
        .O(EX_Use_Carry_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_42),
        .Q(\ex_instr_reg[0] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__106 
       (.I0(in),
        .I1(\ex_instr_reg[0] ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0169_out));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'h0888)) 
    \Using_FPGA.Native_i_1__174 
       (.I0(\ex_instr_reg[0] ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(ex_delayslot_Instr2),
        .I3(ex_jump_nodelay_reg),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \Using_FPGA.Native_i_1__181 
       (.I0(\ex_instr_reg[0] ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.Native_i_2__82 
       (.I0(\ex_instr_reg[0] ),
        .I1(\Using_FPGA.Native_3 ),
        .O(\imm_reg_reg[15] ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_81
   (\ex_gpr_write_addr_reg[4] ,
    I0129_out,
    \EX_Op3_reg[15] ,
    \EX_Op3_reg[15]_0 ,
    \EX_Op3_reg[15]_1 ,
    out,
    of_instr_ii_32,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    Q,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \wb_gpr_write_addr_reg[2] ,
    \ex_gpr_write_addr_reg[2] );
  output \ex_gpr_write_addr_reg[4] ;
  output I0129_out;
  output \EX_Op3_reg[15] ;
  output \EX_Op3_reg[15]_0 ;
  output \EX_Op3_reg[15]_1 ;
  input [0:0]out;
  input of_instr_ii_32;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input [2:0]Q;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [2:0]\wb_gpr_write_addr_reg[2] ;
  input [2:0]\ex_gpr_write_addr_reg[2] ;

  wire Clk;
  wire \EX_Op3_reg[15] ;
  wire \EX_Op3_reg[15]_0 ;
  wire \EX_Op3_reg[15]_1 ;
  wire I0129_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [2:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [2:0]\ex_gpr_write_addr_reg[2] ;
  wire \ex_gpr_write_addr_reg[4] ;
  wire [0:0]in;
  wire of_instr_ii_32;
  wire [0:0]out;
  wire [2:0]\wb_gpr_write_addr_reg[2] ;

  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op3[0]_i_10 
       (.I0(\wb_gpr_write_addr_reg[2] [0]),
        .I1(\ex_gpr_write_addr_reg[4] ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\wb_gpr_write_addr_reg[2] [2]),
        .I4(\Using_FPGA.Native_2 ),
        .I5(\wb_gpr_write_addr_reg[2] [1]),
        .O(\EX_Op3_reg[15]_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op3[0]_i_7 
       (.I0(\ex_gpr_write_addr_reg[2] [0]),
        .I1(\ex_gpr_write_addr_reg[4] ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\ex_gpr_write_addr_reg[2] [2]),
        .I4(\Using_FPGA.Native_2 ),
        .I5(\ex_gpr_write_addr_reg[2] [1]),
        .O(\EX_Op3_reg[15]_1 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op3[0]_i_8 
       (.I0(Q[0]),
        .I1(\ex_gpr_write_addr_reg[4] ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(Q[2]),
        .I4(\Using_FPGA.Native_2 ),
        .I5(Q[1]),
        .O(\EX_Op3_reg[15] ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_32),
        .Q(\ex_gpr_write_addr_reg[4] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__96 
       (.I0(in),
        .I1(\ex_gpr_write_addr_reg[4] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0129_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_83
   (\ex_instr_reg[11] ,
    I0125_out,
    out,
    of_instr_ii_31,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \ex_instr_reg[11] ;
  output I0125_out;
  input [0:0]out;
  input of_instr_ii_31;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I0125_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \ex_instr_reg[11] ;
  wire [0:0]in;
  wire of_instr_ii_31;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_31),
        .Q(\ex_instr_reg[11] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__126 
       (.I0(in),
        .I1(\ex_instr_reg[11] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0125_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_85
   (\ex_instr_reg[12] ,
    I0121_out,
    ex_set_bip0,
    out,
    of_instr_ii_30,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output \ex_instr_reg[12] ;
  output I0121_out;
  output ex_set_bip0;
  input [0:0]out;
  input of_instr_ii_30;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_1 ;
  input [0:0]\Using_FPGA.Native_2 ;

  wire Clk;
  wire I0121_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \ex_instr_reg[12] ;
  wire ex_set_bip0;
  wire [0:0]in;
  wire of_instr_ii_30;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_30),
        .Q(\ex_instr_reg[12] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__124 
       (.I0(in),
        .I1(\ex_instr_reg[12] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0121_out));
  LUT3 #(
    .INIT(8'h08)) 
    ex_set_bip_i_2
       (.I0(\ex_instr_reg[12] ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .O(ex_set_bip0));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_87
   (\ex_instr_reg[13] ,
    I0117_out,
    out,
    of_instr_ii_29,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \ex_instr_reg[13] ;
  output I0117_out;
  input [0:0]out;
  input of_instr_ii_29;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I0117_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \ex_instr_reg[13] ;
  wire [0:0]in;
  wire of_instr_ii_29;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_29),
        .Q(\ex_instr_reg[13] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__122 
       (.I0(in),
        .I1(\ex_instr_reg[13] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0117_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_89
   (\ex_instr_reg[14] ,
    ex_mbar_decode_reg,
    I0113_out,
    out,
    of_instr_ii_28,
    Clk,
    p_1_in16_in,
    \Using_FPGA.Native_0 ,
    ex_mbar_decode,
    ex_branch_with_delayslot_reg,
    in,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]\ex_instr_reg[14] ;
  output ex_mbar_decode_reg;
  output I0113_out;
  input [0:0]out;
  input of_instr_ii_28;
  input Clk;
  input p_1_in16_in;
  input \Using_FPGA.Native_0 ;
  input ex_mbar_decode;
  input ex_branch_with_delayslot_reg;
  input [0:0]in;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I0113_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_branch_with_delayslot_reg;
  wire [0:0]\ex_instr_reg[14] ;
  wire ex_mbar_decode;
  wire ex_mbar_decode_reg;
  wire [0:0]in;
  wire of_instr_ii_28;
  wire [0:0]out;
  wire p_1_in16_in;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_28),
        .Q(\ex_instr_reg[14] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__120 
       (.I0(in),
        .I1(\ex_instr_reg[14] ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0113_out));
  LUT5 #(
    .INIT(32'h80808F80)) 
    ex_mbar_decode_cmb_inferred_i_1
       (.I0(\ex_instr_reg[14] ),
        .I1(p_1_in16_in),
        .I2(\Using_FPGA.Native_0 ),
        .I3(ex_mbar_decode),
        .I4(ex_branch_with_delayslot_reg),
        .O(ex_mbar_decode_reg));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_91
   (\ex_instr_reg[15] ,
    I0109_out,
    out,
    of_instr_ii_27,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output [0:0]\ex_instr_reg[15] ;
  output I0109_out;
  input [0:0]out;
  input of_instr_ii_27;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I0109_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\ex_instr_reg[15] ;
  wire [0:0]in;
  wire of_instr_ii_27;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_27),
        .Q(\ex_instr_reg[15] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__118 
       (.I0(in),
        .I1(\ex_instr_reg[15] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0109_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_93
   (\ex_instr_reg[16] ,
    \EX_Op2_reg[0] ,
    \EX_Op2_reg[15] ,
    \EX_Op2_reg[14] ,
    \EX_Op2_reg[13] ,
    \EX_Op2_reg[12] ,
    \EX_Op2_reg[11] ,
    \EX_Op2_reg[10] ,
    \EX_Op2_reg[9] ,
    \EX_Op2_reg[8] ,
    \EX_Op2_reg[7] ,
    \EX_Op2_reg[6] ,
    \EX_Op2_reg[5] ,
    \EX_Op2_reg[4] ,
    \EX_Op2_reg[3] ,
    \EX_Op2_reg[2] ,
    \EX_Op2_reg[1] ,
    I0105_out,
    out,
    of_instr_ii_26,
    Clk,
    \imm_reg_reg[0] ,
    of_read_imm_reg_ii_reg,
    GPR_Op2,
    of_op2_sel_imm,
    of_read_imm_reg_ii,
    \wb_exception_kind_i_reg[27] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    Dbg_Disable,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg_0 );
  output \ex_instr_reg[16] ;
  output \EX_Op2_reg[0] ;
  output \EX_Op2_reg[15] ;
  output \EX_Op2_reg[14] ;
  output \EX_Op2_reg[13] ;
  output \EX_Op2_reg[12] ;
  output \EX_Op2_reg[11] ;
  output \EX_Op2_reg[10] ;
  output \EX_Op2_reg[9] ;
  output \EX_Op2_reg[8] ;
  output \EX_Op2_reg[7] ;
  output \EX_Op2_reg[6] ;
  output \EX_Op2_reg[5] ;
  output \EX_Op2_reg[4] ;
  output \EX_Op2_reg[3] ;
  output \EX_Op2_reg[2] ;
  output \EX_Op2_reg[1] ;
  output I0105_out;
  input [0:0]out;
  input of_instr_ii_26;
  input Clk;
  input [15:0]\imm_reg_reg[0] ;
  input of_read_imm_reg_ii_reg;
  input [0:0]GPR_Op2;
  input of_op2_sel_imm;
  input of_read_imm_reg_ii;
  input \wb_exception_kind_i_reg[27] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input Dbg_Disable;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg_0 ;

  wire Clk;
  wire Dbg_Disable;
  wire \EX_Op2_reg[0] ;
  wire \EX_Op2_reg[10] ;
  wire \EX_Op2_reg[11] ;
  wire \EX_Op2_reg[12] ;
  wire \EX_Op2_reg[13] ;
  wire \EX_Op2_reg[14] ;
  wire \EX_Op2_reg[15] ;
  wire \EX_Op2_reg[1] ;
  wire \EX_Op2_reg[2] ;
  wire \EX_Op2_reg[3] ;
  wire \EX_Op2_reg[4] ;
  wire \EX_Op2_reg[5] ;
  wire \EX_Op2_reg[6] ;
  wire \EX_Op2_reg[7] ;
  wire \EX_Op2_reg[8] ;
  wire \EX_Op2_reg[9] ;
  wire [0:0]GPR_Op2;
  wire I0105_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg_0 ;
  wire \Using_FPGA.Native_0 ;
  wire \ex_instr_reg[16] ;
  wire [15:0]\imm_reg_reg[0] ;
  wire [0:0]in;
  wire of_instr_ii_26;
  wire of_op2_sel_imm;
  wire of_read_imm_reg_ii;
  wire of_read_imm_reg_ii_reg;
  wire [0:0]out;
  wire \wb_exception_kind_i_reg[27] ;

  LUT5 #(
    .INIT(32'hB8B8FF00)) 
    \EX_Op2[0]_i_4 
       (.I0(\imm_reg_reg[0] [15]),
        .I1(of_read_imm_reg_ii_reg),
        .I2(\ex_instr_reg[16] ),
        .I3(GPR_Op2),
        .I4(of_op2_sel_imm),
        .O(\EX_Op2_reg[0] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[10]_i_3 
       (.I0(\imm_reg_reg[0] [5]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[10] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[11]_i_3 
       (.I0(\imm_reg_reg[0] [4]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[11] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[12]_i_3 
       (.I0(\imm_reg_reg[0] [3]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[12] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[13]_i_3 
       (.I0(\imm_reg_reg[0] [2]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[13] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[14]_i_3 
       (.I0(\imm_reg_reg[0] [1]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[14] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[15]_i_3 
       (.I0(\imm_reg_reg[0] [0]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[15] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[1]_i_3 
       (.I0(\imm_reg_reg[0] [14]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[1] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[2]_i_3 
       (.I0(\imm_reg_reg[0] [13]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[2] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[3]_i_3 
       (.I0(\imm_reg_reg[0] [12]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[3] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[4]_i_3 
       (.I0(\imm_reg_reg[0] [11]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[4] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[5]_i_3 
       (.I0(\imm_reg_reg[0] [10]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[5] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[6]_i_3 
       (.I0(\imm_reg_reg[0] [9]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[6] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[7]_i_3 
       (.I0(\imm_reg_reg[0] [8]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[7] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[8]_i_3 
       (.I0(\imm_reg_reg[0] [7]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[8] ));
  LUT6 #(
    .INIT(64'hBBBBFFFB88880008)) 
    \EX_Op2[9]_i_3 
       (.I0(\imm_reg_reg[0] [6]),
        .I1(of_read_imm_reg_ii),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(Dbg_Disable),
        .I5(\ex_instr_reg[16] ),
        .O(\EX_Op2_reg[9] ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_26),
        .Q(\ex_instr_reg[16] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__116 
       (.I0(in),
        .I1(\ex_instr_reg[16] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg_0 ),
        .O(I0105_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_95
   (\ex_instr_reg[17] ,
    of_op1_sel_spr,
    I0101_out,
    out,
    of_instr_ii_25,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    in,
    \Using_FPGA.Native_5 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \ex_instr_reg[17] ;
  output of_op1_sel_spr;
  output I0101_out;
  input [0:0]out;
  input of_instr_ii_25;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input [0:0]in;
  input \Using_FPGA.Native_5 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I0101_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \ex_instr_reg[17] ;
  wire [0:0]in;
  wire of_instr_ii_25;
  wire of_op1_sel_spr;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_25),
        .Q(\ex_instr_reg[17] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__114 
       (.I0(in),
        .I1(\ex_instr_reg[17] ),
        .I2(\Using_FPGA.Native_5 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I0101_out));
  LUT6 #(
    .INIT(64'h000000FF00000004)) 
    \Using_FPGA.Native_i_1__39 
       (.I0(\ex_instr_reg[17] ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(\Using_FPGA.Native_3 ),
        .I5(\Using_FPGA.Native_4 ),
        .O(of_op1_sel_spr));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_97
   (\ex_instr_reg[18] ,
    I097_out,
    out,
    of_instr_ii_24,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \ex_instr_reg[18] ;
  output I097_out;
  input [0:0]out;
  input of_instr_ii_24;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I097_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \ex_instr_reg[18] ;
  wire [0:0]in;
  wire of_instr_ii_24;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_24),
        .Q(\ex_instr_reg[18] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__112 
       (.I0(in),
        .I1(\ex_instr_reg[18] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I097_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module system_microblaze_0_0_MB_FDR_99
   (\ex_instr_reg[19] ,
    I093_out,
    out,
    of_instr_ii_23,
    Clk,
    in,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output \ex_instr_reg[19] ;
  output I093_out;
  input [0:0]out;
  input of_instr_ii_23;
  input Clk;
  input [0:0]in;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire Clk;
  wire I093_out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \ex_instr_reg[19] ;
  wire [0:0]in;
  wire of_instr_ii_23;
  wire [0:0]out;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(of_instr_ii_23),
        .Q(\ex_instr_reg[19] ),
        .R(out));
  LUT4 #(
    .INIT(16'hACCC)) 
    \Using_FPGA.Native_i_1__110 
       (.I0(in),
        .I1(\ex_instr_reg[19] ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I093_out));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module system_microblaze_0_0_MB_FDS
   (\Using_FPGA.Native_0 ,
    out,
    sel_input_i_0,
    Clk);
  output \Using_FPGA.Native_0 ;
  input [0:0]out;
  input sel_input_i_0;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]out;
  wire sel_input_i_0;

  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(sel_input_i_0),
        .Q(\Using_FPGA.Native_0 ),
        .S(out));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module system_microblaze_0_0_MB_LUT4
   (S,
    Q,
    \EX_ALU_Op_reg[0] ,
    EX_CMP_Op_reg,
    alu_AddSub_1);
  output S;
  input [0:0]Q;
  input [0:0]\EX_ALU_Op_reg[0] ;
  input EX_CMP_Op_reg;
  input alu_AddSub_1;

  wire [0:0]\EX_ALU_Op_reg[0] ;
  wire EX_CMP_Op_reg;
  wire [0:0]Q;
  wire S;
  wire alu_AddSub_1;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFA0A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] ),
        .I2(EX_CMP_Op_reg),
        .I3(alu_AddSub_1),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6
   (sel_input_iii_3,
    if_sel_input,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_1 ,
    \wb_exception_kind_i_reg[27] );
  output sel_input_iii_3;
  input [0:0]if_sel_input;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_1 ;
  input \wb_exception_kind_i_reg[27] ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]if_sel_input;
  wire sel_input_iii_3;
  wire \wb_exception_kind_i_reg[27] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00000000CCF0AACC)) 
    \Using_FPGA.Native 
       (.I0(if_sel_input),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\wb_exception_kind_i_reg[27] ),
        .O(sel_input_iii_3));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[9] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[9] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[9] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[9] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_451
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[8] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[8] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[8] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[8] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_453
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[7] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[7] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[7] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[7] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_455
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[6] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[6] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[6] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[6] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_457
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[5] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[5] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[5] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[5] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_459
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[4] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[4] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[4] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[4] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_461
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[3] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[3] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[3] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[3] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_463
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[31] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[31] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[31] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[31] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_465
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[30] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[30] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[30] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[30] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_467
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[2] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[2] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[2] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[2] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_469
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[29] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[29] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[29] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[29] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_471
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[28] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[28] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[28] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[28] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_473
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[27] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[27] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[27] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[27] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_475
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[26] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[26] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[26] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[26] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_477
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[25] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[25] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[25] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[25] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_479
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[24] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[24] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[24] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[24] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_481
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[23] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[23] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[23] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[23] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_483
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[22] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[22] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[22] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[22] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_485
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[21] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[21] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[21] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[21] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_487
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[20] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[20] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[20] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[20] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_489
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[1] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[1] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[1] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[1] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_491
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[19] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[19] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[19] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[19] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_493
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[18] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[18] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[18] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[18] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_495
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[17] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[17] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[17] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[17] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_497
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[16] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[16] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[16] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[16] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_499
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[15] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[15] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[15] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[15] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_501
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[14] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[14] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[14] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[14] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_503
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[13] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[13] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[13] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[13] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_505
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[12] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[12] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[12] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[12] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_507
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[11] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[11] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[11] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[11] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2_509
   (DI,
    S,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[10] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[10] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire DI;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[10] ;
  wire [0:0]Q;
  wire S;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[10] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized1
   (muxcy_di,
    muxcy_sel,
    mem_daxi_exclusive_failed);
  output muxcy_di;
  output muxcy_sel;
  input mem_daxi_exclusive_failed;

  wire mem_daxi_exclusive_failed;
  wire muxcy_di;
  wire muxcy_sel;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h00FF00FFFEFEFEFE)) 
    \Using_FPGA.Native 
       (.I0(mem_daxi_exclusive_failed),
        .I1(1'b0),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(muxcy_di),
        .O6(muxcy_sel));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized11
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized13
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized15
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized17
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized19
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized21
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized23
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized25
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized27
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized29
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized3
   (\Using_FPGA.Native_0 ,
    Y,
    I041_out,
    I139_out,
    in,
    Instr,
    LOCKSTEP_Master_Out,
    \New_Instr_Reg_TCK_reg[3] ,
    \New_Instr_Reg_TCK_reg[1] ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_3 );
  output \Using_FPGA.Native_0 ;
  output [0:0]Y;
  output I041_out;
  output I139_out;
  output [0:0]in;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;
  input \New_Instr_Reg_TCK_reg[3] ;
  input \New_Instr_Reg_TCK_reg[1] ;
  input [0:0]\Using_FPGA.Native_1 ;
  input [1:0]\Using_FPGA.Native_2 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input [0:0]\Using_FPGA.Native_3 ;

  wire I041_out;
  wire I139_out;
  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire \New_Instr_Reg_TCK_reg[1] ;
  wire \New_Instr_Reg_TCK_reg[3] ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire [1:0]\Using_FPGA.Native_2 ;
  wire [0:0]\Using_FPGA.Native_3 ;
  wire [0:0]Y;
  wire [0:0]in;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(\Using_FPGA.Native_0 ),
        .O6(Y));
  LUT6 #(
    .INIT(64'h8080FF00FF00FF00)) 
    \Using_FPGA.Native_i_1__84 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\New_Instr_Reg_TCK_reg[3] ),
        .I2(\New_Instr_Reg_TCK_reg[1] ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Using_FPGA.Native_2 [0]),
        .I5(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(I041_out));
  LUT5 #(
    .INIT(32'h8080FF00)) 
    \Using_FPGA.Native_i_2__49 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\New_Instr_Reg_TCK_reg[3] ),
        .I2(\New_Instr_Reg_TCK_reg[1] ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(\Using_FPGA.Native_2 [1]),
        .O(I139_out));
  LUT3 #(
    .INIT(8'h80)) 
    \ibuffer_reg[3][10]_srl4_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\New_Instr_Reg_TCK_reg[3] ),
        .I2(\New_Instr_Reg_TCK_reg[1] ),
        .O(in));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized31
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized33
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized35
   (wb_PC_II_0,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[31] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_0;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[31] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[31] ;
  wire wb_PC_II_0;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[31] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_0),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized37
   (wb_PC_II_1,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[30] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_1;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[30] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[30] ;
  wire wb_PC_II_1;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[30] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_1),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized39
   (wb_PC_II_2,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \wb_exception_kind_i_reg[28]_0 ,
    \mem_pc_i_reg[29] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_2;
  output S;
  input DI;
  input \wb_exception_kind_i_reg[28] ;
  input [0:0]\wb_exception_kind_i_reg[28]_0 ;
  input [0:0]\mem_pc_i_reg[29] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[29] ;
  wire wb_PC_II_2;
  wire \wb_exception_kind_i_reg[28] ;
  wire [0:0]\wb_exception_kind_i_reg[28]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(\wb_exception_kind_i_reg[28] ),
        .I2(\wb_exception_kind_i_reg[28]_0 ),
        .I3(\mem_pc_i_reg[29] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_2),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized41
   (wb_PC_II_3,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[28] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_3;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[28] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[28] ;
  wire wb_PC_II_3;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[28] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_3),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized43
   (wb_PC_II_4,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[27] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_4;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[27] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[27] ;
  wire wb_PC_II_4;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[27] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_4),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized45
   (wb_PC_II_5,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[26] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_5;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[26] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[26] ;
  wire wb_PC_II_5;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[26] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_5),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized47
   (wb_PC_II_6,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[25] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_6;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[25] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[25] ;
  wire wb_PC_II_6;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[25] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_6),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized49
   (wb_PC_II_7,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[24] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_7;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[24] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[24] ;
  wire wb_PC_II_7;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[24] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_7),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized5
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized51
   (wb_PC_II_8,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[23] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_8;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[23] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[23] ;
  wire wb_PC_II_8;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[23] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_8),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized53
   (wb_PC_II_9,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[22] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_9;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[22] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[22] ;
  wire wb_PC_II_9;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[22] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_9),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized55
   (wb_PC_II_10,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[21] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_10;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[21] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[21] ;
  wire wb_PC_II_10;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[21] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_10),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized57
   (wb_PC_II_11,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[20] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_11;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[20] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[20] ;
  wire wb_PC_II_11;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[20] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_11),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized59
   (wb_PC_II_12,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[19] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_12;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[19] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[19] ;
  wire wb_PC_II_12;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[19] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_12),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized61
   (wb_PC_II_13,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[18] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_13;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[18] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[18] ;
  wire wb_PC_II_13;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[18] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_13),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized63
   (wb_PC_II_14,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[17] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_14;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[17] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[17] ;
  wire wb_PC_II_14;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[17] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_14),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized65
   (wb_PC_II_15,
    S,
    DI,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[16] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_15;
  output S;
  input DI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[16] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire DI;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire [0:0]\mem_pc_i_reg[16] ;
  wire wb_PC_II_15;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(DI),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[16] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_15),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized67
   (wb_PC_II_16,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[15] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_16;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[15] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[15] ;
  wire wb_PC_II_16;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[15] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_16),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized69
   (wb_PC_II_17,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[14] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_17;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[14] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[14] ;
  wire wb_PC_II_17;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[14] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_17),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized7
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized71
   (wb_PC_II_18,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[13] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_18;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[13] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[13] ;
  wire wb_PC_II_18;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[13] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_18),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized73
   (wb_PC_II_19,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[12] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_19;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[12] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[12] ;
  wire wb_PC_II_19;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[12] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_19),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized75
   (wb_PC_II_20,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[11] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_20;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[11] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[11] ;
  wire wb_PC_II_20;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[11] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_20),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized77
   (wb_PC_II_21,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[10] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_21;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[10] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[10] ;
  wire wb_PC_II_21;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[10] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_21),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized79
   (wb_PC_II_22,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[9] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_22;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[9] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[9] ;
  wire wb_PC_II_22;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[9] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_22),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized81
   (wb_PC_II_23,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[8] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_23;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[8] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[8] ;
  wire wb_PC_II_23;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[8] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_23),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized83
   (wb_PC_II_24,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[7] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_24;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[7] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[7] ;
  wire wb_PC_II_24;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[7] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_24),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized85
   (wb_PC_II_25,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[6] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_25;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[6] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[6] ;
  wire wb_PC_II_25;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[6] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_25),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized87
   (wb_PC_II_26,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[5] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_26;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[5] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[5] ;
  wire wb_PC_II_26;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[5] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_26),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized89
   (wb_PC_II_27,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[4] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_27;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[4] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[4] ;
  wire wb_PC_II_27;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[4] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_27),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized9
   (Y,
    Instr,
    LOCKSTEP_Master_Out);
  output [1:0]Y;
  input [1:0]Instr;
  input [2:0]LOCKSTEP_Master_Out;

  wire [1:0]Instr;
  wire [2:0]LOCKSTEP_Master_Out;
  wire [1:0]Y;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFF00F0F0CCCCAAAA)) 
    \Using_FPGA.Native 
       (.I0(Instr[1]),
        .I1(LOCKSTEP_Master_Out[1]),
        .I2(Instr[0]),
        .I3(LOCKSTEP_Master_Out[0]),
        .I4(LOCKSTEP_Master_Out[2]),
        .I5(1'b1),
        .O5(Y[1]),
        .O6(Y[0]));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized91
   (wb_PC_II_28,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[3] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_28;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[3] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[3] ;
  wire wb_PC_II_28;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[3] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_28),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized93
   (wb_PC_II_29,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[2] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_29;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[2] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[2] ;
  wire wb_PC_II_29;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[2] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_29),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized95
   (wb_PC_II_30,
    S,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[1] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_30;
  output S;
  input \Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[1] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\mem_pc_i_reg[1] ;
  wire wb_PC_II_30;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[1] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_30),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module system_microblaze_0_0_MB_LUT6_2__parameterized97
   (wb_PC_II_31,
    addr_AddSub_31,
    \Using_FPGA.Native_0 ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[0] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg );
  output wb_PC_II_31;
  output addr_AddSub_31;
  input [0:0]\Using_FPGA.Native_0 ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [0:0]\mem_pc_i_reg[0] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire addr_AddSub_31;
  wire [0:0]\mem_pc_i_reg[0] ;
  wire wb_PC_II_31;
  wire [0:0]\wb_exception_kind_i_reg[28] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h96969696FF00AAAA)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(1'b0),
        .I2(\wb_exception_kind_i_reg[28] ),
        .I3(\mem_pc_i_reg[0] ),
        .I4(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I5(1'b1),
        .O5(wb_PC_II_31),
        .O6(addr_AddSub_31));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6_74
   (sel_input_iii_2,
    if_sel_input,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_1 ,
    \wb_exception_kind_i_reg[27] );
  output sel_input_iii_2;
  input [1:0]if_sel_input;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_1 ;
  input \wb_exception_kind_i_reg[27] ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [1:0]if_sel_input;
  wire sel_input_iii_2;
  wire \wb_exception_kind_i_reg[27] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00000000CCF0AACC)) 
    \Using_FPGA.Native 
       (.I0(if_sel_input[0]),
        .I1(if_sel_input[1]),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\wb_exception_kind_i_reg[27] ),
        .O(sel_input_iii_2));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6_76
   (sel_input_iii_1,
    \Using_FPGA.Native_0 ,
    if_sel_input,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_1 ,
    \wb_exception_kind_i_reg[27] );
  output sel_input_iii_1;
  input \Using_FPGA.Native_0 ;
  input [1:0]if_sel_input;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_1 ;
  input \wb_exception_kind_i_reg[27] ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [1:0]if_sel_input;
  wire sel_input_iii_1;
  wire \wb_exception_kind_i_reg[27] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00000000CCF0AACC)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(if_sel_input[0]),
        .I2(if_sel_input[1]),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\wb_exception_kind_i_reg[27] ),
        .O(sel_input_iii_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6_78
   (sel_input_iii_0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    if_sel_input,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_2 ,
    \wb_exception_kind_i_reg[27] );
  output sel_input_iii_0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]if_sel_input;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_2 ;
  input \wb_exception_kind_i_reg[27] ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]if_sel_input;
  wire sel_input_iii_0;
  wire \wb_exception_kind_i_reg[27] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00000000CCF0AACC)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(if_sel_input),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(\Using_FPGA.Native_2 ),
        .I5(\wb_exception_kind_i_reg[27] ),
        .O(sel_input_iii_0));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized10
   (of_pipe_ctrl,
    Q,
    of_predecode,
    of_read_ex_write_op1_conflict_part2,
    ex_is_multi_or_load_instr);
  output [0:0]of_pipe_ctrl;
  input [2:0]Q;
  input [2:0]of_predecode;
  input of_read_ex_write_op1_conflict_part2;
  input ex_is_multi_or_load_instr;

  wire O;
  wire [2:0]Q;
  wire ex_is_multi_or_load_instr;
  wire [0:0]of_pipe_ctrl;
  wire [2:0]of_predecode;
  wire of_read_ex_write_op1_conflict_part2;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native 
       (.I0(Q[2]),
        .I1(of_predecode[2]),
        .I2(Q[1]),
        .I3(of_predecode[1]),
        .I4(Q[0]),
        .I5(of_predecode[0]),
        .O(O));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.Native_i_1__131 
       (.I0(O),
        .I1(of_read_ex_write_op1_conflict_part2),
        .I2(ex_is_multi_or_load_instr),
        .O(of_pipe_ctrl));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized12
   (of_read_ex_write_op1_conflict_part2,
    Q,
    of_predecode,
    ex_gpr_write_reg,
    ex_valid);
  output of_read_ex_write_op1_conflict_part2;
  input [1:0]Q;
  input [1:0]of_predecode;
  input ex_gpr_write_reg;
  input ex_valid;

  wire [1:0]Q;
  wire ex_gpr_write_reg;
  wire ex_valid;
  wire [1:0]of_predecode;
  wire of_read_ex_write_op1_conflict_part2;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(of_predecode[1]),
        .I2(Q[0]),
        .I3(of_predecode[0]),
        .I4(ex_gpr_write_reg),
        .I5(ex_valid),
        .O(of_read_ex_write_op1_conflict_part2));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized14
   (of_read_mem_write_op1_conflict_part1,
    Q,
    of_predecode);
  output of_read_mem_write_op1_conflict_part1;
  input [2:0]Q;
  input [2:0]of_predecode;

  wire [2:0]Q;
  wire [2:0]of_predecode;
  wire of_read_mem_write_op1_conflict_part1;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native 
       (.I0(Q[2]),
        .I1(of_predecode[2]),
        .I2(Q[1]),
        .I3(of_predecode[1]),
        .I4(Q[0]),
        .I5(of_predecode[0]),
        .O(of_read_mem_write_op1_conflict_part1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized16
   (of_pipe_ctrl,
    Q,
    of_predecode,
    mem_gpr_write,
    mem_valid_instr,
    mem_is_multi_or_load_instr,
    of_read_mem_write_op1_conflict_part1);
  output [0:0]of_pipe_ctrl;
  input [1:0]Q;
  input [1:0]of_predecode;
  input mem_gpr_write;
  input mem_valid_instr;
  input mem_is_multi_or_load_instr;
  input of_read_mem_write_op1_conflict_part1;

  wire [1:0]Q;
  wire mem_gpr_write;
  wire mem_is_multi_or_load_instr;
  wire mem_valid_instr;
  wire [0:0]of_pipe_ctrl;
  wire [1:0]of_predecode;
  wire of_read_mem_write_op1_conflict_part1;
  wire of_read_mem_write_op1_conflict_part2;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(of_predecode[1]),
        .I2(Q[0]),
        .I3(of_predecode[0]),
        .I4(mem_gpr_write),
        .I5(mem_valid_instr),
        .O(of_read_mem_write_op1_conflict_part2));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.Native_i_1__130 
       (.I0(mem_is_multi_or_load_instr),
        .I1(of_read_mem_write_op1_conflict_part2),
        .I2(of_read_mem_write_op1_conflict_part1),
        .O(of_pipe_ctrl));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized18
   (of_read_ex_write_op2_conflict_part1,
    Q,
    of_predecode);
  output of_read_ex_write_op2_conflict_part1;
  input [2:0]Q;
  input [2:0]of_predecode;

  wire [2:0]Q;
  wire [2:0]of_predecode;
  wire of_read_ex_write_op2_conflict_part1;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native 
       (.I0(Q[2]),
        .I1(of_predecode[2]),
        .I2(Q[1]),
        .I3(of_predecode[1]),
        .I4(Q[0]),
        .I5(of_predecode[0]),
        .O(of_read_ex_write_op2_conflict_part1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized20
   (of_read_ex_write_op2_conflict_part2,
    Q,
    of_predecode,
    ex_gpr_write_reg,
    ex_valid);
  output of_read_ex_write_op2_conflict_part2;
  input [1:0]Q;
  input [1:0]of_predecode;
  input ex_gpr_write_reg;
  input ex_valid;

  wire [1:0]Q;
  wire ex_gpr_write_reg;
  wire ex_valid;
  wire [1:0]of_predecode;
  wire of_read_ex_write_op2_conflict_part2;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(of_predecode[1]),
        .I2(Q[0]),
        .I3(of_predecode[0]),
        .I4(ex_gpr_write_reg),
        .I5(ex_valid),
        .O(of_read_ex_write_op2_conflict_part2));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized22
   (of_read_mem_write_op2_conflict_part1,
    Q,
    of_predecode);
  output of_read_mem_write_op2_conflict_part1;
  input [2:0]Q;
  input [2:0]of_predecode;

  wire [2:0]Q;
  wire [2:0]of_predecode;
  wire of_read_mem_write_op2_conflict_part1;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native 
       (.I0(Q[2]),
        .I1(of_predecode[2]),
        .I2(Q[1]),
        .I3(of_predecode[1]),
        .I4(Q[0]),
        .I5(of_predecode[0]),
        .O(of_read_mem_write_op2_conflict_part1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized24
   (of_read_mem_write_op2_conflict_part2,
    Q,
    of_predecode,
    mem_gpr_write,
    mem_valid_instr);
  output of_read_mem_write_op2_conflict_part2;
  input [1:0]Q;
  input [1:0]of_predecode;
  input mem_gpr_write;
  input mem_valid_instr;

  wire [1:0]Q;
  wire mem_gpr_write;
  wire mem_valid_instr;
  wire [1:0]of_predecode;
  wire of_read_mem_write_op2_conflict_part2;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(of_predecode[1]),
        .I2(Q[0]),
        .I3(of_predecode[0]),
        .I4(mem_gpr_write),
        .I5(mem_valid_instr),
        .O(of_read_mem_write_op2_conflict_part2));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized26
   (of_read_ex_write_op3_conflict_part1,
    Q,
    D);
  output of_read_ex_write_op3_conflict_part1;
  input [2:0]Q;
  input [2:0]D;

  wire [2:0]D;
  wire [2:0]Q;
  wire of_read_ex_write_op3_conflict_part1;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native 
       (.I0(Q[2]),
        .I1(D[2]),
        .I2(Q[1]),
        .I3(D[1]),
        .I4(Q[0]),
        .I5(D[0]),
        .O(of_read_ex_write_op3_conflict_part1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized28
   (of_read_ex_write_op3_conflict_part2,
    Q,
    D,
    ex_gpr_write_reg,
    ex_valid);
  output of_read_ex_write_op3_conflict_part2;
  input [1:0]Q;
  input [1:0]D;
  input ex_gpr_write_reg;
  input ex_valid;

  wire [1:0]D;
  wire [1:0]Q;
  wire ex_gpr_write_reg;
  wire ex_valid;
  wire of_read_ex_write_op3_conflict_part2;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(D[1]),
        .I2(Q[0]),
        .I3(D[0]),
        .I4(ex_gpr_write_reg),
        .I5(ex_valid),
        .O(of_read_ex_write_op3_conflict_part2));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized30
   (of_pipe_ctrl,
    Q,
    D,
    \Using_FPGA.Native_0 ,
    mem_is_multi_or_load_instr,
    of_read_mem_write_op3_conflict_part2);
  output [0:0]of_pipe_ctrl;
  input [2:0]Q;
  input [2:0]D;
  input [0:0]\Using_FPGA.Native_0 ;
  input mem_is_multi_or_load_instr;
  input of_read_mem_write_op3_conflict_part2;

  wire [2:0]D;
  wire [2:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire mem_is_multi_or_load_instr;
  wire [0:0]of_pipe_ctrl;
  wire of_read_mem_write_op3_conflict_part1;
  wire of_read_mem_write_op3_conflict_part2;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native 
       (.I0(Q[2]),
        .I1(D[2]),
        .I2(Q[1]),
        .I3(D[1]),
        .I4(Q[0]),
        .I5(D[0]),
        .O(of_read_mem_write_op3_conflict_part1));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Using_FPGA.Native_i_1__128 
       (.I0(of_read_mem_write_op3_conflict_part1),
        .I1(\Using_FPGA.Native_0 ),
        .I2(mem_is_multi_or_load_instr),
        .I3(of_read_mem_write_op3_conflict_part2),
        .O(of_pipe_ctrl));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized32
   (of_read_mem_write_op3_conflict_part2,
    Q,
    D,
    mem_gpr_write,
    mem_valid_instr);
  output of_read_mem_write_op3_conflict_part2;
  input [1:0]Q;
  input [1:0]D;
  input mem_gpr_write;
  input mem_valid_instr;

  wire [1:0]D;
  wire [1:0]Q;
  wire mem_gpr_write;
  wire mem_valid_instr;
  wire of_read_mem_write_op3_conflict_part2;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    \Using_FPGA.Native 
       (.I0(Q[1]),
        .I1(D[1]),
        .I2(Q[0]),
        .I3(D[0]),
        .I4(mem_gpr_write),
        .I5(mem_valid_instr),
        .O(of_read_mem_write_op3_conflict_part2));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized34
   (alu_AddSub_1,
    Q,
    \EX_ALU_Op_reg[0] ,
    \EX_Op1_reg[0] ,
    EX_ALU_Sel_Logic,
    EX_Enable_ALU);
  output alu_AddSub_1;
  input [0:0]Q;
  input [1:0]\EX_ALU_Op_reg[0] ;
  input [0:0]\EX_Op1_reg[0] ;
  input EX_ALU_Sel_Logic;
  input EX_Enable_ALU;

  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:0]\EX_Op1_reg[0] ;
  wire [0:0]Q;
  wire alu_AddSub_1;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] [1]),
        .I2(\EX_Op1_reg[0] ),
        .I3(\EX_ALU_Op_reg[0] [0]),
        .I4(EX_ALU_Sel_Logic),
        .I5(EX_Enable_ALU),
        .O(alu_AddSub_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized4
   (sel_input_delayslot,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    if_sel_input,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_2 ,
    \wb_exception_kind_i_reg[27] );
  output sel_input_delayslot;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]if_sel_input;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_2 ;
  input \wb_exception_kind_i_reg[27] ;

  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]if_sel_input;
  wire sel_input_delayslot;
  wire \wb_exception_kind_i_reg[27] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h0000FFFFCCF0AACC)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(if_sel_input),
        .I3(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I4(\Using_FPGA.Native_2 ),
        .I5(\wb_exception_kind_i_reg[27] ),
        .O(sel_input_delayslot));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized6
   (sel_input_i_0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_2 ,
    I4,
    \wb_exception_kind_i_reg[27] );
  output sel_input_i_0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_2 ;
  input I4;
  input \wb_exception_kind_i_reg[27] ;

  wire I4;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire sel_input_i_0;
  wire \wb_exception_kind_i_reg[27] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF00FFFFAE0AAE0A)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(I4),
        .I5(\wb_exception_kind_i_reg[27] ),
        .O(sel_input_i_0));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module system_microblaze_0_0_MB_LUT6__parameterized8
   (of_Valid_II,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_2 ,
    I4,
    \wb_exception_kind_i_reg[27] );
  output of_Valid_II;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_2 ;
  input I4;
  input \wb_exception_kind_i_reg[27] ;

  wire I4;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire of_Valid_II;
  wire \wb_exception_kind_i_reg[27] ;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00FF000051F551F5)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(I4),
        .I5(\wb_exception_kind_i_reg[27] ),
        .O(of_Valid_II));
endmodule

(* ORIG_REF_NAME = "MB_MULT_AND" *) 
module system_microblaze_0_0_MB_MULT_AND
   (DI,
    Q,
    \EX_ALU_Op_reg[0] );
  output DI;
  input [0:0]Q;
  input [0:0]\EX_ALU_Op_reg[0] ;

  wire DI;
  wire [0:0]\EX_ALU_Op_reg[0] ;
  wire [0:0]Q;

  (* XILINX_LEGACY_PRIM = "MULT_AND" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\EX_ALU_Op_reg[0] ),
        .O(DI));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY
   (mem_databus_ready,
    mem_access_completed_reg,
    lopt,
    lopt_1);
  output mem_databus_ready;
  input mem_access_completed_reg;
  output lopt;
  output lopt_1;

  wire \<const0> ;
  wire \<const1> ;
  wire mem_access_completed_reg;
  wire mem_databus_ready;

  assign lopt = \<const0> ;
  assign lopt_1 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_10
   (carry_6,
    SRL16_Sel_6,
    carry_7,
    lopt);
  output carry_6;
  input SRL16_Sel_6;
  input carry_7;
  output lopt;

  wire \<const0> ;
  wire SRL16_Sel_6;
  wire carry_6;
  wire carry_7;

  assign lopt = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_12
   (carry_5,
    SRL16_Sel_5,
    carry_6,
    lopt);
  output carry_5;
  input SRL16_Sel_5;
  input carry_6;
  output lopt;

  wire \<const0> ;
  wire SRL16_Sel_5;
  wire carry_5;
  wire carry_6;

  assign lopt = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_14
   (carry_4,
    SRL16_Sel_4,
    carry_5,
    lopt,
    lopt_1);
  output carry_4;
  input SRL16_Sel_4;
  input carry_5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_4;
  wire carry_4;
  wire carry_5;

  assign carry_4 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_16
   (carry_3,
    SRL16_Sel_3,
    carry_4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output carry_3;
  input SRL16_Sel_3;
  input carry_4;
  input lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;

  wire SRL16_Sel_3;
  wire carry_3;
  wire carry_4;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_1  = lopt;
  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_6  = lopt_5;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_7 = lopt_6;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_4),
        .CO({\^lopt_5 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_6 ,\^lopt_3 ,\^lopt_1 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_4 ,\^lopt_2 ,SRL16_Sel_3}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_18
   (carry_2,
    SRL16_Sel_2,
    carry_3,
    lopt);
  output carry_2;
  input SRL16_Sel_2;
  input carry_3;
  output lopt;

  wire \<const0> ;
  wire SRL16_Sel_2;
  wire carry_2;
  wire carry_3;

  assign lopt = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_20
   (carry_1,
    SRL16_Sel_1,
    carry_2,
    lopt);
  output carry_1;
  input SRL16_Sel_1;
  input carry_2;
  output lopt;

  wire \<const0> ;
  wire SRL16_Sel_1;
  wire carry_1;
  wire carry_2;

  assign lopt = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_22
   (carry_0,
    SRL16_Sel_0,
    carry_1,
    lopt,
    lopt_1);
  output carry_0;
  input SRL16_Sel_0;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_0;
  wire carry_0;
  wire carry_1;

  assign carry_0 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_24
   (Hit,
    p_36_out,
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ,
    carry_0,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_stop_i_reg ,
    \control_reg_reg[8] ,
    force_stop_i,
    \Performace_Debug_Control.watchpoint_brk_hold_reg ,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    dbg_clean_stop,
    normal_stop_i,
    single_Step_N,
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ,
    ex_branch_with_delayslot_reg,
    ex_Exception_Taken,
    mem_Exception_Taken);
  output Hit;
  output p_36_out;
  output \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  input carry_0;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_stop_i_reg ;
  input \control_reg_reg[8] ;
  input force_stop_i;
  input \Performace_Debug_Control.watchpoint_brk_hold_reg ;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input dbg_clean_stop;
  input normal_stop_i;
  input single_Step_N;
  input \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  input ex_branch_with_delayslot_reg;
  input ex_Exception_Taken;
  input mem_Exception_Taken;

  wire Hit;
  wire \Performace_Debug_Control.dbg_stop_i_reg ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_single_step_i_3_n_0 ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  wire \Performace_Debug_Control.watchpoint_brk_hold_reg ;
  wire \Using_FPGA.Native_0 ;
  wire carry_0;
  wire \control_reg_reg[8] ;
  wire dbg_clean_stop;
  wire ex_Exception_Taken;
  wire ex_branch_with_delayslot_reg;
  wire force_stop_i;
  wire mem_Exception_Taken;
  wire normal_stop_i;
  wire p_36_out;
  wire single_Step_N;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h55555555CCCC0CCC)) 
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_i_1 
       (.I0(single_Step_N),
        .I1(\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ),
        .I2(ex_branch_with_delayslot_reg),
        .I3(ex_Exception_Taken),
        .I4(mem_Exception_Taken),
        .I5(p_36_out),
        .O(\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ));
  LUT5 #(
    .INIT(32'hAAA8AAAA)) 
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Performace_Debug_Control.dbg_stop_i_reg ),
        .I2(\control_reg_reg[8] ),
        .I3(force_stop_i),
        .I4(\Performace_Debug_Control.ex_dbg_pc_hit_single_step_i_3_n_0 ),
        .O(p_36_out));
  LUT6 #(
    .INIT(64'h00F1F1F100000000)) 
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_i_3 
       (.I0(\Performace_Debug_Control.watchpoint_brk_hold_reg ),
        .I1(Hit),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(dbg_clean_stop),
        .I4(normal_stop_i),
        .I5(single_Step_N),
        .O(\Performace_Debug_Control.ex_dbg_pc_hit_single_step_i_3_n_0 ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],Hit}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_259
   (ex_pre_alu_carry,
    muxcy_sel,
    muxcy_di,
    ex_MSR);
  output ex_pre_alu_carry;
  input muxcy_sel;
  input muxcy_di;
  input [0:0]ex_MSR;

  wire [0:0]ex_MSR;
  wire ex_pre_alu_carry;
  wire muxcy_di;
  wire muxcy_sel;

endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_260
   (ex_alu_carryin,
    ex_pre_alu_carry,
    lopt,
    lopt_1);
  output ex_alu_carryin;
  input ex_pre_alu_carry;
  output lopt;
  output lopt_1;

  wire \<const0> ;
  wire \<const1> ;
  wire ex_alu_carryin;
  wire ex_pre_alu_carry;

  assign lopt = \<const0> ;
  assign lopt_1 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_269
   (CI,
    \wb_exception_kind_i_reg[28] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output CI;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire CI;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [0:0]\wb_exception_kind_i_reg[28] ;
  wire [0:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,CI}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [0]}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,\wb_exception_kind_i_reg[28] }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_333
   (zero_CI_0,
    ex_op1_cmp_equal,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output zero_CI_0;
  input ex_op1_cmp_equal;
  input lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;

  wire ex_op1_cmp_equal;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire lopt_5;
  wire zero_CI_0;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_1  = lopt;
  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = lopt_4;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_4 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({\^lopt_1 ,\^lopt_1 ,\^lopt_1 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_5,\^lopt_3 ,\^lopt_2 ,ex_op1_cmp_equal}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_334
   (zero_CI_1,
    \Zero_Detecting[0].nibble_Zero_reg ,
    ex_op1_cmp_equal_n,
    zero_CI_0);
  output zero_CI_1;
  input \Zero_Detecting[0].nibble_Zero_reg ;
  input ex_op1_cmp_equal_n;
  input zero_CI_0;

  wire \Zero_Detecting[0].nibble_Zero_reg ;
  wire ex_op1_cmp_equal_n;
  wire zero_CI_0;
  wire zero_CI_1;

endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_335
   (zero_CI_2,
    \Zero_Detecting[1].nibble_Zero_reg ,
    ex_op1_cmp_equal_n,
    zero_CI_1);
  output zero_CI_2;
  input \Zero_Detecting[1].nibble_Zero_reg ;
  input ex_op1_cmp_equal_n;
  input zero_CI_1;

  wire \Zero_Detecting[1].nibble_Zero_reg ;
  wire ex_op1_cmp_equal_n;
  wire zero_CI_1;
  wire zero_CI_2;

endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_336
   (zero_CI_3,
    \Zero_Detecting[2].nibble_Zero_reg ,
    ex_op1_cmp_equal_n,
    zero_CI_2,
    lopt);
  output zero_CI_3;
  input \Zero_Detecting[2].nibble_Zero_reg ;
  input ex_op1_cmp_equal_n;
  input zero_CI_2;
  input lopt;

  wire \Zero_Detecting[2].nibble_Zero_reg ;
  wire ex_op1_cmp_equal_n;
  wire zero_CI_2;
  wire zero_CI_3;

  assign zero_CI_3 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_337
   (zero_CI_4,
    \Zero_Detecting[3].nibble_Zero_reg ,
    ex_op1_cmp_equal_n,
    zero_CI_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output zero_CI_4;
  input \Zero_Detecting[3].nibble_Zero_reg ;
  input ex_op1_cmp_equal_n;
  input zero_CI_3;
  input lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;

  wire \Zero_Detecting[3].nibble_Zero_reg ;
  wire ex_op1_cmp_equal_n;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire lopt_5;
  wire zero_CI_3;
  wire zero_CI_4;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_1  = lopt;
  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign lopt_2 = \^lopt_3 ;
  assign lopt_5 = lopt_4;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(zero_CI_3),
        .CO({\^lopt_3 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_4 ,ex_op1_cmp_equal_n,ex_op1_cmp_equal_n,ex_op1_cmp_equal_n}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_5,\^lopt_2 ,\^lopt_1 ,\Zero_Detecting[3].nibble_Zero_reg }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_338
   (zero_CI_5,
    \Zero_Detecting[4].nibble_Zero_reg ,
    ex_op1_cmp_equal_n,
    zero_CI_4);
  output zero_CI_5;
  input \Zero_Detecting[4].nibble_Zero_reg ;
  input ex_op1_cmp_equal_n;
  input zero_CI_4;

  wire \Zero_Detecting[4].nibble_Zero_reg ;
  wire ex_op1_cmp_equal_n;
  wire zero_CI_4;
  wire zero_CI_5;

endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_339
   (ex_op1_zero,
    \Zero_Detecting[5].nibble_Zero_reg ,
    ex_op1_cmp_equal_n,
    zero_CI_5);
  output ex_op1_zero;
  input \Zero_Detecting[5].nibble_Zero_reg ;
  input ex_op1_cmp_equal_n;
  input zero_CI_5;

  wire \Zero_Detecting[5].nibble_Zero_reg ;
  wire ex_op1_cmp_equal_n;
  wire ex_op1_zero;
  wire zero_CI_5;

endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_449
   (alu_carry_0,
    ex_use_carry,
    DI_0,
    ex_alu_carryin,
    lopt);
  output alu_carry_0;
  input ex_use_carry;
  input DI_0;
  input ex_alu_carryin;
  input lopt;

  wire DI_0;
  wire alu_carry_0;
  wire ex_alu_carryin;
  wire ex_use_carry;

  assign alu_carry_0 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_51
   (mem_wait_on_ready_N,
    mem_databus_ready,
    mem_valid_instr,
    mem_load_store_access,
    mem_Write_DCache,
    lopt,
    lopt_1);
  output mem_wait_on_ready_N;
  input mem_databus_ready;
  input mem_valid_instr;
  input mem_load_store_access;
  input mem_Write_DCache;
  output lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_i_1__179_n_0 ;
  wire mem_Write_DCache;
  wire mem_databus_ready;
  wire mem_load_store_access;
  wire mem_valid_instr;
  wire mem_wait_on_ready_N;

  assign lopt = \<const1> ;
  assign lopt_1 = \Using_FPGA.Native_i_1__179_n_0 ;
  LUT3 #(
    .INIT(8'hA8)) 
    \Using_FPGA.Native_i_1__179 
       (.I0(mem_valid_instr),
        .I1(mem_load_store_access),
        .I2(mem_Write_DCache),
        .O(\Using_FPGA.Native_i_1__179_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_512
   (invert_result,
    EX_CMP_Op_reg,
    ex_unsigned_op,
    LO,
    lopt);
  output invert_result;
  input EX_CMP_Op_reg;
  input ex_unsigned_op;
  input LO;
  input lopt;

  wire EX_CMP_Op_reg;
  wire LO;
  wire ex_unsigned_op;
  wire invert_result;

  assign invert_result = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_52
   (Trace_WB_Jump_Hit_reg,
    wb_gpr_write_dbg0,
    wb_gpr_write_i0,
    mem_valid_reg,
    wb_valid_reg,
    mem_wait_on_ready_N,
    out,
    wb_exception_i_reg,
    mem_gpr_write_dbg,
    mem_gpr_write,
    mem_valid_instr,
    mem_exception_from_ex,
    ex_valid_reg,
    ex_branch_with_delayslot_reg,
    flush_pipe,
    wb_valid_reg_0,
    wb_piperun,
    lopt,
    lopt_1,
    lopt_2);
  output Trace_WB_Jump_Hit_reg;
  output wb_gpr_write_dbg0;
  output wb_gpr_write_i0;
  output mem_valid_reg;
  output wb_valid_reg;
  input mem_wait_on_ready_N;
  input [0:0]out;
  input wb_exception_i_reg;
  input mem_gpr_write_dbg;
  input mem_gpr_write;
  input mem_valid_instr;
  input mem_exception_from_ex;
  input ex_valid_reg;
  input ex_branch_with_delayslot_reg;
  input flush_pipe;
  input wb_valid_reg_0;
  input wb_piperun;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire Trace_WB_Jump_Hit_reg;
  wire ex_branch_with_delayslot_reg;
  wire ex_valid_reg;
  wire flush_pipe;
  wire mem_exception_from_ex;
  wire mem_gpr_write;
  wire mem_gpr_write_dbg;
  wire mem_valid_instr;
  wire mem_valid_reg;
  wire mem_wait_on_ready_N;
  wire [0:0]out;
  wire wb_exception_i_reg;
  wire wb_gpr_write_dbg0;
  wire wb_gpr_write_i0;
  wire wb_piperun;
  wire wb_valid_reg;
  wire wb_valid_reg_0;

  assign Trace_WB_Jump_Hit_reg = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h00000000707000AA)) 
    mem_valid_i_1
       (.I0(mem_valid_instr),
        .I1(mem_exception_from_ex),
        .I2(ex_valid_reg),
        .I3(Trace_WB_Jump_Hit_reg),
        .I4(ex_branch_with_delayslot_reg),
        .I5(flush_pipe),
        .O(mem_valid_reg));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    wb_gpr_write_dbg_i_1
       (.I0(out),
        .I1(wb_exception_i_reg),
        .I2(Trace_WB_Jump_Hit_reg),
        .I3(mem_gpr_write_dbg),
        .O(wb_gpr_write_dbg0));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    wb_gpr_write_i_i_1
       (.I0(out),
        .I1(wb_exception_i_reg),
        .I2(Trace_WB_Jump_Hit_reg),
        .I3(mem_gpr_write),
        .O(wb_gpr_write_i0));
  LUT5 #(
    .INIT(32'h0000CC0A)) 
    wb_valid_i_1
       (.I0(wb_valid_reg_0),
        .I1(mem_valid_instr),
        .I2(wb_piperun),
        .I3(Trace_WB_Jump_Hit_reg),
        .I4(out),
        .O(wb_valid_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_53
   (jump_carry1,
    ex_op1_zero,
    force_Val1_reg,
    \EX_Branch_CMP_Op1_reg[0] ,
    use_Reg_Neg_DI_reg,
    force1_reg,
    use_Reg_Neg_S_reg,
    lopt,
    lopt_1,
    lopt_2);
  output jump_carry1;
  input ex_op1_zero;
  input force_Val1_reg;
  input [0:0]\EX_Branch_CMP_Op1_reg[0] ;
  input use_Reg_Neg_DI_reg;
  input force1_reg;
  input use_Reg_Neg_S_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[0] ;
  wire S;
  wire ex_op1_zero;
  wire force1_reg;
  wire force_Val1_reg;
  wire jump_carry1;
  wire use_Reg_Neg_DI_reg;
  wire use_Reg_Neg_S_reg;

  assign jump_carry1 = lopt;
  assign lopt_1 = DI;
  assign lopt_2 = S;
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_i_1__172 
       (.I0(force1_reg),
        .I1(\EX_Branch_CMP_Op1_reg[0] ),
        .I2(use_Reg_Neg_S_reg),
        .O(S));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_i_2__117 
       (.I0(force_Val1_reg),
        .I1(\EX_Branch_CMP_Op1_reg[0] ),
        .I2(use_Reg_Neg_DI_reg),
        .O(DI));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_54
   (jump_carry2,
    jump_carry1,
    ex_Take_Intr_or_Exc,
    force_Val2_N,
    EX_Valid,
    force2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output jump_carry2;
  input jump_carry1;
  input ex_Take_Intr_or_Exc;
  input force_Val2_N;
  input EX_Valid;
  input force2;
  output lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire EX_Valid;
  wire \Using_FPGA.Native_i_2__31_n_0 ;
  wire ex_Take_Intr_or_Exc;
  wire force2;
  wire force_Val2_N;
  wire force_jump2;
  wire jump_carry1;
  wire jump_carry2;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_7  = lopt_6;
  assign lopt = \^lopt_1 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_8 = lopt_7;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(jump_carry1),
        .CO({\^lopt_6 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2],\^lopt_1 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [0]}),
        .CYINIT(1'b0),
        .DI({\^lopt_7 ,\^lopt_4 ,\^lopt_2 ,\Using_FPGA.Native_i_2__31_n_0 }),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_5 ,\^lopt_3 ,force_jump2}));
  LUT3 #(
    .INIT(8'h40)) 
    \Using_FPGA.Native_i_1__127 
       (.I0(ex_Take_Intr_or_Exc),
        .I1(force2),
        .I2(EX_Valid),
        .O(force_jump2));
  LUT3 #(
    .INIT(8'hBA)) 
    \Using_FPGA.Native_i_2__31 
       (.I0(ex_Take_Intr_or_Exc),
        .I1(force_Val2_N),
        .I2(EX_Valid),
        .O(\Using_FPGA.Native_i_2__31_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_55
   (ex_jump_wanted,
    \Using_FPGA.Native_0 ,
    jump_carry2,
    ex_branch_with_delayslot,
    of_valid,
    EX_MBAR_Stall,
    ex_Instr_Excep_combo,
    dbg_stop_if_delay_i,
    Dbg_Disable,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ,
    ex_Take_Intr_or_Exc,
    ex_Interrupt_i,
    lopt,
    lopt_1,
    lopt_2);
  output ex_jump_wanted;
  output \Using_FPGA.Native_0 ;
  input jump_carry2;
  input ex_branch_with_delayslot;
  input of_valid;
  input EX_MBAR_Stall;
  input ex_Instr_Excep_combo;
  input dbg_stop_if_delay_i;
  input Dbg_Disable;
  input \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  input ex_Take_Intr_or_Exc;
  input ex_Interrupt_i;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Dbg_Disable;
  wire EX_MBAR_Stall;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_i_1__176_n_0 ;
  wire dbg_stop_if_delay_i;
  wire ex_Instr_Excep_combo;
  wire ex_Interrupt_i;
  wire ex_Take_Intr_or_Exc;
  wire ex_branch_with_delayslot;
  wire ex_jump_wanted;
  wire jump_carry2;
  wire of_valid;

  assign ex_jump_wanted = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.Native_i_1__176_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h55F7)) 
    \Using_FPGA.Native_i_1__173 
       (.I0(ex_jump_wanted),
        .I1(ex_branch_with_delayslot),
        .I2(of_valid),
        .I3(EX_MBAR_Stall),
        .O(\Using_FPGA.Native_0 ));
  LUT6 #(
    .INIT(64'h0000000055555455)) 
    \Using_FPGA.Native_i_1__176 
       (.I0(ex_Instr_Excep_combo),
        .I1(dbg_stop_if_delay_i),
        .I2(Dbg_Disable),
        .I3(\Performace_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .I4(ex_Take_Intr_or_Exc),
        .I5(ex_Interrupt_i),
        .O(\Using_FPGA.Native_i_1__176_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_56
   (jump_carry4,
    ex_branch_with_delayslot_reg,
    ex_jump_wanted,
    lopt);
  output jump_carry4;
  input ex_branch_with_delayslot_reg;
  input ex_jump_wanted;
  output lopt;

  wire \<const0> ;
  wire ex_branch_with_delayslot_reg;
  wire ex_jump_wanted;
  wire jump_carry4;

  assign lopt = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_57
   (jump_carry5,
    jump_carry4,
    lopt,
    lopt_1,
    lopt_2);
  output jump_carry5;
  input jump_carry4;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire jump_carry4;
  wire jump_carry5;

  assign jump_carry5 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_58
   (ex_jump_for_ce,
    \if_pc_reg[0] ,
    of_next_ex_valid,
    ex_delayslot_Instr0,
    mem_jump_taken0,
    if_missed_fetch_reg,
    of_read_imm_reg_ii_reg,
    ex_valid_jump_reg,
    ex_valid_reg,
    \Using_FPGA.Native_0 ,
    ex_jump_hold_reg,
    keep_jump_taken_with_ds_reg,
    jump_carry5,
    if_fetch_in_progress_reg,
    ex_jump_nodelay_reg,
    mem_valid_instr,
    mem_exception_from_ex,
    of_valid,
    \Performace_Debug_Control.dbg_stop_if_delay_i_reg ,
    ex_Take_Intr_or_Exc,
    ex_jump_hold,
    ex_mbar_stall_no_sleep_1,
    ex_first_cycle,
    ex_mbar_decode,
    ex_mbar_sleep,
    keep_jump_taken_with_ds,
    ex_branch_with_delayslot,
    if_missed_fetch,
    IB_Ready,
    out,
    LOCKSTEP_Master_Out,
    wb_exception_i_reg,
    mem_valid_reg,
    p_9_in,
    of_Take_Interrupt_hold_reg,
    \Using_FPGA.Native_1 ,
    of_read_imm_reg_ii,
    ex_valid_jump_reg_0,
    ex_branch_with_delayslot_reg,
    ex_valid,
    \wb_exception_kind_i_reg[27] );
  output ex_jump_for_ce;
  output [0:0]\if_pc_reg[0] ;
  output of_next_ex_valid;
  output ex_delayslot_Instr0;
  output mem_jump_taken0;
  output if_missed_fetch_reg;
  output of_read_imm_reg_ii_reg;
  output ex_valid_jump_reg;
  output ex_valid_reg;
  output \Using_FPGA.Native_0 ;
  output ex_jump_hold_reg;
  output keep_jump_taken_with_ds_reg;
  input jump_carry5;
  input [0:0]if_fetch_in_progress_reg;
  input ex_jump_nodelay_reg;
  input mem_valid_instr;
  input mem_exception_from_ex;
  input of_valid;
  input \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  input ex_Take_Intr_or_Exc;
  input ex_jump_hold;
  input ex_mbar_stall_no_sleep_1;
  input ex_first_cycle;
  input ex_mbar_decode;
  input ex_mbar_sleep;
  input keep_jump_taken_with_ds;
  input ex_branch_with_delayslot;
  input if_missed_fetch;
  input IB_Ready;
  input [0:0]out;
  input [1:0]LOCKSTEP_Master_Out;
  input wb_exception_i_reg;
  input mem_valid_reg;
  input p_9_in;
  input of_Take_Interrupt_hold_reg;
  input \Using_FPGA.Native_1 ;
  input of_read_imm_reg_ii;
  input ex_valid_jump_reg_0;
  input ex_branch_with_delayslot_reg;
  input ex_valid;
  input \wb_exception_kind_i_reg[27] ;

  wire IB_Ready;
  wire [1:0]LOCKSTEP_Master_Out;
  wire \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__38_n_0 ;
  wire ex_Take_Intr_or_Exc;
  wire ex_branch_with_delayslot;
  wire ex_branch_with_delayslot_reg;
  wire ex_delayslot_Instr0;
  wire ex_first_cycle;
  wire ex_jump_for_ce;
  wire ex_jump_hold;
  wire ex_jump_hold_reg;
  wire ex_jump_nodelay_reg;
  wire ex_mbar_decode;
  wire ex_mbar_sleep;
  wire ex_mbar_stall_no_sleep_1;
  wire ex_valid;
  wire ex_valid_jump_reg;
  wire ex_valid_jump_reg_0;
  wire ex_valid_reg;
  wire [0:0]if_fetch_in_progress_reg;
  wire if_missed_fetch;
  wire if_missed_fetch_reg;
  wire [0:0]\if_pc_reg[0] ;
  wire jump_carry5;
  wire keep_jump_taken_with_ds;
  wire keep_jump_taken_with_ds_reg;
  wire mem_exception_from_ex;
  wire mem_jump_taken0;
  wire mem_valid_instr;
  wire mem_valid_reg;
  wire of_Take_Interrupt_hold_reg;
  wire of_next_ex_valid;
  wire of_read_imm_reg_ii;
  wire of_read_imm_reg_ii_i_2_n_0;
  wire of_read_imm_reg_ii_reg;
  wire of_valid;
  wire [0:0]out;
  wire p_9_in;
  wire wb_exception_i_reg;
  wire \wb_exception_kind_i_reg[27] ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(jump_carry5),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],ex_jump_for_ce}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],\Using_FPGA.Native_i_1__38_n_0 }));
  LUT6 #(
    .INIT(64'h00000000EEEFFFFF)) 
    \Using_FPGA.Native_i_1__38 
       (.I0(ex_Take_Intr_or_Exc),
        .I1(ex_jump_hold),
        .I2(ex_mbar_stall_no_sleep_1),
        .I3(ex_first_cycle),
        .I4(ex_mbar_decode),
        .I5(ex_mbar_sleep),
        .O(\Using_FPGA.Native_i_1__38_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2__118 
       (.I0(ex_jump_for_ce),
        .I1(\wb_exception_kind_i_reg[27] ),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    ex_delayslot_Instr_i_1
       (.I0(keep_jump_taken_with_ds),
        .I1(ex_branch_with_delayslot),
        .I2(ex_jump_for_ce),
        .O(ex_delayslot_Instr0));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT4 #(
    .INIT(16'h000E)) 
    ex_jump_hold_i_1
       (.I0(ex_jump_hold),
        .I1(ex_jump_for_ce),
        .I2(ex_branch_with_delayslot_reg),
        .I3(out),
        .O(ex_jump_hold_reg));
  LUT6 #(
    .INIT(64'h000000000000CC0A)) 
    ex_valid_i_1
       (.I0(ex_valid),
        .I1(of_next_ex_valid),
        .I2(ex_branch_with_delayslot_reg),
        .I3(\Using_FPGA.Native_1 ),
        .I4(out),
        .I5(wb_exception_i_reg),
        .O(ex_valid_reg));
  LUT6 #(
    .INIT(64'h000000000000CC0A)) 
    ex_valid_jump_i_1
       (.I0(ex_valid_jump_reg_0),
        .I1(of_next_ex_valid),
        .I2(ex_branch_with_delayslot_reg),
        .I3(\Using_FPGA.Native_1 ),
        .I4(out),
        .I5(wb_exception_i_reg),
        .O(ex_valid_jump_reg));
  LUT6 #(
    .INIT(64'h0000000007770000)) 
    ex_valid_keep_i_2
       (.I0(ex_jump_nodelay_reg),
        .I1(ex_jump_for_ce),
        .I2(mem_valid_instr),
        .I3(mem_exception_from_ex),
        .I4(of_valid),
        .I5(\Performace_Debug_Control.dbg_stop_if_delay_i_reg ),
        .O(of_next_ex_valid));
  LUT6 #(
    .INIT(64'h000000000000020E)) 
    if_missed_fetch_i_1
       (.I0(ex_jump_for_ce),
        .I1(if_missed_fetch),
        .I2(if_fetch_in_progress_reg),
        .I3(IB_Ready),
        .I4(out),
        .I5(LOCKSTEP_Master_Out[1]),
        .O(if_missed_fetch_reg));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \if_pc[0]_i_1 
       (.I0(ex_jump_for_ce),
        .I1(if_fetch_in_progress_reg),
        .O(\if_pc_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT5 #(
    .INIT(32'h000000EA)) 
    keep_jump_taken_with_ds_i_1
       (.I0(keep_jump_taken_with_ds),
        .I1(ex_branch_with_delayslot),
        .I2(ex_jump_for_ce),
        .I3(out),
        .I4(\Using_FPGA.Native_1 ),
        .O(keep_jump_taken_with_ds_reg));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT2 #(
    .INIT(4'hE)) 
    mem_jump_taken_i_1
       (.I0(ex_jump_hold),
        .I1(ex_jump_for_ce),
        .O(mem_jump_taken0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    of_read_imm_reg_ii_i_1
       (.I0(of_read_imm_reg_ii_i_2_n_0),
        .I1(\Performace_Debug_Control.dbg_stop_if_delay_i_reg ),
        .I2(wb_exception_i_reg),
        .I3(mem_valid_reg),
        .I4(LOCKSTEP_Master_Out[0]),
        .I5(out),
        .O(of_read_imm_reg_ii_reg));
  LUT6 #(
    .INIT(64'h0070FFFF00700000)) 
    of_read_imm_reg_ii_i_2
       (.I0(ex_jump_nodelay_reg),
        .I1(ex_jump_for_ce),
        .I2(p_9_in),
        .I3(of_Take_Interrupt_hold_reg),
        .I4(\Using_FPGA.Native_1 ),
        .I5(of_read_imm_reg_ii),
        .O(of_read_imm_reg_ii_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_59
   (if_pc_incr_carry3,
    if_fetch_for_timing_optimization1,
    if_pc_incr_carry1,
    lopt,
    lopt_1);
  output if_pc_incr_carry3;
  input if_fetch_for_timing_optimization1;
  input if_pc_incr_carry1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire if_fetch_for_timing_optimization1;
  wire if_pc_incr_carry1;
  wire if_pc_incr_carry3;

  assign if_pc_incr_carry3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_60
   (if_pc_incr_carry0,
    if_missed_fetch,
    lopt,
    lopt_1,
    lopt_2);
  output if_pc_incr_carry0;
  input if_missed_fetch;
  output lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire if_missed_fetch;
  wire if_pc_incr_carry0;
  wire if_valid;

  assign lopt = \<const1> ;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = if_valid;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__76 
       (.I0(if_missed_fetch),
        .O(if_valid));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_61
   (if_pc_incr_carry1,
    \Performace_Debug_Control.dbg_stop_if_delay_i_reg ,
    if_pc_incr_carry0,
    lopt);
  output if_pc_incr_carry1;
  input \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  input if_pc_incr_carry0;
  output lopt;

  wire \<const0> ;
  wire \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  wire if_pc_incr_carry0;
  wire if_pc_incr_carry1;

  assign lopt = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_62
   (of_PipeRun_carry_2,
    of_pipe_ctrl,
    of_PipeRun_carry_3,
    lopt);
  output of_PipeRun_carry_2;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_3;
  output lopt;

  wire \<const0> ;
  wire of_PipeRun_carry_2;
  wire of_PipeRun_carry_3;
  wire [0:0]of_pipe_ctrl;

  assign lopt = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_63
   (of_PipeRun_carry_3,
    of_pipe_ctrl,
    of_PipeRun_carry_4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output of_PipeRun_carry_3;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_4;
  input lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire lopt_5;
  wire of_PipeRun_carry_3;
  wire of_PipeRun_carry_4;
  wire [0:0]of_pipe_ctrl;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_1  = lopt;
  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign lopt_2 = \^lopt_3 ;
  assign lopt_5 = lopt_4;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(of_PipeRun_carry_4),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_3 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [1:0]}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_5,\^lopt_2 ,of_pipe_ctrl}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_64
   (of_PipeRun_carry_4,
    of_pipe_ctrl,
    of_PipeRun_carry_5,
    lopt,
    lopt_1);
  output of_PipeRun_carry_4;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire of_PipeRun_carry_4;
  wire of_PipeRun_carry_5;
  wire [0:0]of_pipe_ctrl;

  assign lopt_1 = \<const0> ;
  assign of_PipeRun_carry_4 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_65
   (of_PipeRun_carry_5,
    of_pipe_ctrl,
    of_PipeRun_carry_6,
    lopt);
  output of_PipeRun_carry_5;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_6;
  output lopt;

  wire \<const0> ;
  wire of_PipeRun_carry_5;
  wire of_PipeRun_carry_6;
  wire [0:0]of_pipe_ctrl;

  assign lopt = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_66
   (of_PipeRun_carry_6,
    of_pipe_ctrl,
    of_PipeRun_carry_7,
    lopt);
  output of_PipeRun_carry_6;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_7;
  output lopt;

  wire \<const0> ;
  wire of_PipeRun_carry_6;
  wire of_PipeRun_carry_7;
  wire [0:0]of_pipe_ctrl;

  assign lopt = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_67
   (of_PipeRun_carry_7,
    \Using_FPGA.Native_0 ,
    ex_branch_with_delayslot_reg,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output of_PipeRun_carry_7;
  input \Using_FPGA.Native_0 ;
  input ex_branch_with_delayslot_reg;
  input lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;

  wire \Using_FPGA.Native_0 ;
  wire ex_branch_with_delayslot_reg;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire of_PipeRun_carry_7;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_1  = lopt;
  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_6  = lopt_5;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_7 = lopt_6;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_5 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(ex_branch_with_delayslot_reg),
        .DI({\^lopt_6 ,\^lopt_3 ,\^lopt_1 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_4 ,\^lopt_2 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_68
   (\Using_FPGA.Native_0 ,
    E,
    ex_Write_DCache_decode_reg,
    ex_Write_ICache_i_reg,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ,
    mem_gpr_write_reg,
    ex_bt_hit_hold_reg,
    mem_gpr_write_dbg_reg,
    of_set_MSR_IE_hold_reg,
    \Using_FPGA.Native_1 ,
    of_PipeRun_carry_9,
    Dbg_Disable,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \wb_exception_kind_i_reg[27] ,
    \Using_FPGA.Native_2 ,
    ex_write_dcache_instr,
    ex_Write_ICache_i,
    mem_valid_reg,
    \Performace_Debug_Control.dbg_stop_if_delay_i_reg ,
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ,
    p_36_out,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ,
    mem_gpr_write,
    ex_gpr_write_reg,
    wb_exception_i_reg,
    out,
    mem_jump_hit0,
    ex_gpr_write_dbg,
    mem_gpr_write_dbg,
    Q,
    p_82_in,
    of_set_MSR_IE_hold_reg_0,
    ex_Take_Intr_or_Exc_reg,
    ex_set_MSR_IE_instr,
    \EX_Op1_reg[30] ,
    ex_MSR,
    \wb_exception_kind_i_reg[27]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output \Using_FPGA.Native_0 ;
  output [0:0]E;
  output ex_Write_DCache_decode_reg;
  output ex_Write_ICache_i_reg;
  output \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  output mem_gpr_write_reg;
  output ex_bt_hit_hold_reg;
  output mem_gpr_write_dbg_reg;
  output of_set_MSR_IE_hold_reg;
  output \Using_FPGA.Native_1 ;
  input of_PipeRun_carry_9;
  input Dbg_Disable;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \wb_exception_kind_i_reg[27] ;
  input \Using_FPGA.Native_2 ;
  input ex_write_dcache_instr;
  input ex_Write_ICache_i;
  input mem_valid_reg;
  input \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  input \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  input p_36_out;
  input \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  input mem_gpr_write;
  input ex_gpr_write_reg;
  input wb_exception_i_reg;
  input [0:0]out;
  input mem_jump_hit0;
  input ex_gpr_write_dbg;
  input mem_gpr_write_dbg;
  input [0:0]Q;
  input p_82_in;
  input of_set_MSR_IE_hold_reg_0;
  input ex_Take_Intr_or_Exc_reg;
  input ex_set_MSR_IE_instr;
  input \EX_Op1_reg[30] ;
  input [0:0]ex_MSR;
  input \wb_exception_kind_i_reg[27]_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire Dbg_Disable;
  wire [0:0]E;
  wire \EX_Op1_reg[30] ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]ex_MSR;
  wire ex_Take_Intr_or_Exc_reg;
  wire ex_Write_DCache_decode_reg;
  wire ex_Write_ICache_i;
  wire ex_Write_ICache_i_reg;
  wire ex_bt_hit_hold_reg;
  wire ex_gpr_write_dbg;
  wire ex_gpr_write_reg;
  wire ex_set_MSR_IE_instr;
  wire ex_write_dcache_instr;
  wire mem_gpr_write;
  wire mem_gpr_write_dbg;
  wire mem_gpr_write_dbg_reg;
  wire mem_gpr_write_reg;
  wire mem_jump_hit0;
  wire mem_valid_reg;
  wire of_PipeRun_carry_9;
  wire of_set_MSR_IE_hold_reg;
  wire of_set_MSR_IE_hold_reg_0;
  wire [0:0]out;
  wire p_36_out;
  wire p_82_in;
  wire wb_exception_i_reg;
  wire \wb_exception_kind_i_reg[27] ;
  wire \wb_exception_kind_i_reg[27]_0 ;

  assign \Using_FPGA.Native_0  = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFFFDF55FFFF0000)) 
    \Performace_Debug_Control.ex_dbg_pc_hit_i_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(mem_valid_reg),
        .I2(\Performace_Debug_Control.dbg_stop_if_delay_i_reg ),
        .I3(\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ),
        .I4(p_36_out),
        .I5(\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ),
        .O(\Performace_Debug_Control.ex_dbg_pc_hit_i_reg ));
  LUT6 #(
    .INIT(64'h00000000F8FFF800)) 
    \Using_FPGA.Native_i_1__186 
       (.I0(ex_Take_Intr_or_Exc_reg),
        .I1(ex_set_MSR_IE_instr),
        .I2(\EX_Op1_reg[30] ),
        .I3(\Using_FPGA.Native_0 ),
        .I4(ex_MSR),
        .I5(\wb_exception_kind_i_reg[27]_0 ),
        .O(\Using_FPGA.Native_1 ));
  VCC VCC
       (.P(\<const1> ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'h10)) 
    ex_Write_DCache_decode_cmb_inferred_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(ex_write_dcache_instr),
        .O(ex_Write_DCache_decode_reg));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'h10)) 
    ex_Write_ICache_i_cmb_inferred_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(ex_Write_ICache_i),
        .O(ex_Write_ICache_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'h02)) 
    ex_bt_hit_hold_i_1
       (.I0(mem_jump_hit0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(out),
        .O(ex_bt_hit_hold_reg));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    mem_gpr_write_dbg_i_2
       (.I0(ex_gpr_write_dbg),
        .I1(\Using_FPGA.Native_0 ),
        .I2(mem_gpr_write_dbg),
        .O(mem_gpr_write_dbg_reg));
  LUT5 #(
    .INIT(32'h000000E2)) 
    mem_gpr_write_i_1
       (.I0(mem_gpr_write),
        .I1(\Using_FPGA.Native_0 ),
        .I2(ex_gpr_write_reg),
        .I3(wb_exception_i_reg),
        .I4(out),
        .O(mem_gpr_write_reg));
  LUT4 #(
    .INIT(16'h0B00)) 
    \mem_pc_i[0]_i_1 
       (.I0(Dbg_Disable),
        .I1(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I2(\wb_exception_kind_i_reg[27] ),
        .I3(\Using_FPGA.Native_0 ),
        .O(E));
  LUT6 #(
    .INIT(64'h0000000000FF0080)) 
    of_set_MSR_IE_hold_i_1
       (.I0(Q),
        .I1(p_82_in),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(of_set_MSR_IE_hold_reg_0),
        .I5(out),
        .O(of_set_MSR_IE_hold_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_69
   (of_PipeRun_carry_9,
    EX_MBAR_Stall,
    ex_branch_with_delayslot_reg,
    of_PipeRun_carry_10,
    ex_mbar_sleep,
    ex_mbar_decode,
    ex_first_cycle,
    ex_mbar_stall_no_sleep_1,
    ex_jump_hold,
    ex_Take_Intr_or_Exc,
    lopt);
  output of_PipeRun_carry_9;
  output EX_MBAR_Stall;
  input ex_branch_with_delayslot_reg;
  input of_PipeRun_carry_10;
  input ex_mbar_sleep;
  input ex_mbar_decode;
  input ex_first_cycle;
  input ex_mbar_stall_no_sleep_1;
  input ex_jump_hold;
  input ex_Take_Intr_or_Exc;
  output lopt;

  wire \<const0> ;
  wire EX_MBAR_Stall;
  wire ex_Take_Intr_or_Exc;
  wire ex_branch_with_delayslot_reg;
  wire ex_first_cycle;
  wire ex_jump_hold;
  wire ex_mbar_decode;
  wire ex_mbar_sleep;
  wire ex_mbar_stall_no_sleep_1;
  wire of_PipeRun_carry_10;
  wire of_PipeRun_carry_9;

  assign lopt = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAEEEA)) 
    \Using_FPGA.Native_i_2__37 
       (.I0(ex_mbar_sleep),
        .I1(ex_mbar_decode),
        .I2(ex_first_cycle),
        .I3(ex_mbar_stall_no_sleep_1),
        .I4(ex_jump_hold),
        .I5(ex_Take_Intr_or_Exc),
        .O(EX_MBAR_Stall));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_70
   (of_PipeRun_carry_10,
    E,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output of_PipeRun_carry_10;
  input [0:0]E;
  input lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;

  wire [0:0]E;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire lopt_5;
  wire of_PipeRun_carry_10;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_1  = lopt;
  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign lopt_2 = \^lopt_3 ;
  assign lopt_5 = lopt_4;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_3 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [1:0]}),
        .CYINIT(E),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_5,\^lopt_2 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_71
   (use_Reg_Neg_S_reg,
    ex_Take_Intr_or_Exc_reg,
    ex_is_mul_instr_reg,
    ex_valid_keep_reg,
    ex_first_cycle_reg,
    \Using_FPGA.Native_0 ,
    ex_Instr_Excep_combo_reg,
    \Performace_Debug_Control.ex_watchpoint_brk_reg ,
    of_Take_Interrupt_hold_reg,
    ex_jump_nodelay_reg,
    of_pipe_ctrl,
    of_PipeRun_carry_2,
    of_Take_Interrupt_hold_reg_0,
    ex_Take_Intr_or_Exc,
    ex_delayslot_Instr2,
    out,
    ex_div_unsigned,
    ex_valid_keep,
    of_next_ex_valid,
    wb_exception_i_reg,
    ex_Take_Intr_or_Exc_reg_0,
    ex_set_MSR_IE_instr,
    \EX_Op1_reg[30] ,
    of_MSR,
    \wb_exception_kind_i_reg[27] ,
    ex_Instr_Excep_combo,
    \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ,
    Dbg_Disable,
    of_Take_Interrupt_hold,
    ex_jump_nodelay_reg_0,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output use_Reg_Neg_S_reg;
  output ex_Take_Intr_or_Exc_reg;
  output ex_is_mul_instr_reg;
  output ex_valid_keep_reg;
  output ex_first_cycle_reg;
  output \Using_FPGA.Native_0 ;
  output ex_Instr_Excep_combo_reg;
  output \Performace_Debug_Control.ex_watchpoint_brk_reg ;
  output of_Take_Interrupt_hold_reg;
  output ex_jump_nodelay_reg;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_2;
  input of_Take_Interrupt_hold_reg_0;
  input ex_Take_Intr_or_Exc;
  input ex_delayslot_Instr2;
  input [0:0]out;
  input ex_div_unsigned;
  input ex_valid_keep;
  input of_next_ex_valid;
  input wb_exception_i_reg;
  input ex_Take_Intr_or_Exc_reg_0;
  input ex_set_MSR_IE_instr;
  input \EX_Op1_reg[30] ;
  input [0:0]of_MSR;
  input \wb_exception_kind_i_reg[27] ;
  input ex_Instr_Excep_combo;
  input \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ;
  input Dbg_Disable;
  input of_Take_Interrupt_hold;
  input ex_jump_nodelay_reg_0;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;

  wire \<const0> ;
  wire Dbg_Disable;
  wire \EX_Op1_reg[30] ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.ex_watchpoint_brk_reg ;
  wire \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_Instr_Excep_combo;
  wire ex_Instr_Excep_combo_reg;
  wire ex_Take_Intr_or_Exc;
  wire ex_Take_Intr_or_Exc_reg;
  wire ex_Take_Intr_or_Exc_reg_0;
  wire ex_delayslot_Instr2;
  wire ex_div_unsigned;
  wire ex_first_cycle_reg;
  wire ex_is_mul_instr_reg;
  wire ex_jump_nodelay_reg;
  wire ex_jump_nodelay_reg_0;
  wire ex_set_MSR_IE_instr;
  wire ex_valid_keep;
  wire ex_valid_keep_reg;
  wire lopt;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire [0:0]of_MSR;
  wire of_PipeRun_carry_2;
  wire of_Take_Interrupt_hold;
  wire of_Take_Interrupt_hold_reg;
  wire of_Take_Interrupt_hold_reg_0;
  wire of_next_ex_valid;
  wire [0:0]of_pipe_ctrl;
  wire [0:0]out;
  wire use_Reg_Neg_S_reg;
  wire wb_exception_i_reg;
  wire \wb_exception_kind_i_reg[27] ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_7  = lopt_6;
  assign \^lopt_8  = lopt_7;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_9 = \<const0> ;
  assign use_Reg_Neg_S_reg = lopt_8;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \Performace_Debug_Control.ex_watchpoint_brk_i_1 
       (.I0(use_Reg_Neg_S_reg),
        .I1(\Performace_Debug_Control.ex_watchpoint_brk_reg_0 ),
        .I2(Dbg_Disable),
        .I3(out),
        .O(\Performace_Debug_Control.ex_watchpoint_brk_reg ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_6 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [1:0]}),
        .CYINIT(lopt),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_7 ,\^lopt_4 ,\^lopt_2 }),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],\^lopt_8 ,\^lopt_5 ,\^lopt_3 }));
  LUT6 #(
    .INIT(64'h00000000F8FFF800)) 
    \Using_FPGA.Native_i_1__187 
       (.I0(ex_Take_Intr_or_Exc_reg_0),
        .I1(ex_set_MSR_IE_instr),
        .I2(\EX_Op1_reg[30] ),
        .I3(use_Reg_Neg_S_reg),
        .I4(of_MSR),
        .I5(\wb_exception_kind_i_reg[27] ),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'h04)) 
    ex_Instr_Excep_combo_i_1
       (.I0(use_Reg_Neg_S_reg),
        .I1(ex_Instr_Excep_combo),
        .I2(out),
        .O(ex_Instr_Excep_combo_reg));
  LUT5 #(
    .INIT(32'h0000A0AC)) 
    ex_Take_Intr_or_Exc_i_1
       (.I0(of_Take_Interrupt_hold_reg_0),
        .I1(ex_Take_Intr_or_Exc),
        .I2(use_Reg_Neg_S_reg),
        .I3(ex_delayslot_Instr2),
        .I4(out),
        .O(ex_Take_Intr_or_Exc_reg));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'h02)) 
    ex_first_cycle_i_1
       (.I0(use_Reg_Neg_S_reg),
        .I1(wb_exception_i_reg),
        .I2(out),
        .O(ex_first_cycle_reg));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'h02)) 
    ex_is_mul_instr_i_1
       (.I0(ex_div_unsigned),
        .I1(use_Reg_Neg_S_reg),
        .I2(out),
        .O(ex_is_mul_instr_reg));
  LUT6 #(
    .INIT(64'h00000000CADACAFA)) 
    ex_jump_nodelay_i_1
       (.I0(ex_jump_nodelay_reg_0),
        .I1(of_Take_Interrupt_hold_reg_0),
        .I2(use_Reg_Neg_S_reg),
        .I3(\Using_FPGA.Native_1 ),
        .I4(ex_delayslot_Instr2),
        .I5(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(ex_jump_nodelay_reg));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT5 #(
    .INIT(32'h000000E2)) 
    ex_valid_keep_i_1
       (.I0(ex_valid_keep),
        .I1(use_Reg_Neg_S_reg),
        .I2(of_next_ex_valid),
        .I3(wb_exception_i_reg),
        .I4(out),
        .O(ex_valid_keep_reg));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'h000E)) 
    of_Take_Interrupt_hold_i_1
       (.I0(of_Take_Interrupt_hold),
        .I1(of_Take_Interrupt_hold_reg_0),
        .I2(use_Reg_Neg_S_reg),
        .I3(out),
        .O(of_Take_Interrupt_hold_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module system_microblaze_0_0_MB_MUXCY_9
   (carry_7,
    SRL16_Sel_7,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output carry_7;
  input SRL16_Sel_7;
  input [0:0]Q;
  input lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;

  wire [0:0]Q;
  wire SRL16_Sel_7;
  wire carry_7;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_1  = lopt;
  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_6  = lopt_5;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_7 = lopt_6;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_5 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(Q),
        .DI({\^lopt_6 ,\^lopt_3 ,\^lopt_1 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_4 ,\^lopt_2 ,SRL16_Sel_7}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY
   (\Instr_Addr[0] ,
    Q,
    LO,
    \EX_Op2_reg[0] ,
    ex_delayslot_Instr2);
  output [0:0]\Instr_Addr[0] ;
  input [0:0]Q;
  input LO;
  input [0:0]\EX_Op2_reg[0] ;
  input ex_delayslot_Instr2;

  wire [0:0]\EX_Op2_reg[0] ;
  wire [0:0]\Instr_Addr[0] ;
  wire LO;
  wire O28_in;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire [3:0]\NLW_Using_FPGA.Native_I2_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_I2_CARRY4_DI_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_I2_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_I2_CARRY4_S_UNCONNECTED ;

  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[0]_INST_0 
       (.I0(\EX_Op2_reg[0] ),
        .I1(O28_in),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[0] ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I2_CARRY4 
       (.CI(LO),
        .CO(\NLW_Using_FPGA.Native_I2_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI(\NLW_Using_FPGA.Native_I2_CARRY4_DI_UNCONNECTED [3:0]),
        .O({\NLW_Using_FPGA.Native_I2_CARRY4_O_UNCONNECTED [3:1],O28_in}),
        .S({\NLW_Using_FPGA.Native_I2_CARRY4_S_UNCONNECTED [3:1],Q}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_166
   (\Instr_Addr[10] ,
    LO,
    \EX_Op2_reg[10] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[11] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14,
    lopt_15,
    lopt_16,
    lopt_17,
    lopt_18,
    lopt_19,
    lopt_20,
    lopt_21,
    lopt_22,
    lopt_23,
    lopt_24,
    lopt_25,
    lopt_26,
    lopt_27,
    lopt_28,
    lopt_29,
    lopt_30,
    lopt_31,
    lopt_32,
    lopt_33,
    lopt_34,
    lopt_35,
    lopt_36,
    lopt_37,
    lopt_38,
    lopt_39,
    lopt_40,
    lopt_41,
    lopt_42,
    lopt_43,
    lopt_44,
    lopt_45,
    lopt_46,
    lopt_47,
    lopt_48,
    lopt_49,
    lopt_50,
    lopt_51,
    lopt_52,
    lopt_53,
    lopt_54,
    lopt_55,
    lopt_56,
    lopt_57,
    lopt_58,
    lopt_59,
    lopt_60,
    lopt_61,
    lopt_62,
    lopt_63,
    lopt_64,
    lopt_65,
    lopt_66,
    lopt_67,
    lopt_68,
    lopt_69,
    lopt_70,
    lopt_71,
    lopt_72,
    lopt_73,
    lopt_74,
    lopt_75,
    lopt_76,
    lopt_77,
    lopt_78,
    lopt_79,
    lopt_80,
    lopt_81,
    lopt_82,
    lopt_83,
    lopt_84,
    lopt_85,
    lopt_86,
    lopt_87);
  output [0:0]\Instr_Addr[10] ;
  output LO;
  input [0:0]\EX_Op2_reg[10] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[11] ;
  input lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;
  output lopt_8;
  input lopt_9;
  input lopt_10;
  output lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;
  output lopt_15;
  input lopt_16;
  input lopt_17;
  output lopt_18;
  input lopt_19;
  input lopt_20;
  output lopt_21;
  input lopt_22;
  input lopt_23;
  output lopt_24;
  output lopt_25;
  output lopt_26;
  output lopt_27;
  output lopt_28;
  input lopt_29;
  input lopt_30;
  output lopt_31;
  input lopt_32;
  input lopt_33;
  output lopt_34;
  input lopt_35;
  input lopt_36;
  output lopt_37;
  input lopt_38;
  input lopt_39;
  output lopt_40;
  output lopt_41;
  output lopt_42;
  output lopt_43;
  output lopt_44;
  input lopt_45;
  input lopt_46;
  output lopt_47;
  input lopt_48;
  input lopt_49;
  output lopt_50;
  input lopt_51;
  input lopt_52;
  output lopt_53;
  input lopt_54;
  input lopt_55;
  output lopt_56;
  output lopt_57;
  output lopt_58;
  output lopt_59;
  output lopt_60;
  input lopt_61;
  input lopt_62;
  output lopt_63;
  input lopt_64;
  input lopt_65;
  output lopt_66;
  input lopt_67;
  input lopt_68;
  output lopt_69;
  input lopt_70;
  input lopt_71;
  output lopt_72;
  output lopt_73;
  output lopt_74;
  output lopt_75;
  output lopt_76;
  input lopt_77;
  input lopt_78;
  output lopt_79;
  input lopt_80;
  input lopt_81;
  output lopt_82;
  input lopt_83;
  input lopt_84;
  output lopt_85;
  output lopt_86;
  output lopt_87;

  wire [0:0]\EX_Op2_reg[10] ;
  wire [0:0]\Instr_Addr[10] ;
  wire LO;
  wire O48_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[11] ;
  wire lopt;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire \^lopt_12 ;
  wire \^lopt_13 ;
  wire \^lopt_15 ;
  wire \^lopt_16 ;
  wire \^lopt_17 ;
  wire \^lopt_18 ;
  wire \^lopt_19 ;
  wire \^lopt_2 ;
  wire \^lopt_20 ;
  wire \^lopt_21 ;
  wire \^lopt_22 ;
  wire \^lopt_23 ;
  wire \^lopt_24 ;
  wire \^lopt_25 ;
  wire \^lopt_26 ;
  wire \^lopt_27 ;
  wire \^lopt_28 ;
  wire \^lopt_29 ;
  wire \^lopt_3 ;
  wire \^lopt_30 ;
  wire \^lopt_32 ;
  wire \^lopt_33 ;
  wire \^lopt_34 ;
  wire \^lopt_35 ;
  wire \^lopt_36 ;
  wire \^lopt_37 ;
  wire \^lopt_38 ;
  wire \^lopt_39 ;
  wire \^lopt_4 ;
  wire \^lopt_40 ;
  wire \^lopt_41 ;
  wire \^lopt_42 ;
  wire \^lopt_43 ;
  wire \^lopt_44 ;
  wire \^lopt_45 ;
  wire \^lopt_46 ;
  wire \^lopt_47 ;
  wire \^lopt_49 ;
  wire \^lopt_5 ;
  wire \^lopt_50 ;
  wire \^lopt_51 ;
  wire \^lopt_52 ;
  wire \^lopt_53 ;
  wire \^lopt_54 ;
  wire \^lopt_55 ;
  wire \^lopt_56 ;
  wire \^lopt_57 ;
  wire \^lopt_58 ;
  wire \^lopt_59 ;
  wire \^lopt_6 ;
  wire \^lopt_60 ;
  wire \^lopt_61 ;
  wire \^lopt_62 ;
  wire \^lopt_63 ;
  wire \^lopt_64 ;
  wire \^lopt_66 ;
  wire \^lopt_67 ;
  wire \^lopt_68 ;
  wire \^lopt_69 ;
  wire \^lopt_7 ;
  wire \^lopt_70 ;
  wire \^lopt_71 ;
  wire \^lopt_72 ;
  wire \^lopt_73 ;
  wire \^lopt_74 ;
  wire \^lopt_75 ;
  wire \^lopt_76 ;
  wire \^lopt_77 ;
  wire \^lopt_78 ;
  wire \^lopt_79 ;
  wire \^lopt_8 ;
  wire \^lopt_80 ;
  wire \^lopt_81 ;
  wire \^lopt_83 ;
  wire \^lopt_84 ;
  wire \^lopt_85 ;
  wire \^lopt_86 ;
  wire \^lopt_87 ;
  wire lopt_88;
  wire lopt_89;
  wire \^lopt_9 ;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire [1:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_10  = lopt_9;
  assign \^lopt_11  = lopt_10;
  assign \^lopt_15  = lopt_13;
  assign \^lopt_16  = lopt_14;
  assign \^lopt_18  = lopt_16;
  assign \^lopt_19  = lopt_17;
  assign \^lopt_2  = lopt_1;
  assign \^lopt_21  = lopt_19;
  assign \^lopt_22  = lopt_20;
  assign \^lopt_24  = lopt_22;
  assign \^lopt_25  = lopt_23;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_32  = lopt_29;
  assign \^lopt_33  = lopt_30;
  assign \^lopt_35  = lopt_32;
  assign \^lopt_36  = lopt_33;
  assign \^lopt_38  = lopt_35;
  assign \^lopt_39  = lopt_36;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_41  = lopt_38;
  assign \^lopt_42  = lopt_39;
  assign \^lopt_49  = lopt_45;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_50  = lopt_46;
  assign \^lopt_52  = lopt_48;
  assign \^lopt_53  = lopt_49;
  assign \^lopt_55  = lopt_51;
  assign \^lopt_56  = lopt_52;
  assign \^lopt_58  = lopt_54;
  assign \^lopt_59  = lopt_55;
  assign \^lopt_66  = lopt_61;
  assign \^lopt_67  = lopt_62;
  assign \^lopt_69  = lopt_64;
  assign \^lopt_7  = lopt_6;
  assign \^lopt_70  = lopt_65;
  assign \^lopt_72  = lopt_67;
  assign \^lopt_73  = lopt_68;
  assign \^lopt_75  = lopt_70;
  assign \^lopt_76  = lopt_71;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_83  = lopt_77;
  assign \^lopt_84  = lopt_78;
  assign \^lopt_86  = lopt_80;
  assign \^lopt_87  = lopt_81;
  assign lopt_11 = \^lopt_12 ;
  assign lopt_12 = \^lopt_13 ;
  assign lopt_15 = \^lopt_17 ;
  assign lopt_18 = \^lopt_20 ;
  assign lopt_21 = \^lopt_23 ;
  assign lopt_24 = \^lopt_26 ;
  assign lopt_25 = \^lopt_27 ;
  assign lopt_26 = \^lopt_28 ;
  assign lopt_27 = \^lopt_29 ;
  assign lopt_28 = \^lopt_30 ;
  assign lopt_31 = \^lopt_34 ;
  assign lopt_34 = \^lopt_37 ;
  assign lopt_37 = \^lopt_40 ;
  assign lopt_40 = \^lopt_43 ;
  assign lopt_41 = \^lopt_44 ;
  assign lopt_42 = \^lopt_45 ;
  assign lopt_43 = \^lopt_46 ;
  assign lopt_44 = \^lopt_47 ;
  assign lopt_47 = \^lopt_51 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_50 = \^lopt_54 ;
  assign lopt_53 = \^lopt_57 ;
  assign lopt_56 = \^lopt_60 ;
  assign lopt_57 = \^lopt_61 ;
  assign lopt_58 = \^lopt_62 ;
  assign lopt_59 = \^lopt_63 ;
  assign lopt_60 = \^lopt_64 ;
  assign lopt_63 = \^lopt_68 ;
  assign lopt_66 = \^lopt_71 ;
  assign lopt_69 = \^lopt_74 ;
  assign lopt_72 = \^lopt_77 ;
  assign lopt_73 = \^lopt_78 ;
  assign lopt_74 = \^lopt_79 ;
  assign lopt_75 = \^lopt_80 ;
  assign lopt_76 = \^lopt_81 ;
  assign lopt_79 = \^lopt_85 ;
  assign lopt_8 = \^lopt_9 ;
  assign lopt_82 = lopt_88;
  assign lopt_85 = lopt_91;
  assign lopt_86 = lopt_92;
  assign lopt_87 = lopt_93;
  assign lopt_89 = lopt_83;
  assign lopt_90 = lopt_84;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4
       (.CI(\^lopt_23 ),
        .CO({\^lopt_40 ,\^lopt_37 ,\^lopt_34 ,\^lopt_30 }),
        .CYINIT(1'b0),
        .DI({\^lopt_41 ,\^lopt_38 ,\^lopt_35 ,\^lopt_32 }),
        .O({\^lopt_46 ,\^lopt_45 ,\^lopt_44 ,\^lopt_43 }),
        .S({\^lopt_42 ,\^lopt_39 ,\^lopt_36 ,\^lopt_33 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_1
       (.CI(\^lopt_40 ),
        .CO({\^lopt_57 ,\^lopt_54 ,\^lopt_51 ,\^lopt_47 }),
        .CYINIT(1'b0),
        .DI({\^lopt_58 ,\^lopt_55 ,\^lopt_52 ,\^lopt_49 }),
        .O({\^lopt_63 ,\^lopt_62 ,\^lopt_61 ,\^lopt_60 }),
        .S({\^lopt_59 ,\^lopt_56 ,\^lopt_53 ,\^lopt_50 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_2
       (.CI(\^lopt_57 ),
        .CO({\^lopt_74 ,\^lopt_71 ,\^lopt_68 ,\^lopt_64 }),
        .CYINIT(1'b0),
        .DI({\^lopt_75 ,\^lopt_72 ,\^lopt_69 ,\^lopt_66 }),
        .O({\^lopt_80 ,\^lopt_79 ,\^lopt_78 ,\^lopt_77 }),
        .S({\^lopt_76 ,\^lopt_73 ,\^lopt_70 ,\^lopt_67 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_3
       (.CI(\^lopt_74 ),
        .CO({lopt_88,LO,\^lopt_85 ,\^lopt_81 }),
        .CYINIT(1'b0),
        .DI({lopt_89,1'b0,\^lopt_86 ,\^lopt_83 }),
        .O({lopt_93,O48_out,lopt_92,lopt_91}),
        .S({lopt_90,Q,\^lopt_87 ,\^lopt_84 }));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[10]_INST_0 
       (.I0(\EX_Op2_reg[10] ),
        .I1(O48_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[10] ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_9 ,\^lopt_6 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [1:0]}),
        .CYINIT(lopt),
        .DI({\^lopt_10 ,\^lopt_7 ,\^lopt_4 ,\^lopt_2 }),
        .O({\^lopt_12 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [2:0]}),
        .S({\^lopt_11 ,\^lopt_8 ,\^lopt_5 ,\^lopt_3 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\^lopt_9 ),
        .CO({\^lopt_23 ,\^lopt_20 ,\^lopt_17 ,\^lopt_13 }),
        .CYINIT(1'b0),
        .DI({\^lopt_24 ,\^lopt_21 ,\^lopt_18 ,\^lopt_15 }),
        .O({\^lopt_29 ,\^lopt_28 ,\^lopt_27 ,\^lopt_26 }),
        .S({\^lopt_25 ,\^lopt_22 ,\^lopt_19 ,\^lopt_16 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_167
   (\Instr_Addr[11] ,
    LO,
    \EX_Op2_reg[11] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[12] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[11] ;
  output LO;
  input [0:0]\EX_Op2_reg[11] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[12] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[11] ;
  wire [0:0]\Instr_Addr[11] ;
  wire LO;
  wire O50_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[12] ;

  assign LO = lopt;
  assign O50_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[11]_INST_0 
       (.I0(\EX_Op2_reg[11] ),
        .I1(O50_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[11] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_168
   (\Instr_Addr[12] ,
    LO,
    \EX_Op2_reg[12] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[13] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[12] ;
  output LO;
  input [0:0]\EX_Op2_reg[12] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[13] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[12] ;
  wire [0:0]\Instr_Addr[12] ;
  wire LO;
  wire O52_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[13] ;

  assign LO = lopt;
  assign O52_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[12]_INST_0 
       (.I0(\EX_Op2_reg[12] ),
        .I1(O52_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[12] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_169
   (\Instr_Addr[13] ,
    LO,
    \EX_Op2_reg[13] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[14] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[13] ;
  output LO;
  input [0:0]\EX_Op2_reg[13] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[14] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[13] ;
  wire [0:0]\Instr_Addr[13] ;
  wire LO;
  wire O54_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[14] ;

  assign LO = lopt;
  assign O54_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[13]_INST_0 
       (.I0(\EX_Op2_reg[13] ),
        .I1(O54_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[13] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_170
   (\Instr_Addr[14] ,
    LO,
    \EX_Op2_reg[14] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[15] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[14] ;
  output LO;
  input [0:0]\EX_Op2_reg[14] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[15] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[14] ;
  wire [0:0]\Instr_Addr[14] ;
  wire LO;
  wire O56_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[15] ;

  assign LO = lopt;
  assign O56_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[14]_INST_0 
       (.I0(\EX_Op2_reg[14] ),
        .I1(O56_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[14] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_171
   (\Instr_Addr[15] ,
    LO,
    \EX_Op2_reg[15] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[16] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[15] ;
  output LO;
  input [0:0]\EX_Op2_reg[15] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[16] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[15] ;
  wire [0:0]\Instr_Addr[15] ;
  wire LO;
  wire O58_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[16] ;

  assign LO = lopt;
  assign O58_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[15]_INST_0 
       (.I0(\EX_Op2_reg[15] ),
        .I1(O58_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[15] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_172
   (\Instr_Addr[16] ,
    LO,
    \EX_Op2_reg[16] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[17] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[16] ;
  output LO;
  input [0:0]\EX_Op2_reg[16] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[17] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[16] ;
  wire [0:0]\Instr_Addr[16] ;
  wire LO;
  wire O60_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[17] ;

  assign LO = lopt;
  assign O60_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[16]_INST_0 
       (.I0(\EX_Op2_reg[16] ),
        .I1(O60_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[16] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_173
   (\Instr_Addr[17] ,
    LO,
    \EX_Op2_reg[17] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[18] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[17] ;
  output LO;
  input [0:0]\EX_Op2_reg[17] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[18] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[17] ;
  wire [0:0]\Instr_Addr[17] ;
  wire LO;
  wire O62_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[18] ;

  assign LO = lopt;
  assign O62_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[17]_INST_0 
       (.I0(\EX_Op2_reg[17] ),
        .I1(O62_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[17] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_174
   (\Instr_Addr[18] ,
    LO,
    \EX_Op2_reg[18] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[19] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[18] ;
  output LO;
  input [0:0]\EX_Op2_reg[18] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[19] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[18] ;
  wire [0:0]\Instr_Addr[18] ;
  wire LO;
  wire O64_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[19] ;

  assign LO = lopt;
  assign O64_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[18]_INST_0 
       (.I0(\EX_Op2_reg[18] ),
        .I1(O64_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[18] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_175
   (\Instr_Addr[19] ,
    LO,
    \EX_Op2_reg[19] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[20] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[19] ;
  output LO;
  input [0:0]\EX_Op2_reg[19] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[20] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[19] ;
  wire [0:0]\Instr_Addr[19] ;
  wire LO;
  wire O66_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[20] ;

  assign LO = lopt;
  assign O66_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[19]_INST_0 
       (.I0(\EX_Op2_reg[19] ),
        .I1(O66_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[19] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_176
   (\Instr_Addr[1] ,
    LO,
    \EX_Op2_reg[1] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[2] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14,
    lopt_15,
    lopt_16,
    lopt_17,
    lopt_18,
    lopt_19,
    lopt_20,
    lopt_21,
    lopt_22,
    lopt_23,
    lopt_24,
    lopt_25,
    lopt_26,
    lopt_27,
    lopt_28);
  output [0:0]\Instr_Addr[1] ;
  output LO;
  input [0:0]\EX_Op2_reg[1] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[2] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;
  output lopt_7;
  input lopt_8;
  input lopt_9;
  output lopt_10;
  input lopt_11;
  input lopt_12;
  output lopt_13;
  output lopt_14;
  output lopt_15;
  output lopt_16;
  output lopt_17;
  input lopt_18;
  input lopt_19;
  output lopt_20;
  input lopt_21;
  input lopt_22;
  output lopt_23;
  input lopt_24;
  input lopt_25;
  output lopt_26;
  output lopt_27;
  output lopt_28;

  wire [0:0]\EX_Op2_reg[1] ;
  wire [0:0]\Instr_Addr[1] ;
  wire LO;
  wire O30_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[2] ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire \^lopt_12 ;
  wire \^lopt_13 ;
  wire \^lopt_14 ;
  wire \^lopt_15 ;
  wire \^lopt_16 ;
  wire \^lopt_17 ;
  wire \^lopt_18 ;
  wire \^lopt_20 ;
  wire \^lopt_21 ;
  wire \^lopt_22 ;
  wire \^lopt_23 ;
  wire \^lopt_24 ;
  wire \^lopt_25 ;
  wire \^lopt_26 ;
  wire \^lopt_27 ;
  wire \^lopt_28 ;
  wire lopt_29;
  wire \^lopt_3 ;
  wire lopt_30;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_10  = lopt_9;
  assign \^lopt_12  = lopt_11;
  assign \^lopt_13  = lopt_12;
  assign \^lopt_20  = lopt_18;
  assign \^lopt_21  = lopt_19;
  assign \^lopt_23  = lopt_21;
  assign \^lopt_24  = lopt_22;
  assign \^lopt_26  = lopt_24;
  assign \^lopt_27  = lopt_25;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_7  = lopt_6;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_13 = \^lopt_14 ;
  assign lopt_14 = \^lopt_15 ;
  assign lopt_15 = \^lopt_16 ;
  assign lopt_16 = \^lopt_17 ;
  assign lopt_17 = \^lopt_18 ;
  assign lopt_20 = \^lopt_22 ;
  assign lopt_23 = \^lopt_25 ;
  assign lopt_26 = \^lopt_28 ;
  assign lopt_27 = lopt_29;
  assign lopt_28 = lopt_30;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_7 = \^lopt_8 ;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4
       (.CI(\^lopt_11 ),
        .CO({LO,\^lopt_25 ,\^lopt_22 ,\^lopt_18 }),
        .CYINIT(1'b0),
        .DI({1'b0,\^lopt_26 ,\^lopt_23 ,\^lopt_20 }),
        .O({O30_out,lopt_30,lopt_29,\^lopt_28 }),
        .S({Q,\^lopt_27 ,\^lopt_24 ,\^lopt_21 }));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[1]_INST_0 
       (.I0(\EX_Op2_reg[1] ),
        .I1(O30_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[1] ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(lopt_1),
        .CO({\^lopt_11 ,\^lopt_8 ,\^lopt_5 ,lopt}),
        .CYINIT(1'b0),
        .DI({\^lopt_12 ,\^lopt_9 ,\^lopt_6 ,\^lopt_3 }),
        .O({\^lopt_17 ,\^lopt_16 ,\^lopt_15 ,\^lopt_14 }),
        .S({\^lopt_13 ,\^lopt_10 ,\^lopt_7 ,\^lopt_4 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_177
   (\Instr_Addr[20] ,
    LO,
    \EX_Op2_reg[20] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[21] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[20] ;
  output LO;
  input [0:0]\EX_Op2_reg[20] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[21] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[20] ;
  wire [0:0]\Instr_Addr[20] ;
  wire LO;
  wire O68_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[21] ;

  assign LO = lopt;
  assign O68_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[20]_INST_0 
       (.I0(\EX_Op2_reg[20] ),
        .I1(O68_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[20] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_178
   (\Instr_Addr[21] ,
    LO,
    \EX_Op2_reg[21] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[22] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[21] ;
  output LO;
  input [0:0]\EX_Op2_reg[21] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[22] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[21] ;
  wire [0:0]\Instr_Addr[21] ;
  wire LO;
  wire O70_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[22] ;

  assign LO = lopt;
  assign O70_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[21]_INST_0 
       (.I0(\EX_Op2_reg[21] ),
        .I1(O70_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[21] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_179
   (\Instr_Addr[22] ,
    LO,
    \EX_Op2_reg[22] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[23] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[22] ;
  output LO;
  input [0:0]\EX_Op2_reg[22] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[23] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[22] ;
  wire [0:0]\Instr_Addr[22] ;
  wire LO;
  wire O72_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[23] ;

  assign LO = lopt;
  assign O72_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[22]_INST_0 
       (.I0(\EX_Op2_reg[22] ),
        .I1(O72_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[22] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_180
   (\Instr_Addr[23] ,
    LO,
    \EX_Op2_reg[23] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[24] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[23] ;
  output LO;
  input [0:0]\EX_Op2_reg[23] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[24] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[23] ;
  wire [0:0]\Instr_Addr[23] ;
  wire LO;
  wire O74_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[24] ;

  assign LO = lopt;
  assign O74_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[23]_INST_0 
       (.I0(\EX_Op2_reg[23] ),
        .I1(O74_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[23] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_181
   (\Instr_Addr[24] ,
    LO,
    \EX_Op2_reg[24] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[25] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[24] ;
  output LO;
  input [0:0]\EX_Op2_reg[24] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[25] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[24] ;
  wire [0:0]\Instr_Addr[24] ;
  wire LO;
  wire O76_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[25] ;

  assign LO = lopt;
  assign O76_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[24]_INST_0 
       (.I0(\EX_Op2_reg[24] ),
        .I1(O76_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[24] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_182
   (\Instr_Addr[25] ,
    LO,
    \EX_Op2_reg[25] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[26] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[25] ;
  output LO;
  input [0:0]\EX_Op2_reg[25] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[26] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[25] ;
  wire [0:0]\Instr_Addr[25] ;
  wire LO;
  wire O78_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[26] ;

  assign LO = lopt;
  assign O78_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[25]_INST_0 
       (.I0(\EX_Op2_reg[25] ),
        .I1(O78_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[25] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_183
   (\Instr_Addr[26] ,
    LO,
    \EX_Op2_reg[26] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[27] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[26] ;
  output LO;
  input [0:0]\EX_Op2_reg[26] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[27] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[26] ;
  wire [0:0]\Instr_Addr[26] ;
  wire LO;
  wire O80_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[27] ;

  assign LO = lopt;
  assign O80_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[26]_INST_0 
       (.I0(\EX_Op2_reg[26] ),
        .I1(O80_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[26] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_184
   (\Instr_Addr[27] ,
    LO,
    \EX_Op2_reg[27] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[28] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[27] ;
  output LO;
  input [0:0]\EX_Op2_reg[27] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[28] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[27] ;
  wire [0:0]\Instr_Addr[27] ;
  wire LO;
  wire O82_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[28] ;

  assign LO = lopt;
  assign O82_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[27]_INST_0 
       (.I0(\EX_Op2_reg[27] ),
        .I1(O82_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[27] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_185
   (\Instr_Addr[28] ,
    LO,
    \EX_Op2_reg[28] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[29] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[28] ;
  output LO;
  input [0:0]\EX_Op2_reg[28] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[29] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[28] ;
  wire [0:0]\Instr_Addr[28] ;
  wire LO;
  wire O84_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[29] ;

  assign LO = lopt;
  assign O84_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[28]_INST_0 
       (.I0(\EX_Op2_reg[28] ),
        .I1(O84_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[28] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_186
   (\Instr_Addr[29] ,
    LO,
    \EX_Op2_reg[29] ,
    ex_delayslot_Instr2,
    Q,
    CI,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[29] ;
  output LO;
  input [0:0]\EX_Op2_reg[29] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input CI;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire CI;
  wire [0:0]\EX_Op2_reg[29] ;
  wire [0:0]\Instr_Addr[29] ;
  wire LO;
  wire O;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[29]_INST_0 
       (.I0(\EX_Op2_reg[29] ),
        .I1(O),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[29] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_187
   (\Instr_Addr[2] ,
    LO,
    \EX_Op2_reg[2] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[3] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[2] ;
  output LO;
  input [0:0]\EX_Op2_reg[2] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[3] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[2] ;
  wire [0:0]\Instr_Addr[2] ;
  wire LO;
  wire O32_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[3] ;

  assign LO = lopt;
  assign O32_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[2]_INST_0 
       (.I0(\EX_Op2_reg[2] ),
        .I1(O32_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[2] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_188
   (\Instr_Addr[3] ,
    LO,
    \EX_Op2_reg[3] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[4] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[3] ;
  output LO;
  input [0:0]\EX_Op2_reg[3] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[4] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[3] ;
  wire [0:0]\Instr_Addr[3] ;
  wire LO;
  wire O34_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[4] ;

  assign LO = lopt;
  assign O34_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[3]_INST_0 
       (.I0(\EX_Op2_reg[3] ),
        .I1(O34_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[3] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_189
   (\Instr_Addr[4] ,
    LO,
    \EX_Op2_reg[4] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[5] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[4] ;
  output LO;
  input [0:0]\EX_Op2_reg[4] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[5] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[4] ;
  wire [0:0]\Instr_Addr[4] ;
  wire LO;
  wire O36_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[5] ;

  assign LO = lopt;
  assign O36_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[4]_INST_0 
       (.I0(\EX_Op2_reg[4] ),
        .I1(O36_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[4] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_190
   (\Instr_Addr[5] ,
    LO,
    \EX_Op2_reg[5] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[6] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[5] ;
  output LO;
  input [0:0]\EX_Op2_reg[5] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[6] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[5] ;
  wire [0:0]\Instr_Addr[5] ;
  wire LO;
  wire O38_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[6] ;

  assign LO = lopt;
  assign O38_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[5]_INST_0 
       (.I0(\EX_Op2_reg[5] ),
        .I1(O38_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[5] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_191
   (\Instr_Addr[6] ,
    LO,
    \EX_Op2_reg[6] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[7] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[6] ;
  output LO;
  input [0:0]\EX_Op2_reg[6] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[7] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[6] ;
  wire [0:0]\Instr_Addr[6] ;
  wire LO;
  wire O40_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[7] ;

  assign LO = lopt;
  assign O40_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[6]_INST_0 
       (.I0(\EX_Op2_reg[6] ),
        .I1(O40_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[6] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_192
   (\Instr_Addr[7] ,
    LO,
    \EX_Op2_reg[7] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[8] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[7] ;
  output LO;
  input [0:0]\EX_Op2_reg[7] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[8] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[7] ;
  wire [0:0]\Instr_Addr[7] ;
  wire LO;
  wire O42_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[8] ;

  assign LO = lopt;
  assign O42_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[7]_INST_0 
       (.I0(\EX_Op2_reg[7] ),
        .I1(O42_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[7] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_193
   (\Instr_Addr[8] ,
    LO,
    \EX_Op2_reg[8] ,
    ex_delayslot_Instr2,
    Q,
    \if_pc_reg[9] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[8] ;
  output LO;
  input [0:0]\EX_Op2_reg[8] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input \if_pc_reg[9] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire [0:0]\EX_Op2_reg[8] ;
  wire [0:0]\Instr_Addr[8] ;
  wire LO;
  wire O44_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;
  wire \if_pc_reg[9] ;

  assign LO = lopt;
  assign O44_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[8]_INST_0 
       (.I0(\EX_Op2_reg[8] ),
        .I1(O44_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[8] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_194
   (\Instr_Addr[9] ,
    LO,
    \EX_Op2_reg[9] ,
    ex_delayslot_Instr2,
    Q,
    CI,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]\Instr_Addr[9] ;
  output LO;
  input [0:0]\EX_Op2_reg[9] ;
  input ex_delayslot_Instr2;
  input [0:0]Q;
  input CI;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire CI;
  wire [0:0]\EX_Op2_reg[9] ;
  wire [0:0]\Instr_Addr[9] ;
  wire LO;
  wire O46_out;
  wire [0:0]Q;
  wire ex_delayslot_Instr2;

  assign LO = lopt;
  assign O46_out = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[9]_INST_0 
       (.I0(\EX_Op2_reg[9] ),
        .I1(O46_out),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[9] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_270
   (\LOCKSTEP_Out_reg[3769] ,
    addr_AddSub_31,
    LO);
  output [0:0]\LOCKSTEP_Out_reg[3769] ;
  input addr_AddSub_31;
  input LO;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3769] ;
  wire addr_AddSub_31;
  wire [3:0]\NLW_Using_FPGA.Native_I2_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_I2_CARRY4_DI_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_I2_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_I2_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I2_CARRY4 
       (.CI(LO),
        .CO(\NLW_Using_FPGA.Native_I2_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI(\NLW_Using_FPGA.Native_I2_CARRY4_DI_UNCONNECTED [3:0]),
        .O({\NLW_Using_FPGA.Native_I2_CARRY4_O_UNCONNECTED [3:1],\LOCKSTEP_Out_reg[3769] }),
        .S({\NLW_Using_FPGA.Native_I2_CARRY4_S_UNCONNECTED [3:1],addr_AddSub_31}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_271
   (LO,
    \LOCKSTEP_Out_reg[3779] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14,
    lopt_15,
    lopt_16,
    lopt_17,
    lopt_18,
    lopt_19,
    lopt_20,
    lopt_21,
    lopt_22,
    lopt_23,
    lopt_24,
    lopt_25,
    lopt_26,
    lopt_27,
    lopt_28,
    lopt_29,
    lopt_30,
    lopt_31,
    lopt_32,
    lopt_33,
    lopt_34,
    lopt_35,
    lopt_36,
    lopt_37,
    lopt_38,
    lopt_39,
    lopt_40,
    lopt_41,
    lopt_42,
    lopt_43,
    lopt_44,
    lopt_45,
    lopt_46,
    lopt_47,
    lopt_48,
    lopt_49,
    lopt_50,
    lopt_51,
    lopt_52,
    lopt_53,
    lopt_54,
    lopt_55,
    lopt_56,
    lopt_57,
    lopt_58,
    lopt_59,
    lopt_60,
    lopt_61,
    lopt_62,
    lopt_63,
    lopt_64,
    lopt_65,
    lopt_66,
    lopt_67,
    lopt_68,
    lopt_69,
    lopt_70,
    lopt_71,
    lopt_72,
    lopt_73,
    lopt_74,
    lopt_75,
    lopt_76);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3779] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;
  output lopt_7;
  input lopt_8;
  input lopt_9;
  output lopt_10;
  input lopt_11;
  input lopt_12;
  output lopt_13;
  output lopt_14;
  output lopt_15;
  output lopt_16;
  output lopt_17;
  input lopt_18;
  input lopt_19;
  output lopt_20;
  input lopt_21;
  input lopt_22;
  output lopt_23;
  input lopt_24;
  input lopt_25;
  output lopt_26;
  input lopt_27;
  input lopt_28;
  output lopt_29;
  output lopt_30;
  output lopt_31;
  output lopt_32;
  output lopt_33;
  input lopt_34;
  input lopt_35;
  output lopt_36;
  input lopt_37;
  input lopt_38;
  output lopt_39;
  input lopt_40;
  input lopt_41;
  output lopt_42;
  input lopt_43;
  input lopt_44;
  output lopt_45;
  output lopt_46;
  output lopt_47;
  output lopt_48;
  output lopt_49;
  input lopt_50;
  input lopt_51;
  output lopt_52;
  input lopt_53;
  input lopt_54;
  output lopt_55;
  input lopt_56;
  input lopt_57;
  output lopt_58;
  input lopt_59;
  input lopt_60;
  output lopt_61;
  output lopt_62;
  output lopt_63;
  output lopt_64;
  output lopt_65;
  input lopt_66;
  input lopt_67;
  output lopt_68;
  input lopt_69;
  input lopt_70;
  output lopt_71;
  input lopt_72;
  input lopt_73;
  output lopt_74;
  output lopt_75;
  output lopt_76;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3779] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire \^lopt_12 ;
  wire \^lopt_13 ;
  wire \^lopt_14 ;
  wire \^lopt_15 ;
  wire \^lopt_16 ;
  wire \^lopt_17 ;
  wire \^lopt_18 ;
  wire \^lopt_20 ;
  wire \^lopt_21 ;
  wire \^lopt_22 ;
  wire \^lopt_23 ;
  wire \^lopt_24 ;
  wire \^lopt_25 ;
  wire \^lopt_26 ;
  wire \^lopt_27 ;
  wire \^lopt_28 ;
  wire \^lopt_29 ;
  wire \^lopt_3 ;
  wire \^lopt_30 ;
  wire \^lopt_31 ;
  wire \^lopt_32 ;
  wire \^lopt_33 ;
  wire \^lopt_34 ;
  wire \^lopt_35 ;
  wire \^lopt_37 ;
  wire \^lopt_38 ;
  wire \^lopt_39 ;
  wire \^lopt_4 ;
  wire \^lopt_40 ;
  wire \^lopt_41 ;
  wire \^lopt_42 ;
  wire \^lopt_43 ;
  wire \^lopt_44 ;
  wire \^lopt_45 ;
  wire \^lopt_46 ;
  wire \^lopt_47 ;
  wire \^lopt_48 ;
  wire \^lopt_49 ;
  wire \^lopt_5 ;
  wire \^lopt_50 ;
  wire \^lopt_51 ;
  wire \^lopt_52 ;
  wire \^lopt_54 ;
  wire \^lopt_55 ;
  wire \^lopt_56 ;
  wire \^lopt_57 ;
  wire \^lopt_58 ;
  wire \^lopt_59 ;
  wire \^lopt_6 ;
  wire \^lopt_60 ;
  wire \^lopt_61 ;
  wire \^lopt_62 ;
  wire \^lopt_63 ;
  wire \^lopt_64 ;
  wire \^lopt_65 ;
  wire \^lopt_66 ;
  wire \^lopt_67 ;
  wire \^lopt_68 ;
  wire \^lopt_69 ;
  wire \^lopt_7 ;
  wire \^lopt_71 ;
  wire \^lopt_72 ;
  wire \^lopt_73 ;
  wire \^lopt_74 ;
  wire \^lopt_75 ;
  wire \^lopt_76 ;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire \^lopt_8 ;
  wire lopt_80;
  wire lopt_81;
  wire \^lopt_9 ;

  assign \^lopt_10  = lopt_9;
  assign \^lopt_12  = lopt_11;
  assign \^lopt_13  = lopt_12;
  assign \^lopt_20  = lopt_18;
  assign \^lopt_21  = lopt_19;
  assign \^lopt_23  = lopt_21;
  assign \^lopt_24  = lopt_22;
  assign \^lopt_26  = lopt_24;
  assign \^lopt_27  = lopt_25;
  assign \^lopt_29  = lopt_27;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_30  = lopt_28;
  assign \^lopt_37  = lopt_34;
  assign \^lopt_38  = lopt_35;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_40  = lopt_37;
  assign \^lopt_41  = lopt_38;
  assign \^lopt_43  = lopt_40;
  assign \^lopt_44  = lopt_41;
  assign \^lopt_46  = lopt_43;
  assign \^lopt_47  = lopt_44;
  assign \^lopt_54  = lopt_50;
  assign \^lopt_55  = lopt_51;
  assign \^lopt_57  = lopt_53;
  assign \^lopt_58  = lopt_54;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_60  = lopt_56;
  assign \^lopt_61  = lopt_57;
  assign \^lopt_63  = lopt_59;
  assign \^lopt_64  = lopt_60;
  assign \^lopt_7  = lopt_6;
  assign \^lopt_71  = lopt_66;
  assign \^lopt_72  = lopt_67;
  assign \^lopt_74  = lopt_69;
  assign \^lopt_75  = lopt_70;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_13 = \^lopt_14 ;
  assign lopt_14 = \^lopt_15 ;
  assign lopt_15 = \^lopt_16 ;
  assign lopt_16 = \^lopt_17 ;
  assign lopt_17 = \^lopt_18 ;
  assign lopt_20 = \^lopt_22 ;
  assign lopt_23 = \^lopt_25 ;
  assign lopt_26 = \^lopt_28 ;
  assign lopt_29 = \^lopt_31 ;
  assign lopt_30 = \^lopt_32 ;
  assign lopt_31 = \^lopt_33 ;
  assign lopt_32 = \^lopt_34 ;
  assign lopt_33 = \^lopt_35 ;
  assign lopt_36 = \^lopt_39 ;
  assign lopt_39 = \^lopt_42 ;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_42 = \^lopt_45 ;
  assign lopt_45 = \^lopt_48 ;
  assign lopt_46 = \^lopt_49 ;
  assign lopt_47 = \^lopt_50 ;
  assign lopt_48 = \^lopt_51 ;
  assign lopt_49 = \^lopt_52 ;
  assign lopt_52 = \^lopt_56 ;
  assign lopt_55 = \^lopt_59 ;
  assign lopt_58 = \^lopt_62 ;
  assign lopt_61 = \^lopt_65 ;
  assign lopt_62 = \^lopt_66 ;
  assign lopt_63 = \^lopt_67 ;
  assign lopt_64 = \^lopt_68 ;
  assign lopt_65 = \^lopt_69 ;
  assign lopt_68 = \^lopt_73 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_71 = \^lopt_76 ;
  assign lopt_74 = lopt_79;
  assign lopt_75 = lopt_80;
  assign lopt_76 = lopt_81;
  assign lopt_77 = lopt_72;
  assign lopt_78 = lopt_73;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4
       (.CI(\^lopt_11 ),
        .CO({\^lopt_28 ,\^lopt_25 ,\^lopt_22 ,\^lopt_18 }),
        .CYINIT(1'b0),
        .DI({\^lopt_29 ,\^lopt_26 ,\^lopt_23 ,\^lopt_20 }),
        .O({\^lopt_34 ,\^lopt_33 ,\^lopt_32 ,\^lopt_31 }),
        .S({\^lopt_30 ,\^lopt_27 ,\^lopt_24 ,\^lopt_21 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_1
       (.CI(\^lopt_28 ),
        .CO({\^lopt_45 ,\^lopt_42 ,\^lopt_39 ,\^lopt_35 }),
        .CYINIT(1'b0),
        .DI({\^lopt_46 ,\^lopt_43 ,\^lopt_40 ,\^lopt_37 }),
        .O({\^lopt_51 ,\^lopt_50 ,\^lopt_49 ,\^lopt_48 }),
        .S({\^lopt_47 ,\^lopt_44 ,\^lopt_41 ,\^lopt_38 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_2
       (.CI(\^lopt_45 ),
        .CO({\^lopt_62 ,\^lopt_59 ,\^lopt_56 ,\^lopt_52 }),
        .CYINIT(1'b0),
        .DI({\^lopt_63 ,\^lopt_60 ,\^lopt_57 ,\^lopt_54 }),
        .O({\^lopt_68 ,\^lopt_67 ,\^lopt_66 ,\^lopt_65 }),
        .S({\^lopt_64 ,\^lopt_61 ,\^lopt_58 ,\^lopt_55 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_3
       (.CI(\^lopt_62 ),
        .CO({\^lopt_76 ,LO,\^lopt_73 ,\^lopt_69 }),
        .CYINIT(1'b0),
        .DI({lopt_77,\Using_FPGA.Native ,\^lopt_74 ,\^lopt_71 }),
        .O({lopt_81,\LOCKSTEP_Out_reg[3779] ,lopt_80,lopt_79}),
        .S({lopt_78,S,\^lopt_75 ,\^lopt_72 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(lopt_1),
        .CO({\^lopt_11 ,\^lopt_8 ,\^lopt_5 ,lopt}),
        .CYINIT(1'b0),
        .DI({\^lopt_12 ,\^lopt_9 ,\^lopt_6 ,\^lopt_3 }),
        .O({\^lopt_17 ,\^lopt_16 ,\^lopt_15 ,\^lopt_14 }),
        .S({\^lopt_13 ,\^lopt_10 ,\^lopt_7 ,\^lopt_4 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_273
   (LO,
    \LOCKSTEP_Out_reg[3780] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3780] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3780] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3780]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_275
   (LO,
    \LOCKSTEP_Out_reg[3781] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3781] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3781] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3781]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_277
   (LO,
    \LOCKSTEP_Out_reg[3782] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3782] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3782] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3782]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_279
   (LO,
    \LOCKSTEP_Out_reg[3783] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3783] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3783] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3783]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_281
   (LO,
    \LOCKSTEP_Out_reg[3784] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3784] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3784] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3784]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_283
   (\EX_Op3_reg[16] ,
    \LOCKSTEP_Out_reg[3785] ,
    \EX_Branch_CMP_Op1_reg[16] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_exception_i_reg,
    wb_byte_access,
    \wb_read_lsb_1_sel_reg[0] ,
    Q,
    S,
    DI,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[16] ;
  output \LOCKSTEP_Out_reg[3785] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[16] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_exception_i_reg;
  input wb_byte_access;
  input \wb_read_lsb_1_sel_reg[0] ;
  input [0:0]Q;
  input S;
  input DI;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[16] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[16] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3785] ;
  wire [0:0]Q;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire wb_byte_access;
  wire [16:16]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire \wb_read_lsb_1_sel_reg[0] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[16]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3785] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[16] ));
  LUT5 #(
    .INIT(32'hBBBB8B88)) 
    \Trace_New_Reg_Value[16]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(wb_byte_access),
        .I3(\wb_read_lsb_1_sel_reg[0] ),
        .I4(Q),
        .O(\LOCKSTEP_Out_reg[3785] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__57 
       (.I0(\LOCKSTEP_Out_reg[3785] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[16] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_285
   (\EX_Op3_reg[17] ,
    \LOCKSTEP_Out_reg[3786] ,
    \EX_Branch_CMP_Op1_reg[17] ,
    \data_rd_reg_reg[17] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    wb_byte_access,
    \wb_read_lsb_1_sel_reg[0] ,
    Q,
    S,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[17] ;
  output \LOCKSTEP_Out_reg[3786] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[17] ;
  output \data_rd_reg_reg[17] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input wb_byte_access;
  input \wb_read_lsb_1_sel_reg[0] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[17] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[17] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3786] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[17] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire wb_byte_access;
  wire [17:17]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire \wb_read_lsb_1_sel_reg[0] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[17]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3786] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[17] ));
  LUT5 #(
    .INIT(32'hBBBB8B88)) 
    \Trace_New_Reg_Value[17]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(wb_byte_access),
        .I3(\wb_read_lsb_1_sel_reg[0] ),
        .I4(Q),
        .O(\LOCKSTEP_Out_reg[3786] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__56 
       (.I0(\LOCKSTEP_Out_reg[3786] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[17] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[17]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3786] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[17] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_287
   (\EX_Op3_reg[18] ,
    \LOCKSTEP_Out_reg[3787] ,
    \EX_Branch_CMP_Op1_reg[18] ,
    \data_rd_reg_reg[18] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    wb_byte_access,
    \wb_read_lsb_1_sel_reg[0] ,
    Q,
    S,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[18] ;
  output \LOCKSTEP_Out_reg[3787] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[18] ;
  output \data_rd_reg_reg[18] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input wb_byte_access;
  input \wb_read_lsb_1_sel_reg[0] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[18] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[18] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3787] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[18] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire wb_byte_access;
  wire [18:18]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire \wb_read_lsb_1_sel_reg[0] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[18]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3787] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[18] ));
  LUT5 #(
    .INIT(32'hBBBB8B88)) 
    \Trace_New_Reg_Value[18]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(wb_byte_access),
        .I3(\wb_read_lsb_1_sel_reg[0] ),
        .I4(Q),
        .O(\LOCKSTEP_Out_reg[3787] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__55 
       (.I0(\LOCKSTEP_Out_reg[3787] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[18] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[18]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3787] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[18] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_289
   (\EX_Op3_reg[19] ,
    \LOCKSTEP_Out_reg[3788] ,
    \EX_Branch_CMP_Op1_reg[19] ,
    \data_rd_reg_reg[19] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    wb_byte_access,
    \wb_read_lsb_1_sel_reg[0] ,
    Q,
    S,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[19] ;
  output \LOCKSTEP_Out_reg[3788] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[19] ;
  output \data_rd_reg_reg[19] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input wb_byte_access;
  input \wb_read_lsb_1_sel_reg[0] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[19] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[19] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3788] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[19] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire wb_byte_access;
  wire [19:19]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire \wb_read_lsb_1_sel_reg[0] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[19]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3788] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[19] ));
  LUT5 #(
    .INIT(32'hBBBB8B88)) 
    \Trace_New_Reg_Value[19]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(wb_byte_access),
        .I3(\wb_read_lsb_1_sel_reg[0] ),
        .I4(Q),
        .O(\LOCKSTEP_Out_reg[3788] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__54 
       (.I0(\LOCKSTEP_Out_reg[3788] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[19] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[19]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3788] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[19] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_291
   (LO,
    \LOCKSTEP_Out_reg[3770] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14,
    lopt_15,
    lopt_16,
    lopt_17,
    lopt_18,
    lopt_19,
    lopt_20,
    lopt_21,
    lopt_22,
    lopt_23,
    lopt_24,
    lopt_25,
    lopt_26,
    lopt_27,
    lopt_28);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3770] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;
  output lopt_7;
  input lopt_8;
  input lopt_9;
  output lopt_10;
  input lopt_11;
  input lopt_12;
  output lopt_13;
  output lopt_14;
  output lopt_15;
  output lopt_16;
  output lopt_17;
  input lopt_18;
  input lopt_19;
  output lopt_20;
  input lopt_21;
  input lopt_22;
  output lopt_23;
  input lopt_24;
  input lopt_25;
  output lopt_26;
  output lopt_27;
  output lopt_28;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3770] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire \^lopt_12 ;
  wire \^lopt_13 ;
  wire \^lopt_14 ;
  wire \^lopt_15 ;
  wire \^lopt_16 ;
  wire \^lopt_17 ;
  wire \^lopt_18 ;
  wire \^lopt_20 ;
  wire \^lopt_21 ;
  wire \^lopt_22 ;
  wire \^lopt_23 ;
  wire \^lopt_24 ;
  wire \^lopt_25 ;
  wire \^lopt_26 ;
  wire \^lopt_27 ;
  wire \^lopt_28 ;
  wire lopt_29;
  wire \^lopt_3 ;
  wire lopt_30;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_10  = lopt_9;
  assign \^lopt_12  = lopt_11;
  assign \^lopt_13  = lopt_12;
  assign \^lopt_20  = lopt_18;
  assign \^lopt_21  = lopt_19;
  assign \^lopt_23  = lopt_21;
  assign \^lopt_24  = lopt_22;
  assign \^lopt_26  = lopt_24;
  assign \^lopt_27  = lopt_25;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_7  = lopt_6;
  assign \^lopt_9  = lopt_8;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_13 = \^lopt_14 ;
  assign lopt_14 = \^lopt_15 ;
  assign lopt_15 = \^lopt_16 ;
  assign lopt_16 = \^lopt_17 ;
  assign lopt_17 = \^lopt_18 ;
  assign lopt_20 = \^lopt_22 ;
  assign lopt_23 = \^lopt_25 ;
  assign lopt_26 = \^lopt_28 ;
  assign lopt_27 = lopt_29;
  assign lopt_28 = lopt_30;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_7 = \^lopt_8 ;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4
       (.CI(\^lopt_11 ),
        .CO({LO,\^lopt_25 ,\^lopt_22 ,\^lopt_18 }),
        .CYINIT(1'b0),
        .DI({\Using_FPGA.Native ,\^lopt_26 ,\^lopt_23 ,\^lopt_20 }),
        .O({\LOCKSTEP_Out_reg[3770] ,lopt_30,lopt_29,\^lopt_28 }),
        .S({S,\^lopt_27 ,\^lopt_24 ,\^lopt_21 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(lopt_1),
        .CO({\^lopt_11 ,\^lopt_8 ,\^lopt_5 ,lopt}),
        .CYINIT(1'b0),
        .DI({\^lopt_12 ,\^lopt_9 ,\^lopt_6 ,\^lopt_3 }),
        .O({\^lopt_17 ,\^lopt_16 ,\^lopt_15 ,\^lopt_14 }),
        .S({\^lopt_13 ,\^lopt_10 ,\^lopt_7 ,\^lopt_4 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_293
   (\EX_Op3_reg[20] ,
    \LOCKSTEP_Out_reg[3789] ,
    \EX_Branch_CMP_Op1_reg[20] ,
    \data_rd_reg_reg[20] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    wb_byte_access,
    \wb_read_lsb_1_sel_reg[0] ,
    Q,
    S,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[20] ;
  output \LOCKSTEP_Out_reg[3789] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[20] ;
  output \data_rd_reg_reg[20] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input wb_byte_access;
  input \wb_read_lsb_1_sel_reg[0] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[20] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[20] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3789] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[20] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire wb_byte_access;
  wire [20:20]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire \wb_read_lsb_1_sel_reg[0] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[20]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3789] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[20] ));
  LUT5 #(
    .INIT(32'hBBBB8B88)) 
    \Trace_New_Reg_Value[20]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(wb_byte_access),
        .I3(\wb_read_lsb_1_sel_reg[0] ),
        .I4(Q),
        .O(\LOCKSTEP_Out_reg[3789] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__53 
       (.I0(\LOCKSTEP_Out_reg[3789] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[20] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[20]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3789] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[20] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_295
   (\EX_Op3_reg[21] ,
    \LOCKSTEP_Out_reg[3790] ,
    \EX_Branch_CMP_Op1_reg[21] ,
    \data_rd_reg_reg[21] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    wb_byte_access,
    \wb_read_lsb_1_sel_reg[0] ,
    Q,
    S,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[21] ;
  output \LOCKSTEP_Out_reg[3790] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[21] ;
  output \data_rd_reg_reg[21] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input wb_byte_access;
  input \wb_read_lsb_1_sel_reg[0] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[21] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[21] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3790] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[21] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire wb_byte_access;
  wire [21:21]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire \wb_read_lsb_1_sel_reg[0] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[21]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3790] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[21] ));
  LUT5 #(
    .INIT(32'hBBBB8B88)) 
    \Trace_New_Reg_Value[21]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(wb_byte_access),
        .I3(\wb_read_lsb_1_sel_reg[0] ),
        .I4(Q),
        .O(\LOCKSTEP_Out_reg[3790] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__52 
       (.I0(\LOCKSTEP_Out_reg[3790] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[21] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[21]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3790] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[21] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_297
   (\EX_Op3_reg[22] ,
    \LOCKSTEP_Out_reg[3791] ,
    \EX_Branch_CMP_Op1_reg[22] ,
    \data_rd_reg_reg[22] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    wb_byte_access,
    \wb_read_lsb_1_sel_reg[0] ,
    Q,
    S,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[22] ;
  output \LOCKSTEP_Out_reg[3791] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[22] ;
  output \data_rd_reg_reg[22] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input wb_byte_access;
  input \wb_read_lsb_1_sel_reg[0] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[22] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[22] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3791] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[22] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire wb_byte_access;
  wire [22:22]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire \wb_read_lsb_1_sel_reg[0] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[22]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3791] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[22] ));
  LUT5 #(
    .INIT(32'hBBBB8B88)) 
    \Trace_New_Reg_Value[22]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(wb_byte_access),
        .I3(\wb_read_lsb_1_sel_reg[0] ),
        .I4(Q),
        .O(\LOCKSTEP_Out_reg[3791] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__51 
       (.I0(\LOCKSTEP_Out_reg[3791] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[22] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[22]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3791] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[22] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_299
   (\EX_Op3_reg[23] ,
    \LOCKSTEP_Out_reg[3792] ,
    \EX_Branch_CMP_Op1_reg[23] ,
    \data_rd_reg_reg[23] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    wb_byte_access,
    \wb_read_lsb_1_sel_reg[0] ,
    Q,
    S,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[23] ;
  output \LOCKSTEP_Out_reg[3792] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[23] ;
  output \data_rd_reg_reg[23] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input wb_byte_access;
  input \wb_read_lsb_1_sel_reg[0] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[23] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[23] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3792] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[23] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire wb_byte_access;
  wire [23:23]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire \wb_read_lsb_1_sel_reg[0] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[23]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3792] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[23] ));
  LUT5 #(
    .INIT(32'hBBBB8B88)) 
    \Trace_New_Reg_Value[23]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(wb_byte_access),
        .I3(\wb_read_lsb_1_sel_reg[0] ),
        .I4(Q),
        .O(\LOCKSTEP_Out_reg[3792] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__50 
       (.I0(\LOCKSTEP_Out_reg[3792] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[23] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[23]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3792] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[23] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_301
   (\EX_Op3_reg[24] ,
    \LOCKSTEP_Out_reg[3793] ,
    \EX_Branch_CMP_Op1_reg[24] ,
    \data_rd_reg_reg[24] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    \wb_read_lsb_sel_reg[1] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ,
    Q,
    S,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[24] ;
  output \LOCKSTEP_Out_reg[3793] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[24] ;
  output \data_rd_reg_reg[24] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[24] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[24] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3793] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[24] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire [24:24]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[24]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3793] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[24] ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB88B88)) 
    \Trace_New_Reg_Value[24]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(\wb_read_lsb_sel_reg[1] ),
        .I3(\Use_DLMB.wb_dlmb_valid_read_data_reg[16] ),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[24] ),
        .I5(Q),
        .O(\LOCKSTEP_Out_reg[3793] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__49 
       (.I0(\LOCKSTEP_Out_reg[3793] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[24] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[24]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3793] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[24] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_303
   (\EX_Op3_reg[25] ,
    \LOCKSTEP_Out_reg[3794] ,
    \EX_Branch_CMP_Op1_reg[25] ,
    \data_rd_reg_reg[25] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    \wb_read_lsb_sel_reg[1] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ,
    Q,
    S,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[25] ;
  output \LOCKSTEP_Out_reg[3794] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[25] ;
  output \data_rd_reg_reg[25] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[25] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[25] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3794] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[25] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire [25:25]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[25]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3794] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[25] ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB88B88)) 
    \Trace_New_Reg_Value[25]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(\wb_read_lsb_sel_reg[1] ),
        .I3(\Use_DLMB.wb_dlmb_valid_read_data_reg[17] ),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[25] ),
        .I5(Q),
        .O(\LOCKSTEP_Out_reg[3794] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__48 
       (.I0(\LOCKSTEP_Out_reg[3794] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[25] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[25]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3794] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[25] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_305
   (\EX_Op3_reg[26] ,
    \LOCKSTEP_Out_reg[3795] ,
    \EX_Branch_CMP_Op1_reg[26] ,
    \data_rd_reg_reg[26] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    \wb_read_lsb_sel_reg[1] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ,
    Q,
    S,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[26] ;
  output \LOCKSTEP_Out_reg[3795] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[26] ;
  output \data_rd_reg_reg[26] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[26] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[26] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3795] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[26] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire [26:26]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[26]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3795] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[26] ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB88B88)) 
    \Trace_New_Reg_Value[26]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(\wb_read_lsb_sel_reg[1] ),
        .I3(\Use_DLMB.wb_dlmb_valid_read_data_reg[18] ),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[26] ),
        .I5(Q),
        .O(\LOCKSTEP_Out_reg[3795] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__47 
       (.I0(\LOCKSTEP_Out_reg[3795] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[26] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[26]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3795] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[26] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_307
   (\EX_Op3_reg[27] ,
    \LOCKSTEP_Out_reg[3796] ,
    \EX_Branch_CMP_Op1_reg[27] ,
    \data_rd_reg_reg[27] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    \wb_read_lsb_sel_reg[1] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ,
    Q,
    S,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[27] ;
  output \LOCKSTEP_Out_reg[3796] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[27] ;
  output \data_rd_reg_reg[27] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[27] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[27] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3796] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \data_rd_reg_reg[27] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire [27:27]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[27]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3796] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[27] ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB88B88)) 
    \Trace_New_Reg_Value[27]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(\wb_read_lsb_sel_reg[1] ),
        .I3(\Use_DLMB.wb_dlmb_valid_read_data_reg[19] ),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[27] ),
        .I5(Q),
        .O(\LOCKSTEP_Out_reg[3796] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__46 
       (.I0(\LOCKSTEP_Out_reg[3796] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[27] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[27]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3796] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[27] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_309
   (\EX_Op3_reg[28] ,
    \LOCKSTEP_Out_reg[3797] ,
    \EX_Branch_CMP_Op1_reg[28] ,
    \data_rd_reg_reg[28] ,
    LO,
    EX_Fwd,
    D,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    \wb_MSR_i_reg[28] ,
    read_register_MSR_1_reg,
    DI,
    wb_exception_i_reg,
    \wb_read_lsb_sel_reg[1] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ,
    Q,
    S,
    \Using_FPGA.Native ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[28] ;
  output \LOCKSTEP_Out_reg[3797] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[28] ;
  output \data_rd_reg_reg[28] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]D;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input [0:0]\wb_MSR_i_reg[28] ;
  input read_register_MSR_1_reg;
  input DI;
  input wb_exception_i_reg;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native ;
  input lopt;
  input lopt_1;

  wire [0:0]D;
  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[28] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[28] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3797] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ;
  wire \Using_FPGA.Native ;
  wire \data_rd_reg_reg[28] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire [0:0]\wb_MSR_i_reg[28] ;
  wire [28:28]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[28]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3797] ),
        .I1(EX_Fwd),
        .I2(D),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[28] ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB88B88)) 
    \Trace_New_Reg_Value[28]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(\wb_read_lsb_sel_reg[1] ),
        .I3(\Use_DLMB.wb_dlmb_valid_read_data_reg[20] ),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[28] ),
        .I5(Q),
        .O(\LOCKSTEP_Out_reg[3797] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__45 
       (.I0(\LOCKSTEP_Out_reg[3797] ),
        .I1(EX_Fwd),
        .I2(D),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[28] ));
  LUT6 #(
    .INIT(64'hBF80BFBFBF808080)) 
    \data_rd_reg[28]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3797] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(\wb_MSR_i_reg[28] ),
        .I4(read_register_MSR_1_reg),
        .I5(DI),
        .O(\data_rd_reg_reg[28] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_311
   (\EX_Op3_reg[29] ,
    \LOCKSTEP_Out_reg[3798] ,
    \EX_Branch_CMP_Op1_reg[29] ,
    \data_rd_reg_reg[29] ,
    LO,
    EX_Fwd,
    D,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    \wb_MSR_i_reg[29] ,
    read_register_MSR_1_reg,
    DI,
    wb_exception_i_reg,
    \wb_read_lsb_sel_reg[1] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ,
    Q,
    S,
    \Using_FPGA.Native ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[29] ;
  output \LOCKSTEP_Out_reg[3798] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[29] ;
  output \data_rd_reg_reg[29] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]D;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input [0:0]\wb_MSR_i_reg[29] ;
  input read_register_MSR_1_reg;
  input DI;
  input wb_exception_i_reg;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native ;
  input lopt;
  input lopt_1;

  wire [0:0]D;
  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[29] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[29] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3798] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ;
  wire \Using_FPGA.Native ;
  wire \data_rd_reg_reg[29] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire [0:0]\wb_MSR_i_reg[29] ;
  wire [29:29]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[29]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3798] ),
        .I1(EX_Fwd),
        .I2(D),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[29] ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB88B88)) 
    \Trace_New_Reg_Value[29]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(\wb_read_lsb_sel_reg[1] ),
        .I3(\Use_DLMB.wb_dlmb_valid_read_data_reg[21] ),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[29] ),
        .I5(Q),
        .O(\LOCKSTEP_Out_reg[3798] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__44 
       (.I0(\LOCKSTEP_Out_reg[3798] ),
        .I1(EX_Fwd),
        .I2(D),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[29] ));
  LUT6 #(
    .INIT(64'hBF80BFBFBF808080)) 
    \data_rd_reg[29]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3798] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(\wb_MSR_i_reg[29] ),
        .I4(read_register_MSR_1_reg),
        .I5(DI),
        .O(\data_rd_reg_reg[29] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_313
   (LO,
    \LOCKSTEP_Out_reg[3771] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3771] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3771] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3771]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_315
   (\EX_Op3_reg[30] ,
    \LOCKSTEP_Out_reg[3799] ,
    \EX_Branch_CMP_Op1_reg[30] ,
    \data_rd_reg_reg[30] ,
    LO,
    EX_Fwd,
    D,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    \wb_MSR_i_reg[30] ,
    read_register_MSR_1_reg,
    DI,
    wb_exception_i_reg,
    \wb_read_lsb_sel_reg[1] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ,
    Q,
    S,
    \Using_FPGA.Native ,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[30] ;
  output \LOCKSTEP_Out_reg[3799] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[30] ;
  output \data_rd_reg_reg[30] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]D;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input \wb_MSR_i_reg[30] ;
  input read_register_MSR_1_reg;
  input DI;
  input wb_exception_i_reg;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ;
  input [0:0]Q;
  input S;
  input \Using_FPGA.Native ;
  input lopt;
  input lopt_1;

  wire [0:0]D;
  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[30] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[30] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3799] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ;
  wire \Using_FPGA.Native ;
  wire \data_rd_reg_reg[30] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire \wb_MSR_i_reg[30] ;
  wire [30:30]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[30]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3799] ),
        .I1(EX_Fwd),
        .I2(D),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[30] ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB88B88)) 
    \Trace_New_Reg_Value[30]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(\wb_read_lsb_sel_reg[1] ),
        .I3(\Use_DLMB.wb_dlmb_valid_read_data_reg[22] ),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[30] ),
        .I5(Q),
        .O(\LOCKSTEP_Out_reg[3799] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__43 
       (.I0(\LOCKSTEP_Out_reg[3799] ),
        .I1(EX_Fwd),
        .I2(D),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[30] ));
  LUT6 #(
    .INIT(64'hBF80BFBFBF808080)) 
    \data_rd_reg[30]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3799] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(\wb_MSR_i_reg[30] ),
        .I4(read_register_MSR_1_reg),
        .I5(DI),
        .O(\data_rd_reg_reg[30] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_317
   (\EX_Op3_reg[31] ,
    \LOCKSTEP_Out_reg[3800] ,
    \EX_Branch_CMP_Op1_reg[31] ,
    \data_rd_reg_reg[31] ,
    LO,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    DI,
    read_register_MSR_1_reg,
    wb_exception_i_reg,
    \wb_read_lsb_sel_reg[1] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ,
    Q,
    S,
    CI,
    lopt,
    lopt_1);
  output [0:0]\EX_Op3_reg[31] ;
  output \LOCKSTEP_Out_reg[3800] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[31] ;
  output \data_rd_reg_reg[31] ;
  output LO;
  input [0:0]EX_Fwd;
  input [0:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [0:0]GPR_Op3;
  input [0:1]of_op1_sel;
  input [0:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input DI;
  input read_register_MSR_1_reg;
  input wb_exception_i_reg;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ;
  input [0:0]Q;
  input S;
  input CI;
  input lopt;
  input lopt_1;

  wire CI;
  wire DI;
  wire [0:0]\EX_Branch_CMP_Op1_reg[31] ;
  wire [0:0]EX_Fwd;
  wire [0:0]\EX_Op3_reg[31] ;
  wire [0:0]GPR_Op1;
  wire [0:0]GPR_Op3;
  wire LO;
  wire \LOCKSTEP_Out_reg[3800] ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [0:0]Q;
  wire S;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ;
  wire [0:0]\Using_FPGA.Native ;
  wire \data_rd_reg_reg[31] ;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire [31:31]wb_excep_return_addr;
  wire wb_exception_i_reg;
  wire wb_gpr_wr_dbg;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  assign LO = lopt;
  assign wb_excep_return_addr = lopt_1;
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \EX_Op3[31]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3800] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op3_sel[0]),
        .I4(GPR_Op3),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3_reg[31] ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBB88B88)) 
    \Trace_New_Reg_Value[31]_INST_0 
       (.I0(wb_excep_return_addr),
        .I1(wb_exception_i_reg),
        .I2(\wb_read_lsb_sel_reg[1] ),
        .I3(\Use_DLMB.wb_dlmb_valid_read_data_reg[23] ),
        .I4(\Use_DLMB.wb_dlmb_valid_read_data_reg[31] ),
        .I5(Q),
        .O(\LOCKSTEP_Out_reg[3800] ));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \Using_FPGA.Native_i_1__42 
       (.I0(\LOCKSTEP_Out_reg[3800] ),
        .I1(EX_Fwd),
        .I2(\Using_FPGA.Native ),
        .I3(of_op1_sel[0]),
        .I4(GPR_Op1),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1_reg[31] ));
  LUT5 #(
    .INIT(32'h8080BF80)) 
    \data_rd_reg[31]_i_1 
       (.I0(\LOCKSTEP_Out_reg[3800] ),
        .I1(wb_gpr_wr_dbg),
        .I2(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .I3(DI),
        .I4(read_register_MSR_1_reg),
        .O(\data_rd_reg_reg[31] ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_319
   (LO,
    \LOCKSTEP_Out_reg[3772] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3772] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3772] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3772]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_321
   (LO,
    \LOCKSTEP_Out_reg[3773] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3773] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3773] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3773]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_323
   (LO,
    \LOCKSTEP_Out_reg[3774] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3774] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3774] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3774]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_325
   (LO,
    \LOCKSTEP_Out_reg[3775] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3775] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3775] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3775]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_327
   (LO,
    \LOCKSTEP_Out_reg[3776] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3776] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3776] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3776]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_329
   (LO,
    \LOCKSTEP_Out_reg[3777] ,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3777] ;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  input lopt_1;

  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3777] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3777]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_331
   (LO,
    \LOCKSTEP_Out_reg[3778] ,
    S,
    \Using_FPGA.Native ,
    CI,
    lopt,
    lopt_1);
  output LO;
  output [0:0]\LOCKSTEP_Out_reg[3778] ;
  input S;
  input \Using_FPGA.Native ;
  input CI;
  input lopt;
  input lopt_1;

  wire CI;
  wire LO;
  wire [0:0]\LOCKSTEP_Out_reg[3778] ;
  wire S;
  wire \Using_FPGA.Native ;

  assign LO = lopt;
  assign \LOCKSTEP_Out_reg[3778]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_450
   (EX_CarryOut,
    \Data_Addr[9] ,
    S,
    DI,
    EX_CarryIn,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[9] ;
  input S;
  input DI;
  input EX_CarryIn;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[9] ;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire S;

  assign \Data_Addr[9]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_452
   (EX_CarryOut,
    \Data_Addr[8] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[8] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[8] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[8]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_454
   (EX_CarryOut,
    \Data_Addr[7] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[7] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[7] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[7]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_456
   (EX_CarryOut,
    \Data_Addr[6] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[6] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[6] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[6]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_458
   (EX_CarryOut,
    \Data_Addr[5] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[5] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[5] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[5]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_460
   (EX_CarryOut,
    \Data_Addr[4] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[4] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[4] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[4]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_462
   (EX_CarryOut,
    \Data_Addr[3] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[3] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[3] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[3]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_464
   (EX_CarryOut,
    \MEM_DataBus_Addr_reg[31] ,
    S,
    DI,
    EX_CarryIn,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\MEM_DataBus_Addr_reg[31] ;
  input S;
  input DI;
  input EX_CarryIn;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire [0:0]\MEM_DataBus_Addr_reg[31] ;
  wire S;

  assign EX_CarryOut = lopt;
  assign \MEM_DataBus_Addr_reg[31]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_466
   (EX_CarryOut,
    \MEM_DataBus_Addr_reg[30] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\MEM_DataBus_Addr_reg[30] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire [0:0]\MEM_DataBus_Addr_reg[30] ;
  wire S;

  assign EX_CarryOut = lopt;
  assign \MEM_DataBus_Addr_reg[30]  = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_468
   (EX_CarryOut,
    \Data_Addr[2] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[2] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[2] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[2]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_470
   (EX_CarryOut,
    \Data_Addr[29] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[29] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[29] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[29]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_472
   (EX_CarryOut,
    \Data_Addr[28] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[28] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[28] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[28]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_474
   (EX_CarryOut,
    \Data_Addr[27] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[27] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[27] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[27]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_476
   (EX_CarryOut,
    \Data_Addr[26] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[26] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[26] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[26]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_478
   (EX_CarryOut,
    \Data_Addr[25] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[25] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[25] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[25]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_480
   (EX_CarryOut,
    \Data_Addr[24] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[24] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[24] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[24]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_482
   (EX_CarryOut,
    \Data_Addr[23] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[23] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[23] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[23]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_484
   (EX_CarryOut,
    \Data_Addr[22] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[22] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[22] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[22]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_486
   (EX_CarryOut,
    \Data_Addr[21] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[21] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[21] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[21]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_488
   (EX_CarryOut,
    \Data_Addr[20] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[20] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[20] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[20]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_490
   (EX_CarryOut,
    \Data_Addr[1] ,
    S,
    DI,
    LO,
    lopt);
  output EX_CarryOut;
  output [0:0]\Data_Addr[1] ;
  input S;
  input DI;
  input LO;
  input lopt;

  wire DI;
  wire [0:0]\Data_Addr[1] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[1]  = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_492
   (EX_CarryOut,
    \Data_Addr[19] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[19] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[19] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[19]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_494
   (EX_CarryOut,
    \Data_Addr[18] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[18] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[18] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[18]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_496
   (EX_CarryOut,
    \Data_Addr[17] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[17] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[17] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[17]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_498
   (EX_CarryOut,
    \Data_Addr[16] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[16] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[16] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[16]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_500
   (EX_CarryOut,
    \Data_Addr[15] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[15] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[15] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[15]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_502
   (EX_CarryOut,
    \Data_Addr[14] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[14] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[14] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[14]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_504
   (EX_CarryOut,
    \Data_Addr[13] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[13] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[13] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[13]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_506
   (EX_CarryOut,
    \Data_Addr[12] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[12] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[12] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[12]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_508
   (EX_CarryOut,
    \Data_Addr[11] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[11] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[11] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[11]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_510
   (EX_CarryOut,
    \Data_Addr[10] ,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]\Data_Addr[10] ;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire [0:0]\Data_Addr[10] ;
  wire EX_CarryOut;
  wire LO;
  wire S;

  assign \Data_Addr[10]  = lopt_1;
  assign EX_CarryOut = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module system_microblaze_0_0_MB_MUXCY_XORCY_511
   (\Using_FPGA.Native ,
    \Data_Addr[0] ,
    S,
    DI,
    CI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14,
    lopt_15,
    lopt_16,
    lopt_17,
    lopt_18,
    lopt_19,
    lopt_20,
    lopt_21,
    lopt_22,
    lopt_23,
    lopt_24,
    lopt_25,
    lopt_26,
    lopt_27,
    lopt_28,
    lopt_29,
    lopt_30,
    lopt_31,
    lopt_32,
    lopt_33,
    lopt_34,
    lopt_35,
    lopt_36,
    lopt_37,
    lopt_38,
    lopt_39,
    lopt_40,
    lopt_41,
    lopt_42,
    lopt_43,
    lopt_44,
    lopt_45,
    lopt_46,
    lopt_47,
    lopt_48,
    lopt_49,
    lopt_50,
    lopt_51,
    lopt_52,
    lopt_53,
    lopt_54,
    lopt_55,
    lopt_56,
    lopt_57,
    lopt_58,
    lopt_59,
    lopt_60,
    lopt_61,
    lopt_62,
    lopt_63,
    lopt_64,
    lopt_65,
    lopt_66,
    lopt_67,
    lopt_68,
    lopt_69,
    lopt_70,
    lopt_71,
    lopt_72,
    lopt_73,
    lopt_74,
    lopt_75,
    lopt_76,
    lopt_77,
    lopt_78,
    lopt_79,
    lopt_80,
    lopt_81,
    lopt_82,
    lopt_83,
    lopt_84,
    lopt_85,
    lopt_86,
    lopt_87,
    lopt_88,
    lopt_89,
    lopt_90,
    lopt_91,
    lopt_92,
    lopt_93,
    lopt_94,
    lopt_95,
    lopt_96,
    lopt_97,
    lopt_98,
    lopt_99,
    lopt_100,
    lopt_101,
    lopt_102,
    lopt_103,
    lopt_104,
    lopt_105,
    lopt_106,
    lopt_107,
    lopt_108,
    lopt_109,
    lopt_110,
    lopt_111,
    lopt_112,
    lopt_113,
    lopt_114,
    lopt_115,
    lopt_116,
    lopt_117,
    lopt_118,
    lopt_119,
    lopt_120,
    lopt_121,
    lopt_122,
    lopt_123,
    lopt_124,
    lopt_125,
    lopt_126,
    lopt_127,
    lopt_128,
    lopt_129,
    lopt_130,
    lopt_131,
    lopt_132,
    lopt_133);
  output \Using_FPGA.Native ;
  output [0:0]\Data_Addr[0] ;
  input S;
  input DI;
  input CI;
  input lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;
  output lopt_8;
  input lopt_9;
  input lopt_10;
  output lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;
  output lopt_15;
  input lopt_16;
  input lopt_17;
  output lopt_18;
  input lopt_19;
  input lopt_20;
  output lopt_21;
  input lopt_22;
  input lopt_23;
  output lopt_24;
  output lopt_25;
  output lopt_26;
  output lopt_27;
  output lopt_28;
  input lopt_29;
  input lopt_30;
  output lopt_31;
  input lopt_32;
  input lopt_33;
  output lopt_34;
  input lopt_35;
  input lopt_36;
  output lopt_37;
  input lopt_38;
  input lopt_39;
  output lopt_40;
  output lopt_41;
  output lopt_42;
  output lopt_43;
  output lopt_44;
  input lopt_45;
  input lopt_46;
  output lopt_47;
  input lopt_48;
  input lopt_49;
  output lopt_50;
  input lopt_51;
  input lopt_52;
  output lopt_53;
  input lopt_54;
  input lopt_55;
  output lopt_56;
  output lopt_57;
  output lopt_58;
  output lopt_59;
  output lopt_60;
  input lopt_61;
  input lopt_62;
  output lopt_63;
  input lopt_64;
  input lopt_65;
  output lopt_66;
  input lopt_67;
  input lopt_68;
  output lopt_69;
  input lopt_70;
  input lopt_71;
  output lopt_72;
  output lopt_73;
  output lopt_74;
  output lopt_75;
  output lopt_76;
  input lopt_77;
  input lopt_78;
  output lopt_79;
  input lopt_80;
  input lopt_81;
  output lopt_82;
  input lopt_83;
  input lopt_84;
  output lopt_85;
  input lopt_86;
  input lopt_87;
  output lopt_88;
  output lopt_89;
  output lopt_90;
  output lopt_91;
  output lopt_92;
  input lopt_93;
  input lopt_94;
  output lopt_95;
  input lopt_96;
  input lopt_97;
  output lopt_98;
  input lopt_99;
  input lopt_100;
  output lopt_101;
  input lopt_102;
  input lopt_103;
  output lopt_104;
  output lopt_105;
  output lopt_106;
  output lopt_107;
  output lopt_108;
  input lopt_109;
  input lopt_110;
  output lopt_111;
  input lopt_112;
  input lopt_113;
  output lopt_114;
  input lopt_115;
  input lopt_116;
  output lopt_117;
  input lopt_118;
  input lopt_119;
  output lopt_120;
  output lopt_121;
  output lopt_122;
  output lopt_123;
  output lopt_124;
  input lopt_125;
  input lopt_126;
  input lopt_127;
  input lopt_128;
  output lopt_129;
  input lopt_130;
  input lopt_131;
  output lopt_132;
  output lopt_133;

  wire CI;
  wire DI;
  wire [0:0]\Data_Addr[0] ;
  wire S;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire \^lopt_10 ;
  wire \^lopt_100 ;
  wire \^lopt_101 ;
  wire \^lopt_102 ;
  wire \^lopt_103 ;
  wire \^lopt_104 ;
  wire \^lopt_105 ;
  wire \^lopt_106 ;
  wire \^lopt_107 ;
  wire \^lopt_108 ;
  wire \^lopt_109 ;
  wire \^lopt_11 ;
  wire \^lopt_110 ;
  wire \^lopt_111 ;
  wire \^lopt_112 ;
  wire \^lopt_113 ;
  wire \^lopt_114 ;
  wire \^lopt_115 ;
  wire \^lopt_117 ;
  wire \^lopt_118 ;
  wire \^lopt_119 ;
  wire \^lopt_12 ;
  wire \^lopt_120 ;
  wire \^lopt_121 ;
  wire \^lopt_122 ;
  wire \^lopt_123 ;
  wire \^lopt_124 ;
  wire \^lopt_125 ;
  wire \^lopt_126 ;
  wire \^lopt_127 ;
  wire \^lopt_128 ;
  wire \^lopt_129 ;
  wire \^lopt_13 ;
  wire \^lopt_130 ;
  wire \^lopt_131 ;
  wire \^lopt_132 ;
  wire lopt_134;
  wire lopt_135;
  wire lopt_136;
  wire lopt_137;
  wire lopt_138;
  wire lopt_139;
  wire lopt_140;
  wire lopt_141;
  wire lopt_142;
  wire \^lopt_15 ;
  wire \^lopt_16 ;
  wire \^lopt_17 ;
  wire \^lopt_18 ;
  wire \^lopt_19 ;
  wire \^lopt_2 ;
  wire \^lopt_20 ;
  wire \^lopt_21 ;
  wire \^lopt_22 ;
  wire \^lopt_23 ;
  wire \^lopt_24 ;
  wire \^lopt_25 ;
  wire \^lopt_26 ;
  wire \^lopt_27 ;
  wire \^lopt_28 ;
  wire \^lopt_29 ;
  wire \^lopt_3 ;
  wire \^lopt_30 ;
  wire \^lopt_32 ;
  wire \^lopt_33 ;
  wire \^lopt_34 ;
  wire \^lopt_35 ;
  wire \^lopt_36 ;
  wire \^lopt_37 ;
  wire \^lopt_38 ;
  wire \^lopt_39 ;
  wire \^lopt_4 ;
  wire \^lopt_40 ;
  wire \^lopt_41 ;
  wire \^lopt_42 ;
  wire \^lopt_43 ;
  wire \^lopt_44 ;
  wire \^lopt_45 ;
  wire \^lopt_46 ;
  wire \^lopt_47 ;
  wire \^lopt_49 ;
  wire \^lopt_5 ;
  wire \^lopt_50 ;
  wire \^lopt_51 ;
  wire \^lopt_52 ;
  wire \^lopt_53 ;
  wire \^lopt_54 ;
  wire \^lopt_55 ;
  wire \^lopt_56 ;
  wire \^lopt_57 ;
  wire \^lopt_58 ;
  wire \^lopt_59 ;
  wire \^lopt_6 ;
  wire \^lopt_60 ;
  wire \^lopt_61 ;
  wire \^lopt_62 ;
  wire \^lopt_63 ;
  wire \^lopt_64 ;
  wire \^lopt_66 ;
  wire \^lopt_67 ;
  wire \^lopt_68 ;
  wire \^lopt_69 ;
  wire \^lopt_7 ;
  wire \^lopt_70 ;
  wire \^lopt_71 ;
  wire \^lopt_72 ;
  wire \^lopt_73 ;
  wire \^lopt_74 ;
  wire \^lopt_75 ;
  wire \^lopt_76 ;
  wire \^lopt_77 ;
  wire \^lopt_78 ;
  wire \^lopt_79 ;
  wire \^lopt_8 ;
  wire \^lopt_80 ;
  wire \^lopt_81 ;
  wire \^lopt_83 ;
  wire \^lopt_84 ;
  wire \^lopt_85 ;
  wire \^lopt_86 ;
  wire \^lopt_87 ;
  wire \^lopt_88 ;
  wire \^lopt_89 ;
  wire \^lopt_9 ;
  wire \^lopt_90 ;
  wire \^lopt_91 ;
  wire \^lopt_92 ;
  wire \^lopt_93 ;
  wire \^lopt_94 ;
  wire \^lopt_95 ;
  wire \^lopt_96 ;
  wire \^lopt_97 ;
  wire \^lopt_98 ;
  wire [1:1]NLW_CARRY4_6_CO_UNCONNECTED;
  wire [2:2]NLW_CARRY4_6_O_UNCONNECTED;
  wire [1:0]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_10  = lopt_9;
  assign \^lopt_100  = lopt_93;
  assign \^lopt_101  = lopt_94;
  assign \^lopt_103  = lopt_96;
  assign \^lopt_104  = lopt_97;
  assign \^lopt_106  = lopt_99;
  assign \^lopt_107  = lopt_100;
  assign \^lopt_109  = lopt_102;
  assign \^lopt_11  = lopt_10;
  assign \^lopt_110  = lopt_103;
  assign \^lopt_117  = lopt_109;
  assign \^lopt_118  = lopt_110;
  assign \^lopt_120  = lopt_112;
  assign \^lopt_121  = lopt_113;
  assign \^lopt_123  = lopt_115;
  assign \^lopt_124  = lopt_116;
  assign \^lopt_126  = lopt_118;
  assign \^lopt_127  = lopt_119;
  assign \^lopt_15  = lopt_13;
  assign \^lopt_16  = lopt_14;
  assign \^lopt_18  = lopt_16;
  assign \^lopt_19  = lopt_17;
  assign \^lopt_2  = lopt_1;
  assign \^lopt_21  = lopt_19;
  assign \^lopt_22  = lopt_20;
  assign \^lopt_24  = lopt_22;
  assign \^lopt_25  = lopt_23;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_32  = lopt_29;
  assign \^lopt_33  = lopt_30;
  assign \^lopt_35  = lopt_32;
  assign \^lopt_36  = lopt_33;
  assign \^lopt_38  = lopt_35;
  assign \^lopt_39  = lopt_36;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_41  = lopt_38;
  assign \^lopt_42  = lopt_39;
  assign \^lopt_49  = lopt_45;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_50  = lopt_46;
  assign \^lopt_52  = lopt_48;
  assign \^lopt_53  = lopt_49;
  assign \^lopt_55  = lopt_51;
  assign \^lopt_56  = lopt_52;
  assign \^lopt_58  = lopt_54;
  assign \^lopt_59  = lopt_55;
  assign \^lopt_66  = lopt_61;
  assign \^lopt_67  = lopt_62;
  assign \^lopt_69  = lopt_64;
  assign \^lopt_7  = lopt_6;
  assign \^lopt_70  = lopt_65;
  assign \^lopt_72  = lopt_67;
  assign \^lopt_73  = lopt_68;
  assign \^lopt_75  = lopt_70;
  assign \^lopt_76  = lopt_71;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_83  = lopt_77;
  assign \^lopt_84  = lopt_78;
  assign \^lopt_86  = lopt_80;
  assign \^lopt_87  = lopt_81;
  assign \^lopt_89  = lopt_83;
  assign \^lopt_90  = lopt_84;
  assign \^lopt_92  = lopt_86;
  assign \^lopt_93  = lopt_87;
  assign lopt_101 = \^lopt_108 ;
  assign lopt_104 = \^lopt_111 ;
  assign lopt_105 = \^lopt_112 ;
  assign lopt_106 = \^lopt_113 ;
  assign lopt_107 = \^lopt_114 ;
  assign lopt_108 = \^lopt_115 ;
  assign lopt_11 = \^lopt_12 ;
  assign lopt_111 = \^lopt_119 ;
  assign lopt_114 = \^lopt_122 ;
  assign lopt_117 = \^lopt_125 ;
  assign lopt_12 = \^lopt_13 ;
  assign lopt_120 = \^lopt_128 ;
  assign lopt_121 = \^lopt_129 ;
  assign lopt_122 = \^lopt_130 ;
  assign lopt_123 = \^lopt_131 ;
  assign lopt_124 = \^lopt_132 ;
  assign lopt_129 = lopt_138;
  assign lopt_132 = lopt_141;
  assign lopt_133 = lopt_142;
  assign lopt_134 = lopt_125;
  assign lopt_135 = lopt_126;
  assign lopt_136 = lopt_127;
  assign lopt_137 = lopt_128;
  assign lopt_139 = lopt_130;
  assign lopt_140 = lopt_131;
  assign lopt_15 = \^lopt_17 ;
  assign lopt_18 = \^lopt_20 ;
  assign lopt_21 = \^lopt_23 ;
  assign lopt_24 = \^lopt_26 ;
  assign lopt_25 = \^lopt_27 ;
  assign lopt_26 = \^lopt_28 ;
  assign lopt_27 = \^lopt_29 ;
  assign lopt_28 = \^lopt_30 ;
  assign lopt_31 = \^lopt_34 ;
  assign lopt_34 = \^lopt_37 ;
  assign lopt_37 = \^lopt_40 ;
  assign lopt_40 = \^lopt_43 ;
  assign lopt_41 = \^lopt_44 ;
  assign lopt_42 = \^lopt_45 ;
  assign lopt_43 = \^lopt_46 ;
  assign lopt_44 = \^lopt_47 ;
  assign lopt_47 = \^lopt_51 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_50 = \^lopt_54 ;
  assign lopt_53 = \^lopt_57 ;
  assign lopt_56 = \^lopt_60 ;
  assign lopt_57 = \^lopt_61 ;
  assign lopt_58 = \^lopt_62 ;
  assign lopt_59 = \^lopt_63 ;
  assign lopt_60 = \^lopt_64 ;
  assign lopt_63 = \^lopt_68 ;
  assign lopt_66 = \^lopt_71 ;
  assign lopt_69 = \^lopt_74 ;
  assign lopt_72 = \^lopt_77 ;
  assign lopt_73 = \^lopt_78 ;
  assign lopt_74 = \^lopt_79 ;
  assign lopt_75 = \^lopt_80 ;
  assign lopt_76 = \^lopt_81 ;
  assign lopt_79 = \^lopt_85 ;
  assign lopt_8 = \^lopt_9 ;
  assign lopt_82 = \^lopt_88 ;
  assign lopt_85 = \^lopt_91 ;
  assign lopt_88 = \^lopt_94 ;
  assign lopt_89 = \^lopt_95 ;
  assign lopt_90 = \^lopt_96 ;
  assign lopt_91 = \^lopt_97 ;
  assign lopt_92 = \^lopt_98 ;
  assign lopt_95 = \^lopt_102 ;
  assign lopt_98 = \^lopt_105 ;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4
       (.CI(\^lopt_23 ),
        .CO({\^lopt_40 ,\^lopt_37 ,\^lopt_34 ,\^lopt_30 }),
        .CYINIT(1'b0),
        .DI({\^lopt_41 ,\^lopt_38 ,\^lopt_35 ,\^lopt_32 }),
        .O({\^lopt_46 ,\^lopt_45 ,\^lopt_44 ,\^lopt_43 }),
        .S({\^lopt_42 ,\^lopt_39 ,\^lopt_36 ,\^lopt_33 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_1
       (.CI(\^lopt_40 ),
        .CO({\^lopt_57 ,\^lopt_54 ,\^lopt_51 ,\^lopt_47 }),
        .CYINIT(1'b0),
        .DI({\^lopt_58 ,\^lopt_55 ,\^lopt_52 ,\^lopt_49 }),
        .O({\^lopt_63 ,\^lopt_62 ,\^lopt_61 ,\^lopt_60 }),
        .S({\^lopt_59 ,\^lopt_56 ,\^lopt_53 ,\^lopt_50 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_2
       (.CI(\^lopt_57 ),
        .CO({\^lopt_74 ,\^lopt_71 ,\^lopt_68 ,\^lopt_64 }),
        .CYINIT(1'b0),
        .DI({\^lopt_75 ,\^lopt_72 ,\^lopt_69 ,\^lopt_66 }),
        .O({\^lopt_80 ,\^lopt_79 ,\^lopt_78 ,\^lopt_77 }),
        .S({\^lopt_76 ,\^lopt_73 ,\^lopt_70 ,\^lopt_67 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_3
       (.CI(\^lopt_74 ),
        .CO({\^lopt_91 ,\^lopt_88 ,\^lopt_85 ,\^lopt_81 }),
        .CYINIT(1'b0),
        .DI({\^lopt_92 ,\^lopt_89 ,\^lopt_86 ,\^lopt_83 }),
        .O({\^lopt_97 ,\^lopt_96 ,\^lopt_95 ,\^lopt_94 }),
        .S({\^lopt_93 ,\^lopt_90 ,\^lopt_87 ,\^lopt_84 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_4
       (.CI(\^lopt_91 ),
        .CO({\^lopt_108 ,\^lopt_105 ,\^lopt_102 ,\^lopt_98 }),
        .CYINIT(1'b0),
        .DI({\^lopt_109 ,\^lopt_106 ,\^lopt_103 ,\^lopt_100 }),
        .O({\^lopt_114 ,\^lopt_113 ,\^lopt_112 ,\^lopt_111 }),
        .S({\^lopt_110 ,\^lopt_107 ,\^lopt_104 ,\^lopt_101 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_5
       (.CI(\^lopt_108 ),
        .CO({\^lopt_125 ,\^lopt_122 ,\^lopt_119 ,\^lopt_115 }),
        .CYINIT(1'b0),
        .DI({\^lopt_126 ,\^lopt_123 ,\^lopt_120 ,\^lopt_117 }),
        .O({\^lopt_131 ,\^lopt_130 ,\^lopt_129 ,\^lopt_128 }),
        .S({\^lopt_127 ,\^lopt_124 ,\^lopt_121 ,\^lopt_118 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 CARRY4_6
       (.CI(\^lopt_125 ),
        .CO({\Using_FPGA.Native ,lopt_138,NLW_CARRY4_6_CO_UNCONNECTED[1],\^lopt_132 }),
        .CYINIT(1'b0),
        .DI({DI,lopt_139,lopt_136,lopt_134}),
        .O({\Data_Addr[0] ,NLW_CARRY4_6_O_UNCONNECTED[2],lopt_142,lopt_141}),
        .S({S,lopt_140,lopt_137,lopt_135}));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_9 ,\^lopt_6 ,\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [1:0]}),
        .CYINIT(lopt),
        .DI({\^lopt_10 ,\^lopt_7 ,\^lopt_4 ,\^lopt_2 }),
        .O({\^lopt_12 ,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [2:0]}),
        .S({\^lopt_11 ,\^lopt_8 ,\^lopt_5 ,\^lopt_3 }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\^lopt_9 ),
        .CO({\^lopt_23 ,\^lopt_20 ,\^lopt_17 ,\^lopt_13 }),
        .CYINIT(1'b0),
        .DI({\^lopt_24 ,\^lopt_21 ,\^lopt_18 ,\^lopt_15 }),
        .O({\^lopt_29 ,\^lopt_28 ,\^lopt_27 ,\^lopt_26 }),
        .S({\^lopt_25 ,\^lopt_22 ,\^lopt_19 ,\^lopt_16 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7
   (sel_input_i_1,
    I4,
    sel_input_iii_0,
    sel_input_delayslot,
    ex_branch_with_delayslot_i,
    \wb_exception_kind_i_reg[27] );
  output sel_input_i_1;
  output I4;
  input sel_input_iii_0;
  input sel_input_delayslot;
  input ex_branch_with_delayslot_i;
  input \wb_exception_kind_i_reg[27] ;

  wire I4;
  wire ex_branch_with_delayslot_i;
  wire sel_input_delayslot;
  wire sel_input_i_1;
  wire sel_input_iii_0;
  wire \wb_exception_kind_i_reg[27] ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(sel_input_iii_0),
        .I1(sel_input_delayslot),
        .O(sel_input_i_1),
        .S(I4));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__33 
       (.I0(ex_branch_with_delayslot_i),
        .I1(\wb_exception_kind_i_reg[27] ),
        .O(I4));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_100
   (of_instr_ii_23,
    \Using_FPGA.Native_0 ,
    I093_out,
    I191_out);
  output of_instr_ii_23;
  input \Using_FPGA.Native_0 ;
  input I093_out;
  input I191_out;

  wire I093_out;
  wire I191_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_23;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I093_out),
        .I1(I191_out),
        .O(of_instr_ii_23),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_102
   (of_instr_ii_41,
    \Using_FPGA.Native_0 ,
    I0165_out,
    I1163_out);
  output of_instr_ii_41;
  input \Using_FPGA.Native_0 ;
  input I0165_out;
  input I1163_out;

  wire I0165_out;
  wire I1163_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_41;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0165_out),
        .I1(I1163_out),
        .O(of_instr_ii_41),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_104
   (of_instr_ii_22,
    \Using_FPGA.Native_0 ,
    I089_out,
    I187_out);
  output of_instr_ii_22;
  input \Using_FPGA.Native_0 ;
  input I089_out;
  input I187_out;

  wire I089_out;
  wire I187_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_22;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I089_out),
        .I1(I187_out),
        .O(of_instr_ii_22),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_106
   (of_instr_ii_21,
    \Using_FPGA.Native_0 ,
    I085_out,
    I183_out);
  output of_instr_ii_21;
  input \Using_FPGA.Native_0 ;
  input I085_out;
  input I183_out;

  wire I085_out;
  wire I183_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_21;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I085_out),
        .I1(I183_out),
        .O(of_instr_ii_21),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_108
   (of_instr_ii_20,
    \Using_FPGA.Native_0 ,
    I081_out,
    I179_out);
  output of_instr_ii_20;
  input \Using_FPGA.Native_0 ;
  input I081_out;
  input I179_out;

  wire I081_out;
  wire I179_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_20;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I081_out),
        .I1(I179_out),
        .O(of_instr_ii_20),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_110
   (of_instr_ii_19,
    \Using_FPGA.Native_0 ,
    I077_out,
    I175_out);
  output of_instr_ii_19;
  input \Using_FPGA.Native_0 ;
  input I077_out;
  input I175_out;

  wire I077_out;
  wire I175_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_19;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I077_out),
        .I1(I175_out),
        .O(of_instr_ii_19),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_112
   (of_instr_ii_18,
    \Using_FPGA.Native_0 ,
    I073_out,
    I171_out);
  output of_instr_ii_18;
  input \Using_FPGA.Native_0 ;
  input I073_out;
  input I171_out;

  wire I073_out;
  wire I171_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_18;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I073_out),
        .I1(I171_out),
        .O(of_instr_ii_18),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_114
   (of_instr_ii_17,
    \Using_FPGA.Native_0 ,
    I069_out,
    I167_out);
  output of_instr_ii_17;
  input \Using_FPGA.Native_0 ;
  input I069_out;
  input I167_out;

  wire I069_out;
  wire I167_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_17;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I069_out),
        .I1(I167_out),
        .O(of_instr_ii_17),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_116
   (of_instr_ii_16,
    \Using_FPGA.Native_0 ,
    I065_out,
    I163_out);
  output of_instr_ii_16;
  input \Using_FPGA.Native_0 ;
  input I065_out;
  input I163_out;

  wire I065_out;
  wire I163_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_16;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I065_out),
        .I1(I163_out),
        .O(of_instr_ii_16),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_118
   (of_instr_ii_15,
    \Using_FPGA.Native_0 ,
    I061_out,
    I159_out);
  output of_instr_ii_15;
  input \Using_FPGA.Native_0 ;
  input I061_out;
  input I159_out;

  wire I061_out;
  wire I159_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_15;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I061_out),
        .I1(I159_out),
        .O(of_instr_ii_15),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_120
   (of_instr_ii_14,
    \Using_FPGA.Native_0 ,
    I057_out,
    I155_out);
  output of_instr_ii_14;
  input \Using_FPGA.Native_0 ;
  input I057_out;
  input I155_out;

  wire I057_out;
  wire I155_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_14;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I057_out),
        .I1(I155_out),
        .O(of_instr_ii_14),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_122
   (of_instr_ii_13,
    \Using_FPGA.Native_0 ,
    I053_out,
    I151_out);
  output of_instr_ii_13;
  input \Using_FPGA.Native_0 ;
  input I053_out;
  input I151_out;

  wire I053_out;
  wire I151_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_13;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I053_out),
        .I1(I151_out),
        .O(of_instr_ii_13),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_124
   (of_instr_ii_40,
    \Using_FPGA.Native_0 ,
    I0161_out,
    I1159_out);
  output of_instr_ii_40;
  input \Using_FPGA.Native_0 ;
  input I0161_out;
  input I1159_out;

  wire I0161_out;
  wire I1159_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_40;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0161_out),
        .I1(I1159_out),
        .O(of_instr_ii_40),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_126
   (of_instr_ii_12,
    \Using_FPGA.Native_0 ,
    I049_out,
    I147_out);
  output of_instr_ii_12;
  input \Using_FPGA.Native_0 ;
  input I049_out;
  input I147_out;

  wire I049_out;
  wire I147_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_12;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I049_out),
        .I1(I147_out),
        .O(of_instr_ii_12),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_128
   (of_instr_ii_11,
    \Using_FPGA.Native_0 ,
    I045_out,
    I143_out);
  output of_instr_ii_11;
  input \Using_FPGA.Native_0 ;
  input I045_out;
  input I143_out;

  wire I045_out;
  wire I143_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_11;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I045_out),
        .I1(I143_out),
        .O(of_instr_ii_11),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_130
   (of_instr_ii_10,
    \Using_FPGA.Native_0 ,
    I041_out,
    I139_out);
  output of_instr_ii_10;
  input \Using_FPGA.Native_0 ;
  input I041_out;
  input I139_out;

  wire I041_out;
  wire I139_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_10;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I041_out),
        .I1(I139_out),
        .O(of_instr_ii_10),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_132
   (of_instr_ii_9,
    \Using_FPGA.Native_0 ,
    I037_out,
    I135_out);
  output of_instr_ii_9;
  input \Using_FPGA.Native_0 ;
  input I037_out;
  input I135_out;

  wire I037_out;
  wire I135_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_9;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I037_out),
        .I1(I135_out),
        .O(of_instr_ii_9),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_134
   (of_instr_ii_8,
    \Using_FPGA.Native_0 ,
    I033_out,
    I131_out);
  output of_instr_ii_8;
  input \Using_FPGA.Native_0 ;
  input I033_out;
  input I131_out;

  wire I033_out;
  wire I131_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_8;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I033_out),
        .I1(I131_out),
        .O(of_instr_ii_8),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_136
   (of_instr_ii_7,
    \Using_FPGA.Native_0 ,
    I029_out,
    I127_out);
  output of_instr_ii_7;
  input \Using_FPGA.Native_0 ;
  input I029_out;
  input I127_out;

  wire I029_out;
  wire I127_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_7;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I029_out),
        .I1(I127_out),
        .O(of_instr_ii_7),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_138
   (of_instr_ii_6,
    \Using_FPGA.Native_0 ,
    I025_out,
    I123_out);
  output of_instr_ii_6;
  input \Using_FPGA.Native_0 ;
  input I025_out;
  input I123_out;

  wire I025_out;
  wire I123_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_6;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I025_out),
        .I1(I123_out),
        .O(of_instr_ii_6),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_140
   (of_instr_ii_5,
    \Using_FPGA.Native_0 ,
    I021_out,
    I119_out);
  output of_instr_ii_5;
  input \Using_FPGA.Native_0 ;
  input I021_out;
  input I119_out;

  wire I021_out;
  wire I119_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_5;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I021_out),
        .I1(I119_out),
        .O(of_instr_ii_5),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_142
   (of_instr_ii_4,
    \Using_FPGA.Native_0 ,
    I017_out,
    I115_out);
  output of_instr_ii_4;
  input \Using_FPGA.Native_0 ;
  input I017_out;
  input I115_out;

  wire I017_out;
  wire I115_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_4;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I017_out),
        .I1(I115_out),
        .O(of_instr_ii_4),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_144
   (of_instr_ii_3,
    \Using_FPGA.Native_0 ,
    I013_out,
    I111_out);
  output of_instr_ii_3;
  input \Using_FPGA.Native_0 ;
  input I013_out;
  input I111_out;

  wire I013_out;
  wire I111_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_3;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I013_out),
        .I1(I111_out),
        .O(of_instr_ii_3),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_146
   (of_instr_ii_39,
    \Using_FPGA.Native_0 ,
    I0157_out,
    I1155_out);
  output of_instr_ii_39;
  input \Using_FPGA.Native_0 ;
  input I0157_out;
  input I1155_out;

  wire I0157_out;
  wire I1155_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_39;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0157_out),
        .I1(I1155_out),
        .O(of_instr_ii_39),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_148
   (of_instr_ii_2,
    \Using_FPGA.Native_0 ,
    I09_out,
    I17_out);
  output of_instr_ii_2;
  input \Using_FPGA.Native_0 ;
  input I09_out;
  input I17_out;

  wire I09_out;
  wire I17_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_2;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I09_out),
        .I1(I17_out),
        .O(of_instr_ii_2),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_150
   (of_instr_ii_1,
    \Using_FPGA.Native_0 ,
    I05_out,
    I13_out);
  output of_instr_ii_1;
  input \Using_FPGA.Native_0 ;
  input I05_out;
  input I13_out;

  wire I05_out;
  wire I13_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_1;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I05_out),
        .I1(I13_out),
        .O(of_instr_ii_1),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_152
   (of_instr_ii_0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output of_instr_ii_0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire of_instr_ii_0;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(of_instr_ii_0),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_154
   (of_instr_ii_38,
    \Using_FPGA.Native_0 ,
    I0153_out,
    I1151_out);
  output of_instr_ii_38;
  input \Using_FPGA.Native_0 ;
  input I0153_out;
  input I1151_out;

  wire I0153_out;
  wire I1151_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_38;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0153_out),
        .I1(I1151_out),
        .O(of_instr_ii_38),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_156
   (of_instr_ii_37,
    \Using_FPGA.Native_0 ,
    I0149_out,
    I1147_out);
  output of_instr_ii_37;
  input \Using_FPGA.Native_0 ;
  input I0149_out;
  input I1147_out;

  wire I0149_out;
  wire I1147_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_37;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0149_out),
        .I1(I1147_out),
        .O(of_instr_ii_37),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_158
   (of_instr_ii_36,
    \Using_FPGA.Native_0 ,
    I0145_out,
    I1143_out);
  output of_instr_ii_36;
  input \Using_FPGA.Native_0 ;
  input I0145_out;
  input I1143_out;

  wire I0145_out;
  wire I1143_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_36;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0145_out),
        .I1(I1143_out),
        .O(of_instr_ii_36),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_160
   (of_instr_ii_35,
    \Using_FPGA.Native_0 ,
    I0141_out,
    I1139_out);
  output of_instr_ii_35;
  input \Using_FPGA.Native_0 ;
  input I0141_out;
  input I1139_out;

  wire I0141_out;
  wire I1139_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_35;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0141_out),
        .I1(I1139_out),
        .O(of_instr_ii_35),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_162
   (of_instr_ii_34,
    \Using_FPGA.Native_0 ,
    I0137_out,
    I1135_out);
  output of_instr_ii_34;
  input \Using_FPGA.Native_0 ;
  input I0137_out;
  input I1135_out;

  wire I0137_out;
  wire I1135_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_34;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0137_out),
        .I1(I1135_out),
        .O(of_instr_ii_34),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_164
   (of_instr_ii_33,
    \Using_FPGA.Native_0 ,
    I0133_out,
    I1131_out);
  output of_instr_ii_33;
  input \Using_FPGA.Native_0 ;
  input I0133_out;
  input I1131_out;

  wire I0133_out;
  wire I1131_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_33;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0133_out),
        .I1(I1131_out),
        .O(of_instr_ii_33),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_196
   (of_pc_ii_31,
    \Using_FPGA.Native_0 ,
    I0125_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_31;
  input \Using_FPGA.Native_0 ;
  input I0125_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I0125_out;
  wire I1123_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_31;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0125_out),
        .I1(I1123_out),
        .O(of_pc_ii_31),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__30 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I1123_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_198
   (of_pc_ii_21,
    \Using_FPGA.Native_0 ,
    I085_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_21;
  input \Using_FPGA.Native_0 ;
  input I085_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I085_out;
  wire I183_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_21;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I085_out),
        .I1(I183_out),
        .O(of_pc_ii_21),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__20 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I183_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_200
   (of_pc_ii_20,
    \Using_FPGA.Native_0 ,
    I081_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_20;
  input \Using_FPGA.Native_0 ;
  input I081_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I081_out;
  wire I179_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_20;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I081_out),
        .I1(I179_out),
        .O(of_pc_ii_20),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__19 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I179_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_202
   (of_pc_ii_19,
    \Using_FPGA.Native_0 ,
    I077_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_19;
  input \Using_FPGA.Native_0 ;
  input I077_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I077_out;
  wire I175_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_19;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I077_out),
        .I1(I175_out),
        .O(of_pc_ii_19),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__18 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I175_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_204
   (of_pc_ii_18,
    \Using_FPGA.Native_0 ,
    I073_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_18;
  input \Using_FPGA.Native_0 ;
  input I073_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I073_out;
  wire I171_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_18;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I073_out),
        .I1(I171_out),
        .O(of_pc_ii_18),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__17 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I171_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_206
   (of_pc_ii_17,
    \Using_FPGA.Native_0 ,
    I069_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_17;
  input \Using_FPGA.Native_0 ;
  input I069_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I069_out;
  wire I167_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_17;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I069_out),
        .I1(I167_out),
        .O(of_pc_ii_17),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__16 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I167_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_208
   (of_pc_ii_16,
    \Using_FPGA.Native_0 ,
    I065_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_16;
  input \Using_FPGA.Native_0 ;
  input I065_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I065_out;
  wire I163_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_16;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I065_out),
        .I1(I163_out),
        .O(of_pc_ii_16),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__15 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I163_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_210
   (of_pc_ii_15,
    \Using_FPGA.Native_0 ,
    I061_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_15;
  input \Using_FPGA.Native_0 ;
  input I061_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I061_out;
  wire I159_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_15;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I061_out),
        .I1(I159_out),
        .O(of_pc_ii_15),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__14 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I159_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_212
   (of_pc_ii_14,
    \Using_FPGA.Native_0 ,
    I057_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_14;
  input \Using_FPGA.Native_0 ;
  input I057_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I057_out;
  wire I155_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_14;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I057_out),
        .I1(I155_out),
        .O(of_pc_ii_14),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__13 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I155_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_214
   (of_pc_ii_13,
    \Using_FPGA.Native_0 ,
    I053_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_13;
  input \Using_FPGA.Native_0 ;
  input I053_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I053_out;
  wire I151_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_13;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I053_out),
        .I1(I151_out),
        .O(of_pc_ii_13),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__12 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I151_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_216
   (of_pc_ii_12,
    \Using_FPGA.Native_0 ,
    I049_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_12;
  input \Using_FPGA.Native_0 ;
  input I049_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I049_out;
  wire I147_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_12;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I049_out),
        .I1(I147_out),
        .O(of_pc_ii_12),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__11 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I147_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_218
   (of_pc_ii_30,
    \Using_FPGA.Native_0 ,
    I0121_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_30;
  input \Using_FPGA.Native_0 ;
  input I0121_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I0121_out;
  wire I1119_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_30;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0121_out),
        .I1(I1119_out),
        .O(of_pc_ii_30),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__29 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I1119_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_220
   (of_pc_ii_11,
    \Using_FPGA.Native_0 ,
    I045_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_11;
  input \Using_FPGA.Native_0 ;
  input I045_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I045_out;
  wire I143_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_11;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I045_out),
        .I1(I143_out),
        .O(of_pc_ii_11),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__10 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I143_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_222
   (of_pc_ii_10,
    \Using_FPGA.Native_0 ,
    I041_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_10;
  input \Using_FPGA.Native_0 ;
  input I041_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I041_out;
  wire I139_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_10;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I041_out),
        .I1(I139_out),
        .O(of_pc_ii_10),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__9 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I139_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_224
   (of_pc_ii_9,
    \Using_FPGA.Native_0 ,
    I037_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_9;
  input \Using_FPGA.Native_0 ;
  input I037_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I037_out;
  wire I135_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_9;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I037_out),
        .I1(I135_out),
        .O(of_pc_ii_9),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__8 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I135_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_226
   (of_pc_ii_8,
    \Using_FPGA.Native_0 ,
    I033_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_8;
  input \Using_FPGA.Native_0 ;
  input I033_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I033_out;
  wire I131_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_8;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I033_out),
        .I1(I131_out),
        .O(of_pc_ii_8),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__7 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I131_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_228
   (of_pc_ii_7,
    \Using_FPGA.Native_0 ,
    I029_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_7;
  input \Using_FPGA.Native_0 ;
  input I029_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I029_out;
  wire I127_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_7;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I029_out),
        .I1(I127_out),
        .O(of_pc_ii_7),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__6 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I127_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_230
   (of_pc_ii_6,
    \Using_FPGA.Native_0 ,
    I025_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_6;
  input \Using_FPGA.Native_0 ;
  input I025_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I025_out;
  wire I123_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_6;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I025_out),
        .I1(I123_out),
        .O(of_pc_ii_6),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__5 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I123_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_232
   (of_pc_ii_5,
    \Using_FPGA.Native_0 ,
    I021_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_5;
  input \Using_FPGA.Native_0 ;
  input I021_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I021_out;
  wire I119_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_5;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I021_out),
        .I1(I119_out),
        .O(of_pc_ii_5),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__4 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I119_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_234
   (of_pc_ii_4,
    \Using_FPGA.Native_0 ,
    I017_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_4;
  input \Using_FPGA.Native_0 ;
  input I017_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I017_out;
  wire I115_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_4;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I017_out),
        .I1(I115_out),
        .O(of_pc_ii_4),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__3 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I115_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_236
   (of_pc_ii_3,
    \Using_FPGA.Native_0 ,
    I013_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_3;
  input \Using_FPGA.Native_0 ;
  input I013_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I013_out;
  wire I111_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_3;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I013_out),
        .I1(I111_out),
        .O(of_pc_ii_3),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__2 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I111_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_238
   (of_pc_ii_2,
    \Using_FPGA.Native_0 ,
    I09_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_2;
  input \Using_FPGA.Native_0 ;
  input I09_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I09_out;
  wire I17_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_2;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I09_out),
        .I1(I17_out),
        .O(of_pc_ii_2),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__1 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I17_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_240
   (of_pc_ii_29,
    \Using_FPGA.Native_0 ,
    I0117_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_29;
  input \Using_FPGA.Native_0 ;
  input I0117_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I0117_out;
  wire I1115_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_29;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0117_out),
        .I1(I1115_out),
        .O(of_pc_ii_29),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__28 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I1115_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_242
   (of_pc_ii_1,
    \Using_FPGA.Native_0 ,
    I05_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_1;
  input \Using_FPGA.Native_0 ;
  input I05_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I05_out;
  wire I13_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_1;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I05_out),
        .I1(I13_out),
        .O(of_pc_ii_1),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__0 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I13_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_244
   (of_pc_ii_0,
    \Using_FPGA.Native_0 ,
    I0,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_0;
  input \Using_FPGA.Native_0 ;
  input I0;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I0;
  wire I1;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_0;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .O(of_pc_ii_0),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I1));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_246
   (of_pc_ii_28,
    \Using_FPGA.Native_0 ,
    I0113_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_28;
  input \Using_FPGA.Native_0 ;
  input I0113_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I0113_out;
  wire I1111_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_28;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0113_out),
        .I1(I1111_out),
        .O(of_pc_ii_28),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__27 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I1111_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_248
   (of_pc_ii_27,
    \Using_FPGA.Native_0 ,
    I0109_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_27;
  input \Using_FPGA.Native_0 ;
  input I0109_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I0109_out;
  wire I1107_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_27;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0109_out),
        .I1(I1107_out),
        .O(of_pc_ii_27),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__26 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I1107_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_250
   (of_pc_ii_26,
    \Using_FPGA.Native_0 ,
    I0105_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_26;
  input \Using_FPGA.Native_0 ;
  input I0105_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I0105_out;
  wire I1103_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_26;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0105_out),
        .I1(I1103_out),
        .O(of_pc_ii_26),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__25 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I1103_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_252
   (of_pc_ii_25,
    \Using_FPGA.Native_0 ,
    I0101_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_25;
  input \Using_FPGA.Native_0 ;
  input I0101_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I0101_out;
  wire I199_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_25;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0101_out),
        .I1(I199_out),
        .O(of_pc_ii_25),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__24 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I199_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_254
   (of_pc_ii_24,
    \Using_FPGA.Native_0 ,
    I097_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_24;
  input \Using_FPGA.Native_0 ;
  input I097_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I097_out;
  wire I195_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_24;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I097_out),
        .I1(I195_out),
        .O(of_pc_ii_24),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__23 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I195_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_256
   (of_pc_ii_23,
    \Using_FPGA.Native_0 ,
    I093_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_23;
  input \Using_FPGA.Native_0 ;
  input I093_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I093_out;
  wire I191_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_23;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I093_out),
        .I1(I191_out),
        .O(of_pc_ii_23),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__22 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I191_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_258
   (of_pc_ii_22,
    \Using_FPGA.Native_0 ,
    I089_out,
    Q,
    \Using_FPGA.Native_1 ,
    out);
  output of_pc_ii_22;
  input \Using_FPGA.Native_0 ;
  input I089_out;
  input [0:0]Q;
  input \Using_FPGA.Native_1 ;
  input [0:0]out;

  wire I089_out;
  wire I187_out;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_pc_ii_22;
  wire [0:0]out;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I089_out),
        .I1(I187_out),
        .O(of_pc_ii_22),
        .S(\Using_FPGA.Native_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__21 
       (.I0(Q),
        .I1(\Using_FPGA.Native_1 ),
        .I2(out),
        .O(I187_out));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_355
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    WB_Doublet_Access_reg,
    I1,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]WB_Doublet_Access_reg;
  input I1;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire I1;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]WB_Doublet_Access_reg;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(WB_Doublet_Access_reg),
        .I1(I1),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_4__1 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_356
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__106 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_357
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__105 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_358
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__104 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_359
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__103 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_360
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__102 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_361
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__101 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_362
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__100 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_363
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__99 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_364
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__98 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_365
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__97 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_366
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__115 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_367
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__96 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_368
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__95 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_369
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__94 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_370
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__93 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_371
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__92 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_372
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__91 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_373
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__90 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_374
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__89 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_375
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \wb_read_lsb_sel_reg[1] ,
    \Using_FPGA.Native_1 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\wb_read_lsb_sel_reg[1] ),
        .I1(\Using_FPGA.Native_1 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__88 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_376
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \wb_read_lsb_sel_reg[1] ,
    \Using_FPGA.Native_1 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\wb_read_lsb_sel_reg[1] ),
        .I1(\Using_FPGA.Native_1 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__87 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_377
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__114 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_378
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \wb_read_lsb_sel_reg[1] ,
    \Using_FPGA.Native_1 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Using_FPGA.Native_1 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\wb_read_lsb_sel_reg[1] ),
        .I1(\Using_FPGA.Native_1 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__86 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_379
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__85 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_380
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__113 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_381
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__112 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_382
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__111 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_383
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__110 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_384
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__109 
       (.I0(Q[0]),
        .I1(ex_swap_byte_instr),
        .I2(Q[1]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_385
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__108 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_386
   (D,
    \Using_FPGA.Native_0 ,
    of_op1_sel_spr,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    Q,
    ex_swap_byte_instr);
  output [0:0]D;
  output \Using_FPGA.Native_0 ;
  input of_op1_sel_spr;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [1:0]Q;
  input ex_swap_byte_instr;

  wire [0:0]D;
  wire [1:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_swap_byte_instr;
  wire of_op1_sel_spr;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .O(D),
        .S(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_2__107 
       (.I0(Q[1]),
        .I1(ex_swap_byte_instr),
        .I2(Q[0]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_80
   (of_instr_ii_42,
    \Using_FPGA.Native_0 ,
    I0169_out,
    I1167_out);
  output of_instr_ii_42;
  input \Using_FPGA.Native_0 ;
  input I0169_out;
  input I1167_out;

  wire I0169_out;
  wire I1167_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_42;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0169_out),
        .I1(I1167_out),
        .O(of_instr_ii_42),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_82
   (of_instr_ii_32,
    \Using_FPGA.Native_0 ,
    I0129_out,
    I1127_out);
  output of_instr_ii_32;
  input \Using_FPGA.Native_0 ;
  input I0129_out;
  input I1127_out;

  wire I0129_out;
  wire I1127_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_32;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0129_out),
        .I1(I1127_out),
        .O(of_instr_ii_32),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_84
   (of_instr_ii_31,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    I0125_out,
    I1123_out,
    IReady,
    \wb_exception_kind_i_reg[27] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    Dbg_Disable,
    if_debug_ready_i_reg,
    if_missed_fetch);
  output of_instr_ii_31;
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input I0125_out;
  input I1123_out;
  input IReady;
  input \wb_exception_kind_i_reg[27] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input Dbg_Disable;
  input if_debug_ready_i_reg;
  input if_missed_fetch;

  wire Dbg_Disable;
  wire I0125_out;
  wire I1123_out;
  wire IReady;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire if_debug_ready_i_reg;
  wire if_missed_fetch;
  wire of_instr_ii_31;
  wire \wb_exception_kind_i_reg[27] ;

  LUT6 #(
    .INIT(64'h00000000AAFFAA02)) 
    \PC_Buffer_reg[3][0]_srl4_i_1 
       (.I0(IReady),
        .I1(\wb_exception_kind_i_reg[27] ),
        .I2(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .I3(Dbg_Disable),
        .I4(if_debug_ready_i_reg),
        .I5(if_missed_fetch),
        .O(\Using_FPGA.Native_0 ));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0125_out),
        .I1(I1123_out),
        .O(of_instr_ii_31),
        .S(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_86
   (of_instr_ii_30,
    \Using_FPGA.Native_0 ,
    I0121_out,
    I1119_out);
  output of_instr_ii_30;
  input \Using_FPGA.Native_0 ;
  input I0121_out;
  input I1119_out;

  wire I0121_out;
  wire I1119_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_30;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0121_out),
        .I1(I1119_out),
        .O(of_instr_ii_30),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_88
   (of_instr_ii_29,
    \Using_FPGA.Native_0 ,
    I0117_out,
    I1115_out);
  output of_instr_ii_29;
  input \Using_FPGA.Native_0 ;
  input I0117_out;
  input I1115_out;

  wire I0117_out;
  wire I1115_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_29;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0117_out),
        .I1(I1115_out),
        .O(of_instr_ii_29),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_90
   (of_instr_ii_28,
    \Using_FPGA.Native_0 ,
    I0113_out,
    I1111_out);
  output of_instr_ii_28;
  input \Using_FPGA.Native_0 ;
  input I0113_out;
  input I1111_out;

  wire I0113_out;
  wire I1111_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_28;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0113_out),
        .I1(I1111_out),
        .O(of_instr_ii_28),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_92
   (of_instr_ii_27,
    \Using_FPGA.Native_0 ,
    I0109_out,
    I1107_out);
  output of_instr_ii_27;
  input \Using_FPGA.Native_0 ;
  input I0109_out;
  input I1107_out;

  wire I0109_out;
  wire I1107_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_27;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0109_out),
        .I1(I1107_out),
        .O(of_instr_ii_27),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_94
   (of_instr_ii_26,
    \Using_FPGA.Native_0 ,
    I0105_out,
    I1103_out);
  output of_instr_ii_26;
  input \Using_FPGA.Native_0 ;
  input I0105_out;
  input I1103_out;

  wire I0105_out;
  wire I1103_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_26;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0105_out),
        .I1(I1103_out),
        .O(of_instr_ii_26),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_96
   (of_instr_ii_25,
    \Using_FPGA.Native_0 ,
    I0101_out,
    I199_out);
  output of_instr_ii_25;
  input \Using_FPGA.Native_0 ;
  input I0101_out;
  input I199_out;

  wire I0101_out;
  wire I199_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_25;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I0101_out),
        .I1(I199_out),
        .O(of_instr_ii_25),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module system_microblaze_0_0_MB_MUXF7_98
   (of_instr_ii_24,
    \Using_FPGA.Native_0 ,
    I097_out,
    I195_out);
  output of_instr_ii_24;
  input \Using_FPGA.Native_0 ;
  input I097_out;
  input I195_out;

  wire I097_out;
  wire I195_out;
  wire \Using_FPGA.Native_0 ;
  wire of_instr_ii_24;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(I097_out),
        .I1(I195_out),
        .O(of_instr_ii_24),
        .S(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    DID,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]DID;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]DID;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(DID),
        .DIB(DID),
        .DIC(DID),
        .DID(DID),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_340
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    WB_Byte_Access_reg,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]WB_Byte_Access_reg;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Byte_Access_reg;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(WB_Byte_Access_reg),
        .DIB(WB_Byte_Access_reg),
        .DIC(WB_Byte_Access_reg),
        .DID(WB_Byte_Access_reg),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_341
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    WB_Byte_Access_reg,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]WB_Byte_Access_reg;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Byte_Access_reg;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(WB_Byte_Access_reg),
        .DIB(WB_Byte_Access_reg),
        .DIC(WB_Byte_Access_reg),
        .DID(WB_Byte_Access_reg),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_342
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    \wb_read_lsb_sel_reg[1] ,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]\wb_read_lsb_sel_reg[1] ;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;
  wire [1:0]\wb_read_lsb_sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(\wb_read_lsb_sel_reg[1] ),
        .DIB(\wb_read_lsb_sel_reg[1] ),
        .DIC(\wb_read_lsb_sel_reg[1] ),
        .DID(\wb_read_lsb_sel_reg[1] ),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_343
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    \wb_read_lsb_sel_reg[1] ,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]\wb_read_lsb_sel_reg[1] ;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;
  wire [1:0]\wb_read_lsb_sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(\wb_read_lsb_sel_reg[1] ),
        .DIB(\wb_read_lsb_sel_reg[1] ),
        .DIC(\wb_read_lsb_sel_reg[1] ),
        .DID(\wb_read_lsb_sel_reg[1] ),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_344
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    \wb_read_lsb_sel_reg[1] ,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]\wb_read_lsb_sel_reg[1] ;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;
  wire [1:0]\wb_read_lsb_sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(\wb_read_lsb_sel_reg[1] ),
        .DIB(\wb_read_lsb_sel_reg[1] ),
        .DIC(\wb_read_lsb_sel_reg[1] ),
        .DID(\wb_read_lsb_sel_reg[1] ),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_345
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    \wb_read_lsb_sel_reg[1] ,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]\wb_read_lsb_sel_reg[1] ;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;
  wire [1:0]\wb_read_lsb_sel_reg[1] ;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(\wb_read_lsb_sel_reg[1] ),
        .DIB(\wb_read_lsb_sel_reg[1] ),
        .DIC(\wb_read_lsb_sel_reg[1] ),
        .DID(\wb_read_lsb_sel_reg[1] ),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_346
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    WB_Doublet_Access_reg,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]WB_Doublet_Access_reg;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Doublet_Access_reg;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(WB_Doublet_Access_reg),
        .DIB(WB_Doublet_Access_reg),
        .DIC(WB_Doublet_Access_reg),
        .DID(WB_Doublet_Access_reg),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_347
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    WB_Doublet_Access_reg,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]WB_Doublet_Access_reg;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Doublet_Access_reg;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(WB_Doublet_Access_reg),
        .DIB(WB_Doublet_Access_reg),
        .DIC(WB_Doublet_Access_reg),
        .DID(WB_Doublet_Access_reg),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_348
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    WB_Doublet_Access_reg,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]WB_Doublet_Access_reg;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Doublet_Access_reg;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(WB_Doublet_Access_reg),
        .DIB(WB_Doublet_Access_reg),
        .DIC(WB_Doublet_Access_reg),
        .DID(WB_Doublet_Access_reg),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_349
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    WB_Doublet_Access_reg,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]WB_Doublet_Access_reg;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Doublet_Access_reg;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(WB_Doublet_Access_reg),
        .DIB(WB_Doublet_Access_reg),
        .DIC(WB_Doublet_Access_reg),
        .DID(WB_Doublet_Access_reg),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_350
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    WB_Doublet_Access_reg,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]WB_Doublet_Access_reg;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Doublet_Access_reg;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(WB_Doublet_Access_reg),
        .DIB(WB_Doublet_Access_reg),
        .DIC(WB_Doublet_Access_reg),
        .DID(WB_Doublet_Access_reg),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_351
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    WB_Doublet_Access_reg,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]WB_Doublet_Access_reg;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Doublet_Access_reg;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(WB_Doublet_Access_reg),
        .DIB(WB_Doublet_Access_reg),
        .DIC(WB_Doublet_Access_reg),
        .DID(WB_Doublet_Access_reg),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_352
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    WB_Doublet_Access_reg,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]WB_Doublet_Access_reg;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Doublet_Access_reg;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(WB_Doublet_Access_reg),
        .DIB(WB_Doublet_Access_reg),
        .DIC(WB_Doublet_Access_reg),
        .DID(WB_Doublet_Access_reg),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_353
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    WB_Byte_Access_reg,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]WB_Byte_Access_reg;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Byte_Access_reg;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(WB_Byte_Access_reg),
        .DIB(WB_Byte_Access_reg),
        .DIC(WB_Byte_Access_reg),
        .DID(WB_Byte_Access_reg),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module system_microblaze_0_0_MB_RAM32M_354
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    WB_Byte_Access_reg,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]WB_Byte_Access_reg;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Byte_Access_reg;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA({of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4]}),
        .ADDRB(of_imm_data),
        .ADDRC({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4]}),
        .ADDRD(ADDRD),
        .DIA(WB_Byte_Access_reg),
        .DIB(WB_Byte_Access_reg),
        .DIC(WB_Byte_Access_reg),
        .DID(WB_Byte_Access_reg),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(WB_GPR_Wr));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E
   (Q_0,
    Q,
    Dbg_Clk);
  output Q_0;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q_0;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/SRL16E_1/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h001B),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q_0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized1
   (Q11_in,
    Q,
    Dbg_Clk);
  output Q11_in;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q11_in;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/SRL16E_2/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q11_in));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized11
   (Q2_out,
    Q,
    Dbg_Clk);
  output Q2_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q2_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses[5].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'hFFFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q2_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized13
   (Dbg_TDO,
    Q,
    Dbg_Clk,
    Q2_out,
    Q3_out,
    Q4_out);
  output Dbg_TDO;
  input [5:0]Q;
  input Dbg_Clk;
  input Q2_out;
  input Q3_out;
  input Q4_out;

  wire Dbg_Clk;
  wire Dbg_TDO;
  wire [5:0]Q;
  wire Q1_out;
  wire Q2_out;
  wire Q3_out;
  wire Q4_out;

  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_8
       (.I0(Q1_out),
        .I1(Q2_out),
        .I2(Q[5]),
        .I3(Q3_out),
        .I4(Q[4]),
        .I5(Q4_out),
        .O(Dbg_TDO));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses[6].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h3FFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q1_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized15
   (Q0_out,
    Q,
    Dbg_Clk);
  output Q0_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q0_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses[7].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q0_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized17
   (Q3_in,
    Q,
    Dbg_Clk);
  output Q3_in;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q3_in;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses[8].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q3_in));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized19
   (Q2_in,
    Q,
    Dbg_Clk);
  output Q2_in;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q2_in;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/SRL16E_3/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0064),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q2_in));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized21
   (Dbg_TDO,
    Q,
    Dbg_Clk,
    tdo_config_word1_0,
    Q0_in,
    Q2_in,
    Q3_in,
    Q0_out);
  output Dbg_TDO;
  input [6:0]Q;
  input Dbg_Clk;
  input tdo_config_word1_0;
  input Q0_in;
  input Q2_in;
  input Q3_in;
  input Q0_out;

  wire Dbg_Clk;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_18_n_0;
  wire [6:0]Q;
  wire Q0_in;
  wire Q0_out;
  wire Q1_in;
  wire Q2_in;
  wire Q3_in;
  wire tdo_config_word1_0;

  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_18
       (.I0(Q1_in),
        .I1(Q2_in),
        .I2(Q[5]),
        .I3(Q3_in),
        .I4(Q[4]),
        .I5(Q0_out),
        .O(Dbg_TDO_INST_0_i_18_n_0));
  LUT6 #(
    .INIT(64'hCA0ACACACA0A0A0A)) 
    Dbg_TDO_INST_0_i_9
       (.I0(Dbg_TDO_INST_0_i_18_n_0),
        .I1(Q[5]),
        .I2(Q[6]),
        .I3(tdo_config_word1_0),
        .I4(Q[4]),
        .I5(Q0_in),
        .O(Dbg_TDO));
  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/SRL16E_4/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h2200),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q1_in));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized23
   (Q0_in,
    Q,
    Dbg_Clk);
  output Q0_in;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q0_in;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/SRL16E_7/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q0_in));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized25
   (tdo_config_word1_0,
    Q,
    Dbg_Clk);
  output tdo_config_word1_0;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_0;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/SRL16E_8/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized3
   (Q6_out,
    Q,
    Dbg_Clk);
  output Q6_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q6_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses[1].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'hFFFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q6_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized5
   (Dbg_TDO,
    Q,
    Dbg_Clk,
    \shift_count_reg[4] ,
    \shift_count_reg[0] ,
    \Dbg_Reg_En[2] ,
    TDO_Data_Reg,
    \Dbg_Reg_En[2]_0 ,
    \shift_count_reg[5] ,
    \shift_count_reg[5]_0 ,
    Dbg_Reg_En,
    Q6_out,
    Q11_in,
    Q_0);
  output Dbg_TDO;
  input [7:0]Q;
  input Dbg_Clk;
  input \shift_count_reg[4] ;
  input \shift_count_reg[0] ;
  input \Dbg_Reg_En[2] ;
  input TDO_Data_Reg;
  input \Dbg_Reg_En[2]_0 ;
  input \shift_count_reg[5] ;
  input \shift_count_reg[5]_0 ;
  input [0:0]Dbg_Reg_En;
  input Q6_out;
  input Q11_in;
  input Q_0;

  wire Dbg_Clk;
  wire [0:0]Dbg_Reg_En;
  wire \Dbg_Reg_En[2] ;
  wire \Dbg_Reg_En[2]_0 ;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_1_n_0;
  wire Dbg_TDO_INST_0_i_7_n_0;
  wire [7:0]Q;
  wire Q11_in;
  wire Q5_out;
  wire Q6_out;
  wire Q_0;
  wire TDO_Data_Reg;
  wire \shift_count_reg[0] ;
  wire \shift_count_reg[4] ;
  wire \shift_count_reg[5] ;
  wire \shift_count_reg[5]_0 ;

  LUT6 #(
    .INIT(64'h77777777FF0F0F0F)) 
    Dbg_TDO_INST_0
       (.I0(Dbg_TDO_INST_0_i_1_n_0),
        .I1(\shift_count_reg[4] ),
        .I2(\shift_count_reg[0] ),
        .I3(\Dbg_Reg_En[2] ),
        .I4(TDO_Data_Reg),
        .I5(\Dbg_Reg_En[2]_0 ),
        .O(Dbg_TDO));
  LUT6 #(
    .INIT(64'h001DFF1DFFFFFFFF)) 
    Dbg_TDO_INST_0_i_1
       (.I0(Dbg_TDO_INST_0_i_7_n_0),
        .I1(Q[6]),
        .I2(\shift_count_reg[5] ),
        .I3(Q[7]),
        .I4(\shift_count_reg[5]_0 ),
        .I5(Dbg_Reg_En),
        .O(Dbg_TDO_INST_0_i_1_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    Dbg_TDO_INST_0_i_7
       (.I0(Q5_out),
        .I1(Q6_out),
        .I2(Q[5]),
        .I3(Q11_in),
        .I4(Q[4]),
        .I5(Q_0),
        .O(Dbg_TDO_INST_0_i_7_n_0));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses[2].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h3FFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q5_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized7
   (Q4_out,
    Q,
    Dbg_Clk);
  output Q4_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q4_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses[3].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q4_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module system_microblaze_0_0_MB_SRL16E__parameterized9
   (Q3_out,
    Q,
    Dbg_Clk);
  output Q3_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q3_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Use_Debug_Logic.Master_Core.Debug_Perf/The_Cache_Addresses[4].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q3_out));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module system_microblaze_0_0_MB_SRLC16E
   (SRL16_Sel_7,
    SRL16_En,
    SRL16_MC15_7,
    Address,
    Dbg_Clk);
  output SRL16_Sel_7;
  input SRL16_En;
  input SRL16_MC15_7;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_En;
  wire SRL16_MC15_7;
  wire SRL16_Sel_7;

  (* XILINX_LEGACY_PRIM = "SRLC16E" *) 
  (* box_type = "PRIMITIVE" *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(SRL16_En),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_7),
        .Q(SRL16_Sel_7));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module system_microblaze_0_0_MB_SRLC16E_11
   (SRL16_Sel_6,
    SRL16_MC15_7,
    \Performace_Debug_Control.ex_dbg_hit_reg[0] ,
    SRL16_MC15_6,
    Address,
    Dbg_Clk,
    Dbg_Reg_En);
  output SRL16_Sel_6;
  output SRL16_MC15_7;
  output \Performace_Debug_Control.ex_dbg_hit_reg[0] ;
  input SRL16_MC15_6;
  input [3:0]Address;
  input Dbg_Clk;
  input [0:7]Dbg_Reg_En;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire \Performace_Debug_Control.ex_dbg_hit_reg[0] ;
  wire SRL16_MC15_6;
  wire SRL16_MC15_7;
  wire SRL16_Sel_6;
  wire \Use_unisim.MB_SRL16CE_I1_i_2_n_0 ;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(\Performace_Debug_Control.ex_dbg_hit_reg[0] ),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_6),
        .Q(SRL16_Sel_6),
        .Q15(SRL16_MC15_7));
  LUT5 #(
    .INIT(32'h00000100)) 
    \Use_unisim.MB_SRL16CE_I1_i_1 
       (.I0(Dbg_Reg_En[2]),
        .I1(Dbg_Reg_En[7]),
        .I2(Dbg_Reg_En[1]),
        .I3(Dbg_Reg_En[3]),
        .I4(\Use_unisim.MB_SRL16CE_I1_i_2_n_0 ),
        .O(\Performace_Debug_Control.ex_dbg_hit_reg[0] ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Use_unisim.MB_SRL16CE_I1_i_2 
       (.I0(Dbg_Reg_En[5]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[0]),
        .I3(Dbg_Reg_En[6]),
        .O(\Use_unisim.MB_SRL16CE_I1_i_2_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module system_microblaze_0_0_MB_SRLC16E_13
   (SRL16_Sel_5,
    SRL16_MC15_6,
    \Dbg_Reg_En[6] ,
    SRL16_MC15_5,
    Address,
    Dbg_Clk);
  output SRL16_Sel_5;
  output SRL16_MC15_6;
  input \Dbg_Reg_En[6] ;
  input SRL16_MC15_5;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire \Dbg_Reg_En[6] ;
  wire SRL16_MC15_5;
  wire SRL16_MC15_6;
  wire SRL16_Sel_5;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(\Dbg_Reg_En[6] ),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_5),
        .Q(SRL16_Sel_5),
        .Q15(SRL16_MC15_6));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module system_microblaze_0_0_MB_SRLC16E_15
   (SRL16_Sel_4,
    SRL16_MC15_5,
    \Dbg_Reg_En[6] ,
    SRL16_MC15_4,
    Address,
    Dbg_Clk);
  output SRL16_Sel_4;
  output SRL16_MC15_5;
  input \Dbg_Reg_En[6] ;
  input SRL16_MC15_4;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire \Dbg_Reg_En[6] ;
  wire SRL16_MC15_4;
  wire SRL16_MC15_5;
  wire SRL16_Sel_4;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(\Dbg_Reg_En[6] ),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_4),
        .Q(SRL16_Sel_4),
        .Q15(SRL16_MC15_5));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module system_microblaze_0_0_MB_SRLC16E_17
   (SRL16_Sel_3,
    SRL16_MC15_4,
    \Dbg_Reg_En[6] ,
    SRL16_MC15_3,
    Address,
    Dbg_Clk);
  output SRL16_Sel_3;
  output SRL16_MC15_4;
  input \Dbg_Reg_En[6] ;
  input SRL16_MC15_3;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire \Dbg_Reg_En[6] ;
  wire SRL16_MC15_3;
  wire SRL16_MC15_4;
  wire SRL16_Sel_3;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(\Dbg_Reg_En[6] ),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_3),
        .Q(SRL16_Sel_3),
        .Q15(SRL16_MC15_4));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module system_microblaze_0_0_MB_SRLC16E_19
   (SRL16_Sel_2,
    SRL16_MC15_3,
    \Dbg_Reg_En[6] ,
    SRL16_MC15_2,
    Address,
    Dbg_Clk);
  output SRL16_Sel_2;
  output SRL16_MC15_3;
  input \Dbg_Reg_En[6] ;
  input SRL16_MC15_2;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire \Dbg_Reg_En[6] ;
  wire SRL16_MC15_2;
  wire SRL16_MC15_3;
  wire SRL16_Sel_2;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(\Dbg_Reg_En[6] ),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_2),
        .Q(SRL16_Sel_2),
        .Q15(SRL16_MC15_3));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module system_microblaze_0_0_MB_SRLC16E_21
   (SRL16_Sel_1,
    SRL16_MC15_2,
    \Dbg_Reg_En[6] ,
    SRL16_MC15_1,
    Address,
    Dbg_Clk);
  output SRL16_Sel_1;
  output SRL16_MC15_2;
  input \Dbg_Reg_En[6] ;
  input SRL16_MC15_1;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire \Dbg_Reg_En[6] ;
  wire SRL16_MC15_1;
  wire SRL16_MC15_2;
  wire SRL16_Sel_1;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(\Dbg_Reg_En[6] ),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_1),
        .Q(SRL16_Sel_1),
        .Q15(SRL16_MC15_2));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module system_microblaze_0_0_MB_SRLC16E_23
   (SRL16_Sel_0,
    SRL16_MC15_1,
    \Dbg_Reg_En[6] ,
    Dbg_TDI,
    Address,
    Dbg_Clk);
  output SRL16_Sel_0;
  output SRL16_MC15_1;
  input \Dbg_Reg_En[6] ;
  input Dbg_TDI;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire \Dbg_Reg_En[6] ;
  wire Dbg_TDI;
  wire SRL16_MC15_1;
  wire SRL16_Sel_0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(\Dbg_Reg_En[6] ),
        .CLK(Dbg_Clk),
        .D(Dbg_TDI),
        .Q(SRL16_Sel_0),
        .Q15(SRL16_MC15_1));
endmodule

(* C_ADDR_TAG_BITS = "17" *) (* C_ALLOW_DCACHE_WR = "1" *) (* C_ALLOW_ICACHE_WR = "1" *) 
(* C_AREA_OPTIMIZED = "0" *) (* C_ASYNC_INTERRUPT = "1" *) (* C_AVOID_PRIMITIVES = "0" *) 
(* C_BASE_VECTORS = "0" *) (* C_BRANCH_TARGET_CACHE_SIZE = "0" *) (* C_CACHE_BYTE_SIZE = "8192" *) 
(* C_DATA_SIZE = "32" *) (* C_DCACHE_ADDR_TAG = "17" *) (* C_DCACHE_ALWAYS_USED = "0" *) 
(* C_DCACHE_BASEADDR = "0" *) (* C_DCACHE_BYTE_SIZE = "8192" *) (* C_DCACHE_DATA_WIDTH = "0" *) 
(* C_DCACHE_FORCE_TAG_LUTRAM = "0" *) (* C_DCACHE_HIGHADDR = "1073741823" *) (* C_DCACHE_LINE_LEN = "4" *) 
(* C_DCACHE_USE_WRITEBACK = "0" *) (* C_DCACHE_VICTIMS = "0" *) (* C_DEBUG_COUNTER_WIDTH = "32" *) 
(* C_DEBUG_ENABLED = "1" *) (* C_DEBUG_EVENT_COUNTERS = "5" *) (* C_DEBUG_EXTERNAL_TRACE = "0" *) 
(* C_DEBUG_LATENCY_COUNTERS = "1" *) (* C_DEBUG_PROFILE_SIZE = "0" *) (* C_DEBUG_TRACE_SIZE = "8192" *) 
(* C_DIV_ZERO_EXCEPTION = "0" *) (* C_DYNAMIC_BUS_SIZING = "0" *) (* C_D_AXI = "1" *) 
(* C_D_LMB = "1" *) (* C_ECC_USE_CE_EXCEPTION = "0" *) (* C_EDGE_IS_POSITIVE = "1" *) 
(* C_ENDIANNESS = "1" *) (* C_FAMILY = "artix7" *) (* C_FAULT_TOLERANT = "0" *) 
(* C_FPU_EXCEPTION = "0" *) (* C_FREQ = "100000000" *) (* C_FSL_EXCEPTION = "0" *) 
(* C_FSL_LINKS = "0" *) (* C_ICACHE_ALWAYS_USED = "0" *) (* C_ICACHE_BASEADDR = "0" *) 
(* C_ICACHE_DATA_WIDTH = "0" *) (* C_ICACHE_FORCE_TAG_LUTRAM = "0" *) (* C_ICACHE_HIGHADDR = "1073741823" *) 
(* C_ICACHE_LINE_LEN = "4" *) (* C_ICACHE_STREAMS = "0" *) (* C_ICACHE_VICTIMS = "0" *) 
(* C_ILL_OPCODE_EXCEPTION = "0" *) (* C_IMPRECISE_EXCEPTIONS = "0" *) (* C_INSTANCE = "system_microblaze_0_0" *) 
(* C_INTERCONNECT = "2" *) (* C_INTERRUPT_IS_EDGE = "0" *) (* C_I_AXI = "0" *) 
(* C_I_LMB = "1" *) (* C_LOCKSTEP_SLAVE = "0" *) (* C_M0_AXIS_DATA_WIDTH = "32" *) 
(* C_M10_AXIS_DATA_WIDTH = "32" *) (* C_M11_AXIS_DATA_WIDTH = "32" *) (* C_M12_AXIS_DATA_WIDTH = "32" *) 
(* C_M13_AXIS_DATA_WIDTH = "32" *) (* C_M14_AXIS_DATA_WIDTH = "32" *) (* C_M15_AXIS_DATA_WIDTH = "32" *) 
(* C_M1_AXIS_DATA_WIDTH = "32" *) (* C_M2_AXIS_DATA_WIDTH = "32" *) (* C_M3_AXIS_DATA_WIDTH = "32" *) 
(* C_M4_AXIS_DATA_WIDTH = "32" *) (* C_M5_AXIS_DATA_WIDTH = "32" *) (* C_M6_AXIS_DATA_WIDTH = "32" *) 
(* C_M7_AXIS_DATA_WIDTH = "32" *) (* C_M8_AXIS_DATA_WIDTH = "32" *) (* C_M9_AXIS_DATA_WIDTH = "32" *) 
(* C_MMU_DTLB_SIZE = "4" *) (* C_MMU_ITLB_SIZE = "2" *) (* C_MMU_PRIVILEGED_INSTR = "0" *) 
(* C_MMU_TLB_ACCESS = "3" *) (* C_MMU_ZONES = "16" *) (* C_M_AXI_DC_ADDR_WIDTH = "32" *) 
(* C_M_AXI_DC_ARUSER_WIDTH = "5" *) (* C_M_AXI_DC_AWUSER_WIDTH = "5" *) (* C_M_AXI_DC_BUSER_WIDTH = "1" *) 
(* C_M_AXI_DC_DATA_WIDTH = "32" *) (* C_M_AXI_DC_EXCLUSIVE_ACCESS = "0" *) (* C_M_AXI_DC_RUSER_WIDTH = "1" *) 
(* C_M_AXI_DC_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_DC_USER_VALUE = "31" *) (* C_M_AXI_DC_WUSER_WIDTH = "1" *) 
(* C_M_AXI_DP_ADDR_WIDTH = "32" *) (* C_M_AXI_DP_DATA_WIDTH = "32" *) (* C_M_AXI_DP_EXCLUSIVE_ACCESS = "0" *) 
(* C_M_AXI_DP_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_D_BUS_EXCEPTION = "0" *) (* C_M_AXI_IC_ADDR_WIDTH = "32" *) 
(* C_M_AXI_IC_ARUSER_WIDTH = "5" *) (* C_M_AXI_IC_AWUSER_WIDTH = "5" *) (* C_M_AXI_IC_BUSER_WIDTH = "1" *) 
(* C_M_AXI_IC_DATA_WIDTH = "32" *) (* C_M_AXI_IC_RUSER_WIDTH = "1" *) (* C_M_AXI_IC_THREAD_ID_WIDTH = "1" *) 
(* C_M_AXI_IC_USER_VALUE = "31" *) (* C_M_AXI_IC_WUSER_WIDTH = "1" *) (* C_M_AXI_IP_ADDR_WIDTH = "32" *) 
(* C_M_AXI_IP_DATA_WIDTH = "32" *) (* C_M_AXI_IP_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_I_BUS_EXCEPTION = "0" *) 
(* C_NUMBER_OF_PC_BRK = "1" *) (* C_NUMBER_OF_RD_ADDR_BRK = "0" *) (* C_NUMBER_OF_WR_ADDR_BRK = "0" *) 
(* C_NUM_SYNC_FF_CLK = "2" *) (* C_NUM_SYNC_FF_CLK_DEBUG = "2" *) (* C_NUM_SYNC_FF_CLK_IRQ = "1" *) 
(* C_NUM_SYNC_FF_DBG_CLK = "1" *) (* C_OPCODE_0x0_ILLEGAL = "0" *) (* C_OPTIMIZATION = "0" *) 
(* C_PC_WIDTH = "32" *) (* C_PVR = "0" *) (* C_PVR_USER1 = "8'b00000000" *) 
(* C_PVR_USER2 = "0" *) (* C_RESET_MSR = "0" *) (* C_S0_AXIS_DATA_WIDTH = "32" *) 
(* C_S10_AXIS_DATA_WIDTH = "32" *) (* C_S11_AXIS_DATA_WIDTH = "32" *) (* C_S12_AXIS_DATA_WIDTH = "32" *) 
(* C_S13_AXIS_DATA_WIDTH = "32" *) (* C_S14_AXIS_DATA_WIDTH = "32" *) (* C_S15_AXIS_DATA_WIDTH = "32" *) 
(* C_S1_AXIS_DATA_WIDTH = "32" *) (* C_S2_AXIS_DATA_WIDTH = "32" *) (* C_S3_AXIS_DATA_WIDTH = "32" *) 
(* C_S4_AXIS_DATA_WIDTH = "32" *) (* C_S5_AXIS_DATA_WIDTH = "32" *) (* C_S6_AXIS_DATA_WIDTH = "32" *) 
(* C_S7_AXIS_DATA_WIDTH = "32" *) (* C_S8_AXIS_DATA_WIDTH = "32" *) (* C_S9_AXIS_DATA_WIDTH = "32" *) 
(* C_SCO = "0" *) (* C_UNALIGNED_EXCEPTIONS = "0" *) (* C_USE_BARREL = "0" *) 
(* C_USE_BRANCH_TARGET_CACHE = "0" *) (* C_USE_CONFIG_RESET = "0" *) (* C_USE_DCACHE = "0" *) 
(* C_USE_DIV = "0" *) (* C_USE_EXTENDED_FSL_INSTR = "0" *) (* C_USE_EXT_BRK = "0" *) 
(* C_USE_EXT_NM_BRK = "0" *) (* C_USE_FPU = "0" *) (* C_USE_HW_MUL = "0" *) 
(* C_USE_ICACHE = "0" *) (* C_USE_INTERRUPT = "2" *) (* C_USE_MMU = "0" *) 
(* C_USE_MSR_INSTR = "0" *) (* C_USE_PCMP_INSTR = "0" *) (* C_USE_REORDER_INSTR = "1" *) 
(* C_USE_STACK_PROTECTION = "0" *) (* ORIG_REF_NAME = "MicroBlaze" *) (* downgradeipidentifiedwarnings = "yes" *) 
module system_microblaze_0_0_MicroBlaze
   (Clk,
    Reset,
    Mb_Reset,
    Config_Reset,
    Dbg_Disable,
    Scan_Reset_Sel,
    Scan_Reset,
    Reset_Mode,
    Interrupt,
    Interrupt_Address,
    Interrupt_Ack,
    Ext_BRK,
    Ext_NM_BRK,
    Dbg_Stop,
    Dbg_Intr,
    MB_Halted,
    MB_Error,
    Wakeup,
    Sleep,
    Dbg_Wakeup,
    LOCKSTEP_Slave_In,
    LOCKSTEP_Master_Out,
    LOCKSTEP_Out,
    Instr_Addr,
    Instr,
    IFetch,
    I_AS,
    IReady,
    IWAIT,
    ICE,
    IUE,
    M_AXI_IP_AWID,
    M_AXI_IP_AWADDR,
    M_AXI_IP_AWLEN,
    M_AXI_IP_AWSIZE,
    M_AXI_IP_AWBURST,
    M_AXI_IP_AWLOCK,
    M_AXI_IP_AWCACHE,
    M_AXI_IP_AWPROT,
    M_AXI_IP_AWQOS,
    M_AXI_IP_AWVALID,
    M_AXI_IP_AWREADY,
    M_AXI_IP_WDATA,
    M_AXI_IP_WSTRB,
    M_AXI_IP_WLAST,
    M_AXI_IP_WVALID,
    M_AXI_IP_WREADY,
    M_AXI_IP_BID,
    M_AXI_IP_BRESP,
    M_AXI_IP_BVALID,
    M_AXI_IP_BREADY,
    M_AXI_IP_ARID,
    M_AXI_IP_ARADDR,
    M_AXI_IP_ARLEN,
    M_AXI_IP_ARSIZE,
    M_AXI_IP_ARBURST,
    M_AXI_IP_ARLOCK,
    M_AXI_IP_ARCACHE,
    M_AXI_IP_ARPROT,
    M_AXI_IP_ARQOS,
    M_AXI_IP_ARVALID,
    M_AXI_IP_ARREADY,
    M_AXI_IP_RID,
    M_AXI_IP_RDATA,
    M_AXI_IP_RRESP,
    M_AXI_IP_RLAST,
    M_AXI_IP_RVALID,
    M_AXI_IP_RREADY,
    Data_Addr,
    Data_Read,
    Data_Write,
    D_AS,
    Read_Strobe,
    Write_Strobe,
    DReady,
    DWait,
    DCE,
    DUE,
    Byte_Enable,
    M_AXI_DP_AWID,
    M_AXI_DP_AWADDR,
    M_AXI_DP_AWLEN,
    M_AXI_DP_AWSIZE,
    M_AXI_DP_AWBURST,
    M_AXI_DP_AWLOCK,
    M_AXI_DP_AWCACHE,
    M_AXI_DP_AWPROT,
    M_AXI_DP_AWQOS,
    M_AXI_DP_AWVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WDATA,
    M_AXI_DP_WSTRB,
    M_AXI_DP_WLAST,
    M_AXI_DP_WVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_BID,
    M_AXI_DP_BRESP,
    M_AXI_DP_BVALID,
    M_AXI_DP_BREADY,
    M_AXI_DP_ARID,
    M_AXI_DP_ARADDR,
    M_AXI_DP_ARLEN,
    M_AXI_DP_ARSIZE,
    M_AXI_DP_ARBURST,
    M_AXI_DP_ARLOCK,
    M_AXI_DP_ARCACHE,
    M_AXI_DP_ARPROT,
    M_AXI_DP_ARQOS,
    M_AXI_DP_ARVALID,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RID,
    M_AXI_DP_RDATA,
    M_AXI_DP_RRESP,
    M_AXI_DP_RLAST,
    M_AXI_DP_RVALID,
    M_AXI_DP_RREADY,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_TDO,
    Dbg_Reg_En,
    Dbg_Shift,
    Dbg_Capture,
    Dbg_Update,
    Debug_Rst,
    Dbg_Trig_In,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_Out,
    Dbg_Trace_Clk,
    Dbg_Trace_Data,
    Dbg_Trace_Ready,
    Dbg_Trace_Valid,
    Trace_Instruction,
    Trace_Valid_Instr,
    Trace_PC,
    Trace_Reg_Write,
    Trace_Reg_Addr,
    Trace_MSR_Reg,
    Trace_PID_Reg,
    Trace_New_Reg_Value,
    Trace_Exception_Taken,
    Trace_Exception_Kind,
    Trace_Jump_Taken,
    Trace_Delay_Slot,
    Trace_Data_Address,
    Trace_Data_Write_Value,
    Trace_Data_Byte_Enable,
    Trace_Data_Access,
    Trace_Data_Read,
    Trace_Data_Write,
    Trace_DCache_Req,
    Trace_DCache_Hit,
    Trace_DCache_Rdy,
    Trace_DCache_Read,
    Trace_ICache_Req,
    Trace_ICache_Hit,
    Trace_ICache_Rdy,
    Trace_OF_PipeRun,
    Trace_EX_PipeRun,
    Trace_MEM_PipeRun,
    Trace_MB_Halted,
    Trace_Jump_Hit,
    M0_AXIS_TLAST,
    M0_AXIS_TDATA,
    M0_AXIS_TVALID,
    M0_AXIS_TREADY,
    M1_AXIS_TLAST,
    M1_AXIS_TDATA,
    M1_AXIS_TVALID,
    M1_AXIS_TREADY,
    M2_AXIS_TLAST,
    M2_AXIS_TDATA,
    M2_AXIS_TVALID,
    M2_AXIS_TREADY,
    M3_AXIS_TLAST,
    M3_AXIS_TDATA,
    M3_AXIS_TVALID,
    M3_AXIS_TREADY,
    M4_AXIS_TLAST,
    M4_AXIS_TDATA,
    M4_AXIS_TVALID,
    M4_AXIS_TREADY,
    M5_AXIS_TLAST,
    M5_AXIS_TDATA,
    M5_AXIS_TVALID,
    M5_AXIS_TREADY,
    M6_AXIS_TLAST,
    M6_AXIS_TDATA,
    M6_AXIS_TVALID,
    M6_AXIS_TREADY,
    M7_AXIS_TLAST,
    M7_AXIS_TDATA,
    M7_AXIS_TVALID,
    M7_AXIS_TREADY,
    M8_AXIS_TLAST,
    M8_AXIS_TDATA,
    M8_AXIS_TVALID,
    M8_AXIS_TREADY,
    M9_AXIS_TLAST,
    M9_AXIS_TDATA,
    M9_AXIS_TVALID,
    M9_AXIS_TREADY,
    M10_AXIS_TLAST,
    M10_AXIS_TDATA,
    M10_AXIS_TVALID,
    M10_AXIS_TREADY,
    M11_AXIS_TLAST,
    M11_AXIS_TDATA,
    M11_AXIS_TVALID,
    M11_AXIS_TREADY,
    M12_AXIS_TLAST,
    M12_AXIS_TDATA,
    M12_AXIS_TVALID,
    M12_AXIS_TREADY,
    M13_AXIS_TLAST,
    M13_AXIS_TDATA,
    M13_AXIS_TVALID,
    M13_AXIS_TREADY,
    M14_AXIS_TLAST,
    M14_AXIS_TDATA,
    M14_AXIS_TVALID,
    M14_AXIS_TREADY,
    M15_AXIS_TLAST,
    M15_AXIS_TDATA,
    M15_AXIS_TVALID,
    M15_AXIS_TREADY,
    S0_AXIS_TLAST,
    S0_AXIS_TDATA,
    S0_AXIS_TVALID,
    S0_AXIS_TREADY,
    S1_AXIS_TLAST,
    S1_AXIS_TDATA,
    S1_AXIS_TVALID,
    S1_AXIS_TREADY,
    S2_AXIS_TLAST,
    S2_AXIS_TDATA,
    S2_AXIS_TVALID,
    S2_AXIS_TREADY,
    S3_AXIS_TLAST,
    S3_AXIS_TDATA,
    S3_AXIS_TVALID,
    S3_AXIS_TREADY,
    S4_AXIS_TLAST,
    S4_AXIS_TDATA,
    S4_AXIS_TVALID,
    S4_AXIS_TREADY,
    S5_AXIS_TLAST,
    S5_AXIS_TDATA,
    S5_AXIS_TVALID,
    S5_AXIS_TREADY,
    S6_AXIS_TLAST,
    S6_AXIS_TDATA,
    S6_AXIS_TVALID,
    S6_AXIS_TREADY,
    S7_AXIS_TLAST,
    S7_AXIS_TDATA,
    S7_AXIS_TVALID,
    S7_AXIS_TREADY,
    S8_AXIS_TLAST,
    S8_AXIS_TDATA,
    S8_AXIS_TVALID,
    S8_AXIS_TREADY,
    S9_AXIS_TLAST,
    S9_AXIS_TDATA,
    S9_AXIS_TVALID,
    S9_AXIS_TREADY,
    S10_AXIS_TLAST,
    S10_AXIS_TDATA,
    S10_AXIS_TVALID,
    S10_AXIS_TREADY,
    S11_AXIS_TLAST,
    S11_AXIS_TDATA,
    S11_AXIS_TVALID,
    S11_AXIS_TREADY,
    S12_AXIS_TLAST,
    S12_AXIS_TDATA,
    S12_AXIS_TVALID,
    S12_AXIS_TREADY,
    S13_AXIS_TLAST,
    S13_AXIS_TDATA,
    S13_AXIS_TVALID,
    S13_AXIS_TREADY,
    S14_AXIS_TLAST,
    S14_AXIS_TDATA,
    S14_AXIS_TVALID,
    S14_AXIS_TREADY,
    S15_AXIS_TLAST,
    S15_AXIS_TDATA,
    S15_AXIS_TVALID,
    S15_AXIS_TREADY,
    M_AXI_IC_AWID,
    M_AXI_IC_AWADDR,
    M_AXI_IC_AWLEN,
    M_AXI_IC_AWSIZE,
    M_AXI_IC_AWBURST,
    M_AXI_IC_AWLOCK,
    M_AXI_IC_AWCACHE,
    M_AXI_IC_AWPROT,
    M_AXI_IC_AWQOS,
    M_AXI_IC_AWVALID,
    M_AXI_IC_AWREADY,
    M_AXI_IC_AWUSER,
    M_AXI_IC_AWDOMAIN,
    M_AXI_IC_AWSNOOP,
    M_AXI_IC_AWBAR,
    M_AXI_IC_WDATA,
    M_AXI_IC_WSTRB,
    M_AXI_IC_WLAST,
    M_AXI_IC_WVALID,
    M_AXI_IC_WREADY,
    M_AXI_IC_WUSER,
    M_AXI_IC_BID,
    M_AXI_IC_BRESP,
    M_AXI_IC_BVALID,
    M_AXI_IC_BREADY,
    M_AXI_IC_BUSER,
    M_AXI_IC_WACK,
    M_AXI_IC_ARID,
    M_AXI_IC_ARADDR,
    M_AXI_IC_ARLEN,
    M_AXI_IC_ARSIZE,
    M_AXI_IC_ARBURST,
    M_AXI_IC_ARLOCK,
    M_AXI_IC_ARCACHE,
    M_AXI_IC_ARPROT,
    M_AXI_IC_ARQOS,
    M_AXI_IC_ARVALID,
    M_AXI_IC_ARREADY,
    M_AXI_IC_ARUSER,
    M_AXI_IC_ARDOMAIN,
    M_AXI_IC_ARSNOOP,
    M_AXI_IC_ARBAR,
    M_AXI_IC_RID,
    M_AXI_IC_RDATA,
    M_AXI_IC_RRESP,
    M_AXI_IC_RLAST,
    M_AXI_IC_RVALID,
    M_AXI_IC_RREADY,
    M_AXI_IC_RUSER,
    M_AXI_IC_RACK,
    M_AXI_IC_ACVALID,
    M_AXI_IC_ACADDR,
    M_AXI_IC_ACSNOOP,
    M_AXI_IC_ACPROT,
    M_AXI_IC_ACREADY,
    M_AXI_IC_CRVALID,
    M_AXI_IC_CRRESP,
    M_AXI_IC_CRREADY,
    M_AXI_IC_CDVALID,
    M_AXI_IC_CDDATA,
    M_AXI_IC_CDLAST,
    M_AXI_IC_CDREADY,
    M_AXI_DC_AWID,
    M_AXI_DC_AWADDR,
    M_AXI_DC_AWLEN,
    M_AXI_DC_AWSIZE,
    M_AXI_DC_AWBURST,
    M_AXI_DC_AWLOCK,
    M_AXI_DC_AWCACHE,
    M_AXI_DC_AWPROT,
    M_AXI_DC_AWQOS,
    M_AXI_DC_AWVALID,
    M_AXI_DC_AWREADY,
    M_AXI_DC_AWUSER,
    M_AXI_DC_AWDOMAIN,
    M_AXI_DC_AWSNOOP,
    M_AXI_DC_AWBAR,
    M_AXI_DC_WDATA,
    M_AXI_DC_WSTRB,
    M_AXI_DC_WLAST,
    M_AXI_DC_WVALID,
    M_AXI_DC_WREADY,
    M_AXI_DC_WUSER,
    M_AXI_DC_BRESP,
    M_AXI_DC_BID,
    M_AXI_DC_BVALID,
    M_AXI_DC_BREADY,
    M_AXI_DC_BUSER,
    M_AXI_DC_WACK,
    M_AXI_DC_ARID,
    M_AXI_DC_ARADDR,
    M_AXI_DC_ARLEN,
    M_AXI_DC_ARSIZE,
    M_AXI_DC_ARBURST,
    M_AXI_DC_ARLOCK,
    M_AXI_DC_ARCACHE,
    M_AXI_DC_ARPROT,
    M_AXI_DC_ARQOS,
    M_AXI_DC_ARVALID,
    M_AXI_DC_ARREADY,
    M_AXI_DC_ARUSER,
    M_AXI_DC_ARDOMAIN,
    M_AXI_DC_ARSNOOP,
    M_AXI_DC_ARBAR,
    M_AXI_DC_RID,
    M_AXI_DC_RDATA,
    M_AXI_DC_RRESP,
    M_AXI_DC_RLAST,
    M_AXI_DC_RVALID,
    M_AXI_DC_RREADY,
    M_AXI_DC_RUSER,
    M_AXI_DC_RACK,
    M_AXI_DC_ACVALID,
    M_AXI_DC_ACADDR,
    M_AXI_DC_ACSNOOP,
    M_AXI_DC_ACPROT,
    M_AXI_DC_ACREADY,
    M_AXI_DC_CRVALID,
    M_AXI_DC_CRRESP,
    M_AXI_DC_CRREADY,
    M_AXI_DC_CDVALID,
    M_AXI_DC_CDDATA,
    M_AXI_DC_CDLAST,
    M_AXI_DC_CDREADY);
  input Clk;
  input Reset;
  input Mb_Reset;
  input Config_Reset;
  input Dbg_Disable;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input [0:1]Reset_Mode;
  input Interrupt;
  input [0:31]Interrupt_Address;
  output [0:1]Interrupt_Ack;
  input Ext_BRK;
  input Ext_NM_BRK;
  input Dbg_Stop;
  output Dbg_Intr;
  output MB_Halted;
  output MB_Error;
  input [0:1]Wakeup;
  output Sleep;
  output Dbg_Wakeup;
  input [0:4095]LOCKSTEP_Slave_In;
  output [0:4095]LOCKSTEP_Master_Out;
  output [0:4095]LOCKSTEP_Out;
  output [0:31]Instr_Addr;
  input [0:31]Instr;
  output IFetch;
  output I_AS;
  input IReady;
  input IWAIT;
  input ICE;
  input IUE;
  output [0:0]M_AXI_IP_AWID;
  output [31:0]M_AXI_IP_AWADDR;
  output [7:0]M_AXI_IP_AWLEN;
  output [2:0]M_AXI_IP_AWSIZE;
  output [1:0]M_AXI_IP_AWBURST;
  output M_AXI_IP_AWLOCK;
  output [3:0]M_AXI_IP_AWCACHE;
  output [2:0]M_AXI_IP_AWPROT;
  output [3:0]M_AXI_IP_AWQOS;
  output M_AXI_IP_AWVALID;
  input M_AXI_IP_AWREADY;
  output [31:0]M_AXI_IP_WDATA;
  output [3:0]M_AXI_IP_WSTRB;
  output M_AXI_IP_WLAST;
  output M_AXI_IP_WVALID;
  input M_AXI_IP_WREADY;
  input [0:0]M_AXI_IP_BID;
  input [1:0]M_AXI_IP_BRESP;
  input M_AXI_IP_BVALID;
  output M_AXI_IP_BREADY;
  output [0:0]M_AXI_IP_ARID;
  output [31:0]M_AXI_IP_ARADDR;
  output [7:0]M_AXI_IP_ARLEN;
  output [2:0]M_AXI_IP_ARSIZE;
  output [1:0]M_AXI_IP_ARBURST;
  output M_AXI_IP_ARLOCK;
  output [3:0]M_AXI_IP_ARCACHE;
  output [2:0]M_AXI_IP_ARPROT;
  output [3:0]M_AXI_IP_ARQOS;
  output M_AXI_IP_ARVALID;
  input M_AXI_IP_ARREADY;
  input [0:0]M_AXI_IP_RID;
  input [31:0]M_AXI_IP_RDATA;
  input [1:0]M_AXI_IP_RRESP;
  input M_AXI_IP_RLAST;
  input M_AXI_IP_RVALID;
  output M_AXI_IP_RREADY;
  output [0:31]Data_Addr;
  input [0:31]Data_Read;
  output [0:31]Data_Write;
  output D_AS;
  output Read_Strobe;
  output Write_Strobe;
  input DReady;
  input DWait;
  input DCE;
  input DUE;
  output [0:3]Byte_Enable;
  output [0:0]M_AXI_DP_AWID;
  output [31:0]M_AXI_DP_AWADDR;
  output [7:0]M_AXI_DP_AWLEN;
  output [2:0]M_AXI_DP_AWSIZE;
  output [1:0]M_AXI_DP_AWBURST;
  output M_AXI_DP_AWLOCK;
  output [3:0]M_AXI_DP_AWCACHE;
  output [2:0]M_AXI_DP_AWPROT;
  output [3:0]M_AXI_DP_AWQOS;
  output M_AXI_DP_AWVALID;
  input M_AXI_DP_AWREADY;
  output [31:0]M_AXI_DP_WDATA;
  output [3:0]M_AXI_DP_WSTRB;
  output M_AXI_DP_WLAST;
  output M_AXI_DP_WVALID;
  input M_AXI_DP_WREADY;
  input [0:0]M_AXI_DP_BID;
  input [1:0]M_AXI_DP_BRESP;
  input M_AXI_DP_BVALID;
  output M_AXI_DP_BREADY;
  output [0:0]M_AXI_DP_ARID;
  output [31:0]M_AXI_DP_ARADDR;
  output [7:0]M_AXI_DP_ARLEN;
  output [2:0]M_AXI_DP_ARSIZE;
  output [1:0]M_AXI_DP_ARBURST;
  output M_AXI_DP_ARLOCK;
  output [3:0]M_AXI_DP_ARCACHE;
  output [2:0]M_AXI_DP_ARPROT;
  output [3:0]M_AXI_DP_ARQOS;
  output M_AXI_DP_ARVALID;
  input M_AXI_DP_ARREADY;
  input [0:0]M_AXI_DP_RID;
  input [31:0]M_AXI_DP_RDATA;
  input [1:0]M_AXI_DP_RRESP;
  input M_AXI_DP_RLAST;
  input M_AXI_DP_RVALID;
  output M_AXI_DP_RREADY;
  input Dbg_Clk;
  input Dbg_TDI;
  output Dbg_TDO;
  input [0:7]Dbg_Reg_En;
  input Dbg_Shift;
  input Dbg_Capture;
  input Dbg_Update;
  input Debug_Rst;
  output [0:7]Dbg_Trig_In;
  input [0:7]Dbg_Trig_Ack_In;
  input [0:7]Dbg_Trig_Out;
  output [0:7]Dbg_Trig_Ack_Out;
  input Dbg_Trace_Clk;
  output [0:35]Dbg_Trace_Data;
  input Dbg_Trace_Ready;
  output Dbg_Trace_Valid;
  output [0:31]Trace_Instruction;
  output Trace_Valid_Instr;
  output [0:31]Trace_PC;
  output Trace_Reg_Write;
  output [0:4]Trace_Reg_Addr;
  output [0:14]Trace_MSR_Reg;
  output [0:7]Trace_PID_Reg;
  output [0:31]Trace_New_Reg_Value;
  output Trace_Exception_Taken;
  output [0:4]Trace_Exception_Kind;
  output Trace_Jump_Taken;
  output Trace_Delay_Slot;
  output [0:31]Trace_Data_Address;
  output [0:31]Trace_Data_Write_Value;
  output [0:3]Trace_Data_Byte_Enable;
  output Trace_Data_Access;
  output Trace_Data_Read;
  output Trace_Data_Write;
  output Trace_DCache_Req;
  output Trace_DCache_Hit;
  output Trace_DCache_Rdy;
  output Trace_DCache_Read;
  output Trace_ICache_Req;
  output Trace_ICache_Hit;
  output Trace_ICache_Rdy;
  output Trace_OF_PipeRun;
  output Trace_EX_PipeRun;
  output Trace_MEM_PipeRun;
  output Trace_MB_Halted;
  output Trace_Jump_Hit;
  output M0_AXIS_TLAST;
  output [31:0]M0_AXIS_TDATA;
  output M0_AXIS_TVALID;
  input M0_AXIS_TREADY;
  output M1_AXIS_TLAST;
  output [31:0]M1_AXIS_TDATA;
  output M1_AXIS_TVALID;
  input M1_AXIS_TREADY;
  output M2_AXIS_TLAST;
  output [31:0]M2_AXIS_TDATA;
  output M2_AXIS_TVALID;
  input M2_AXIS_TREADY;
  output M3_AXIS_TLAST;
  output [31:0]M3_AXIS_TDATA;
  output M3_AXIS_TVALID;
  input M3_AXIS_TREADY;
  output M4_AXIS_TLAST;
  output [31:0]M4_AXIS_TDATA;
  output M4_AXIS_TVALID;
  input M4_AXIS_TREADY;
  output M5_AXIS_TLAST;
  output [31:0]M5_AXIS_TDATA;
  output M5_AXIS_TVALID;
  input M5_AXIS_TREADY;
  output M6_AXIS_TLAST;
  output [31:0]M6_AXIS_TDATA;
  output M6_AXIS_TVALID;
  input M6_AXIS_TREADY;
  output M7_AXIS_TLAST;
  output [31:0]M7_AXIS_TDATA;
  output M7_AXIS_TVALID;
  input M7_AXIS_TREADY;
  output M8_AXIS_TLAST;
  output [31:0]M8_AXIS_TDATA;
  output M8_AXIS_TVALID;
  input M8_AXIS_TREADY;
  output M9_AXIS_TLAST;
  output [31:0]M9_AXIS_TDATA;
  output M9_AXIS_TVALID;
  input M9_AXIS_TREADY;
  output M10_AXIS_TLAST;
  output [31:0]M10_AXIS_TDATA;
  output M10_AXIS_TVALID;
  input M10_AXIS_TREADY;
  output M11_AXIS_TLAST;
  output [31:0]M11_AXIS_TDATA;
  output M11_AXIS_TVALID;
  input M11_AXIS_TREADY;
  output M12_AXIS_TLAST;
  output [31:0]M12_AXIS_TDATA;
  output M12_AXIS_TVALID;
  input M12_AXIS_TREADY;
  output M13_AXIS_TLAST;
  output [31:0]M13_AXIS_TDATA;
  output M13_AXIS_TVALID;
  input M13_AXIS_TREADY;
  output M14_AXIS_TLAST;
  output [31:0]M14_AXIS_TDATA;
  output M14_AXIS_TVALID;
  input M14_AXIS_TREADY;
  output M15_AXIS_TLAST;
  output [31:0]M15_AXIS_TDATA;
  output M15_AXIS_TVALID;
  input M15_AXIS_TREADY;
  input S0_AXIS_TLAST;
  input [31:0]S0_AXIS_TDATA;
  input S0_AXIS_TVALID;
  output S0_AXIS_TREADY;
  input S1_AXIS_TLAST;
  input [31:0]S1_AXIS_TDATA;
  input S1_AXIS_TVALID;
  output S1_AXIS_TREADY;
  input S2_AXIS_TLAST;
  input [31:0]S2_AXIS_TDATA;
  input S2_AXIS_TVALID;
  output S2_AXIS_TREADY;
  input S3_AXIS_TLAST;
  input [31:0]S3_AXIS_TDATA;
  input S3_AXIS_TVALID;
  output S3_AXIS_TREADY;
  input S4_AXIS_TLAST;
  input [31:0]S4_AXIS_TDATA;
  input S4_AXIS_TVALID;
  output S4_AXIS_TREADY;
  input S5_AXIS_TLAST;
  input [31:0]S5_AXIS_TDATA;
  input S5_AXIS_TVALID;
  output S5_AXIS_TREADY;
  input S6_AXIS_TLAST;
  input [31:0]S6_AXIS_TDATA;
  input S6_AXIS_TVALID;
  output S6_AXIS_TREADY;
  input S7_AXIS_TLAST;
  input [31:0]S7_AXIS_TDATA;
  input S7_AXIS_TVALID;
  output S7_AXIS_TREADY;
  input S8_AXIS_TLAST;
  input [31:0]S8_AXIS_TDATA;
  input S8_AXIS_TVALID;
  output S8_AXIS_TREADY;
  input S9_AXIS_TLAST;
  input [31:0]S9_AXIS_TDATA;
  input S9_AXIS_TVALID;
  output S9_AXIS_TREADY;
  input S10_AXIS_TLAST;
  input [31:0]S10_AXIS_TDATA;
  input S10_AXIS_TVALID;
  output S10_AXIS_TREADY;
  input S11_AXIS_TLAST;
  input [31:0]S11_AXIS_TDATA;
  input S11_AXIS_TVALID;
  output S11_AXIS_TREADY;
  input S12_AXIS_TLAST;
  input [31:0]S12_AXIS_TDATA;
  input S12_AXIS_TVALID;
  output S12_AXIS_TREADY;
  input S13_AXIS_TLAST;
  input [31:0]S13_AXIS_TDATA;
  input S13_AXIS_TVALID;
  output S13_AXIS_TREADY;
  input S14_AXIS_TLAST;
  input [31:0]S14_AXIS_TDATA;
  input S14_AXIS_TVALID;
  output S14_AXIS_TREADY;
  input S15_AXIS_TLAST;
  input [31:0]S15_AXIS_TDATA;
  input S15_AXIS_TVALID;
  output S15_AXIS_TREADY;
  output [0:0]M_AXI_IC_AWID;
  output [31:0]M_AXI_IC_AWADDR;
  output [7:0]M_AXI_IC_AWLEN;
  output [2:0]M_AXI_IC_AWSIZE;
  output [1:0]M_AXI_IC_AWBURST;
  output M_AXI_IC_AWLOCK;
  output [3:0]M_AXI_IC_AWCACHE;
  output [2:0]M_AXI_IC_AWPROT;
  output [3:0]M_AXI_IC_AWQOS;
  output M_AXI_IC_AWVALID;
  input M_AXI_IC_AWREADY;
  output [4:0]M_AXI_IC_AWUSER;
  output [1:0]M_AXI_IC_AWDOMAIN;
  output [2:0]M_AXI_IC_AWSNOOP;
  output [1:0]M_AXI_IC_AWBAR;
  output [31:0]M_AXI_IC_WDATA;
  output [3:0]M_AXI_IC_WSTRB;
  output M_AXI_IC_WLAST;
  output M_AXI_IC_WVALID;
  input M_AXI_IC_WREADY;
  output [0:0]M_AXI_IC_WUSER;
  input [0:0]M_AXI_IC_BID;
  input [1:0]M_AXI_IC_BRESP;
  input M_AXI_IC_BVALID;
  output M_AXI_IC_BREADY;
  input [0:0]M_AXI_IC_BUSER;
  output M_AXI_IC_WACK;
  output [0:0]M_AXI_IC_ARID;
  output [31:0]M_AXI_IC_ARADDR;
  output [7:0]M_AXI_IC_ARLEN;
  output [2:0]M_AXI_IC_ARSIZE;
  output [1:0]M_AXI_IC_ARBURST;
  output M_AXI_IC_ARLOCK;
  output [3:0]M_AXI_IC_ARCACHE;
  output [2:0]M_AXI_IC_ARPROT;
  output [3:0]M_AXI_IC_ARQOS;
  output M_AXI_IC_ARVALID;
  input M_AXI_IC_ARREADY;
  output [4:0]M_AXI_IC_ARUSER;
  output [1:0]M_AXI_IC_ARDOMAIN;
  output [3:0]M_AXI_IC_ARSNOOP;
  output [1:0]M_AXI_IC_ARBAR;
  input [0:0]M_AXI_IC_RID;
  input [31:0]M_AXI_IC_RDATA;
  input [1:0]M_AXI_IC_RRESP;
  input M_AXI_IC_RLAST;
  input M_AXI_IC_RVALID;
  output M_AXI_IC_RREADY;
  input [0:0]M_AXI_IC_RUSER;
  output M_AXI_IC_RACK;
  input M_AXI_IC_ACVALID;
  input [31:0]M_AXI_IC_ACADDR;
  input [3:0]M_AXI_IC_ACSNOOP;
  input [2:0]M_AXI_IC_ACPROT;
  output M_AXI_IC_ACREADY;
  output M_AXI_IC_CRVALID;
  output [4:0]M_AXI_IC_CRRESP;
  input M_AXI_IC_CRREADY;
  output M_AXI_IC_CDVALID;
  output [31:0]M_AXI_IC_CDDATA;
  output M_AXI_IC_CDLAST;
  input M_AXI_IC_CDREADY;
  output [0:0]M_AXI_DC_AWID;
  output [31:0]M_AXI_DC_AWADDR;
  output [7:0]M_AXI_DC_AWLEN;
  output [2:0]M_AXI_DC_AWSIZE;
  output [1:0]M_AXI_DC_AWBURST;
  output M_AXI_DC_AWLOCK;
  output [3:0]M_AXI_DC_AWCACHE;
  output [2:0]M_AXI_DC_AWPROT;
  output [3:0]M_AXI_DC_AWQOS;
  output M_AXI_DC_AWVALID;
  input M_AXI_DC_AWREADY;
  output [4:0]M_AXI_DC_AWUSER;
  output [1:0]M_AXI_DC_AWDOMAIN;
  output [2:0]M_AXI_DC_AWSNOOP;
  output [1:0]M_AXI_DC_AWBAR;
  output [31:0]M_AXI_DC_WDATA;
  output [3:0]M_AXI_DC_WSTRB;
  output M_AXI_DC_WLAST;
  output M_AXI_DC_WVALID;
  input M_AXI_DC_WREADY;
  output [0:0]M_AXI_DC_WUSER;
  input [1:0]M_AXI_DC_BRESP;
  input [0:0]M_AXI_DC_BID;
  input M_AXI_DC_BVALID;
  output M_AXI_DC_BREADY;
  input [0:0]M_AXI_DC_BUSER;
  output M_AXI_DC_WACK;
  output [0:0]M_AXI_DC_ARID;
  output [31:0]M_AXI_DC_ARADDR;
  output [7:0]M_AXI_DC_ARLEN;
  output [2:0]M_AXI_DC_ARSIZE;
  output [1:0]M_AXI_DC_ARBURST;
  output M_AXI_DC_ARLOCK;
  output [3:0]M_AXI_DC_ARCACHE;
  output [2:0]M_AXI_DC_ARPROT;
  output [3:0]M_AXI_DC_ARQOS;
  output M_AXI_DC_ARVALID;
  input M_AXI_DC_ARREADY;
  output [4:0]M_AXI_DC_ARUSER;
  output [1:0]M_AXI_DC_ARDOMAIN;
  output [3:0]M_AXI_DC_ARSNOOP;
  output [1:0]M_AXI_DC_ARBAR;
  input [0:0]M_AXI_DC_RID;
  input [31:0]M_AXI_DC_RDATA;
  input [1:0]M_AXI_DC_RRESP;
  input M_AXI_DC_RLAST;
  input M_AXI_DC_RVALID;
  output M_AXI_DC_RREADY;
  input [0:0]M_AXI_DC_RUSER;
  output M_AXI_DC_RACK;
  input M_AXI_DC_ACVALID;
  input [31:0]M_AXI_DC_ACADDR;
  input [3:0]M_AXI_DC_ACSNOOP;
  input [2:0]M_AXI_DC_ACPROT;
  output M_AXI_DC_ACREADY;
  output M_AXI_DC_CRVALID;
  output [4:0]M_AXI_DC_CRRESP;
  input M_AXI_DC_CRREADY;
  output M_AXI_DC_CDVALID;
  output [31:0]M_AXI_DC_CDDATA;
  output M_AXI_DC_CDLAST;
  input M_AXI_DC_CDREADY;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:3]Byte_Enable;
  wire Clk;
  wire Config_Reset;
  wire DCE;
  wire DReady;
  wire DUE;
  wire DWait;
  wire D_AS;
  wire [0:31]Data_Addr;
  wire [0:31]Data_Read;
  wire [0:31]Data_Write;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_12_n_0;
  wire Dbg_TDO_INST_0_i_4_n_0;
  wire Dbg_TDO_INST_0_i_6_n_0;
  wire Dbg_Trace_Clk;
  wire Dbg_Trace_Ready;
  wire [0:7]Dbg_Trig_Ack_In;
  wire [0:1]\^Dbg_Trig_Ack_Out ;
  wire [0:1]\^Dbg_Trig_In ;
  wire [0:7]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Debug_Rst;
  wire Ext_BRK;
  wire Ext_NM_BRK;
  wire ICE;
  wire IFetch;
  wire IReady;
  wire IUE;
  wire IWAIT;
  wire I_AS;
  wire [0:31]Instr;
  wire [0:31]Instr_Addr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [1:45]\^LOCKSTEP_Master_Out ;
  wire [0:4095]LOCKSTEP_Out;
  wire [0:4095]LOCKSTEP_Slave_In;
  wire M0_AXIS_TREADY;
  wire M10_AXIS_TREADY;
  wire M11_AXIS_TREADY;
  wire M12_AXIS_TREADY;
  wire M13_AXIS_TREADY;
  wire M14_AXIS_TREADY;
  wire M15_AXIS_TREADY;
  wire M1_AXIS_TREADY;
  wire M2_AXIS_TREADY;
  wire M3_AXIS_TREADY;
  wire M4_AXIS_TREADY;
  wire M5_AXIS_TREADY;
  wire M6_AXIS_TREADY;
  wire M7_AXIS_TREADY;
  wire M8_AXIS_TREADY;
  wire M9_AXIS_TREADY;
  wire [31:0]M_AXI_DC_ACADDR;
  wire [2:0]M_AXI_DC_ACPROT;
  wire [3:0]M_AXI_DC_ACSNOOP;
  wire M_AXI_DC_ACVALID;
  wire M_AXI_DC_ARREADY;
  wire M_AXI_DC_AWREADY;
  wire [0:0]M_AXI_DC_BID;
  wire [1:0]M_AXI_DC_BRESP;
  wire [0:0]M_AXI_DC_BUSER;
  wire M_AXI_DC_BVALID;
  wire M_AXI_DC_CDREADY;
  wire M_AXI_DC_CRREADY;
  wire [31:0]M_AXI_DC_RDATA;
  wire [0:0]M_AXI_DC_RID;
  wire M_AXI_DC_RLAST;
  wire [1:0]M_AXI_DC_RRESP;
  wire [0:0]M_AXI_DC_RUSER;
  wire M_AXI_DC_RVALID;
  wire M_AXI_DC_WREADY;
  wire [31:0]M_AXI_DP_ARADDR;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID;
  wire [0:0]M_AXI_DP_BID;
  wire [1:0]M_AXI_DP_BRESP;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire [0:0]M_AXI_DP_RID;
  wire M_AXI_DP_RLAST;
  wire [1:0]M_AXI_DP_RRESP;
  wire M_AXI_DP_RVALID;
  wire [31:0]M_AXI_DP_WDATA;
  wire M_AXI_DP_WREADY;
  wire [3:0]M_AXI_DP_WSTRB;
  wire M_AXI_DP_WVALID;
  wire [31:0]M_AXI_IC_ACADDR;
  wire [2:0]M_AXI_IC_ACPROT;
  wire [3:0]M_AXI_IC_ACSNOOP;
  wire M_AXI_IC_ACVALID;
  wire M_AXI_IC_ARREADY;
  wire M_AXI_IC_AWREADY;
  wire [0:0]M_AXI_IC_BID;
  wire [1:0]M_AXI_IC_BRESP;
  wire [0:0]M_AXI_IC_BUSER;
  wire M_AXI_IC_BVALID;
  wire M_AXI_IC_CDREADY;
  wire M_AXI_IC_CRREADY;
  wire [31:0]M_AXI_IC_RDATA;
  wire [0:0]M_AXI_IC_RID;
  wire M_AXI_IC_RLAST;
  wire [1:0]M_AXI_IC_RRESP;
  wire [0:0]M_AXI_IC_RUSER;
  wire M_AXI_IC_RVALID;
  wire M_AXI_IC_WREADY;
  wire M_AXI_IP_ARREADY;
  wire M_AXI_IP_AWREADY;
  wire [0:0]M_AXI_IP_BID;
  wire [1:0]M_AXI_IP_BRESP;
  wire M_AXI_IP_BVALID;
  wire [31:0]M_AXI_IP_RDATA;
  wire [0:0]M_AXI_IP_RID;
  wire M_AXI_IP_RLAST;
  wire [1:0]M_AXI_IP_RRESP;
  wire M_AXI_IP_RVALID;
  wire M_AXI_IP_WREADY;
  wire Mb_Reset;
  wire Read_Strobe;
  wire Reset;
  wire [0:1]Reset_Mode;
  wire [31:0]S0_AXIS_TDATA;
  wire S0_AXIS_TLAST;
  wire S0_AXIS_TVALID;
  wire [31:0]S10_AXIS_TDATA;
  wire S10_AXIS_TLAST;
  wire S10_AXIS_TVALID;
  wire [31:0]S11_AXIS_TDATA;
  wire S11_AXIS_TLAST;
  wire S11_AXIS_TVALID;
  wire [31:0]S12_AXIS_TDATA;
  wire S12_AXIS_TLAST;
  wire S12_AXIS_TVALID;
  wire [31:0]S13_AXIS_TDATA;
  wire S13_AXIS_TLAST;
  wire S13_AXIS_TVALID;
  wire [31:0]S14_AXIS_TDATA;
  wire S14_AXIS_TLAST;
  wire S14_AXIS_TVALID;
  wire [31:0]S15_AXIS_TDATA;
  wire S15_AXIS_TLAST;
  wire S15_AXIS_TVALID;
  wire [31:0]S1_AXIS_TDATA;
  wire S1_AXIS_TLAST;
  wire S1_AXIS_TVALID;
  wire [31:0]S2_AXIS_TDATA;
  wire S2_AXIS_TLAST;
  wire S2_AXIS_TVALID;
  wire [31:0]S3_AXIS_TDATA;
  wire S3_AXIS_TLAST;
  wire S3_AXIS_TVALID;
  wire [31:0]S4_AXIS_TDATA;
  wire S4_AXIS_TLAST;
  wire S4_AXIS_TVALID;
  wire [31:0]S5_AXIS_TDATA;
  wire S5_AXIS_TLAST;
  wire S5_AXIS_TVALID;
  wire [31:0]S6_AXIS_TDATA;
  wire S6_AXIS_TLAST;
  wire S6_AXIS_TVALID;
  wire [31:0]S7_AXIS_TDATA;
  wire S7_AXIS_TLAST;
  wire S7_AXIS_TVALID;
  wire [31:0]S8_AXIS_TDATA;
  wire S8_AXIS_TLAST;
  wire S8_AXIS_TVALID;
  wire [31:0]S9_AXIS_TDATA;
  wire S9_AXIS_TLAST;
  wire S9_AXIS_TVALID;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire Sleep;
  wire Trace_Data_Access;
  wire [0:31]Trace_Data_Address;
  wire [0:3]Trace_Data_Byte_Enable;
  wire Trace_Data_Read;
  wire Trace_Data_Write;
  wire [0:31]Trace_Data_Write_Value;
  wire Trace_Delay_Slot;
  wire Trace_EX_PipeRun;
  wire [0:4]Trace_Exception_Kind;
  wire Trace_Exception_Taken;
  wire [0:31]Trace_Instruction;
  wire Trace_Jump_Hit;
  wire Trace_Jump_Taken;
  wire Trace_MEM_PipeRun;
  wire [11:13]\^Trace_MSR_Reg ;
  wire [0:31]Trace_New_Reg_Value;
  wire Trace_OF_PipeRun;
  wire [0:31]Trace_PC;
  wire [0:4]Trace_Reg_Addr;
  wire Trace_Reg_Write;
  wire Trace_Valid_Instr;
  wire [0:1]Wakeup;
  wire Write_Strobe;

  assign Dbg_Intr = \<const0> ;
  assign Dbg_Trace_Data[0] = \<const0> ;
  assign Dbg_Trace_Data[1] = \<const0> ;
  assign Dbg_Trace_Data[2] = \<const0> ;
  assign Dbg_Trace_Data[3] = \<const0> ;
  assign Dbg_Trace_Data[4] = \<const0> ;
  assign Dbg_Trace_Data[5] = \<const0> ;
  assign Dbg_Trace_Data[6] = \<const0> ;
  assign Dbg_Trace_Data[7] = \<const0> ;
  assign Dbg_Trace_Data[8] = \<const0> ;
  assign Dbg_Trace_Data[9] = \<const0> ;
  assign Dbg_Trace_Data[10] = \<const0> ;
  assign Dbg_Trace_Data[11] = \<const0> ;
  assign Dbg_Trace_Data[12] = \<const0> ;
  assign Dbg_Trace_Data[13] = \<const0> ;
  assign Dbg_Trace_Data[14] = \<const0> ;
  assign Dbg_Trace_Data[15] = \<const0> ;
  assign Dbg_Trace_Data[16] = \<const0> ;
  assign Dbg_Trace_Data[17] = \<const0> ;
  assign Dbg_Trace_Data[18] = \<const0> ;
  assign Dbg_Trace_Data[19] = \<const0> ;
  assign Dbg_Trace_Data[20] = \<const0> ;
  assign Dbg_Trace_Data[21] = \<const0> ;
  assign Dbg_Trace_Data[22] = \<const0> ;
  assign Dbg_Trace_Data[23] = \<const0> ;
  assign Dbg_Trace_Data[24] = \<const0> ;
  assign Dbg_Trace_Data[25] = \<const0> ;
  assign Dbg_Trace_Data[26] = \<const0> ;
  assign Dbg_Trace_Data[27] = \<const0> ;
  assign Dbg_Trace_Data[28] = \<const0> ;
  assign Dbg_Trace_Data[29] = \<const0> ;
  assign Dbg_Trace_Data[30] = \<const0> ;
  assign Dbg_Trace_Data[31] = \<const0> ;
  assign Dbg_Trace_Data[32] = \<const0> ;
  assign Dbg_Trace_Data[33] = \<const0> ;
  assign Dbg_Trace_Data[34] = \<const0> ;
  assign Dbg_Trace_Data[35] = \<const0> ;
  assign Dbg_Trace_Valid = \<const0> ;
  assign Dbg_Trig_Ack_Out[0:1] = \^Dbg_Trig_Ack_Out [0:1];
  assign Dbg_Trig_Ack_Out[2] = \<const0> ;
  assign Dbg_Trig_Ack_Out[3] = \<const0> ;
  assign Dbg_Trig_Ack_Out[4] = \<const0> ;
  assign Dbg_Trig_Ack_Out[5] = \<const0> ;
  assign Dbg_Trig_Ack_Out[6] = \<const0> ;
  assign Dbg_Trig_Ack_Out[7] = \<const0> ;
  assign Dbg_Trig_In[0:1] = \^Dbg_Trig_In [0:1];
  assign Dbg_Trig_In[2] = \<const0> ;
  assign Dbg_Trig_In[3] = \<const0> ;
  assign Dbg_Trig_In[4] = \<const0> ;
  assign Dbg_Trig_In[5] = \<const0> ;
  assign Dbg_Trig_In[6] = \<const0> ;
  assign Dbg_Trig_In[7] = \<const0> ;
  assign Dbg_Wakeup = \^LOCKSTEP_Master_Out [11];
  assign LOCKSTEP_Master_Out[0] = \<const0> ;
  assign LOCKSTEP_Master_Out[1] = \^LOCKSTEP_Master_Out [1];
  assign LOCKSTEP_Master_Out[2] = \<const0> ;
  assign LOCKSTEP_Master_Out[3:8] = \^LOCKSTEP_Master_Out [3:8];
  assign LOCKSTEP_Master_Out[9] = \<const0> ;
  assign LOCKSTEP_Master_Out[10:45] = \^LOCKSTEP_Master_Out [10:45];
  assign LOCKSTEP_Master_Out[46] = \<const0> ;
  assign LOCKSTEP_Master_Out[47] = \<const0> ;
  assign LOCKSTEP_Master_Out[48] = \<const0> ;
  assign LOCKSTEP_Master_Out[49] = \<const0> ;
  assign LOCKSTEP_Master_Out[50] = \<const0> ;
  assign LOCKSTEP_Master_Out[51] = \<const0> ;
  assign LOCKSTEP_Master_Out[52] = \<const0> ;
  assign LOCKSTEP_Master_Out[53] = \<const0> ;
  assign LOCKSTEP_Master_Out[54] = \<const0> ;
  assign LOCKSTEP_Master_Out[55] = \<const0> ;
  assign LOCKSTEP_Master_Out[56] = \<const0> ;
  assign LOCKSTEP_Master_Out[57] = \<const0> ;
  assign LOCKSTEP_Master_Out[58] = \<const0> ;
  assign LOCKSTEP_Master_Out[59] = \<const0> ;
  assign LOCKSTEP_Master_Out[60] = \<const0> ;
  assign LOCKSTEP_Master_Out[61] = \<const0> ;
  assign LOCKSTEP_Master_Out[62] = \<const0> ;
  assign LOCKSTEP_Master_Out[63] = \<const0> ;
  assign LOCKSTEP_Master_Out[64] = \<const0> ;
  assign LOCKSTEP_Master_Out[65] = \<const0> ;
  assign LOCKSTEP_Master_Out[66] = \<const0> ;
  assign LOCKSTEP_Master_Out[67] = \<const0> ;
  assign LOCKSTEP_Master_Out[68] = \<const0> ;
  assign LOCKSTEP_Master_Out[69] = \<const0> ;
  assign LOCKSTEP_Master_Out[70] = \<const0> ;
  assign LOCKSTEP_Master_Out[71] = \<const0> ;
  assign LOCKSTEP_Master_Out[72] = \<const0> ;
  assign LOCKSTEP_Master_Out[73] = \<const0> ;
  assign LOCKSTEP_Master_Out[74] = \<const0> ;
  assign LOCKSTEP_Master_Out[75] = \<const0> ;
  assign LOCKSTEP_Master_Out[76] = \<const0> ;
  assign LOCKSTEP_Master_Out[77] = \<const0> ;
  assign LOCKSTEP_Master_Out[78] = \<const0> ;
  assign LOCKSTEP_Master_Out[79] = \<const0> ;
  assign LOCKSTEP_Master_Out[80] = \<const0> ;
  assign LOCKSTEP_Master_Out[81] = \<const0> ;
  assign LOCKSTEP_Master_Out[82] = \<const0> ;
  assign LOCKSTEP_Master_Out[83] = \<const0> ;
  assign LOCKSTEP_Master_Out[84] = \<const0> ;
  assign LOCKSTEP_Master_Out[85] = \<const0> ;
  assign LOCKSTEP_Master_Out[86] = \<const0> ;
  assign LOCKSTEP_Master_Out[87] = \<const0> ;
  assign LOCKSTEP_Master_Out[88] = \<const0> ;
  assign LOCKSTEP_Master_Out[89] = \<const0> ;
  assign LOCKSTEP_Master_Out[90] = \<const0> ;
  assign LOCKSTEP_Master_Out[91] = \<const0> ;
  assign LOCKSTEP_Master_Out[92] = \<const0> ;
  assign LOCKSTEP_Master_Out[93] = \<const0> ;
  assign LOCKSTEP_Master_Out[94] = \<const0> ;
  assign LOCKSTEP_Master_Out[95] = \<const0> ;
  assign LOCKSTEP_Master_Out[96] = \<const0> ;
  assign LOCKSTEP_Master_Out[97] = \<const0> ;
  assign LOCKSTEP_Master_Out[98] = \<const0> ;
  assign LOCKSTEP_Master_Out[99] = \<const0> ;
  assign LOCKSTEP_Master_Out[100] = \<const0> ;
  assign LOCKSTEP_Master_Out[101] = \<const0> ;
  assign LOCKSTEP_Master_Out[102] = \<const0> ;
  assign LOCKSTEP_Master_Out[103] = \<const0> ;
  assign LOCKSTEP_Master_Out[104] = \<const0> ;
  assign LOCKSTEP_Master_Out[105] = \<const0> ;
  assign LOCKSTEP_Master_Out[106] = \<const0> ;
  assign LOCKSTEP_Master_Out[107] = \<const0> ;
  assign LOCKSTEP_Master_Out[108] = \<const0> ;
  assign LOCKSTEP_Master_Out[109] = \<const0> ;
  assign LOCKSTEP_Master_Out[110] = \<const0> ;
  assign LOCKSTEP_Master_Out[111] = \<const0> ;
  assign LOCKSTEP_Master_Out[112] = \<const0> ;
  assign LOCKSTEP_Master_Out[113] = \<const0> ;
  assign LOCKSTEP_Master_Out[114] = \<const0> ;
  assign LOCKSTEP_Master_Out[115] = \<const0> ;
  assign LOCKSTEP_Master_Out[116] = \<const0> ;
  assign LOCKSTEP_Master_Out[117] = \<const0> ;
  assign LOCKSTEP_Master_Out[118] = \<const0> ;
  assign LOCKSTEP_Master_Out[119] = \<const0> ;
  assign LOCKSTEP_Master_Out[120] = \<const0> ;
  assign LOCKSTEP_Master_Out[121] = \<const0> ;
  assign LOCKSTEP_Master_Out[122] = \<const0> ;
  assign LOCKSTEP_Master_Out[123] = \<const0> ;
  assign LOCKSTEP_Master_Out[124] = \<const0> ;
  assign LOCKSTEP_Master_Out[125] = \<const0> ;
  assign LOCKSTEP_Master_Out[126] = \<const0> ;
  assign LOCKSTEP_Master_Out[127] = \<const0> ;
  assign LOCKSTEP_Master_Out[128] = \<const0> ;
  assign LOCKSTEP_Master_Out[129] = \<const0> ;
  assign LOCKSTEP_Master_Out[130] = \<const0> ;
  assign LOCKSTEP_Master_Out[131] = \<const0> ;
  assign LOCKSTEP_Master_Out[132] = \<const0> ;
  assign LOCKSTEP_Master_Out[133] = \<const0> ;
  assign LOCKSTEP_Master_Out[134] = \<const0> ;
  assign LOCKSTEP_Master_Out[135] = \<const0> ;
  assign LOCKSTEP_Master_Out[136] = \<const0> ;
  assign LOCKSTEP_Master_Out[137] = \<const0> ;
  assign LOCKSTEP_Master_Out[138] = \<const0> ;
  assign LOCKSTEP_Master_Out[139] = \<const0> ;
  assign LOCKSTEP_Master_Out[140] = \<const0> ;
  assign LOCKSTEP_Master_Out[141] = \<const0> ;
  assign LOCKSTEP_Master_Out[142] = \<const0> ;
  assign LOCKSTEP_Master_Out[143] = \<const0> ;
  assign LOCKSTEP_Master_Out[144] = \<const0> ;
  assign LOCKSTEP_Master_Out[145] = \<const0> ;
  assign LOCKSTEP_Master_Out[146] = \<const0> ;
  assign LOCKSTEP_Master_Out[147] = \<const0> ;
  assign LOCKSTEP_Master_Out[148] = \<const0> ;
  assign LOCKSTEP_Master_Out[149] = \<const0> ;
  assign LOCKSTEP_Master_Out[150] = \<const0> ;
  assign LOCKSTEP_Master_Out[151] = \<const0> ;
  assign LOCKSTEP_Master_Out[152] = \<const0> ;
  assign LOCKSTEP_Master_Out[153] = \<const0> ;
  assign LOCKSTEP_Master_Out[154] = \<const0> ;
  assign LOCKSTEP_Master_Out[155] = \<const0> ;
  assign LOCKSTEP_Master_Out[156] = \<const0> ;
  assign LOCKSTEP_Master_Out[157] = \<const0> ;
  assign LOCKSTEP_Master_Out[158] = \<const0> ;
  assign LOCKSTEP_Master_Out[159] = \<const0> ;
  assign LOCKSTEP_Master_Out[160] = \<const0> ;
  assign LOCKSTEP_Master_Out[161] = \<const0> ;
  assign LOCKSTEP_Master_Out[162] = \<const0> ;
  assign LOCKSTEP_Master_Out[163] = \<const0> ;
  assign LOCKSTEP_Master_Out[164] = \<const0> ;
  assign LOCKSTEP_Master_Out[165] = \<const0> ;
  assign LOCKSTEP_Master_Out[166] = \<const0> ;
  assign LOCKSTEP_Master_Out[167] = \<const0> ;
  assign LOCKSTEP_Master_Out[168] = \<const0> ;
  assign LOCKSTEP_Master_Out[169] = \<const0> ;
  assign LOCKSTEP_Master_Out[170] = \<const0> ;
  assign LOCKSTEP_Master_Out[171] = \<const0> ;
  assign LOCKSTEP_Master_Out[172] = \<const0> ;
  assign LOCKSTEP_Master_Out[173] = \<const0> ;
  assign LOCKSTEP_Master_Out[174] = \<const0> ;
  assign LOCKSTEP_Master_Out[175] = \<const0> ;
  assign LOCKSTEP_Master_Out[176] = \<const0> ;
  assign LOCKSTEP_Master_Out[177] = \<const0> ;
  assign LOCKSTEP_Master_Out[178] = \<const0> ;
  assign LOCKSTEP_Master_Out[179] = \<const0> ;
  assign LOCKSTEP_Master_Out[180] = \<const0> ;
  assign LOCKSTEP_Master_Out[181] = \<const0> ;
  assign LOCKSTEP_Master_Out[182] = \<const0> ;
  assign LOCKSTEP_Master_Out[183] = \<const0> ;
  assign LOCKSTEP_Master_Out[184] = \<const0> ;
  assign LOCKSTEP_Master_Out[185] = \<const0> ;
  assign LOCKSTEP_Master_Out[186] = \<const0> ;
  assign LOCKSTEP_Master_Out[187] = \<const0> ;
  assign LOCKSTEP_Master_Out[188] = \<const0> ;
  assign LOCKSTEP_Master_Out[189] = \<const0> ;
  assign LOCKSTEP_Master_Out[190] = \<const0> ;
  assign LOCKSTEP_Master_Out[191] = \<const0> ;
  assign LOCKSTEP_Master_Out[192] = \<const0> ;
  assign LOCKSTEP_Master_Out[193] = \<const0> ;
  assign LOCKSTEP_Master_Out[194] = \<const0> ;
  assign LOCKSTEP_Master_Out[195] = \<const0> ;
  assign LOCKSTEP_Master_Out[196] = \<const0> ;
  assign LOCKSTEP_Master_Out[197] = \<const0> ;
  assign LOCKSTEP_Master_Out[198] = \<const0> ;
  assign LOCKSTEP_Master_Out[199] = \<const0> ;
  assign LOCKSTEP_Master_Out[200] = \<const0> ;
  assign LOCKSTEP_Master_Out[201] = \<const0> ;
  assign LOCKSTEP_Master_Out[202] = \<const0> ;
  assign LOCKSTEP_Master_Out[203] = \<const0> ;
  assign LOCKSTEP_Master_Out[204] = \<const0> ;
  assign LOCKSTEP_Master_Out[205] = \<const0> ;
  assign LOCKSTEP_Master_Out[206] = \<const0> ;
  assign LOCKSTEP_Master_Out[207] = \<const0> ;
  assign LOCKSTEP_Master_Out[208] = \<const0> ;
  assign LOCKSTEP_Master_Out[209] = \<const0> ;
  assign LOCKSTEP_Master_Out[210] = \<const0> ;
  assign LOCKSTEP_Master_Out[211] = \<const0> ;
  assign LOCKSTEP_Master_Out[212] = \<const0> ;
  assign LOCKSTEP_Master_Out[213] = \<const0> ;
  assign LOCKSTEP_Master_Out[214] = \<const0> ;
  assign LOCKSTEP_Master_Out[215] = \<const0> ;
  assign LOCKSTEP_Master_Out[216] = \<const0> ;
  assign LOCKSTEP_Master_Out[217] = \<const0> ;
  assign LOCKSTEP_Master_Out[218] = \<const0> ;
  assign LOCKSTEP_Master_Out[219] = \<const0> ;
  assign LOCKSTEP_Master_Out[220] = \<const0> ;
  assign LOCKSTEP_Master_Out[221] = \<const0> ;
  assign LOCKSTEP_Master_Out[222] = \<const0> ;
  assign LOCKSTEP_Master_Out[223] = \<const0> ;
  assign LOCKSTEP_Master_Out[224] = \<const0> ;
  assign LOCKSTEP_Master_Out[225] = \<const0> ;
  assign LOCKSTEP_Master_Out[226] = \<const0> ;
  assign LOCKSTEP_Master_Out[227] = \<const0> ;
  assign LOCKSTEP_Master_Out[228] = \<const0> ;
  assign LOCKSTEP_Master_Out[229] = \<const0> ;
  assign LOCKSTEP_Master_Out[230] = \<const0> ;
  assign LOCKSTEP_Master_Out[231] = \<const0> ;
  assign LOCKSTEP_Master_Out[232] = \<const0> ;
  assign LOCKSTEP_Master_Out[233] = \<const0> ;
  assign LOCKSTEP_Master_Out[234] = \<const0> ;
  assign LOCKSTEP_Master_Out[235] = \<const0> ;
  assign LOCKSTEP_Master_Out[236] = \<const0> ;
  assign LOCKSTEP_Master_Out[237] = \<const0> ;
  assign LOCKSTEP_Master_Out[238] = \<const0> ;
  assign LOCKSTEP_Master_Out[239] = \<const0> ;
  assign LOCKSTEP_Master_Out[240] = \<const0> ;
  assign LOCKSTEP_Master_Out[241] = \<const0> ;
  assign LOCKSTEP_Master_Out[242] = \<const0> ;
  assign LOCKSTEP_Master_Out[243] = \<const0> ;
  assign LOCKSTEP_Master_Out[244] = \<const0> ;
  assign LOCKSTEP_Master_Out[245] = \<const0> ;
  assign LOCKSTEP_Master_Out[246] = \<const0> ;
  assign LOCKSTEP_Master_Out[247] = \<const0> ;
  assign LOCKSTEP_Master_Out[248] = \<const0> ;
  assign LOCKSTEP_Master_Out[249] = \<const0> ;
  assign LOCKSTEP_Master_Out[250] = \<const0> ;
  assign LOCKSTEP_Master_Out[251] = \<const0> ;
  assign LOCKSTEP_Master_Out[252] = \<const0> ;
  assign LOCKSTEP_Master_Out[253] = \<const0> ;
  assign LOCKSTEP_Master_Out[254] = \<const0> ;
  assign LOCKSTEP_Master_Out[255] = \<const0> ;
  assign LOCKSTEP_Master_Out[256] = \<const0> ;
  assign LOCKSTEP_Master_Out[257] = \<const0> ;
  assign LOCKSTEP_Master_Out[258] = \<const0> ;
  assign LOCKSTEP_Master_Out[259] = \<const0> ;
  assign LOCKSTEP_Master_Out[260] = \<const0> ;
  assign LOCKSTEP_Master_Out[261] = \<const0> ;
  assign LOCKSTEP_Master_Out[262] = \<const0> ;
  assign LOCKSTEP_Master_Out[263] = \<const0> ;
  assign LOCKSTEP_Master_Out[264] = \<const0> ;
  assign LOCKSTEP_Master_Out[265] = \<const0> ;
  assign LOCKSTEP_Master_Out[266] = \<const0> ;
  assign LOCKSTEP_Master_Out[267] = \<const0> ;
  assign LOCKSTEP_Master_Out[268] = \<const0> ;
  assign LOCKSTEP_Master_Out[269] = \<const0> ;
  assign LOCKSTEP_Master_Out[270] = \<const0> ;
  assign LOCKSTEP_Master_Out[271] = \<const0> ;
  assign LOCKSTEP_Master_Out[272] = \<const0> ;
  assign LOCKSTEP_Master_Out[273] = \<const0> ;
  assign LOCKSTEP_Master_Out[274] = \<const0> ;
  assign LOCKSTEP_Master_Out[275] = \<const0> ;
  assign LOCKSTEP_Master_Out[276] = \<const0> ;
  assign LOCKSTEP_Master_Out[277] = \<const0> ;
  assign LOCKSTEP_Master_Out[278] = \<const0> ;
  assign LOCKSTEP_Master_Out[279] = \<const0> ;
  assign LOCKSTEP_Master_Out[280] = \<const0> ;
  assign LOCKSTEP_Master_Out[281] = \<const0> ;
  assign LOCKSTEP_Master_Out[282] = \<const0> ;
  assign LOCKSTEP_Master_Out[283] = \<const0> ;
  assign LOCKSTEP_Master_Out[284] = \<const0> ;
  assign LOCKSTEP_Master_Out[285] = \<const0> ;
  assign LOCKSTEP_Master_Out[286] = \<const0> ;
  assign LOCKSTEP_Master_Out[287] = \<const0> ;
  assign LOCKSTEP_Master_Out[288] = \<const0> ;
  assign LOCKSTEP_Master_Out[289] = \<const0> ;
  assign LOCKSTEP_Master_Out[290] = \<const0> ;
  assign LOCKSTEP_Master_Out[291] = \<const0> ;
  assign LOCKSTEP_Master_Out[292] = \<const0> ;
  assign LOCKSTEP_Master_Out[293] = \<const0> ;
  assign LOCKSTEP_Master_Out[294] = \<const0> ;
  assign LOCKSTEP_Master_Out[295] = \<const0> ;
  assign LOCKSTEP_Master_Out[296] = \<const0> ;
  assign LOCKSTEP_Master_Out[297] = \<const0> ;
  assign LOCKSTEP_Master_Out[298] = \<const0> ;
  assign LOCKSTEP_Master_Out[299] = \<const0> ;
  assign LOCKSTEP_Master_Out[300] = \<const0> ;
  assign LOCKSTEP_Master_Out[301] = \<const0> ;
  assign LOCKSTEP_Master_Out[302] = \<const0> ;
  assign LOCKSTEP_Master_Out[303] = \<const0> ;
  assign LOCKSTEP_Master_Out[304] = \<const0> ;
  assign LOCKSTEP_Master_Out[305] = \<const0> ;
  assign LOCKSTEP_Master_Out[306] = \<const0> ;
  assign LOCKSTEP_Master_Out[307] = \<const0> ;
  assign LOCKSTEP_Master_Out[308] = \<const0> ;
  assign LOCKSTEP_Master_Out[309] = \<const0> ;
  assign LOCKSTEP_Master_Out[310] = \<const0> ;
  assign LOCKSTEP_Master_Out[311] = \<const0> ;
  assign LOCKSTEP_Master_Out[312] = \<const0> ;
  assign LOCKSTEP_Master_Out[313] = \<const0> ;
  assign LOCKSTEP_Master_Out[314] = \<const0> ;
  assign LOCKSTEP_Master_Out[315] = \<const0> ;
  assign LOCKSTEP_Master_Out[316] = \<const0> ;
  assign LOCKSTEP_Master_Out[317] = \<const0> ;
  assign LOCKSTEP_Master_Out[318] = \<const0> ;
  assign LOCKSTEP_Master_Out[319] = \<const0> ;
  assign LOCKSTEP_Master_Out[320] = \<const0> ;
  assign LOCKSTEP_Master_Out[321] = \<const0> ;
  assign LOCKSTEP_Master_Out[322] = \<const0> ;
  assign LOCKSTEP_Master_Out[323] = \<const0> ;
  assign LOCKSTEP_Master_Out[324] = \<const0> ;
  assign LOCKSTEP_Master_Out[325] = \<const0> ;
  assign LOCKSTEP_Master_Out[326] = \<const0> ;
  assign LOCKSTEP_Master_Out[327] = \<const0> ;
  assign LOCKSTEP_Master_Out[328] = \<const0> ;
  assign LOCKSTEP_Master_Out[329] = \<const0> ;
  assign LOCKSTEP_Master_Out[330] = \<const0> ;
  assign LOCKSTEP_Master_Out[331] = \<const0> ;
  assign LOCKSTEP_Master_Out[332] = \<const0> ;
  assign LOCKSTEP_Master_Out[333] = \<const0> ;
  assign LOCKSTEP_Master_Out[334] = \<const0> ;
  assign LOCKSTEP_Master_Out[335] = \<const0> ;
  assign LOCKSTEP_Master_Out[336] = \<const0> ;
  assign LOCKSTEP_Master_Out[337] = \<const0> ;
  assign LOCKSTEP_Master_Out[338] = \<const0> ;
  assign LOCKSTEP_Master_Out[339] = \<const0> ;
  assign LOCKSTEP_Master_Out[340] = \<const0> ;
  assign LOCKSTEP_Master_Out[341] = \<const0> ;
  assign LOCKSTEP_Master_Out[342] = \<const0> ;
  assign LOCKSTEP_Master_Out[343] = \<const0> ;
  assign LOCKSTEP_Master_Out[344] = \<const0> ;
  assign LOCKSTEP_Master_Out[345] = \<const0> ;
  assign LOCKSTEP_Master_Out[346] = \<const0> ;
  assign LOCKSTEP_Master_Out[347] = \<const0> ;
  assign LOCKSTEP_Master_Out[348] = \<const0> ;
  assign LOCKSTEP_Master_Out[349] = \<const0> ;
  assign LOCKSTEP_Master_Out[350] = \<const0> ;
  assign LOCKSTEP_Master_Out[351] = \<const0> ;
  assign LOCKSTEP_Master_Out[352] = \<const0> ;
  assign LOCKSTEP_Master_Out[353] = \<const0> ;
  assign LOCKSTEP_Master_Out[354] = \<const0> ;
  assign LOCKSTEP_Master_Out[355] = \<const0> ;
  assign LOCKSTEP_Master_Out[356] = \<const0> ;
  assign LOCKSTEP_Master_Out[357] = \<const0> ;
  assign LOCKSTEP_Master_Out[358] = \<const0> ;
  assign LOCKSTEP_Master_Out[359] = \<const0> ;
  assign LOCKSTEP_Master_Out[360] = \<const0> ;
  assign LOCKSTEP_Master_Out[361] = \<const0> ;
  assign LOCKSTEP_Master_Out[362] = \<const0> ;
  assign LOCKSTEP_Master_Out[363] = \<const0> ;
  assign LOCKSTEP_Master_Out[364] = \<const0> ;
  assign LOCKSTEP_Master_Out[365] = \<const0> ;
  assign LOCKSTEP_Master_Out[366] = \<const0> ;
  assign LOCKSTEP_Master_Out[367] = \<const0> ;
  assign LOCKSTEP_Master_Out[368] = \<const0> ;
  assign LOCKSTEP_Master_Out[369] = \<const0> ;
  assign LOCKSTEP_Master_Out[370] = \<const0> ;
  assign LOCKSTEP_Master_Out[371] = \<const0> ;
  assign LOCKSTEP_Master_Out[372] = \<const0> ;
  assign LOCKSTEP_Master_Out[373] = \<const0> ;
  assign LOCKSTEP_Master_Out[374] = \<const0> ;
  assign LOCKSTEP_Master_Out[375] = \<const0> ;
  assign LOCKSTEP_Master_Out[376] = \<const0> ;
  assign LOCKSTEP_Master_Out[377] = \<const0> ;
  assign LOCKSTEP_Master_Out[378] = \<const0> ;
  assign LOCKSTEP_Master_Out[379] = \<const0> ;
  assign LOCKSTEP_Master_Out[380] = \<const0> ;
  assign LOCKSTEP_Master_Out[381] = \<const0> ;
  assign LOCKSTEP_Master_Out[382] = \<const0> ;
  assign LOCKSTEP_Master_Out[383] = \<const0> ;
  assign LOCKSTEP_Master_Out[384] = \<const0> ;
  assign LOCKSTEP_Master_Out[385] = \<const0> ;
  assign LOCKSTEP_Master_Out[386] = \<const0> ;
  assign LOCKSTEP_Master_Out[387] = \<const0> ;
  assign LOCKSTEP_Master_Out[388] = \<const0> ;
  assign LOCKSTEP_Master_Out[389] = \<const0> ;
  assign LOCKSTEP_Master_Out[390] = \<const0> ;
  assign LOCKSTEP_Master_Out[391] = \<const0> ;
  assign LOCKSTEP_Master_Out[392] = \<const0> ;
  assign LOCKSTEP_Master_Out[393] = \<const0> ;
  assign LOCKSTEP_Master_Out[394] = \<const0> ;
  assign LOCKSTEP_Master_Out[395] = \<const0> ;
  assign LOCKSTEP_Master_Out[396] = \<const0> ;
  assign LOCKSTEP_Master_Out[397] = \<const0> ;
  assign LOCKSTEP_Master_Out[398] = \<const0> ;
  assign LOCKSTEP_Master_Out[399] = \<const0> ;
  assign LOCKSTEP_Master_Out[400] = \<const0> ;
  assign LOCKSTEP_Master_Out[401] = \<const0> ;
  assign LOCKSTEP_Master_Out[402] = \<const0> ;
  assign LOCKSTEP_Master_Out[403] = \<const0> ;
  assign LOCKSTEP_Master_Out[404] = \<const0> ;
  assign LOCKSTEP_Master_Out[405] = \<const0> ;
  assign LOCKSTEP_Master_Out[406] = \<const0> ;
  assign LOCKSTEP_Master_Out[407] = \<const0> ;
  assign LOCKSTEP_Master_Out[408] = \<const0> ;
  assign LOCKSTEP_Master_Out[409] = \<const0> ;
  assign LOCKSTEP_Master_Out[410] = \<const0> ;
  assign LOCKSTEP_Master_Out[411] = \<const0> ;
  assign LOCKSTEP_Master_Out[412] = \<const0> ;
  assign LOCKSTEP_Master_Out[413] = \<const0> ;
  assign LOCKSTEP_Master_Out[414] = \<const0> ;
  assign LOCKSTEP_Master_Out[415] = \<const0> ;
  assign LOCKSTEP_Master_Out[416] = \<const0> ;
  assign LOCKSTEP_Master_Out[417] = \<const0> ;
  assign LOCKSTEP_Master_Out[418] = \<const0> ;
  assign LOCKSTEP_Master_Out[419] = \<const0> ;
  assign LOCKSTEP_Master_Out[420] = \<const0> ;
  assign LOCKSTEP_Master_Out[421] = \<const0> ;
  assign LOCKSTEP_Master_Out[422] = \<const0> ;
  assign LOCKSTEP_Master_Out[423] = \<const0> ;
  assign LOCKSTEP_Master_Out[424] = \<const0> ;
  assign LOCKSTEP_Master_Out[425] = \<const0> ;
  assign LOCKSTEP_Master_Out[426] = \<const0> ;
  assign LOCKSTEP_Master_Out[427] = \<const0> ;
  assign LOCKSTEP_Master_Out[428] = \<const0> ;
  assign LOCKSTEP_Master_Out[429] = \<const0> ;
  assign LOCKSTEP_Master_Out[430] = \<const0> ;
  assign LOCKSTEP_Master_Out[431] = \<const0> ;
  assign LOCKSTEP_Master_Out[432] = \<const0> ;
  assign LOCKSTEP_Master_Out[433] = \<const0> ;
  assign LOCKSTEP_Master_Out[434] = \<const0> ;
  assign LOCKSTEP_Master_Out[435] = \<const0> ;
  assign LOCKSTEP_Master_Out[436] = \<const0> ;
  assign LOCKSTEP_Master_Out[437] = \<const0> ;
  assign LOCKSTEP_Master_Out[438] = \<const0> ;
  assign LOCKSTEP_Master_Out[439] = \<const0> ;
  assign LOCKSTEP_Master_Out[440] = \<const0> ;
  assign LOCKSTEP_Master_Out[441] = \<const0> ;
  assign LOCKSTEP_Master_Out[442] = \<const0> ;
  assign LOCKSTEP_Master_Out[443] = \<const0> ;
  assign LOCKSTEP_Master_Out[444] = \<const0> ;
  assign LOCKSTEP_Master_Out[445] = \<const0> ;
  assign LOCKSTEP_Master_Out[446] = \<const0> ;
  assign LOCKSTEP_Master_Out[447] = \<const0> ;
  assign LOCKSTEP_Master_Out[448] = \<const0> ;
  assign LOCKSTEP_Master_Out[449] = \<const0> ;
  assign LOCKSTEP_Master_Out[450] = \<const0> ;
  assign LOCKSTEP_Master_Out[451] = \<const0> ;
  assign LOCKSTEP_Master_Out[452] = \<const0> ;
  assign LOCKSTEP_Master_Out[453] = \<const0> ;
  assign LOCKSTEP_Master_Out[454] = \<const0> ;
  assign LOCKSTEP_Master_Out[455] = \<const0> ;
  assign LOCKSTEP_Master_Out[456] = \<const0> ;
  assign LOCKSTEP_Master_Out[457] = \<const0> ;
  assign LOCKSTEP_Master_Out[458] = \<const0> ;
  assign LOCKSTEP_Master_Out[459] = \<const0> ;
  assign LOCKSTEP_Master_Out[460] = \<const0> ;
  assign LOCKSTEP_Master_Out[461] = \<const0> ;
  assign LOCKSTEP_Master_Out[462] = \<const0> ;
  assign LOCKSTEP_Master_Out[463] = \<const0> ;
  assign LOCKSTEP_Master_Out[464] = \<const0> ;
  assign LOCKSTEP_Master_Out[465] = \<const0> ;
  assign LOCKSTEP_Master_Out[466] = \<const0> ;
  assign LOCKSTEP_Master_Out[467] = \<const0> ;
  assign LOCKSTEP_Master_Out[468] = \<const0> ;
  assign LOCKSTEP_Master_Out[469] = \<const0> ;
  assign LOCKSTEP_Master_Out[470] = \<const0> ;
  assign LOCKSTEP_Master_Out[471] = \<const0> ;
  assign LOCKSTEP_Master_Out[472] = \<const0> ;
  assign LOCKSTEP_Master_Out[473] = \<const0> ;
  assign LOCKSTEP_Master_Out[474] = \<const0> ;
  assign LOCKSTEP_Master_Out[475] = \<const0> ;
  assign LOCKSTEP_Master_Out[476] = \<const0> ;
  assign LOCKSTEP_Master_Out[477] = \<const0> ;
  assign LOCKSTEP_Master_Out[478] = \<const0> ;
  assign LOCKSTEP_Master_Out[479] = \<const0> ;
  assign LOCKSTEP_Master_Out[480] = \<const0> ;
  assign LOCKSTEP_Master_Out[481] = \<const0> ;
  assign LOCKSTEP_Master_Out[482] = \<const0> ;
  assign LOCKSTEP_Master_Out[483] = \<const0> ;
  assign LOCKSTEP_Master_Out[484] = \<const0> ;
  assign LOCKSTEP_Master_Out[485] = \<const0> ;
  assign LOCKSTEP_Master_Out[486] = \<const0> ;
  assign LOCKSTEP_Master_Out[487] = \<const0> ;
  assign LOCKSTEP_Master_Out[488] = \<const0> ;
  assign LOCKSTEP_Master_Out[489] = \<const0> ;
  assign LOCKSTEP_Master_Out[490] = \<const0> ;
  assign LOCKSTEP_Master_Out[491] = \<const0> ;
  assign LOCKSTEP_Master_Out[492] = \<const0> ;
  assign LOCKSTEP_Master_Out[493] = \<const0> ;
  assign LOCKSTEP_Master_Out[494] = \<const0> ;
  assign LOCKSTEP_Master_Out[495] = \<const0> ;
  assign LOCKSTEP_Master_Out[496] = \<const0> ;
  assign LOCKSTEP_Master_Out[497] = \<const0> ;
  assign LOCKSTEP_Master_Out[498] = \<const0> ;
  assign LOCKSTEP_Master_Out[499] = \<const0> ;
  assign LOCKSTEP_Master_Out[500] = \<const0> ;
  assign LOCKSTEP_Master_Out[501] = \<const0> ;
  assign LOCKSTEP_Master_Out[502] = \<const0> ;
  assign LOCKSTEP_Master_Out[503] = \<const0> ;
  assign LOCKSTEP_Master_Out[504] = \<const0> ;
  assign LOCKSTEP_Master_Out[505] = \<const0> ;
  assign LOCKSTEP_Master_Out[506] = \<const0> ;
  assign LOCKSTEP_Master_Out[507] = \<const0> ;
  assign LOCKSTEP_Master_Out[508] = \<const0> ;
  assign LOCKSTEP_Master_Out[509] = \<const0> ;
  assign LOCKSTEP_Master_Out[510] = \<const0> ;
  assign LOCKSTEP_Master_Out[511] = \<const0> ;
  assign LOCKSTEP_Master_Out[512] = \<const0> ;
  assign LOCKSTEP_Master_Out[513] = \<const0> ;
  assign LOCKSTEP_Master_Out[514] = \<const0> ;
  assign LOCKSTEP_Master_Out[515] = \<const0> ;
  assign LOCKSTEP_Master_Out[516] = \<const0> ;
  assign LOCKSTEP_Master_Out[517] = \<const0> ;
  assign LOCKSTEP_Master_Out[518] = \<const0> ;
  assign LOCKSTEP_Master_Out[519] = \<const0> ;
  assign LOCKSTEP_Master_Out[520] = \<const0> ;
  assign LOCKSTEP_Master_Out[521] = \<const0> ;
  assign LOCKSTEP_Master_Out[522] = \<const0> ;
  assign LOCKSTEP_Master_Out[523] = \<const0> ;
  assign LOCKSTEP_Master_Out[524] = \<const0> ;
  assign LOCKSTEP_Master_Out[525] = \<const0> ;
  assign LOCKSTEP_Master_Out[526] = \<const0> ;
  assign LOCKSTEP_Master_Out[527] = \<const0> ;
  assign LOCKSTEP_Master_Out[528] = \<const0> ;
  assign LOCKSTEP_Master_Out[529] = \<const0> ;
  assign LOCKSTEP_Master_Out[530] = \<const0> ;
  assign LOCKSTEP_Master_Out[531] = \<const0> ;
  assign LOCKSTEP_Master_Out[532] = \<const0> ;
  assign LOCKSTEP_Master_Out[533] = \<const0> ;
  assign LOCKSTEP_Master_Out[534] = \<const0> ;
  assign LOCKSTEP_Master_Out[535] = \<const0> ;
  assign LOCKSTEP_Master_Out[536] = \<const0> ;
  assign LOCKSTEP_Master_Out[537] = \<const0> ;
  assign LOCKSTEP_Master_Out[538] = \<const0> ;
  assign LOCKSTEP_Master_Out[539] = \<const0> ;
  assign LOCKSTEP_Master_Out[540] = \<const0> ;
  assign LOCKSTEP_Master_Out[541] = \<const0> ;
  assign LOCKSTEP_Master_Out[542] = \<const0> ;
  assign LOCKSTEP_Master_Out[543] = \<const0> ;
  assign LOCKSTEP_Master_Out[544] = \<const0> ;
  assign LOCKSTEP_Master_Out[545] = \<const0> ;
  assign LOCKSTEP_Master_Out[546] = \<const0> ;
  assign LOCKSTEP_Master_Out[547] = \<const0> ;
  assign LOCKSTEP_Master_Out[548] = \<const0> ;
  assign LOCKSTEP_Master_Out[549] = \<const0> ;
  assign LOCKSTEP_Master_Out[550] = \<const0> ;
  assign LOCKSTEP_Master_Out[551] = \<const0> ;
  assign LOCKSTEP_Master_Out[552] = \<const0> ;
  assign LOCKSTEP_Master_Out[553] = \<const0> ;
  assign LOCKSTEP_Master_Out[554] = \<const0> ;
  assign LOCKSTEP_Master_Out[555] = \<const0> ;
  assign LOCKSTEP_Master_Out[556] = \<const0> ;
  assign LOCKSTEP_Master_Out[557] = \<const0> ;
  assign LOCKSTEP_Master_Out[558] = \<const0> ;
  assign LOCKSTEP_Master_Out[559] = \<const0> ;
  assign LOCKSTEP_Master_Out[560] = \<const0> ;
  assign LOCKSTEP_Master_Out[561] = \<const0> ;
  assign LOCKSTEP_Master_Out[562] = \<const0> ;
  assign LOCKSTEP_Master_Out[563] = \<const0> ;
  assign LOCKSTEP_Master_Out[564] = \<const0> ;
  assign LOCKSTEP_Master_Out[565] = \<const0> ;
  assign LOCKSTEP_Master_Out[566] = \<const0> ;
  assign LOCKSTEP_Master_Out[567] = \<const0> ;
  assign LOCKSTEP_Master_Out[568] = \<const0> ;
  assign LOCKSTEP_Master_Out[569] = \<const0> ;
  assign LOCKSTEP_Master_Out[570] = \<const0> ;
  assign LOCKSTEP_Master_Out[571] = \<const0> ;
  assign LOCKSTEP_Master_Out[572] = \<const0> ;
  assign LOCKSTEP_Master_Out[573] = \<const0> ;
  assign LOCKSTEP_Master_Out[574] = \<const0> ;
  assign LOCKSTEP_Master_Out[575] = \<const0> ;
  assign LOCKSTEP_Master_Out[576] = \<const0> ;
  assign LOCKSTEP_Master_Out[577] = \<const0> ;
  assign LOCKSTEP_Master_Out[578] = \<const0> ;
  assign LOCKSTEP_Master_Out[579] = \<const0> ;
  assign LOCKSTEP_Master_Out[580] = \<const0> ;
  assign LOCKSTEP_Master_Out[581] = \<const0> ;
  assign LOCKSTEP_Master_Out[582] = \<const0> ;
  assign LOCKSTEP_Master_Out[583] = \<const0> ;
  assign LOCKSTEP_Master_Out[584] = \<const0> ;
  assign LOCKSTEP_Master_Out[585] = \<const0> ;
  assign LOCKSTEP_Master_Out[586] = \<const0> ;
  assign LOCKSTEP_Master_Out[587] = \<const0> ;
  assign LOCKSTEP_Master_Out[588] = \<const0> ;
  assign LOCKSTEP_Master_Out[589] = \<const0> ;
  assign LOCKSTEP_Master_Out[590] = \<const0> ;
  assign LOCKSTEP_Master_Out[591] = \<const0> ;
  assign LOCKSTEP_Master_Out[592] = \<const0> ;
  assign LOCKSTEP_Master_Out[593] = \<const0> ;
  assign LOCKSTEP_Master_Out[594] = \<const0> ;
  assign LOCKSTEP_Master_Out[595] = \<const0> ;
  assign LOCKSTEP_Master_Out[596] = \<const0> ;
  assign LOCKSTEP_Master_Out[597] = \<const0> ;
  assign LOCKSTEP_Master_Out[598] = \<const0> ;
  assign LOCKSTEP_Master_Out[599] = \<const0> ;
  assign LOCKSTEP_Master_Out[600] = \<const0> ;
  assign LOCKSTEP_Master_Out[601] = \<const0> ;
  assign LOCKSTEP_Master_Out[602] = \<const0> ;
  assign LOCKSTEP_Master_Out[603] = \<const0> ;
  assign LOCKSTEP_Master_Out[604] = \<const0> ;
  assign LOCKSTEP_Master_Out[605] = \<const0> ;
  assign LOCKSTEP_Master_Out[606] = \<const0> ;
  assign LOCKSTEP_Master_Out[607] = \<const0> ;
  assign LOCKSTEP_Master_Out[608] = \<const0> ;
  assign LOCKSTEP_Master_Out[609] = \<const0> ;
  assign LOCKSTEP_Master_Out[610] = \<const0> ;
  assign LOCKSTEP_Master_Out[611] = \<const0> ;
  assign LOCKSTEP_Master_Out[612] = \<const0> ;
  assign LOCKSTEP_Master_Out[613] = \<const0> ;
  assign LOCKSTEP_Master_Out[614] = \<const0> ;
  assign LOCKSTEP_Master_Out[615] = \<const0> ;
  assign LOCKSTEP_Master_Out[616] = \<const0> ;
  assign LOCKSTEP_Master_Out[617] = \<const0> ;
  assign LOCKSTEP_Master_Out[618] = \<const0> ;
  assign LOCKSTEP_Master_Out[619] = \<const0> ;
  assign LOCKSTEP_Master_Out[620] = \<const0> ;
  assign LOCKSTEP_Master_Out[621] = \<const0> ;
  assign LOCKSTEP_Master_Out[622] = \<const0> ;
  assign LOCKSTEP_Master_Out[623] = \<const0> ;
  assign LOCKSTEP_Master_Out[624] = \<const0> ;
  assign LOCKSTEP_Master_Out[625] = \<const0> ;
  assign LOCKSTEP_Master_Out[626] = \<const0> ;
  assign LOCKSTEP_Master_Out[627] = \<const0> ;
  assign LOCKSTEP_Master_Out[628] = \<const0> ;
  assign LOCKSTEP_Master_Out[629] = \<const0> ;
  assign LOCKSTEP_Master_Out[630] = \<const0> ;
  assign LOCKSTEP_Master_Out[631] = \<const0> ;
  assign LOCKSTEP_Master_Out[632] = \<const0> ;
  assign LOCKSTEP_Master_Out[633] = \<const0> ;
  assign LOCKSTEP_Master_Out[634] = \<const0> ;
  assign LOCKSTEP_Master_Out[635] = \<const0> ;
  assign LOCKSTEP_Master_Out[636] = \<const0> ;
  assign LOCKSTEP_Master_Out[637] = \<const0> ;
  assign LOCKSTEP_Master_Out[638] = \<const0> ;
  assign LOCKSTEP_Master_Out[639] = \<const0> ;
  assign LOCKSTEP_Master_Out[640] = \<const0> ;
  assign LOCKSTEP_Master_Out[641] = \<const0> ;
  assign LOCKSTEP_Master_Out[642] = \<const0> ;
  assign LOCKSTEP_Master_Out[643] = \<const0> ;
  assign LOCKSTEP_Master_Out[644] = \<const0> ;
  assign LOCKSTEP_Master_Out[645] = \<const0> ;
  assign LOCKSTEP_Master_Out[646] = \<const0> ;
  assign LOCKSTEP_Master_Out[647] = \<const0> ;
  assign LOCKSTEP_Master_Out[648] = \<const0> ;
  assign LOCKSTEP_Master_Out[649] = \<const0> ;
  assign LOCKSTEP_Master_Out[650] = \<const0> ;
  assign LOCKSTEP_Master_Out[651] = \<const0> ;
  assign LOCKSTEP_Master_Out[652] = \<const0> ;
  assign LOCKSTEP_Master_Out[653] = \<const0> ;
  assign LOCKSTEP_Master_Out[654] = \<const0> ;
  assign LOCKSTEP_Master_Out[655] = \<const0> ;
  assign LOCKSTEP_Master_Out[656] = \<const0> ;
  assign LOCKSTEP_Master_Out[657] = \<const0> ;
  assign LOCKSTEP_Master_Out[658] = \<const0> ;
  assign LOCKSTEP_Master_Out[659] = \<const0> ;
  assign LOCKSTEP_Master_Out[660] = \<const0> ;
  assign LOCKSTEP_Master_Out[661] = \<const0> ;
  assign LOCKSTEP_Master_Out[662] = \<const0> ;
  assign LOCKSTEP_Master_Out[663] = \<const0> ;
  assign LOCKSTEP_Master_Out[664] = \<const0> ;
  assign LOCKSTEP_Master_Out[665] = \<const0> ;
  assign LOCKSTEP_Master_Out[666] = \<const0> ;
  assign LOCKSTEP_Master_Out[667] = \<const0> ;
  assign LOCKSTEP_Master_Out[668] = \<const0> ;
  assign LOCKSTEP_Master_Out[669] = \<const0> ;
  assign LOCKSTEP_Master_Out[670] = \<const0> ;
  assign LOCKSTEP_Master_Out[671] = \<const0> ;
  assign LOCKSTEP_Master_Out[672] = \<const0> ;
  assign LOCKSTEP_Master_Out[673] = \<const0> ;
  assign LOCKSTEP_Master_Out[674] = \<const0> ;
  assign LOCKSTEP_Master_Out[675] = \<const0> ;
  assign LOCKSTEP_Master_Out[676] = \<const0> ;
  assign LOCKSTEP_Master_Out[677] = \<const0> ;
  assign LOCKSTEP_Master_Out[678] = \<const0> ;
  assign LOCKSTEP_Master_Out[679] = \<const0> ;
  assign LOCKSTEP_Master_Out[680] = \<const0> ;
  assign LOCKSTEP_Master_Out[681] = \<const0> ;
  assign LOCKSTEP_Master_Out[682] = \<const0> ;
  assign LOCKSTEP_Master_Out[683] = \<const0> ;
  assign LOCKSTEP_Master_Out[684] = \<const0> ;
  assign LOCKSTEP_Master_Out[685] = \<const0> ;
  assign LOCKSTEP_Master_Out[686] = \<const0> ;
  assign LOCKSTEP_Master_Out[687] = \<const0> ;
  assign LOCKSTEP_Master_Out[688] = \<const0> ;
  assign LOCKSTEP_Master_Out[689] = \<const0> ;
  assign LOCKSTEP_Master_Out[690] = \<const0> ;
  assign LOCKSTEP_Master_Out[691] = \<const0> ;
  assign LOCKSTEP_Master_Out[692] = \<const0> ;
  assign LOCKSTEP_Master_Out[693] = \<const0> ;
  assign LOCKSTEP_Master_Out[694] = \<const0> ;
  assign LOCKSTEP_Master_Out[695] = \<const0> ;
  assign LOCKSTEP_Master_Out[696] = \<const0> ;
  assign LOCKSTEP_Master_Out[697] = \<const0> ;
  assign LOCKSTEP_Master_Out[698] = \<const0> ;
  assign LOCKSTEP_Master_Out[699] = \<const0> ;
  assign LOCKSTEP_Master_Out[700] = \<const0> ;
  assign LOCKSTEP_Master_Out[701] = \<const0> ;
  assign LOCKSTEP_Master_Out[702] = \<const0> ;
  assign LOCKSTEP_Master_Out[703] = \<const0> ;
  assign LOCKSTEP_Master_Out[704] = \<const0> ;
  assign LOCKSTEP_Master_Out[705] = \<const0> ;
  assign LOCKSTEP_Master_Out[706] = \<const0> ;
  assign LOCKSTEP_Master_Out[707] = \<const0> ;
  assign LOCKSTEP_Master_Out[708] = \<const0> ;
  assign LOCKSTEP_Master_Out[709] = \<const0> ;
  assign LOCKSTEP_Master_Out[710] = \<const0> ;
  assign LOCKSTEP_Master_Out[711] = \<const0> ;
  assign LOCKSTEP_Master_Out[712] = \<const0> ;
  assign LOCKSTEP_Master_Out[713] = \<const0> ;
  assign LOCKSTEP_Master_Out[714] = \<const0> ;
  assign LOCKSTEP_Master_Out[715] = \<const0> ;
  assign LOCKSTEP_Master_Out[716] = \<const0> ;
  assign LOCKSTEP_Master_Out[717] = \<const0> ;
  assign LOCKSTEP_Master_Out[718] = \<const0> ;
  assign LOCKSTEP_Master_Out[719] = \<const0> ;
  assign LOCKSTEP_Master_Out[720] = \<const0> ;
  assign LOCKSTEP_Master_Out[721] = \<const0> ;
  assign LOCKSTEP_Master_Out[722] = \<const0> ;
  assign LOCKSTEP_Master_Out[723] = \<const0> ;
  assign LOCKSTEP_Master_Out[724] = \<const0> ;
  assign LOCKSTEP_Master_Out[725] = \<const0> ;
  assign LOCKSTEP_Master_Out[726] = \<const0> ;
  assign LOCKSTEP_Master_Out[727] = \<const0> ;
  assign LOCKSTEP_Master_Out[728] = \<const0> ;
  assign LOCKSTEP_Master_Out[729] = \<const0> ;
  assign LOCKSTEP_Master_Out[730] = \<const0> ;
  assign LOCKSTEP_Master_Out[731] = \<const0> ;
  assign LOCKSTEP_Master_Out[732] = \<const0> ;
  assign LOCKSTEP_Master_Out[733] = \<const0> ;
  assign LOCKSTEP_Master_Out[734] = \<const0> ;
  assign LOCKSTEP_Master_Out[735] = \<const0> ;
  assign LOCKSTEP_Master_Out[736] = \<const0> ;
  assign LOCKSTEP_Master_Out[737] = \<const0> ;
  assign LOCKSTEP_Master_Out[738] = \<const0> ;
  assign LOCKSTEP_Master_Out[739] = \<const0> ;
  assign LOCKSTEP_Master_Out[740] = \<const0> ;
  assign LOCKSTEP_Master_Out[741] = \<const0> ;
  assign LOCKSTEP_Master_Out[742] = \<const0> ;
  assign LOCKSTEP_Master_Out[743] = \<const0> ;
  assign LOCKSTEP_Master_Out[744] = \<const0> ;
  assign LOCKSTEP_Master_Out[745] = \<const0> ;
  assign LOCKSTEP_Master_Out[746] = \<const0> ;
  assign LOCKSTEP_Master_Out[747] = \<const0> ;
  assign LOCKSTEP_Master_Out[748] = \<const0> ;
  assign LOCKSTEP_Master_Out[749] = \<const0> ;
  assign LOCKSTEP_Master_Out[750] = \<const0> ;
  assign LOCKSTEP_Master_Out[751] = \<const0> ;
  assign LOCKSTEP_Master_Out[752] = \<const0> ;
  assign LOCKSTEP_Master_Out[753] = \<const0> ;
  assign LOCKSTEP_Master_Out[754] = \<const0> ;
  assign LOCKSTEP_Master_Out[755] = \<const0> ;
  assign LOCKSTEP_Master_Out[756] = \<const0> ;
  assign LOCKSTEP_Master_Out[757] = \<const0> ;
  assign LOCKSTEP_Master_Out[758] = \<const0> ;
  assign LOCKSTEP_Master_Out[759] = \<const0> ;
  assign LOCKSTEP_Master_Out[760] = \<const0> ;
  assign LOCKSTEP_Master_Out[761] = \<const0> ;
  assign LOCKSTEP_Master_Out[762] = \<const0> ;
  assign LOCKSTEP_Master_Out[763] = \<const0> ;
  assign LOCKSTEP_Master_Out[764] = \<const0> ;
  assign LOCKSTEP_Master_Out[765] = \<const0> ;
  assign LOCKSTEP_Master_Out[766] = \<const0> ;
  assign LOCKSTEP_Master_Out[767] = \<const0> ;
  assign LOCKSTEP_Master_Out[768] = \<const0> ;
  assign LOCKSTEP_Master_Out[769] = \<const0> ;
  assign LOCKSTEP_Master_Out[770] = \<const0> ;
  assign LOCKSTEP_Master_Out[771] = \<const0> ;
  assign LOCKSTEP_Master_Out[772] = \<const0> ;
  assign LOCKSTEP_Master_Out[773] = \<const0> ;
  assign LOCKSTEP_Master_Out[774] = \<const0> ;
  assign LOCKSTEP_Master_Out[775] = \<const0> ;
  assign LOCKSTEP_Master_Out[776] = \<const0> ;
  assign LOCKSTEP_Master_Out[777] = \<const0> ;
  assign LOCKSTEP_Master_Out[778] = \<const0> ;
  assign LOCKSTEP_Master_Out[779] = \<const0> ;
  assign LOCKSTEP_Master_Out[780] = \<const0> ;
  assign LOCKSTEP_Master_Out[781] = \<const0> ;
  assign LOCKSTEP_Master_Out[782] = \<const0> ;
  assign LOCKSTEP_Master_Out[783] = \<const0> ;
  assign LOCKSTEP_Master_Out[784] = \<const0> ;
  assign LOCKSTEP_Master_Out[785] = \<const0> ;
  assign LOCKSTEP_Master_Out[786] = \<const0> ;
  assign LOCKSTEP_Master_Out[787] = \<const0> ;
  assign LOCKSTEP_Master_Out[788] = \<const0> ;
  assign LOCKSTEP_Master_Out[789] = \<const0> ;
  assign LOCKSTEP_Master_Out[790] = \<const0> ;
  assign LOCKSTEP_Master_Out[791] = \<const0> ;
  assign LOCKSTEP_Master_Out[792] = \<const0> ;
  assign LOCKSTEP_Master_Out[793] = \<const0> ;
  assign LOCKSTEP_Master_Out[794] = \<const0> ;
  assign LOCKSTEP_Master_Out[795] = \<const0> ;
  assign LOCKSTEP_Master_Out[796] = \<const0> ;
  assign LOCKSTEP_Master_Out[797] = \<const0> ;
  assign LOCKSTEP_Master_Out[798] = \<const0> ;
  assign LOCKSTEP_Master_Out[799] = \<const0> ;
  assign LOCKSTEP_Master_Out[800] = \<const0> ;
  assign LOCKSTEP_Master_Out[801] = \<const0> ;
  assign LOCKSTEP_Master_Out[802] = \<const0> ;
  assign LOCKSTEP_Master_Out[803] = \<const0> ;
  assign LOCKSTEP_Master_Out[804] = \<const0> ;
  assign LOCKSTEP_Master_Out[805] = \<const0> ;
  assign LOCKSTEP_Master_Out[806] = \<const0> ;
  assign LOCKSTEP_Master_Out[807] = \<const0> ;
  assign LOCKSTEP_Master_Out[808] = \<const0> ;
  assign LOCKSTEP_Master_Out[809] = \<const0> ;
  assign LOCKSTEP_Master_Out[810] = \<const0> ;
  assign LOCKSTEP_Master_Out[811] = \<const0> ;
  assign LOCKSTEP_Master_Out[812] = \<const0> ;
  assign LOCKSTEP_Master_Out[813] = \<const0> ;
  assign LOCKSTEP_Master_Out[814] = \<const0> ;
  assign LOCKSTEP_Master_Out[815] = \<const0> ;
  assign LOCKSTEP_Master_Out[816] = \<const0> ;
  assign LOCKSTEP_Master_Out[817] = \<const0> ;
  assign LOCKSTEP_Master_Out[818] = \<const0> ;
  assign LOCKSTEP_Master_Out[819] = \<const0> ;
  assign LOCKSTEP_Master_Out[820] = \<const0> ;
  assign LOCKSTEP_Master_Out[821] = \<const0> ;
  assign LOCKSTEP_Master_Out[822] = \<const0> ;
  assign LOCKSTEP_Master_Out[823] = \<const0> ;
  assign LOCKSTEP_Master_Out[824] = \<const0> ;
  assign LOCKSTEP_Master_Out[825] = \<const0> ;
  assign LOCKSTEP_Master_Out[826] = \<const0> ;
  assign LOCKSTEP_Master_Out[827] = \<const0> ;
  assign LOCKSTEP_Master_Out[828] = \<const0> ;
  assign LOCKSTEP_Master_Out[829] = \<const0> ;
  assign LOCKSTEP_Master_Out[830] = \<const0> ;
  assign LOCKSTEP_Master_Out[831] = \<const0> ;
  assign LOCKSTEP_Master_Out[832] = \<const0> ;
  assign LOCKSTEP_Master_Out[833] = \<const0> ;
  assign LOCKSTEP_Master_Out[834] = \<const0> ;
  assign LOCKSTEP_Master_Out[835] = \<const0> ;
  assign LOCKSTEP_Master_Out[836] = \<const0> ;
  assign LOCKSTEP_Master_Out[837] = \<const0> ;
  assign LOCKSTEP_Master_Out[838] = \<const0> ;
  assign LOCKSTEP_Master_Out[839] = \<const0> ;
  assign LOCKSTEP_Master_Out[840] = \<const0> ;
  assign LOCKSTEP_Master_Out[841] = \<const0> ;
  assign LOCKSTEP_Master_Out[842] = \<const0> ;
  assign LOCKSTEP_Master_Out[843] = \<const0> ;
  assign LOCKSTEP_Master_Out[844] = \<const0> ;
  assign LOCKSTEP_Master_Out[845] = \<const0> ;
  assign LOCKSTEP_Master_Out[846] = \<const0> ;
  assign LOCKSTEP_Master_Out[847] = \<const0> ;
  assign LOCKSTEP_Master_Out[848] = \<const0> ;
  assign LOCKSTEP_Master_Out[849] = \<const0> ;
  assign LOCKSTEP_Master_Out[850] = \<const0> ;
  assign LOCKSTEP_Master_Out[851] = \<const0> ;
  assign LOCKSTEP_Master_Out[852] = \<const0> ;
  assign LOCKSTEP_Master_Out[853] = \<const0> ;
  assign LOCKSTEP_Master_Out[854] = \<const0> ;
  assign LOCKSTEP_Master_Out[855] = \<const0> ;
  assign LOCKSTEP_Master_Out[856] = \<const0> ;
  assign LOCKSTEP_Master_Out[857] = \<const0> ;
  assign LOCKSTEP_Master_Out[858] = \<const0> ;
  assign LOCKSTEP_Master_Out[859] = \<const0> ;
  assign LOCKSTEP_Master_Out[860] = \<const0> ;
  assign LOCKSTEP_Master_Out[861] = \<const0> ;
  assign LOCKSTEP_Master_Out[862] = \<const0> ;
  assign LOCKSTEP_Master_Out[863] = \<const0> ;
  assign LOCKSTEP_Master_Out[864] = \<const0> ;
  assign LOCKSTEP_Master_Out[865] = \<const0> ;
  assign LOCKSTEP_Master_Out[866] = \<const0> ;
  assign LOCKSTEP_Master_Out[867] = \<const0> ;
  assign LOCKSTEP_Master_Out[868] = \<const0> ;
  assign LOCKSTEP_Master_Out[869] = \<const0> ;
  assign LOCKSTEP_Master_Out[870] = \<const0> ;
  assign LOCKSTEP_Master_Out[871] = \<const0> ;
  assign LOCKSTEP_Master_Out[872] = \<const0> ;
  assign LOCKSTEP_Master_Out[873] = \<const0> ;
  assign LOCKSTEP_Master_Out[874] = \<const0> ;
  assign LOCKSTEP_Master_Out[875] = \<const0> ;
  assign LOCKSTEP_Master_Out[876] = \<const0> ;
  assign LOCKSTEP_Master_Out[877] = \<const0> ;
  assign LOCKSTEP_Master_Out[878] = \<const0> ;
  assign LOCKSTEP_Master_Out[879] = \<const0> ;
  assign LOCKSTEP_Master_Out[880] = \<const0> ;
  assign LOCKSTEP_Master_Out[881] = \<const0> ;
  assign LOCKSTEP_Master_Out[882] = \<const0> ;
  assign LOCKSTEP_Master_Out[883] = \<const0> ;
  assign LOCKSTEP_Master_Out[884] = \<const0> ;
  assign LOCKSTEP_Master_Out[885] = \<const0> ;
  assign LOCKSTEP_Master_Out[886] = \<const0> ;
  assign LOCKSTEP_Master_Out[887] = \<const0> ;
  assign LOCKSTEP_Master_Out[888] = \<const0> ;
  assign LOCKSTEP_Master_Out[889] = \<const0> ;
  assign LOCKSTEP_Master_Out[890] = \<const0> ;
  assign LOCKSTEP_Master_Out[891] = \<const0> ;
  assign LOCKSTEP_Master_Out[892] = \<const0> ;
  assign LOCKSTEP_Master_Out[893] = \<const0> ;
  assign LOCKSTEP_Master_Out[894] = \<const0> ;
  assign LOCKSTEP_Master_Out[895] = \<const0> ;
  assign LOCKSTEP_Master_Out[896] = \<const0> ;
  assign LOCKSTEP_Master_Out[897] = \<const0> ;
  assign LOCKSTEP_Master_Out[898] = \<const0> ;
  assign LOCKSTEP_Master_Out[899] = \<const0> ;
  assign LOCKSTEP_Master_Out[900] = \<const0> ;
  assign LOCKSTEP_Master_Out[901] = \<const0> ;
  assign LOCKSTEP_Master_Out[902] = \<const0> ;
  assign LOCKSTEP_Master_Out[903] = \<const0> ;
  assign LOCKSTEP_Master_Out[904] = \<const0> ;
  assign LOCKSTEP_Master_Out[905] = \<const0> ;
  assign LOCKSTEP_Master_Out[906] = \<const0> ;
  assign LOCKSTEP_Master_Out[907] = \<const0> ;
  assign LOCKSTEP_Master_Out[908] = \<const0> ;
  assign LOCKSTEP_Master_Out[909] = \<const0> ;
  assign LOCKSTEP_Master_Out[910] = \<const0> ;
  assign LOCKSTEP_Master_Out[911] = \<const0> ;
  assign LOCKSTEP_Master_Out[912] = \<const0> ;
  assign LOCKSTEP_Master_Out[913] = \<const0> ;
  assign LOCKSTEP_Master_Out[914] = \<const0> ;
  assign LOCKSTEP_Master_Out[915] = \<const0> ;
  assign LOCKSTEP_Master_Out[916] = \<const0> ;
  assign LOCKSTEP_Master_Out[917] = \<const0> ;
  assign LOCKSTEP_Master_Out[918] = \<const0> ;
  assign LOCKSTEP_Master_Out[919] = \<const0> ;
  assign LOCKSTEP_Master_Out[920] = \<const0> ;
  assign LOCKSTEP_Master_Out[921] = \<const0> ;
  assign LOCKSTEP_Master_Out[922] = \<const0> ;
  assign LOCKSTEP_Master_Out[923] = \<const0> ;
  assign LOCKSTEP_Master_Out[924] = \<const0> ;
  assign LOCKSTEP_Master_Out[925] = \<const0> ;
  assign LOCKSTEP_Master_Out[926] = \<const0> ;
  assign LOCKSTEP_Master_Out[927] = \<const0> ;
  assign LOCKSTEP_Master_Out[928] = \<const0> ;
  assign LOCKSTEP_Master_Out[929] = \<const0> ;
  assign LOCKSTEP_Master_Out[930] = \<const0> ;
  assign LOCKSTEP_Master_Out[931] = \<const0> ;
  assign LOCKSTEP_Master_Out[932] = \<const0> ;
  assign LOCKSTEP_Master_Out[933] = \<const0> ;
  assign LOCKSTEP_Master_Out[934] = \<const0> ;
  assign LOCKSTEP_Master_Out[935] = \<const0> ;
  assign LOCKSTEP_Master_Out[936] = \<const0> ;
  assign LOCKSTEP_Master_Out[937] = \<const0> ;
  assign LOCKSTEP_Master_Out[938] = \<const0> ;
  assign LOCKSTEP_Master_Out[939] = \<const0> ;
  assign LOCKSTEP_Master_Out[940] = \<const0> ;
  assign LOCKSTEP_Master_Out[941] = \<const0> ;
  assign LOCKSTEP_Master_Out[942] = \<const0> ;
  assign LOCKSTEP_Master_Out[943] = \<const0> ;
  assign LOCKSTEP_Master_Out[944] = \<const0> ;
  assign LOCKSTEP_Master_Out[945] = \<const0> ;
  assign LOCKSTEP_Master_Out[946] = \<const0> ;
  assign LOCKSTEP_Master_Out[947] = \<const0> ;
  assign LOCKSTEP_Master_Out[948] = \<const0> ;
  assign LOCKSTEP_Master_Out[949] = \<const0> ;
  assign LOCKSTEP_Master_Out[950] = \<const0> ;
  assign LOCKSTEP_Master_Out[951] = \<const0> ;
  assign LOCKSTEP_Master_Out[952] = \<const0> ;
  assign LOCKSTEP_Master_Out[953] = \<const0> ;
  assign LOCKSTEP_Master_Out[954] = \<const0> ;
  assign LOCKSTEP_Master_Out[955] = \<const0> ;
  assign LOCKSTEP_Master_Out[956] = \<const0> ;
  assign LOCKSTEP_Master_Out[957] = \<const0> ;
  assign LOCKSTEP_Master_Out[958] = \<const0> ;
  assign LOCKSTEP_Master_Out[959] = \<const0> ;
  assign LOCKSTEP_Master_Out[960] = \<const0> ;
  assign LOCKSTEP_Master_Out[961] = \<const0> ;
  assign LOCKSTEP_Master_Out[962] = \<const0> ;
  assign LOCKSTEP_Master_Out[963] = \<const0> ;
  assign LOCKSTEP_Master_Out[964] = \<const0> ;
  assign LOCKSTEP_Master_Out[965] = \<const0> ;
  assign LOCKSTEP_Master_Out[966] = \<const0> ;
  assign LOCKSTEP_Master_Out[967] = \<const0> ;
  assign LOCKSTEP_Master_Out[968] = \<const0> ;
  assign LOCKSTEP_Master_Out[969] = \<const0> ;
  assign LOCKSTEP_Master_Out[970] = \<const0> ;
  assign LOCKSTEP_Master_Out[971] = \<const0> ;
  assign LOCKSTEP_Master_Out[972] = \<const0> ;
  assign LOCKSTEP_Master_Out[973] = \<const0> ;
  assign LOCKSTEP_Master_Out[974] = \<const0> ;
  assign LOCKSTEP_Master_Out[975] = \<const0> ;
  assign LOCKSTEP_Master_Out[976] = \<const0> ;
  assign LOCKSTEP_Master_Out[977] = \<const0> ;
  assign LOCKSTEP_Master_Out[978] = \<const0> ;
  assign LOCKSTEP_Master_Out[979] = \<const0> ;
  assign LOCKSTEP_Master_Out[980] = \<const0> ;
  assign LOCKSTEP_Master_Out[981] = \<const0> ;
  assign LOCKSTEP_Master_Out[982] = \<const0> ;
  assign LOCKSTEP_Master_Out[983] = \<const0> ;
  assign LOCKSTEP_Master_Out[984] = \<const0> ;
  assign LOCKSTEP_Master_Out[985] = \<const0> ;
  assign LOCKSTEP_Master_Out[986] = \<const0> ;
  assign LOCKSTEP_Master_Out[987] = \<const0> ;
  assign LOCKSTEP_Master_Out[988] = \<const0> ;
  assign LOCKSTEP_Master_Out[989] = \<const0> ;
  assign LOCKSTEP_Master_Out[990] = \<const0> ;
  assign LOCKSTEP_Master_Out[991] = \<const0> ;
  assign LOCKSTEP_Master_Out[992] = \<const0> ;
  assign LOCKSTEP_Master_Out[993] = \<const0> ;
  assign LOCKSTEP_Master_Out[994] = \<const0> ;
  assign LOCKSTEP_Master_Out[995] = \<const0> ;
  assign LOCKSTEP_Master_Out[996] = \<const0> ;
  assign LOCKSTEP_Master_Out[997] = \<const0> ;
  assign LOCKSTEP_Master_Out[998] = \<const0> ;
  assign LOCKSTEP_Master_Out[999] = \<const0> ;
  assign LOCKSTEP_Master_Out[1000] = \<const0> ;
  assign LOCKSTEP_Master_Out[1001] = \<const0> ;
  assign LOCKSTEP_Master_Out[1002] = \<const0> ;
  assign LOCKSTEP_Master_Out[1003] = \<const0> ;
  assign LOCKSTEP_Master_Out[1004] = \<const0> ;
  assign LOCKSTEP_Master_Out[1005] = \<const0> ;
  assign LOCKSTEP_Master_Out[1006] = \<const0> ;
  assign LOCKSTEP_Master_Out[1007] = \<const0> ;
  assign LOCKSTEP_Master_Out[1008] = \<const0> ;
  assign LOCKSTEP_Master_Out[1009] = \<const0> ;
  assign LOCKSTEP_Master_Out[1010] = \<const0> ;
  assign LOCKSTEP_Master_Out[1011] = \<const0> ;
  assign LOCKSTEP_Master_Out[1012] = \<const0> ;
  assign LOCKSTEP_Master_Out[1013] = \<const0> ;
  assign LOCKSTEP_Master_Out[1014] = \<const0> ;
  assign LOCKSTEP_Master_Out[1015] = \<const0> ;
  assign LOCKSTEP_Master_Out[1016] = \<const0> ;
  assign LOCKSTEP_Master_Out[1017] = \<const0> ;
  assign LOCKSTEP_Master_Out[1018] = \<const0> ;
  assign LOCKSTEP_Master_Out[1019] = \<const0> ;
  assign LOCKSTEP_Master_Out[1020] = \<const0> ;
  assign LOCKSTEP_Master_Out[1021] = \<const0> ;
  assign LOCKSTEP_Master_Out[1022] = \<const0> ;
  assign LOCKSTEP_Master_Out[1023] = \<const0> ;
  assign LOCKSTEP_Master_Out[1024] = \<const0> ;
  assign LOCKSTEP_Master_Out[1025] = \<const0> ;
  assign LOCKSTEP_Master_Out[1026] = \<const0> ;
  assign LOCKSTEP_Master_Out[1027] = \<const0> ;
  assign LOCKSTEP_Master_Out[1028] = \<const0> ;
  assign LOCKSTEP_Master_Out[1029] = \<const0> ;
  assign LOCKSTEP_Master_Out[1030] = \<const0> ;
  assign LOCKSTEP_Master_Out[1031] = \<const0> ;
  assign LOCKSTEP_Master_Out[1032] = \<const0> ;
  assign LOCKSTEP_Master_Out[1033] = \<const0> ;
  assign LOCKSTEP_Master_Out[1034] = \<const0> ;
  assign LOCKSTEP_Master_Out[1035] = \<const0> ;
  assign LOCKSTEP_Master_Out[1036] = \<const0> ;
  assign LOCKSTEP_Master_Out[1037] = \<const0> ;
  assign LOCKSTEP_Master_Out[1038] = \<const0> ;
  assign LOCKSTEP_Master_Out[1039] = \<const0> ;
  assign LOCKSTEP_Master_Out[1040] = \<const0> ;
  assign LOCKSTEP_Master_Out[1041] = \<const0> ;
  assign LOCKSTEP_Master_Out[1042] = \<const0> ;
  assign LOCKSTEP_Master_Out[1043] = \<const0> ;
  assign LOCKSTEP_Master_Out[1044] = \<const0> ;
  assign LOCKSTEP_Master_Out[1045] = \<const0> ;
  assign LOCKSTEP_Master_Out[1046] = \<const0> ;
  assign LOCKSTEP_Master_Out[1047] = \<const0> ;
  assign LOCKSTEP_Master_Out[1048] = \<const0> ;
  assign LOCKSTEP_Master_Out[1049] = \<const0> ;
  assign LOCKSTEP_Master_Out[1050] = \<const0> ;
  assign LOCKSTEP_Master_Out[1051] = \<const0> ;
  assign LOCKSTEP_Master_Out[1052] = \<const0> ;
  assign LOCKSTEP_Master_Out[1053] = \<const0> ;
  assign LOCKSTEP_Master_Out[1054] = \<const0> ;
  assign LOCKSTEP_Master_Out[1055] = \<const0> ;
  assign LOCKSTEP_Master_Out[1056] = \<const0> ;
  assign LOCKSTEP_Master_Out[1057] = \<const0> ;
  assign LOCKSTEP_Master_Out[1058] = \<const0> ;
  assign LOCKSTEP_Master_Out[1059] = \<const0> ;
  assign LOCKSTEP_Master_Out[1060] = \<const0> ;
  assign LOCKSTEP_Master_Out[1061] = \<const0> ;
  assign LOCKSTEP_Master_Out[1062] = \<const0> ;
  assign LOCKSTEP_Master_Out[1063] = \<const0> ;
  assign LOCKSTEP_Master_Out[1064] = \<const0> ;
  assign LOCKSTEP_Master_Out[1065] = \<const0> ;
  assign LOCKSTEP_Master_Out[1066] = \<const0> ;
  assign LOCKSTEP_Master_Out[1067] = \<const0> ;
  assign LOCKSTEP_Master_Out[1068] = \<const0> ;
  assign LOCKSTEP_Master_Out[1069] = \<const0> ;
  assign LOCKSTEP_Master_Out[1070] = \<const0> ;
  assign LOCKSTEP_Master_Out[1071] = \<const0> ;
  assign LOCKSTEP_Master_Out[1072] = \<const0> ;
  assign LOCKSTEP_Master_Out[1073] = \<const0> ;
  assign LOCKSTEP_Master_Out[1074] = \<const0> ;
  assign LOCKSTEP_Master_Out[1075] = \<const0> ;
  assign LOCKSTEP_Master_Out[1076] = \<const0> ;
  assign LOCKSTEP_Master_Out[1077] = \<const0> ;
  assign LOCKSTEP_Master_Out[1078] = \<const0> ;
  assign LOCKSTEP_Master_Out[1079] = \<const0> ;
  assign LOCKSTEP_Master_Out[1080] = \<const0> ;
  assign LOCKSTEP_Master_Out[1081] = \<const0> ;
  assign LOCKSTEP_Master_Out[1082] = \<const0> ;
  assign LOCKSTEP_Master_Out[1083] = \<const0> ;
  assign LOCKSTEP_Master_Out[1084] = \<const0> ;
  assign LOCKSTEP_Master_Out[1085] = \<const0> ;
  assign LOCKSTEP_Master_Out[1086] = \<const0> ;
  assign LOCKSTEP_Master_Out[1087] = \<const0> ;
  assign LOCKSTEP_Master_Out[1088] = \<const0> ;
  assign LOCKSTEP_Master_Out[1089] = \<const0> ;
  assign LOCKSTEP_Master_Out[1090] = \<const0> ;
  assign LOCKSTEP_Master_Out[1091] = \<const0> ;
  assign LOCKSTEP_Master_Out[1092] = \<const0> ;
  assign LOCKSTEP_Master_Out[1093] = \<const0> ;
  assign LOCKSTEP_Master_Out[1094] = \<const0> ;
  assign LOCKSTEP_Master_Out[1095] = \<const0> ;
  assign LOCKSTEP_Master_Out[1096] = \<const0> ;
  assign LOCKSTEP_Master_Out[1097] = \<const0> ;
  assign LOCKSTEP_Master_Out[1098] = \<const0> ;
  assign LOCKSTEP_Master_Out[1099] = \<const0> ;
  assign LOCKSTEP_Master_Out[1100] = \<const0> ;
  assign LOCKSTEP_Master_Out[1101] = \<const0> ;
  assign LOCKSTEP_Master_Out[1102] = \<const0> ;
  assign LOCKSTEP_Master_Out[1103] = \<const0> ;
  assign LOCKSTEP_Master_Out[1104] = \<const0> ;
  assign LOCKSTEP_Master_Out[1105] = \<const0> ;
  assign LOCKSTEP_Master_Out[1106] = \<const0> ;
  assign LOCKSTEP_Master_Out[1107] = \<const0> ;
  assign LOCKSTEP_Master_Out[1108] = \<const0> ;
  assign LOCKSTEP_Master_Out[1109] = \<const0> ;
  assign LOCKSTEP_Master_Out[1110] = \<const0> ;
  assign LOCKSTEP_Master_Out[1111] = \<const0> ;
  assign LOCKSTEP_Master_Out[1112] = \<const0> ;
  assign LOCKSTEP_Master_Out[1113] = \<const0> ;
  assign LOCKSTEP_Master_Out[1114] = \<const0> ;
  assign LOCKSTEP_Master_Out[1115] = \<const0> ;
  assign LOCKSTEP_Master_Out[1116] = \<const0> ;
  assign LOCKSTEP_Master_Out[1117] = \<const0> ;
  assign LOCKSTEP_Master_Out[1118] = \<const0> ;
  assign LOCKSTEP_Master_Out[1119] = \<const0> ;
  assign LOCKSTEP_Master_Out[1120] = \<const0> ;
  assign LOCKSTEP_Master_Out[1121] = \<const0> ;
  assign LOCKSTEP_Master_Out[1122] = \<const0> ;
  assign LOCKSTEP_Master_Out[1123] = \<const0> ;
  assign LOCKSTEP_Master_Out[1124] = \<const0> ;
  assign LOCKSTEP_Master_Out[1125] = \<const0> ;
  assign LOCKSTEP_Master_Out[1126] = \<const0> ;
  assign LOCKSTEP_Master_Out[1127] = \<const0> ;
  assign LOCKSTEP_Master_Out[1128] = \<const0> ;
  assign LOCKSTEP_Master_Out[1129] = \<const0> ;
  assign LOCKSTEP_Master_Out[1130] = \<const0> ;
  assign LOCKSTEP_Master_Out[1131] = \<const0> ;
  assign LOCKSTEP_Master_Out[1132] = \<const0> ;
  assign LOCKSTEP_Master_Out[1133] = \<const0> ;
  assign LOCKSTEP_Master_Out[1134] = \<const0> ;
  assign LOCKSTEP_Master_Out[1135] = \<const0> ;
  assign LOCKSTEP_Master_Out[1136] = \<const0> ;
  assign LOCKSTEP_Master_Out[1137] = \<const0> ;
  assign LOCKSTEP_Master_Out[1138] = \<const0> ;
  assign LOCKSTEP_Master_Out[1139] = \<const0> ;
  assign LOCKSTEP_Master_Out[1140] = \<const0> ;
  assign LOCKSTEP_Master_Out[1141] = \<const0> ;
  assign LOCKSTEP_Master_Out[1142] = \<const0> ;
  assign LOCKSTEP_Master_Out[1143] = \<const0> ;
  assign LOCKSTEP_Master_Out[1144] = \<const0> ;
  assign LOCKSTEP_Master_Out[1145] = \<const0> ;
  assign LOCKSTEP_Master_Out[1146] = \<const0> ;
  assign LOCKSTEP_Master_Out[1147] = \<const0> ;
  assign LOCKSTEP_Master_Out[1148] = \<const0> ;
  assign LOCKSTEP_Master_Out[1149] = \<const0> ;
  assign LOCKSTEP_Master_Out[1150] = \<const0> ;
  assign LOCKSTEP_Master_Out[1151] = \<const0> ;
  assign LOCKSTEP_Master_Out[1152] = \<const0> ;
  assign LOCKSTEP_Master_Out[1153] = \<const0> ;
  assign LOCKSTEP_Master_Out[1154] = \<const0> ;
  assign LOCKSTEP_Master_Out[1155] = \<const0> ;
  assign LOCKSTEP_Master_Out[1156] = \<const0> ;
  assign LOCKSTEP_Master_Out[1157] = \<const0> ;
  assign LOCKSTEP_Master_Out[1158] = \<const0> ;
  assign LOCKSTEP_Master_Out[1159] = \<const0> ;
  assign LOCKSTEP_Master_Out[1160] = \<const0> ;
  assign LOCKSTEP_Master_Out[1161] = \<const0> ;
  assign LOCKSTEP_Master_Out[1162] = \<const0> ;
  assign LOCKSTEP_Master_Out[1163] = \<const0> ;
  assign LOCKSTEP_Master_Out[1164] = \<const0> ;
  assign LOCKSTEP_Master_Out[1165] = \<const0> ;
  assign LOCKSTEP_Master_Out[1166] = \<const0> ;
  assign LOCKSTEP_Master_Out[1167] = \<const0> ;
  assign LOCKSTEP_Master_Out[1168] = \<const0> ;
  assign LOCKSTEP_Master_Out[1169] = \<const0> ;
  assign LOCKSTEP_Master_Out[1170] = \<const0> ;
  assign LOCKSTEP_Master_Out[1171] = \<const0> ;
  assign LOCKSTEP_Master_Out[1172] = \<const0> ;
  assign LOCKSTEP_Master_Out[1173] = \<const0> ;
  assign LOCKSTEP_Master_Out[1174] = \<const0> ;
  assign LOCKSTEP_Master_Out[1175] = \<const0> ;
  assign LOCKSTEP_Master_Out[1176] = \<const0> ;
  assign LOCKSTEP_Master_Out[1177] = \<const0> ;
  assign LOCKSTEP_Master_Out[1178] = \<const0> ;
  assign LOCKSTEP_Master_Out[1179] = \<const0> ;
  assign LOCKSTEP_Master_Out[1180] = \<const0> ;
  assign LOCKSTEP_Master_Out[1181] = \<const0> ;
  assign LOCKSTEP_Master_Out[1182] = \<const0> ;
  assign LOCKSTEP_Master_Out[1183] = \<const0> ;
  assign LOCKSTEP_Master_Out[1184] = \<const0> ;
  assign LOCKSTEP_Master_Out[1185] = \<const0> ;
  assign LOCKSTEP_Master_Out[1186] = \<const0> ;
  assign LOCKSTEP_Master_Out[1187] = \<const0> ;
  assign LOCKSTEP_Master_Out[1188] = \<const0> ;
  assign LOCKSTEP_Master_Out[1189] = \<const0> ;
  assign LOCKSTEP_Master_Out[1190] = \<const0> ;
  assign LOCKSTEP_Master_Out[1191] = \<const0> ;
  assign LOCKSTEP_Master_Out[1192] = \<const0> ;
  assign LOCKSTEP_Master_Out[1193] = \<const0> ;
  assign LOCKSTEP_Master_Out[1194] = \<const0> ;
  assign LOCKSTEP_Master_Out[1195] = \<const0> ;
  assign LOCKSTEP_Master_Out[1196] = \<const0> ;
  assign LOCKSTEP_Master_Out[1197] = \<const0> ;
  assign LOCKSTEP_Master_Out[1198] = \<const0> ;
  assign LOCKSTEP_Master_Out[1199] = \<const0> ;
  assign LOCKSTEP_Master_Out[1200] = \<const0> ;
  assign LOCKSTEP_Master_Out[1201] = \<const0> ;
  assign LOCKSTEP_Master_Out[1202] = \<const0> ;
  assign LOCKSTEP_Master_Out[1203] = \<const0> ;
  assign LOCKSTEP_Master_Out[1204] = \<const0> ;
  assign LOCKSTEP_Master_Out[1205] = \<const0> ;
  assign LOCKSTEP_Master_Out[1206] = \<const0> ;
  assign LOCKSTEP_Master_Out[1207] = \<const0> ;
  assign LOCKSTEP_Master_Out[1208] = \<const0> ;
  assign LOCKSTEP_Master_Out[1209] = \<const0> ;
  assign LOCKSTEP_Master_Out[1210] = \<const0> ;
  assign LOCKSTEP_Master_Out[1211] = \<const0> ;
  assign LOCKSTEP_Master_Out[1212] = \<const0> ;
  assign LOCKSTEP_Master_Out[1213] = \<const0> ;
  assign LOCKSTEP_Master_Out[1214] = \<const0> ;
  assign LOCKSTEP_Master_Out[1215] = \<const0> ;
  assign LOCKSTEP_Master_Out[1216] = \<const0> ;
  assign LOCKSTEP_Master_Out[1217] = \<const0> ;
  assign LOCKSTEP_Master_Out[1218] = \<const0> ;
  assign LOCKSTEP_Master_Out[1219] = \<const0> ;
  assign LOCKSTEP_Master_Out[1220] = \<const0> ;
  assign LOCKSTEP_Master_Out[1221] = \<const0> ;
  assign LOCKSTEP_Master_Out[1222] = \<const0> ;
  assign LOCKSTEP_Master_Out[1223] = \<const0> ;
  assign LOCKSTEP_Master_Out[1224] = \<const0> ;
  assign LOCKSTEP_Master_Out[1225] = \<const0> ;
  assign LOCKSTEP_Master_Out[1226] = \<const0> ;
  assign LOCKSTEP_Master_Out[1227] = \<const0> ;
  assign LOCKSTEP_Master_Out[1228] = \<const0> ;
  assign LOCKSTEP_Master_Out[1229] = \<const0> ;
  assign LOCKSTEP_Master_Out[1230] = \<const0> ;
  assign LOCKSTEP_Master_Out[1231] = \<const0> ;
  assign LOCKSTEP_Master_Out[1232] = \<const0> ;
  assign LOCKSTEP_Master_Out[1233] = \<const0> ;
  assign LOCKSTEP_Master_Out[1234] = \<const0> ;
  assign LOCKSTEP_Master_Out[1235] = \<const0> ;
  assign LOCKSTEP_Master_Out[1236] = \<const0> ;
  assign LOCKSTEP_Master_Out[1237] = \<const0> ;
  assign LOCKSTEP_Master_Out[1238] = \<const0> ;
  assign LOCKSTEP_Master_Out[1239] = \<const0> ;
  assign LOCKSTEP_Master_Out[1240] = \<const0> ;
  assign LOCKSTEP_Master_Out[1241] = \<const0> ;
  assign LOCKSTEP_Master_Out[1242] = \<const0> ;
  assign LOCKSTEP_Master_Out[1243] = \<const0> ;
  assign LOCKSTEP_Master_Out[1244] = \<const0> ;
  assign LOCKSTEP_Master_Out[1245] = \<const0> ;
  assign LOCKSTEP_Master_Out[1246] = \<const0> ;
  assign LOCKSTEP_Master_Out[1247] = \<const0> ;
  assign LOCKSTEP_Master_Out[1248] = \<const0> ;
  assign LOCKSTEP_Master_Out[1249] = \<const0> ;
  assign LOCKSTEP_Master_Out[1250] = \<const0> ;
  assign LOCKSTEP_Master_Out[1251] = \<const0> ;
  assign LOCKSTEP_Master_Out[1252] = \<const0> ;
  assign LOCKSTEP_Master_Out[1253] = \<const0> ;
  assign LOCKSTEP_Master_Out[1254] = \<const0> ;
  assign LOCKSTEP_Master_Out[1255] = \<const0> ;
  assign LOCKSTEP_Master_Out[1256] = \<const0> ;
  assign LOCKSTEP_Master_Out[1257] = \<const0> ;
  assign LOCKSTEP_Master_Out[1258] = \<const0> ;
  assign LOCKSTEP_Master_Out[1259] = \<const0> ;
  assign LOCKSTEP_Master_Out[1260] = \<const0> ;
  assign LOCKSTEP_Master_Out[1261] = \<const0> ;
  assign LOCKSTEP_Master_Out[1262] = \<const0> ;
  assign LOCKSTEP_Master_Out[1263] = \<const0> ;
  assign LOCKSTEP_Master_Out[1264] = \<const0> ;
  assign LOCKSTEP_Master_Out[1265] = \<const0> ;
  assign LOCKSTEP_Master_Out[1266] = \<const0> ;
  assign LOCKSTEP_Master_Out[1267] = \<const0> ;
  assign LOCKSTEP_Master_Out[1268] = \<const0> ;
  assign LOCKSTEP_Master_Out[1269] = \<const0> ;
  assign LOCKSTEP_Master_Out[1270] = \<const0> ;
  assign LOCKSTEP_Master_Out[1271] = \<const0> ;
  assign LOCKSTEP_Master_Out[1272] = \<const0> ;
  assign LOCKSTEP_Master_Out[1273] = \<const0> ;
  assign LOCKSTEP_Master_Out[1274] = \<const0> ;
  assign LOCKSTEP_Master_Out[1275] = \<const0> ;
  assign LOCKSTEP_Master_Out[1276] = \<const0> ;
  assign LOCKSTEP_Master_Out[1277] = \<const0> ;
  assign LOCKSTEP_Master_Out[1278] = \<const0> ;
  assign LOCKSTEP_Master_Out[1279] = \<const0> ;
  assign LOCKSTEP_Master_Out[1280] = \<const0> ;
  assign LOCKSTEP_Master_Out[1281] = \<const0> ;
  assign LOCKSTEP_Master_Out[1282] = \<const0> ;
  assign LOCKSTEP_Master_Out[1283] = \<const0> ;
  assign LOCKSTEP_Master_Out[1284] = \<const0> ;
  assign LOCKSTEP_Master_Out[1285] = \<const0> ;
  assign LOCKSTEP_Master_Out[1286] = \<const0> ;
  assign LOCKSTEP_Master_Out[1287] = \<const0> ;
  assign LOCKSTEP_Master_Out[1288] = \<const0> ;
  assign LOCKSTEP_Master_Out[1289] = \<const0> ;
  assign LOCKSTEP_Master_Out[1290] = \<const0> ;
  assign LOCKSTEP_Master_Out[1291] = \<const0> ;
  assign LOCKSTEP_Master_Out[1292] = \<const0> ;
  assign LOCKSTEP_Master_Out[1293] = \<const0> ;
  assign LOCKSTEP_Master_Out[1294] = \<const0> ;
  assign LOCKSTEP_Master_Out[1295] = \<const0> ;
  assign LOCKSTEP_Master_Out[1296] = \<const0> ;
  assign LOCKSTEP_Master_Out[1297] = \<const0> ;
  assign LOCKSTEP_Master_Out[1298] = \<const0> ;
  assign LOCKSTEP_Master_Out[1299] = \<const0> ;
  assign LOCKSTEP_Master_Out[1300] = \<const0> ;
  assign LOCKSTEP_Master_Out[1301] = \<const0> ;
  assign LOCKSTEP_Master_Out[1302] = \<const0> ;
  assign LOCKSTEP_Master_Out[1303] = \<const0> ;
  assign LOCKSTEP_Master_Out[1304] = \<const0> ;
  assign LOCKSTEP_Master_Out[1305] = \<const0> ;
  assign LOCKSTEP_Master_Out[1306] = \<const0> ;
  assign LOCKSTEP_Master_Out[1307] = \<const0> ;
  assign LOCKSTEP_Master_Out[1308] = \<const0> ;
  assign LOCKSTEP_Master_Out[1309] = \<const0> ;
  assign LOCKSTEP_Master_Out[1310] = \<const0> ;
  assign LOCKSTEP_Master_Out[1311] = \<const0> ;
  assign LOCKSTEP_Master_Out[1312] = \<const0> ;
  assign LOCKSTEP_Master_Out[1313] = \<const0> ;
  assign LOCKSTEP_Master_Out[1314] = \<const0> ;
  assign LOCKSTEP_Master_Out[1315] = \<const0> ;
  assign LOCKSTEP_Master_Out[1316] = \<const0> ;
  assign LOCKSTEP_Master_Out[1317] = \<const0> ;
  assign LOCKSTEP_Master_Out[1318] = \<const0> ;
  assign LOCKSTEP_Master_Out[1319] = \<const0> ;
  assign LOCKSTEP_Master_Out[1320] = \<const0> ;
  assign LOCKSTEP_Master_Out[1321] = \<const0> ;
  assign LOCKSTEP_Master_Out[1322] = \<const0> ;
  assign LOCKSTEP_Master_Out[1323] = \<const0> ;
  assign LOCKSTEP_Master_Out[1324] = \<const0> ;
  assign LOCKSTEP_Master_Out[1325] = \<const0> ;
  assign LOCKSTEP_Master_Out[1326] = \<const0> ;
  assign LOCKSTEP_Master_Out[1327] = \<const0> ;
  assign LOCKSTEP_Master_Out[1328] = \<const0> ;
  assign LOCKSTEP_Master_Out[1329] = \<const0> ;
  assign LOCKSTEP_Master_Out[1330] = \<const0> ;
  assign LOCKSTEP_Master_Out[1331] = \<const0> ;
  assign LOCKSTEP_Master_Out[1332] = \<const0> ;
  assign LOCKSTEP_Master_Out[1333] = \<const0> ;
  assign LOCKSTEP_Master_Out[1334] = \<const0> ;
  assign LOCKSTEP_Master_Out[1335] = \<const0> ;
  assign LOCKSTEP_Master_Out[1336] = \<const0> ;
  assign LOCKSTEP_Master_Out[1337] = \<const0> ;
  assign LOCKSTEP_Master_Out[1338] = \<const0> ;
  assign LOCKSTEP_Master_Out[1339] = \<const0> ;
  assign LOCKSTEP_Master_Out[1340] = \<const0> ;
  assign LOCKSTEP_Master_Out[1341] = \<const0> ;
  assign LOCKSTEP_Master_Out[1342] = \<const0> ;
  assign LOCKSTEP_Master_Out[1343] = \<const0> ;
  assign LOCKSTEP_Master_Out[1344] = \<const0> ;
  assign LOCKSTEP_Master_Out[1345] = \<const0> ;
  assign LOCKSTEP_Master_Out[1346] = \<const0> ;
  assign LOCKSTEP_Master_Out[1347] = \<const0> ;
  assign LOCKSTEP_Master_Out[1348] = \<const0> ;
  assign LOCKSTEP_Master_Out[1349] = \<const0> ;
  assign LOCKSTEP_Master_Out[1350] = \<const0> ;
  assign LOCKSTEP_Master_Out[1351] = \<const0> ;
  assign LOCKSTEP_Master_Out[1352] = \<const0> ;
  assign LOCKSTEP_Master_Out[1353] = \<const0> ;
  assign LOCKSTEP_Master_Out[1354] = \<const0> ;
  assign LOCKSTEP_Master_Out[1355] = \<const0> ;
  assign LOCKSTEP_Master_Out[1356] = \<const0> ;
  assign LOCKSTEP_Master_Out[1357] = \<const0> ;
  assign LOCKSTEP_Master_Out[1358] = \<const0> ;
  assign LOCKSTEP_Master_Out[1359] = \<const0> ;
  assign LOCKSTEP_Master_Out[1360] = \<const0> ;
  assign LOCKSTEP_Master_Out[1361] = \<const0> ;
  assign LOCKSTEP_Master_Out[1362] = \<const0> ;
  assign LOCKSTEP_Master_Out[1363] = \<const0> ;
  assign LOCKSTEP_Master_Out[1364] = \<const0> ;
  assign LOCKSTEP_Master_Out[1365] = \<const0> ;
  assign LOCKSTEP_Master_Out[1366] = \<const0> ;
  assign LOCKSTEP_Master_Out[1367] = \<const0> ;
  assign LOCKSTEP_Master_Out[1368] = \<const0> ;
  assign LOCKSTEP_Master_Out[1369] = \<const0> ;
  assign LOCKSTEP_Master_Out[1370] = \<const0> ;
  assign LOCKSTEP_Master_Out[1371] = \<const0> ;
  assign LOCKSTEP_Master_Out[1372] = \<const0> ;
  assign LOCKSTEP_Master_Out[1373] = \<const0> ;
  assign LOCKSTEP_Master_Out[1374] = \<const0> ;
  assign LOCKSTEP_Master_Out[1375] = \<const0> ;
  assign LOCKSTEP_Master_Out[1376] = \<const0> ;
  assign LOCKSTEP_Master_Out[1377] = \<const0> ;
  assign LOCKSTEP_Master_Out[1378] = \<const0> ;
  assign LOCKSTEP_Master_Out[1379] = \<const0> ;
  assign LOCKSTEP_Master_Out[1380] = \<const0> ;
  assign LOCKSTEP_Master_Out[1381] = \<const0> ;
  assign LOCKSTEP_Master_Out[1382] = \<const0> ;
  assign LOCKSTEP_Master_Out[1383] = \<const0> ;
  assign LOCKSTEP_Master_Out[1384] = \<const0> ;
  assign LOCKSTEP_Master_Out[1385] = \<const0> ;
  assign LOCKSTEP_Master_Out[1386] = \<const0> ;
  assign LOCKSTEP_Master_Out[1387] = \<const0> ;
  assign LOCKSTEP_Master_Out[1388] = \<const0> ;
  assign LOCKSTEP_Master_Out[1389] = \<const0> ;
  assign LOCKSTEP_Master_Out[1390] = \<const0> ;
  assign LOCKSTEP_Master_Out[1391] = \<const0> ;
  assign LOCKSTEP_Master_Out[1392] = \<const0> ;
  assign LOCKSTEP_Master_Out[1393] = \<const0> ;
  assign LOCKSTEP_Master_Out[1394] = \<const0> ;
  assign LOCKSTEP_Master_Out[1395] = \<const0> ;
  assign LOCKSTEP_Master_Out[1396] = \<const0> ;
  assign LOCKSTEP_Master_Out[1397] = \<const0> ;
  assign LOCKSTEP_Master_Out[1398] = \<const0> ;
  assign LOCKSTEP_Master_Out[1399] = \<const0> ;
  assign LOCKSTEP_Master_Out[1400] = \<const0> ;
  assign LOCKSTEP_Master_Out[1401] = \<const0> ;
  assign LOCKSTEP_Master_Out[1402] = \<const0> ;
  assign LOCKSTEP_Master_Out[1403] = \<const0> ;
  assign LOCKSTEP_Master_Out[1404] = \<const0> ;
  assign LOCKSTEP_Master_Out[1405] = \<const0> ;
  assign LOCKSTEP_Master_Out[1406] = \<const0> ;
  assign LOCKSTEP_Master_Out[1407] = \<const0> ;
  assign LOCKSTEP_Master_Out[1408] = \<const0> ;
  assign LOCKSTEP_Master_Out[1409] = \<const0> ;
  assign LOCKSTEP_Master_Out[1410] = \<const0> ;
  assign LOCKSTEP_Master_Out[1411] = \<const0> ;
  assign LOCKSTEP_Master_Out[1412] = \<const0> ;
  assign LOCKSTEP_Master_Out[1413] = \<const0> ;
  assign LOCKSTEP_Master_Out[1414] = \<const0> ;
  assign LOCKSTEP_Master_Out[1415] = \<const0> ;
  assign LOCKSTEP_Master_Out[1416] = \<const0> ;
  assign LOCKSTEP_Master_Out[1417] = \<const0> ;
  assign LOCKSTEP_Master_Out[1418] = \<const0> ;
  assign LOCKSTEP_Master_Out[1419] = \<const0> ;
  assign LOCKSTEP_Master_Out[1420] = \<const0> ;
  assign LOCKSTEP_Master_Out[1421] = \<const0> ;
  assign LOCKSTEP_Master_Out[1422] = \<const0> ;
  assign LOCKSTEP_Master_Out[1423] = \<const0> ;
  assign LOCKSTEP_Master_Out[1424] = \<const0> ;
  assign LOCKSTEP_Master_Out[1425] = \<const0> ;
  assign LOCKSTEP_Master_Out[1426] = \<const0> ;
  assign LOCKSTEP_Master_Out[1427] = \<const0> ;
  assign LOCKSTEP_Master_Out[1428] = \<const0> ;
  assign LOCKSTEP_Master_Out[1429] = \<const0> ;
  assign LOCKSTEP_Master_Out[1430] = \<const0> ;
  assign LOCKSTEP_Master_Out[1431] = \<const0> ;
  assign LOCKSTEP_Master_Out[1432] = \<const0> ;
  assign LOCKSTEP_Master_Out[1433] = \<const0> ;
  assign LOCKSTEP_Master_Out[1434] = \<const0> ;
  assign LOCKSTEP_Master_Out[1435] = \<const0> ;
  assign LOCKSTEP_Master_Out[1436] = \<const0> ;
  assign LOCKSTEP_Master_Out[1437] = \<const0> ;
  assign LOCKSTEP_Master_Out[1438] = \<const0> ;
  assign LOCKSTEP_Master_Out[1439] = \<const0> ;
  assign LOCKSTEP_Master_Out[1440] = \<const0> ;
  assign LOCKSTEP_Master_Out[1441] = \<const0> ;
  assign LOCKSTEP_Master_Out[1442] = \<const0> ;
  assign LOCKSTEP_Master_Out[1443] = \<const0> ;
  assign LOCKSTEP_Master_Out[1444] = \<const0> ;
  assign LOCKSTEP_Master_Out[1445] = \<const0> ;
  assign LOCKSTEP_Master_Out[1446] = \<const0> ;
  assign LOCKSTEP_Master_Out[1447] = \<const0> ;
  assign LOCKSTEP_Master_Out[1448] = \<const0> ;
  assign LOCKSTEP_Master_Out[1449] = \<const0> ;
  assign LOCKSTEP_Master_Out[1450] = \<const0> ;
  assign LOCKSTEP_Master_Out[1451] = \<const0> ;
  assign LOCKSTEP_Master_Out[1452] = \<const0> ;
  assign LOCKSTEP_Master_Out[1453] = \<const0> ;
  assign LOCKSTEP_Master_Out[1454] = \<const0> ;
  assign LOCKSTEP_Master_Out[1455] = \<const0> ;
  assign LOCKSTEP_Master_Out[1456] = \<const0> ;
  assign LOCKSTEP_Master_Out[1457] = \<const0> ;
  assign LOCKSTEP_Master_Out[1458] = \<const0> ;
  assign LOCKSTEP_Master_Out[1459] = \<const0> ;
  assign LOCKSTEP_Master_Out[1460] = \<const0> ;
  assign LOCKSTEP_Master_Out[1461] = \<const0> ;
  assign LOCKSTEP_Master_Out[1462] = \<const0> ;
  assign LOCKSTEP_Master_Out[1463] = \<const0> ;
  assign LOCKSTEP_Master_Out[1464] = \<const0> ;
  assign LOCKSTEP_Master_Out[1465] = \<const0> ;
  assign LOCKSTEP_Master_Out[1466] = \<const0> ;
  assign LOCKSTEP_Master_Out[1467] = \<const0> ;
  assign LOCKSTEP_Master_Out[1468] = \<const0> ;
  assign LOCKSTEP_Master_Out[1469] = \<const0> ;
  assign LOCKSTEP_Master_Out[1470] = \<const0> ;
  assign LOCKSTEP_Master_Out[1471] = \<const0> ;
  assign LOCKSTEP_Master_Out[1472] = \<const0> ;
  assign LOCKSTEP_Master_Out[1473] = \<const0> ;
  assign LOCKSTEP_Master_Out[1474] = \<const0> ;
  assign LOCKSTEP_Master_Out[1475] = \<const0> ;
  assign LOCKSTEP_Master_Out[1476] = \<const0> ;
  assign LOCKSTEP_Master_Out[1477] = \<const0> ;
  assign LOCKSTEP_Master_Out[1478] = \<const0> ;
  assign LOCKSTEP_Master_Out[1479] = \<const0> ;
  assign LOCKSTEP_Master_Out[1480] = \<const0> ;
  assign LOCKSTEP_Master_Out[1481] = \<const0> ;
  assign LOCKSTEP_Master_Out[1482] = \<const0> ;
  assign LOCKSTEP_Master_Out[1483] = \<const0> ;
  assign LOCKSTEP_Master_Out[1484] = \<const0> ;
  assign LOCKSTEP_Master_Out[1485] = \<const0> ;
  assign LOCKSTEP_Master_Out[1486] = \<const0> ;
  assign LOCKSTEP_Master_Out[1487] = \<const0> ;
  assign LOCKSTEP_Master_Out[1488] = \<const0> ;
  assign LOCKSTEP_Master_Out[1489] = \<const0> ;
  assign LOCKSTEP_Master_Out[1490] = \<const0> ;
  assign LOCKSTEP_Master_Out[1491] = \<const0> ;
  assign LOCKSTEP_Master_Out[1492] = \<const0> ;
  assign LOCKSTEP_Master_Out[1493] = \<const0> ;
  assign LOCKSTEP_Master_Out[1494] = \<const0> ;
  assign LOCKSTEP_Master_Out[1495] = \<const0> ;
  assign LOCKSTEP_Master_Out[1496] = \<const0> ;
  assign LOCKSTEP_Master_Out[1497] = \<const0> ;
  assign LOCKSTEP_Master_Out[1498] = \<const0> ;
  assign LOCKSTEP_Master_Out[1499] = \<const0> ;
  assign LOCKSTEP_Master_Out[1500] = \<const0> ;
  assign LOCKSTEP_Master_Out[1501] = \<const0> ;
  assign LOCKSTEP_Master_Out[1502] = \<const0> ;
  assign LOCKSTEP_Master_Out[1503] = \<const0> ;
  assign LOCKSTEP_Master_Out[1504] = \<const0> ;
  assign LOCKSTEP_Master_Out[1505] = \<const0> ;
  assign LOCKSTEP_Master_Out[1506] = \<const0> ;
  assign LOCKSTEP_Master_Out[1507] = \<const0> ;
  assign LOCKSTEP_Master_Out[1508] = \<const0> ;
  assign LOCKSTEP_Master_Out[1509] = \<const0> ;
  assign LOCKSTEP_Master_Out[1510] = \<const0> ;
  assign LOCKSTEP_Master_Out[1511] = \<const0> ;
  assign LOCKSTEP_Master_Out[1512] = \<const0> ;
  assign LOCKSTEP_Master_Out[1513] = \<const0> ;
  assign LOCKSTEP_Master_Out[1514] = \<const0> ;
  assign LOCKSTEP_Master_Out[1515] = \<const0> ;
  assign LOCKSTEP_Master_Out[1516] = \<const0> ;
  assign LOCKSTEP_Master_Out[1517] = \<const0> ;
  assign LOCKSTEP_Master_Out[1518] = \<const0> ;
  assign LOCKSTEP_Master_Out[1519] = \<const0> ;
  assign LOCKSTEP_Master_Out[1520] = \<const0> ;
  assign LOCKSTEP_Master_Out[1521] = \<const0> ;
  assign LOCKSTEP_Master_Out[1522] = \<const0> ;
  assign LOCKSTEP_Master_Out[1523] = \<const0> ;
  assign LOCKSTEP_Master_Out[1524] = \<const0> ;
  assign LOCKSTEP_Master_Out[1525] = \<const0> ;
  assign LOCKSTEP_Master_Out[1526] = \<const0> ;
  assign LOCKSTEP_Master_Out[1527] = \<const0> ;
  assign LOCKSTEP_Master_Out[1528] = \<const0> ;
  assign LOCKSTEP_Master_Out[1529] = \<const0> ;
  assign LOCKSTEP_Master_Out[1530] = \<const0> ;
  assign LOCKSTEP_Master_Out[1531] = \<const0> ;
  assign LOCKSTEP_Master_Out[1532] = \<const0> ;
  assign LOCKSTEP_Master_Out[1533] = \<const0> ;
  assign LOCKSTEP_Master_Out[1534] = \<const0> ;
  assign LOCKSTEP_Master_Out[1535] = \<const0> ;
  assign LOCKSTEP_Master_Out[1536] = \<const0> ;
  assign LOCKSTEP_Master_Out[1537] = \<const0> ;
  assign LOCKSTEP_Master_Out[1538] = \<const0> ;
  assign LOCKSTEP_Master_Out[1539] = \<const0> ;
  assign LOCKSTEP_Master_Out[1540] = \<const0> ;
  assign LOCKSTEP_Master_Out[1541] = \<const0> ;
  assign LOCKSTEP_Master_Out[1542] = \<const0> ;
  assign LOCKSTEP_Master_Out[1543] = \<const0> ;
  assign LOCKSTEP_Master_Out[1544] = \<const0> ;
  assign LOCKSTEP_Master_Out[1545] = \<const0> ;
  assign LOCKSTEP_Master_Out[1546] = \<const0> ;
  assign LOCKSTEP_Master_Out[1547] = \<const0> ;
  assign LOCKSTEP_Master_Out[1548] = \<const0> ;
  assign LOCKSTEP_Master_Out[1549] = \<const0> ;
  assign LOCKSTEP_Master_Out[1550] = \<const0> ;
  assign LOCKSTEP_Master_Out[1551] = \<const0> ;
  assign LOCKSTEP_Master_Out[1552] = \<const0> ;
  assign LOCKSTEP_Master_Out[1553] = \<const0> ;
  assign LOCKSTEP_Master_Out[1554] = \<const0> ;
  assign LOCKSTEP_Master_Out[1555] = \<const0> ;
  assign LOCKSTEP_Master_Out[1556] = \<const0> ;
  assign LOCKSTEP_Master_Out[1557] = \<const0> ;
  assign LOCKSTEP_Master_Out[1558] = \<const0> ;
  assign LOCKSTEP_Master_Out[1559] = \<const0> ;
  assign LOCKSTEP_Master_Out[1560] = \<const0> ;
  assign LOCKSTEP_Master_Out[1561] = \<const0> ;
  assign LOCKSTEP_Master_Out[1562] = \<const0> ;
  assign LOCKSTEP_Master_Out[1563] = \<const0> ;
  assign LOCKSTEP_Master_Out[1564] = \<const0> ;
  assign LOCKSTEP_Master_Out[1565] = \<const0> ;
  assign LOCKSTEP_Master_Out[1566] = \<const0> ;
  assign LOCKSTEP_Master_Out[1567] = \<const0> ;
  assign LOCKSTEP_Master_Out[1568] = \<const0> ;
  assign LOCKSTEP_Master_Out[1569] = \<const0> ;
  assign LOCKSTEP_Master_Out[1570] = \<const0> ;
  assign LOCKSTEP_Master_Out[1571] = \<const0> ;
  assign LOCKSTEP_Master_Out[1572] = \<const0> ;
  assign LOCKSTEP_Master_Out[1573] = \<const0> ;
  assign LOCKSTEP_Master_Out[1574] = \<const0> ;
  assign LOCKSTEP_Master_Out[1575] = \<const0> ;
  assign LOCKSTEP_Master_Out[1576] = \<const0> ;
  assign LOCKSTEP_Master_Out[1577] = \<const0> ;
  assign LOCKSTEP_Master_Out[1578] = \<const0> ;
  assign LOCKSTEP_Master_Out[1579] = \<const0> ;
  assign LOCKSTEP_Master_Out[1580] = \<const0> ;
  assign LOCKSTEP_Master_Out[1581] = \<const0> ;
  assign LOCKSTEP_Master_Out[1582] = \<const0> ;
  assign LOCKSTEP_Master_Out[1583] = \<const0> ;
  assign LOCKSTEP_Master_Out[1584] = \<const0> ;
  assign LOCKSTEP_Master_Out[1585] = \<const0> ;
  assign LOCKSTEP_Master_Out[1586] = \<const0> ;
  assign LOCKSTEP_Master_Out[1587] = \<const0> ;
  assign LOCKSTEP_Master_Out[1588] = \<const0> ;
  assign LOCKSTEP_Master_Out[1589] = \<const0> ;
  assign LOCKSTEP_Master_Out[1590] = \<const0> ;
  assign LOCKSTEP_Master_Out[1591] = \<const0> ;
  assign LOCKSTEP_Master_Out[1592] = \<const0> ;
  assign LOCKSTEP_Master_Out[1593] = \<const0> ;
  assign LOCKSTEP_Master_Out[1594] = \<const0> ;
  assign LOCKSTEP_Master_Out[1595] = \<const0> ;
  assign LOCKSTEP_Master_Out[1596] = \<const0> ;
  assign LOCKSTEP_Master_Out[1597] = \<const0> ;
  assign LOCKSTEP_Master_Out[1598] = \<const0> ;
  assign LOCKSTEP_Master_Out[1599] = \<const0> ;
  assign LOCKSTEP_Master_Out[1600] = \<const0> ;
  assign LOCKSTEP_Master_Out[1601] = \<const0> ;
  assign LOCKSTEP_Master_Out[1602] = \<const0> ;
  assign LOCKSTEP_Master_Out[1603] = \<const0> ;
  assign LOCKSTEP_Master_Out[1604] = \<const0> ;
  assign LOCKSTEP_Master_Out[1605] = \<const0> ;
  assign LOCKSTEP_Master_Out[1606] = \<const0> ;
  assign LOCKSTEP_Master_Out[1607] = \<const0> ;
  assign LOCKSTEP_Master_Out[1608] = \<const0> ;
  assign LOCKSTEP_Master_Out[1609] = \<const0> ;
  assign LOCKSTEP_Master_Out[1610] = \<const0> ;
  assign LOCKSTEP_Master_Out[1611] = \<const0> ;
  assign LOCKSTEP_Master_Out[1612] = \<const0> ;
  assign LOCKSTEP_Master_Out[1613] = \<const0> ;
  assign LOCKSTEP_Master_Out[1614] = \<const0> ;
  assign LOCKSTEP_Master_Out[1615] = \<const0> ;
  assign LOCKSTEP_Master_Out[1616] = \<const0> ;
  assign LOCKSTEP_Master_Out[1617] = \<const0> ;
  assign LOCKSTEP_Master_Out[1618] = \<const0> ;
  assign LOCKSTEP_Master_Out[1619] = \<const0> ;
  assign LOCKSTEP_Master_Out[1620] = \<const0> ;
  assign LOCKSTEP_Master_Out[1621] = \<const0> ;
  assign LOCKSTEP_Master_Out[1622] = \<const0> ;
  assign LOCKSTEP_Master_Out[1623] = \<const0> ;
  assign LOCKSTEP_Master_Out[1624] = \<const0> ;
  assign LOCKSTEP_Master_Out[1625] = \<const0> ;
  assign LOCKSTEP_Master_Out[1626] = \<const0> ;
  assign LOCKSTEP_Master_Out[1627] = \<const0> ;
  assign LOCKSTEP_Master_Out[1628] = \<const0> ;
  assign LOCKSTEP_Master_Out[1629] = \<const0> ;
  assign LOCKSTEP_Master_Out[1630] = \<const0> ;
  assign LOCKSTEP_Master_Out[1631] = \<const0> ;
  assign LOCKSTEP_Master_Out[1632] = \<const0> ;
  assign LOCKSTEP_Master_Out[1633] = \<const0> ;
  assign LOCKSTEP_Master_Out[1634] = \<const0> ;
  assign LOCKSTEP_Master_Out[1635] = \<const0> ;
  assign LOCKSTEP_Master_Out[1636] = \<const0> ;
  assign LOCKSTEP_Master_Out[1637] = \<const0> ;
  assign LOCKSTEP_Master_Out[1638] = \<const0> ;
  assign LOCKSTEP_Master_Out[1639] = \<const0> ;
  assign LOCKSTEP_Master_Out[1640] = \<const0> ;
  assign LOCKSTEP_Master_Out[1641] = \<const0> ;
  assign LOCKSTEP_Master_Out[1642] = \<const0> ;
  assign LOCKSTEP_Master_Out[1643] = \<const0> ;
  assign LOCKSTEP_Master_Out[1644] = \<const0> ;
  assign LOCKSTEP_Master_Out[1645] = \<const0> ;
  assign LOCKSTEP_Master_Out[1646] = \<const0> ;
  assign LOCKSTEP_Master_Out[1647] = \<const0> ;
  assign LOCKSTEP_Master_Out[1648] = \<const0> ;
  assign LOCKSTEP_Master_Out[1649] = \<const0> ;
  assign LOCKSTEP_Master_Out[1650] = \<const0> ;
  assign LOCKSTEP_Master_Out[1651] = \<const0> ;
  assign LOCKSTEP_Master_Out[1652] = \<const0> ;
  assign LOCKSTEP_Master_Out[1653] = \<const0> ;
  assign LOCKSTEP_Master_Out[1654] = \<const0> ;
  assign LOCKSTEP_Master_Out[1655] = \<const0> ;
  assign LOCKSTEP_Master_Out[1656] = \<const0> ;
  assign LOCKSTEP_Master_Out[1657] = \<const0> ;
  assign LOCKSTEP_Master_Out[1658] = \<const0> ;
  assign LOCKSTEP_Master_Out[1659] = \<const0> ;
  assign LOCKSTEP_Master_Out[1660] = \<const0> ;
  assign LOCKSTEP_Master_Out[1661] = \<const0> ;
  assign LOCKSTEP_Master_Out[1662] = \<const0> ;
  assign LOCKSTEP_Master_Out[1663] = \<const0> ;
  assign LOCKSTEP_Master_Out[1664] = \<const0> ;
  assign LOCKSTEP_Master_Out[1665] = \<const0> ;
  assign LOCKSTEP_Master_Out[1666] = \<const0> ;
  assign LOCKSTEP_Master_Out[1667] = \<const0> ;
  assign LOCKSTEP_Master_Out[1668] = \<const0> ;
  assign LOCKSTEP_Master_Out[1669] = \<const0> ;
  assign LOCKSTEP_Master_Out[1670] = \<const0> ;
  assign LOCKSTEP_Master_Out[1671] = \<const0> ;
  assign LOCKSTEP_Master_Out[1672] = \<const0> ;
  assign LOCKSTEP_Master_Out[1673] = \<const0> ;
  assign LOCKSTEP_Master_Out[1674] = \<const0> ;
  assign LOCKSTEP_Master_Out[1675] = \<const0> ;
  assign LOCKSTEP_Master_Out[1676] = \<const0> ;
  assign LOCKSTEP_Master_Out[1677] = \<const0> ;
  assign LOCKSTEP_Master_Out[1678] = \<const0> ;
  assign LOCKSTEP_Master_Out[1679] = \<const0> ;
  assign LOCKSTEP_Master_Out[1680] = \<const0> ;
  assign LOCKSTEP_Master_Out[1681] = \<const0> ;
  assign LOCKSTEP_Master_Out[1682] = \<const0> ;
  assign LOCKSTEP_Master_Out[1683] = \<const0> ;
  assign LOCKSTEP_Master_Out[1684] = \<const0> ;
  assign LOCKSTEP_Master_Out[1685] = \<const0> ;
  assign LOCKSTEP_Master_Out[1686] = \<const0> ;
  assign LOCKSTEP_Master_Out[1687] = \<const0> ;
  assign LOCKSTEP_Master_Out[1688] = \<const0> ;
  assign LOCKSTEP_Master_Out[1689] = \<const0> ;
  assign LOCKSTEP_Master_Out[1690] = \<const0> ;
  assign LOCKSTEP_Master_Out[1691] = \<const0> ;
  assign LOCKSTEP_Master_Out[1692] = \<const0> ;
  assign LOCKSTEP_Master_Out[1693] = \<const0> ;
  assign LOCKSTEP_Master_Out[1694] = \<const0> ;
  assign LOCKSTEP_Master_Out[1695] = \<const0> ;
  assign LOCKSTEP_Master_Out[1696] = \<const0> ;
  assign LOCKSTEP_Master_Out[1697] = \<const0> ;
  assign LOCKSTEP_Master_Out[1698] = \<const0> ;
  assign LOCKSTEP_Master_Out[1699] = \<const0> ;
  assign LOCKSTEP_Master_Out[1700] = \<const0> ;
  assign LOCKSTEP_Master_Out[1701] = \<const0> ;
  assign LOCKSTEP_Master_Out[1702] = \<const0> ;
  assign LOCKSTEP_Master_Out[1703] = \<const0> ;
  assign LOCKSTEP_Master_Out[1704] = \<const0> ;
  assign LOCKSTEP_Master_Out[1705] = \<const0> ;
  assign LOCKSTEP_Master_Out[1706] = \<const0> ;
  assign LOCKSTEP_Master_Out[1707] = \<const0> ;
  assign LOCKSTEP_Master_Out[1708] = \<const0> ;
  assign LOCKSTEP_Master_Out[1709] = \<const0> ;
  assign LOCKSTEP_Master_Out[1710] = \<const0> ;
  assign LOCKSTEP_Master_Out[1711] = \<const0> ;
  assign LOCKSTEP_Master_Out[1712] = \<const0> ;
  assign LOCKSTEP_Master_Out[1713] = \<const0> ;
  assign LOCKSTEP_Master_Out[1714] = \<const0> ;
  assign LOCKSTEP_Master_Out[1715] = \<const0> ;
  assign LOCKSTEP_Master_Out[1716] = \<const0> ;
  assign LOCKSTEP_Master_Out[1717] = \<const0> ;
  assign LOCKSTEP_Master_Out[1718] = \<const0> ;
  assign LOCKSTEP_Master_Out[1719] = \<const0> ;
  assign LOCKSTEP_Master_Out[1720] = \<const0> ;
  assign LOCKSTEP_Master_Out[1721] = \<const0> ;
  assign LOCKSTEP_Master_Out[1722] = \<const0> ;
  assign LOCKSTEP_Master_Out[1723] = \<const0> ;
  assign LOCKSTEP_Master_Out[1724] = \<const0> ;
  assign LOCKSTEP_Master_Out[1725] = \<const0> ;
  assign LOCKSTEP_Master_Out[1726] = \<const0> ;
  assign LOCKSTEP_Master_Out[1727] = \<const0> ;
  assign LOCKSTEP_Master_Out[1728] = \<const0> ;
  assign LOCKSTEP_Master_Out[1729] = \<const0> ;
  assign LOCKSTEP_Master_Out[1730] = \<const0> ;
  assign LOCKSTEP_Master_Out[1731] = \<const0> ;
  assign LOCKSTEP_Master_Out[1732] = \<const0> ;
  assign LOCKSTEP_Master_Out[1733] = \<const0> ;
  assign LOCKSTEP_Master_Out[1734] = \<const0> ;
  assign LOCKSTEP_Master_Out[1735] = \<const0> ;
  assign LOCKSTEP_Master_Out[1736] = \<const0> ;
  assign LOCKSTEP_Master_Out[1737] = \<const0> ;
  assign LOCKSTEP_Master_Out[1738] = \<const0> ;
  assign LOCKSTEP_Master_Out[1739] = \<const0> ;
  assign LOCKSTEP_Master_Out[1740] = \<const0> ;
  assign LOCKSTEP_Master_Out[1741] = \<const0> ;
  assign LOCKSTEP_Master_Out[1742] = \<const0> ;
  assign LOCKSTEP_Master_Out[1743] = \<const0> ;
  assign LOCKSTEP_Master_Out[1744] = \<const0> ;
  assign LOCKSTEP_Master_Out[1745] = \<const0> ;
  assign LOCKSTEP_Master_Out[1746] = \<const0> ;
  assign LOCKSTEP_Master_Out[1747] = \<const0> ;
  assign LOCKSTEP_Master_Out[1748] = \<const0> ;
  assign LOCKSTEP_Master_Out[1749] = \<const0> ;
  assign LOCKSTEP_Master_Out[1750] = \<const0> ;
  assign LOCKSTEP_Master_Out[1751] = \<const0> ;
  assign LOCKSTEP_Master_Out[1752] = \<const0> ;
  assign LOCKSTEP_Master_Out[1753] = \<const0> ;
  assign LOCKSTEP_Master_Out[1754] = \<const0> ;
  assign LOCKSTEP_Master_Out[1755] = \<const0> ;
  assign LOCKSTEP_Master_Out[1756] = \<const0> ;
  assign LOCKSTEP_Master_Out[1757] = \<const0> ;
  assign LOCKSTEP_Master_Out[1758] = \<const0> ;
  assign LOCKSTEP_Master_Out[1759] = \<const0> ;
  assign LOCKSTEP_Master_Out[1760] = \<const0> ;
  assign LOCKSTEP_Master_Out[1761] = \<const0> ;
  assign LOCKSTEP_Master_Out[1762] = \<const0> ;
  assign LOCKSTEP_Master_Out[1763] = \<const0> ;
  assign LOCKSTEP_Master_Out[1764] = \<const0> ;
  assign LOCKSTEP_Master_Out[1765] = \<const0> ;
  assign LOCKSTEP_Master_Out[1766] = \<const0> ;
  assign LOCKSTEP_Master_Out[1767] = \<const0> ;
  assign LOCKSTEP_Master_Out[1768] = \<const0> ;
  assign LOCKSTEP_Master_Out[1769] = \<const0> ;
  assign LOCKSTEP_Master_Out[1770] = \<const0> ;
  assign LOCKSTEP_Master_Out[1771] = \<const0> ;
  assign LOCKSTEP_Master_Out[1772] = \<const0> ;
  assign LOCKSTEP_Master_Out[1773] = \<const0> ;
  assign LOCKSTEP_Master_Out[1774] = \<const0> ;
  assign LOCKSTEP_Master_Out[1775] = \<const0> ;
  assign LOCKSTEP_Master_Out[1776] = \<const0> ;
  assign LOCKSTEP_Master_Out[1777] = \<const0> ;
  assign LOCKSTEP_Master_Out[1778] = \<const0> ;
  assign LOCKSTEP_Master_Out[1779] = \<const0> ;
  assign LOCKSTEP_Master_Out[1780] = \<const0> ;
  assign LOCKSTEP_Master_Out[1781] = \<const0> ;
  assign LOCKSTEP_Master_Out[1782] = \<const0> ;
  assign LOCKSTEP_Master_Out[1783] = \<const0> ;
  assign LOCKSTEP_Master_Out[1784] = \<const0> ;
  assign LOCKSTEP_Master_Out[1785] = \<const0> ;
  assign LOCKSTEP_Master_Out[1786] = \<const0> ;
  assign LOCKSTEP_Master_Out[1787] = \<const0> ;
  assign LOCKSTEP_Master_Out[1788] = \<const0> ;
  assign LOCKSTEP_Master_Out[1789] = \<const0> ;
  assign LOCKSTEP_Master_Out[1790] = \<const0> ;
  assign LOCKSTEP_Master_Out[1791] = \<const0> ;
  assign LOCKSTEP_Master_Out[1792] = \<const0> ;
  assign LOCKSTEP_Master_Out[1793] = \<const0> ;
  assign LOCKSTEP_Master_Out[1794] = \<const0> ;
  assign LOCKSTEP_Master_Out[1795] = \<const0> ;
  assign LOCKSTEP_Master_Out[1796] = \<const0> ;
  assign LOCKSTEP_Master_Out[1797] = \<const0> ;
  assign LOCKSTEP_Master_Out[1798] = \<const0> ;
  assign LOCKSTEP_Master_Out[1799] = \<const0> ;
  assign LOCKSTEP_Master_Out[1800] = \<const0> ;
  assign LOCKSTEP_Master_Out[1801] = \<const0> ;
  assign LOCKSTEP_Master_Out[1802] = \<const0> ;
  assign LOCKSTEP_Master_Out[1803] = \<const0> ;
  assign LOCKSTEP_Master_Out[1804] = \<const0> ;
  assign LOCKSTEP_Master_Out[1805] = \<const0> ;
  assign LOCKSTEP_Master_Out[1806] = \<const0> ;
  assign LOCKSTEP_Master_Out[1807] = \<const0> ;
  assign LOCKSTEP_Master_Out[1808] = \<const0> ;
  assign LOCKSTEP_Master_Out[1809] = \<const0> ;
  assign LOCKSTEP_Master_Out[1810] = \<const0> ;
  assign LOCKSTEP_Master_Out[1811] = \<const0> ;
  assign LOCKSTEP_Master_Out[1812] = \<const0> ;
  assign LOCKSTEP_Master_Out[1813] = \<const0> ;
  assign LOCKSTEP_Master_Out[1814] = \<const0> ;
  assign LOCKSTEP_Master_Out[1815] = \<const0> ;
  assign LOCKSTEP_Master_Out[1816] = \<const0> ;
  assign LOCKSTEP_Master_Out[1817] = \<const0> ;
  assign LOCKSTEP_Master_Out[1818] = \<const0> ;
  assign LOCKSTEP_Master_Out[1819] = \<const0> ;
  assign LOCKSTEP_Master_Out[1820] = \<const0> ;
  assign LOCKSTEP_Master_Out[1821] = \<const0> ;
  assign LOCKSTEP_Master_Out[1822] = \<const0> ;
  assign LOCKSTEP_Master_Out[1823] = \<const0> ;
  assign LOCKSTEP_Master_Out[1824] = \<const0> ;
  assign LOCKSTEP_Master_Out[1825] = \<const0> ;
  assign LOCKSTEP_Master_Out[1826] = \<const0> ;
  assign LOCKSTEP_Master_Out[1827] = \<const0> ;
  assign LOCKSTEP_Master_Out[1828] = \<const0> ;
  assign LOCKSTEP_Master_Out[1829] = \<const0> ;
  assign LOCKSTEP_Master_Out[1830] = \<const0> ;
  assign LOCKSTEP_Master_Out[1831] = \<const0> ;
  assign LOCKSTEP_Master_Out[1832] = \<const0> ;
  assign LOCKSTEP_Master_Out[1833] = \<const0> ;
  assign LOCKSTEP_Master_Out[1834] = \<const0> ;
  assign LOCKSTEP_Master_Out[1835] = \<const0> ;
  assign LOCKSTEP_Master_Out[1836] = \<const0> ;
  assign LOCKSTEP_Master_Out[1837] = \<const0> ;
  assign LOCKSTEP_Master_Out[1838] = \<const0> ;
  assign LOCKSTEP_Master_Out[1839] = \<const0> ;
  assign LOCKSTEP_Master_Out[1840] = \<const0> ;
  assign LOCKSTEP_Master_Out[1841] = \<const0> ;
  assign LOCKSTEP_Master_Out[1842] = \<const0> ;
  assign LOCKSTEP_Master_Out[1843] = \<const0> ;
  assign LOCKSTEP_Master_Out[1844] = \<const0> ;
  assign LOCKSTEP_Master_Out[1845] = \<const0> ;
  assign LOCKSTEP_Master_Out[1846] = \<const0> ;
  assign LOCKSTEP_Master_Out[1847] = \<const0> ;
  assign LOCKSTEP_Master_Out[1848] = \<const0> ;
  assign LOCKSTEP_Master_Out[1849] = \<const0> ;
  assign LOCKSTEP_Master_Out[1850] = \<const0> ;
  assign LOCKSTEP_Master_Out[1851] = \<const0> ;
  assign LOCKSTEP_Master_Out[1852] = \<const0> ;
  assign LOCKSTEP_Master_Out[1853] = \<const0> ;
  assign LOCKSTEP_Master_Out[1854] = \<const0> ;
  assign LOCKSTEP_Master_Out[1855] = \<const0> ;
  assign LOCKSTEP_Master_Out[1856] = \<const0> ;
  assign LOCKSTEP_Master_Out[1857] = \<const0> ;
  assign LOCKSTEP_Master_Out[1858] = \<const0> ;
  assign LOCKSTEP_Master_Out[1859] = \<const0> ;
  assign LOCKSTEP_Master_Out[1860] = \<const0> ;
  assign LOCKSTEP_Master_Out[1861] = \<const0> ;
  assign LOCKSTEP_Master_Out[1862] = \<const0> ;
  assign LOCKSTEP_Master_Out[1863] = \<const0> ;
  assign LOCKSTEP_Master_Out[1864] = \<const0> ;
  assign LOCKSTEP_Master_Out[1865] = \<const0> ;
  assign LOCKSTEP_Master_Out[1866] = \<const0> ;
  assign LOCKSTEP_Master_Out[1867] = \<const0> ;
  assign LOCKSTEP_Master_Out[1868] = \<const0> ;
  assign LOCKSTEP_Master_Out[1869] = \<const0> ;
  assign LOCKSTEP_Master_Out[1870] = \<const0> ;
  assign LOCKSTEP_Master_Out[1871] = \<const0> ;
  assign LOCKSTEP_Master_Out[1872] = \<const0> ;
  assign LOCKSTEP_Master_Out[1873] = \<const0> ;
  assign LOCKSTEP_Master_Out[1874] = \<const0> ;
  assign LOCKSTEP_Master_Out[1875] = \<const0> ;
  assign LOCKSTEP_Master_Out[1876] = \<const0> ;
  assign LOCKSTEP_Master_Out[1877] = \<const0> ;
  assign LOCKSTEP_Master_Out[1878] = \<const0> ;
  assign LOCKSTEP_Master_Out[1879] = \<const0> ;
  assign LOCKSTEP_Master_Out[1880] = \<const0> ;
  assign LOCKSTEP_Master_Out[1881] = \<const0> ;
  assign LOCKSTEP_Master_Out[1882] = \<const0> ;
  assign LOCKSTEP_Master_Out[1883] = \<const0> ;
  assign LOCKSTEP_Master_Out[1884] = \<const0> ;
  assign LOCKSTEP_Master_Out[1885] = \<const0> ;
  assign LOCKSTEP_Master_Out[1886] = \<const0> ;
  assign LOCKSTEP_Master_Out[1887] = \<const0> ;
  assign LOCKSTEP_Master_Out[1888] = \<const0> ;
  assign LOCKSTEP_Master_Out[1889] = \<const0> ;
  assign LOCKSTEP_Master_Out[1890] = \<const0> ;
  assign LOCKSTEP_Master_Out[1891] = \<const0> ;
  assign LOCKSTEP_Master_Out[1892] = \<const0> ;
  assign LOCKSTEP_Master_Out[1893] = \<const0> ;
  assign LOCKSTEP_Master_Out[1894] = \<const0> ;
  assign LOCKSTEP_Master_Out[1895] = \<const0> ;
  assign LOCKSTEP_Master_Out[1896] = \<const0> ;
  assign LOCKSTEP_Master_Out[1897] = \<const0> ;
  assign LOCKSTEP_Master_Out[1898] = \<const0> ;
  assign LOCKSTEP_Master_Out[1899] = \<const0> ;
  assign LOCKSTEP_Master_Out[1900] = \<const0> ;
  assign LOCKSTEP_Master_Out[1901] = \<const0> ;
  assign LOCKSTEP_Master_Out[1902] = \<const0> ;
  assign LOCKSTEP_Master_Out[1903] = \<const0> ;
  assign LOCKSTEP_Master_Out[1904] = \<const0> ;
  assign LOCKSTEP_Master_Out[1905] = \<const0> ;
  assign LOCKSTEP_Master_Out[1906] = \<const0> ;
  assign LOCKSTEP_Master_Out[1907] = \<const0> ;
  assign LOCKSTEP_Master_Out[1908] = \<const0> ;
  assign LOCKSTEP_Master_Out[1909] = \<const0> ;
  assign LOCKSTEP_Master_Out[1910] = \<const0> ;
  assign LOCKSTEP_Master_Out[1911] = \<const0> ;
  assign LOCKSTEP_Master_Out[1912] = \<const0> ;
  assign LOCKSTEP_Master_Out[1913] = \<const0> ;
  assign LOCKSTEP_Master_Out[1914] = \<const0> ;
  assign LOCKSTEP_Master_Out[1915] = \<const0> ;
  assign LOCKSTEP_Master_Out[1916] = \<const0> ;
  assign LOCKSTEP_Master_Out[1917] = \<const0> ;
  assign LOCKSTEP_Master_Out[1918] = \<const0> ;
  assign LOCKSTEP_Master_Out[1919] = \<const0> ;
  assign LOCKSTEP_Master_Out[1920] = \<const0> ;
  assign LOCKSTEP_Master_Out[1921] = \<const0> ;
  assign LOCKSTEP_Master_Out[1922] = \<const0> ;
  assign LOCKSTEP_Master_Out[1923] = \<const0> ;
  assign LOCKSTEP_Master_Out[1924] = \<const0> ;
  assign LOCKSTEP_Master_Out[1925] = \<const0> ;
  assign LOCKSTEP_Master_Out[1926] = \<const0> ;
  assign LOCKSTEP_Master_Out[1927] = \<const0> ;
  assign LOCKSTEP_Master_Out[1928] = \<const0> ;
  assign LOCKSTEP_Master_Out[1929] = \<const0> ;
  assign LOCKSTEP_Master_Out[1930] = \<const0> ;
  assign LOCKSTEP_Master_Out[1931] = \<const0> ;
  assign LOCKSTEP_Master_Out[1932] = \<const0> ;
  assign LOCKSTEP_Master_Out[1933] = \<const0> ;
  assign LOCKSTEP_Master_Out[1934] = \<const0> ;
  assign LOCKSTEP_Master_Out[1935] = \<const0> ;
  assign LOCKSTEP_Master_Out[1936] = \<const0> ;
  assign LOCKSTEP_Master_Out[1937] = \<const0> ;
  assign LOCKSTEP_Master_Out[1938] = \<const0> ;
  assign LOCKSTEP_Master_Out[1939] = \<const0> ;
  assign LOCKSTEP_Master_Out[1940] = \<const0> ;
  assign LOCKSTEP_Master_Out[1941] = \<const0> ;
  assign LOCKSTEP_Master_Out[1942] = \<const0> ;
  assign LOCKSTEP_Master_Out[1943] = \<const0> ;
  assign LOCKSTEP_Master_Out[1944] = \<const0> ;
  assign LOCKSTEP_Master_Out[1945] = \<const0> ;
  assign LOCKSTEP_Master_Out[1946] = \<const0> ;
  assign LOCKSTEP_Master_Out[1947] = \<const0> ;
  assign LOCKSTEP_Master_Out[1948] = \<const0> ;
  assign LOCKSTEP_Master_Out[1949] = \<const0> ;
  assign LOCKSTEP_Master_Out[1950] = \<const0> ;
  assign LOCKSTEP_Master_Out[1951] = \<const0> ;
  assign LOCKSTEP_Master_Out[1952] = \<const0> ;
  assign LOCKSTEP_Master_Out[1953] = \<const0> ;
  assign LOCKSTEP_Master_Out[1954] = \<const0> ;
  assign LOCKSTEP_Master_Out[1955] = \<const0> ;
  assign LOCKSTEP_Master_Out[1956] = \<const0> ;
  assign LOCKSTEP_Master_Out[1957] = \<const0> ;
  assign LOCKSTEP_Master_Out[1958] = \<const0> ;
  assign LOCKSTEP_Master_Out[1959] = \<const0> ;
  assign LOCKSTEP_Master_Out[1960] = \<const0> ;
  assign LOCKSTEP_Master_Out[1961] = \<const0> ;
  assign LOCKSTEP_Master_Out[1962] = \<const0> ;
  assign LOCKSTEP_Master_Out[1963] = \<const0> ;
  assign LOCKSTEP_Master_Out[1964] = \<const0> ;
  assign LOCKSTEP_Master_Out[1965] = \<const0> ;
  assign LOCKSTEP_Master_Out[1966] = \<const0> ;
  assign LOCKSTEP_Master_Out[1967] = \<const0> ;
  assign LOCKSTEP_Master_Out[1968] = \<const0> ;
  assign LOCKSTEP_Master_Out[1969] = \<const0> ;
  assign LOCKSTEP_Master_Out[1970] = \<const0> ;
  assign LOCKSTEP_Master_Out[1971] = \<const0> ;
  assign LOCKSTEP_Master_Out[1972] = \<const0> ;
  assign LOCKSTEP_Master_Out[1973] = \<const0> ;
  assign LOCKSTEP_Master_Out[1974] = \<const0> ;
  assign LOCKSTEP_Master_Out[1975] = \<const0> ;
  assign LOCKSTEP_Master_Out[1976] = \<const0> ;
  assign LOCKSTEP_Master_Out[1977] = \<const0> ;
  assign LOCKSTEP_Master_Out[1978] = \<const0> ;
  assign LOCKSTEP_Master_Out[1979] = \<const0> ;
  assign LOCKSTEP_Master_Out[1980] = \<const0> ;
  assign LOCKSTEP_Master_Out[1981] = \<const0> ;
  assign LOCKSTEP_Master_Out[1982] = \<const0> ;
  assign LOCKSTEP_Master_Out[1983] = \<const0> ;
  assign LOCKSTEP_Master_Out[1984] = \<const0> ;
  assign LOCKSTEP_Master_Out[1985] = \<const0> ;
  assign LOCKSTEP_Master_Out[1986] = \<const0> ;
  assign LOCKSTEP_Master_Out[1987] = \<const0> ;
  assign LOCKSTEP_Master_Out[1988] = \<const0> ;
  assign LOCKSTEP_Master_Out[1989] = \<const0> ;
  assign LOCKSTEP_Master_Out[1990] = \<const0> ;
  assign LOCKSTEP_Master_Out[1991] = \<const0> ;
  assign LOCKSTEP_Master_Out[1992] = \<const0> ;
  assign LOCKSTEP_Master_Out[1993] = \<const0> ;
  assign LOCKSTEP_Master_Out[1994] = \<const0> ;
  assign LOCKSTEP_Master_Out[1995] = \<const0> ;
  assign LOCKSTEP_Master_Out[1996] = \<const0> ;
  assign LOCKSTEP_Master_Out[1997] = \<const0> ;
  assign LOCKSTEP_Master_Out[1998] = \<const0> ;
  assign LOCKSTEP_Master_Out[1999] = \<const0> ;
  assign LOCKSTEP_Master_Out[2000] = \<const0> ;
  assign LOCKSTEP_Master_Out[2001] = \<const0> ;
  assign LOCKSTEP_Master_Out[2002] = \<const0> ;
  assign LOCKSTEP_Master_Out[2003] = \<const0> ;
  assign LOCKSTEP_Master_Out[2004] = \<const0> ;
  assign LOCKSTEP_Master_Out[2005] = \<const0> ;
  assign LOCKSTEP_Master_Out[2006] = \<const0> ;
  assign LOCKSTEP_Master_Out[2007] = \<const0> ;
  assign LOCKSTEP_Master_Out[2008] = \<const0> ;
  assign LOCKSTEP_Master_Out[2009] = \<const0> ;
  assign LOCKSTEP_Master_Out[2010] = \<const0> ;
  assign LOCKSTEP_Master_Out[2011] = \<const0> ;
  assign LOCKSTEP_Master_Out[2012] = \<const0> ;
  assign LOCKSTEP_Master_Out[2013] = \<const0> ;
  assign LOCKSTEP_Master_Out[2014] = \<const0> ;
  assign LOCKSTEP_Master_Out[2015] = \<const0> ;
  assign LOCKSTEP_Master_Out[2016] = \<const0> ;
  assign LOCKSTEP_Master_Out[2017] = \<const0> ;
  assign LOCKSTEP_Master_Out[2018] = \<const0> ;
  assign LOCKSTEP_Master_Out[2019] = \<const0> ;
  assign LOCKSTEP_Master_Out[2020] = \<const0> ;
  assign LOCKSTEP_Master_Out[2021] = \<const0> ;
  assign LOCKSTEP_Master_Out[2022] = \<const0> ;
  assign LOCKSTEP_Master_Out[2023] = \<const0> ;
  assign LOCKSTEP_Master_Out[2024] = \<const0> ;
  assign LOCKSTEP_Master_Out[2025] = \<const0> ;
  assign LOCKSTEP_Master_Out[2026] = \<const0> ;
  assign LOCKSTEP_Master_Out[2027] = \<const0> ;
  assign LOCKSTEP_Master_Out[2028] = \<const0> ;
  assign LOCKSTEP_Master_Out[2029] = \<const0> ;
  assign LOCKSTEP_Master_Out[2030] = \<const0> ;
  assign LOCKSTEP_Master_Out[2031] = \<const0> ;
  assign LOCKSTEP_Master_Out[2032] = \<const0> ;
  assign LOCKSTEP_Master_Out[2033] = \<const0> ;
  assign LOCKSTEP_Master_Out[2034] = \<const0> ;
  assign LOCKSTEP_Master_Out[2035] = \<const0> ;
  assign LOCKSTEP_Master_Out[2036] = \<const0> ;
  assign LOCKSTEP_Master_Out[2037] = \<const0> ;
  assign LOCKSTEP_Master_Out[2038] = \<const0> ;
  assign LOCKSTEP_Master_Out[2039] = \<const0> ;
  assign LOCKSTEP_Master_Out[2040] = \<const0> ;
  assign LOCKSTEP_Master_Out[2041] = \<const0> ;
  assign LOCKSTEP_Master_Out[2042] = \<const0> ;
  assign LOCKSTEP_Master_Out[2043] = \<const0> ;
  assign LOCKSTEP_Master_Out[2044] = \<const0> ;
  assign LOCKSTEP_Master_Out[2045] = \<const0> ;
  assign LOCKSTEP_Master_Out[2046] = \<const0> ;
  assign LOCKSTEP_Master_Out[2047] = \<const0> ;
  assign LOCKSTEP_Master_Out[2048] = \<const0> ;
  assign LOCKSTEP_Master_Out[2049] = \<const0> ;
  assign LOCKSTEP_Master_Out[2050] = \<const0> ;
  assign LOCKSTEP_Master_Out[2051] = \<const0> ;
  assign LOCKSTEP_Master_Out[2052] = \<const0> ;
  assign LOCKSTEP_Master_Out[2053] = \<const0> ;
  assign LOCKSTEP_Master_Out[2054] = \<const0> ;
  assign LOCKSTEP_Master_Out[2055] = \<const0> ;
  assign LOCKSTEP_Master_Out[2056] = \<const0> ;
  assign LOCKSTEP_Master_Out[2057] = \<const0> ;
  assign LOCKSTEP_Master_Out[2058] = \<const0> ;
  assign LOCKSTEP_Master_Out[2059] = \<const0> ;
  assign LOCKSTEP_Master_Out[2060] = \<const0> ;
  assign LOCKSTEP_Master_Out[2061] = \<const0> ;
  assign LOCKSTEP_Master_Out[2062] = \<const0> ;
  assign LOCKSTEP_Master_Out[2063] = \<const0> ;
  assign LOCKSTEP_Master_Out[2064] = \<const0> ;
  assign LOCKSTEP_Master_Out[2065] = \<const0> ;
  assign LOCKSTEP_Master_Out[2066] = \<const0> ;
  assign LOCKSTEP_Master_Out[2067] = \<const0> ;
  assign LOCKSTEP_Master_Out[2068] = \<const0> ;
  assign LOCKSTEP_Master_Out[2069] = \<const0> ;
  assign LOCKSTEP_Master_Out[2070] = \<const0> ;
  assign LOCKSTEP_Master_Out[2071] = \<const0> ;
  assign LOCKSTEP_Master_Out[2072] = \<const0> ;
  assign LOCKSTEP_Master_Out[2073] = \<const0> ;
  assign LOCKSTEP_Master_Out[2074] = \<const0> ;
  assign LOCKSTEP_Master_Out[2075] = \<const0> ;
  assign LOCKSTEP_Master_Out[2076] = \<const0> ;
  assign LOCKSTEP_Master_Out[2077] = \<const0> ;
  assign LOCKSTEP_Master_Out[2078] = \<const0> ;
  assign LOCKSTEP_Master_Out[2079] = \<const0> ;
  assign LOCKSTEP_Master_Out[2080] = \<const0> ;
  assign LOCKSTEP_Master_Out[2081] = \<const0> ;
  assign LOCKSTEP_Master_Out[2082] = \<const0> ;
  assign LOCKSTEP_Master_Out[2083] = \<const0> ;
  assign LOCKSTEP_Master_Out[2084] = \<const0> ;
  assign LOCKSTEP_Master_Out[2085] = \<const0> ;
  assign LOCKSTEP_Master_Out[2086] = \<const0> ;
  assign LOCKSTEP_Master_Out[2087] = \<const0> ;
  assign LOCKSTEP_Master_Out[2088] = \<const0> ;
  assign LOCKSTEP_Master_Out[2089] = \<const0> ;
  assign LOCKSTEP_Master_Out[2090] = \<const0> ;
  assign LOCKSTEP_Master_Out[2091] = \<const0> ;
  assign LOCKSTEP_Master_Out[2092] = \<const0> ;
  assign LOCKSTEP_Master_Out[2093] = \<const0> ;
  assign LOCKSTEP_Master_Out[2094] = \<const0> ;
  assign LOCKSTEP_Master_Out[2095] = \<const0> ;
  assign LOCKSTEP_Master_Out[2096] = \<const0> ;
  assign LOCKSTEP_Master_Out[2097] = \<const0> ;
  assign LOCKSTEP_Master_Out[2098] = \<const0> ;
  assign LOCKSTEP_Master_Out[2099] = \<const0> ;
  assign LOCKSTEP_Master_Out[2100] = \<const0> ;
  assign LOCKSTEP_Master_Out[2101] = \<const0> ;
  assign LOCKSTEP_Master_Out[2102] = \<const0> ;
  assign LOCKSTEP_Master_Out[2103] = \<const0> ;
  assign LOCKSTEP_Master_Out[2104] = \<const0> ;
  assign LOCKSTEP_Master_Out[2105] = \<const0> ;
  assign LOCKSTEP_Master_Out[2106] = \<const0> ;
  assign LOCKSTEP_Master_Out[2107] = \<const0> ;
  assign LOCKSTEP_Master_Out[2108] = \<const0> ;
  assign LOCKSTEP_Master_Out[2109] = \<const0> ;
  assign LOCKSTEP_Master_Out[2110] = \<const0> ;
  assign LOCKSTEP_Master_Out[2111] = \<const0> ;
  assign LOCKSTEP_Master_Out[2112] = \<const0> ;
  assign LOCKSTEP_Master_Out[2113] = \<const0> ;
  assign LOCKSTEP_Master_Out[2114] = \<const0> ;
  assign LOCKSTEP_Master_Out[2115] = \<const0> ;
  assign LOCKSTEP_Master_Out[2116] = \<const0> ;
  assign LOCKSTEP_Master_Out[2117] = \<const0> ;
  assign LOCKSTEP_Master_Out[2118] = \<const0> ;
  assign LOCKSTEP_Master_Out[2119] = \<const0> ;
  assign LOCKSTEP_Master_Out[2120] = \<const0> ;
  assign LOCKSTEP_Master_Out[2121] = \<const0> ;
  assign LOCKSTEP_Master_Out[2122] = \<const0> ;
  assign LOCKSTEP_Master_Out[2123] = \<const0> ;
  assign LOCKSTEP_Master_Out[2124] = \<const0> ;
  assign LOCKSTEP_Master_Out[2125] = \<const0> ;
  assign LOCKSTEP_Master_Out[2126] = \<const0> ;
  assign LOCKSTEP_Master_Out[2127] = \<const0> ;
  assign LOCKSTEP_Master_Out[2128] = \<const0> ;
  assign LOCKSTEP_Master_Out[2129] = \<const0> ;
  assign LOCKSTEP_Master_Out[2130] = \<const0> ;
  assign LOCKSTEP_Master_Out[2131] = \<const0> ;
  assign LOCKSTEP_Master_Out[2132] = \<const0> ;
  assign LOCKSTEP_Master_Out[2133] = \<const0> ;
  assign LOCKSTEP_Master_Out[2134] = \<const0> ;
  assign LOCKSTEP_Master_Out[2135] = \<const0> ;
  assign LOCKSTEP_Master_Out[2136] = \<const0> ;
  assign LOCKSTEP_Master_Out[2137] = \<const0> ;
  assign LOCKSTEP_Master_Out[2138] = \<const0> ;
  assign LOCKSTEP_Master_Out[2139] = \<const0> ;
  assign LOCKSTEP_Master_Out[2140] = \<const0> ;
  assign LOCKSTEP_Master_Out[2141] = \<const0> ;
  assign LOCKSTEP_Master_Out[2142] = \<const0> ;
  assign LOCKSTEP_Master_Out[2143] = \<const0> ;
  assign LOCKSTEP_Master_Out[2144] = \<const0> ;
  assign LOCKSTEP_Master_Out[2145] = \<const0> ;
  assign LOCKSTEP_Master_Out[2146] = \<const0> ;
  assign LOCKSTEP_Master_Out[2147] = \<const0> ;
  assign LOCKSTEP_Master_Out[2148] = \<const0> ;
  assign LOCKSTEP_Master_Out[2149] = \<const0> ;
  assign LOCKSTEP_Master_Out[2150] = \<const0> ;
  assign LOCKSTEP_Master_Out[2151] = \<const0> ;
  assign LOCKSTEP_Master_Out[2152] = \<const0> ;
  assign LOCKSTEP_Master_Out[2153] = \<const0> ;
  assign LOCKSTEP_Master_Out[2154] = \<const0> ;
  assign LOCKSTEP_Master_Out[2155] = \<const0> ;
  assign LOCKSTEP_Master_Out[2156] = \<const0> ;
  assign LOCKSTEP_Master_Out[2157] = \<const0> ;
  assign LOCKSTEP_Master_Out[2158] = \<const0> ;
  assign LOCKSTEP_Master_Out[2159] = \<const0> ;
  assign LOCKSTEP_Master_Out[2160] = \<const0> ;
  assign LOCKSTEP_Master_Out[2161] = \<const0> ;
  assign LOCKSTEP_Master_Out[2162] = \<const0> ;
  assign LOCKSTEP_Master_Out[2163] = \<const0> ;
  assign LOCKSTEP_Master_Out[2164] = \<const0> ;
  assign LOCKSTEP_Master_Out[2165] = \<const0> ;
  assign LOCKSTEP_Master_Out[2166] = \<const0> ;
  assign LOCKSTEP_Master_Out[2167] = \<const0> ;
  assign LOCKSTEP_Master_Out[2168] = \<const0> ;
  assign LOCKSTEP_Master_Out[2169] = \<const0> ;
  assign LOCKSTEP_Master_Out[2170] = \<const0> ;
  assign LOCKSTEP_Master_Out[2171] = \<const0> ;
  assign LOCKSTEP_Master_Out[2172] = \<const0> ;
  assign LOCKSTEP_Master_Out[2173] = \<const0> ;
  assign LOCKSTEP_Master_Out[2174] = \<const0> ;
  assign LOCKSTEP_Master_Out[2175] = \<const0> ;
  assign LOCKSTEP_Master_Out[2176] = \<const0> ;
  assign LOCKSTEP_Master_Out[2177] = \<const0> ;
  assign LOCKSTEP_Master_Out[2178] = \<const0> ;
  assign LOCKSTEP_Master_Out[2179] = \<const0> ;
  assign LOCKSTEP_Master_Out[2180] = \<const0> ;
  assign LOCKSTEP_Master_Out[2181] = \<const0> ;
  assign LOCKSTEP_Master_Out[2182] = \<const0> ;
  assign LOCKSTEP_Master_Out[2183] = \<const0> ;
  assign LOCKSTEP_Master_Out[2184] = \<const0> ;
  assign LOCKSTEP_Master_Out[2185] = \<const0> ;
  assign LOCKSTEP_Master_Out[2186] = \<const0> ;
  assign LOCKSTEP_Master_Out[2187] = \<const0> ;
  assign LOCKSTEP_Master_Out[2188] = \<const0> ;
  assign LOCKSTEP_Master_Out[2189] = \<const0> ;
  assign LOCKSTEP_Master_Out[2190] = \<const0> ;
  assign LOCKSTEP_Master_Out[2191] = \<const0> ;
  assign LOCKSTEP_Master_Out[2192] = \<const0> ;
  assign LOCKSTEP_Master_Out[2193] = \<const0> ;
  assign LOCKSTEP_Master_Out[2194] = \<const0> ;
  assign LOCKSTEP_Master_Out[2195] = \<const0> ;
  assign LOCKSTEP_Master_Out[2196] = \<const0> ;
  assign LOCKSTEP_Master_Out[2197] = \<const0> ;
  assign LOCKSTEP_Master_Out[2198] = \<const0> ;
  assign LOCKSTEP_Master_Out[2199] = \<const0> ;
  assign LOCKSTEP_Master_Out[2200] = \<const0> ;
  assign LOCKSTEP_Master_Out[2201] = \<const0> ;
  assign LOCKSTEP_Master_Out[2202] = \<const0> ;
  assign LOCKSTEP_Master_Out[2203] = \<const0> ;
  assign LOCKSTEP_Master_Out[2204] = \<const0> ;
  assign LOCKSTEP_Master_Out[2205] = \<const0> ;
  assign LOCKSTEP_Master_Out[2206] = \<const0> ;
  assign LOCKSTEP_Master_Out[2207] = \<const0> ;
  assign LOCKSTEP_Master_Out[2208] = \<const0> ;
  assign LOCKSTEP_Master_Out[2209] = \<const0> ;
  assign LOCKSTEP_Master_Out[2210] = \<const0> ;
  assign LOCKSTEP_Master_Out[2211] = \<const0> ;
  assign LOCKSTEP_Master_Out[2212] = \<const0> ;
  assign LOCKSTEP_Master_Out[2213] = \<const0> ;
  assign LOCKSTEP_Master_Out[2214] = \<const0> ;
  assign LOCKSTEP_Master_Out[2215] = \<const0> ;
  assign LOCKSTEP_Master_Out[2216] = \<const0> ;
  assign LOCKSTEP_Master_Out[2217] = \<const0> ;
  assign LOCKSTEP_Master_Out[2218] = \<const0> ;
  assign LOCKSTEP_Master_Out[2219] = \<const0> ;
  assign LOCKSTEP_Master_Out[2220] = \<const0> ;
  assign LOCKSTEP_Master_Out[2221] = \<const0> ;
  assign LOCKSTEP_Master_Out[2222] = \<const0> ;
  assign LOCKSTEP_Master_Out[2223] = \<const0> ;
  assign LOCKSTEP_Master_Out[2224] = \<const0> ;
  assign LOCKSTEP_Master_Out[2225] = \<const0> ;
  assign LOCKSTEP_Master_Out[2226] = \<const0> ;
  assign LOCKSTEP_Master_Out[2227] = \<const0> ;
  assign LOCKSTEP_Master_Out[2228] = \<const0> ;
  assign LOCKSTEP_Master_Out[2229] = \<const0> ;
  assign LOCKSTEP_Master_Out[2230] = \<const0> ;
  assign LOCKSTEP_Master_Out[2231] = \<const0> ;
  assign LOCKSTEP_Master_Out[2232] = \<const0> ;
  assign LOCKSTEP_Master_Out[2233] = \<const0> ;
  assign LOCKSTEP_Master_Out[2234] = \<const0> ;
  assign LOCKSTEP_Master_Out[2235] = \<const0> ;
  assign LOCKSTEP_Master_Out[2236] = \<const0> ;
  assign LOCKSTEP_Master_Out[2237] = \<const0> ;
  assign LOCKSTEP_Master_Out[2238] = \<const0> ;
  assign LOCKSTEP_Master_Out[2239] = \<const0> ;
  assign LOCKSTEP_Master_Out[2240] = \<const0> ;
  assign LOCKSTEP_Master_Out[2241] = \<const0> ;
  assign LOCKSTEP_Master_Out[2242] = \<const0> ;
  assign LOCKSTEP_Master_Out[2243] = \<const0> ;
  assign LOCKSTEP_Master_Out[2244] = \<const0> ;
  assign LOCKSTEP_Master_Out[2245] = \<const0> ;
  assign LOCKSTEP_Master_Out[2246] = \<const0> ;
  assign LOCKSTEP_Master_Out[2247] = \<const0> ;
  assign LOCKSTEP_Master_Out[2248] = \<const0> ;
  assign LOCKSTEP_Master_Out[2249] = \<const0> ;
  assign LOCKSTEP_Master_Out[2250] = \<const0> ;
  assign LOCKSTEP_Master_Out[2251] = \<const0> ;
  assign LOCKSTEP_Master_Out[2252] = \<const0> ;
  assign LOCKSTEP_Master_Out[2253] = \<const0> ;
  assign LOCKSTEP_Master_Out[2254] = \<const0> ;
  assign LOCKSTEP_Master_Out[2255] = \<const0> ;
  assign LOCKSTEP_Master_Out[2256] = \<const0> ;
  assign LOCKSTEP_Master_Out[2257] = \<const0> ;
  assign LOCKSTEP_Master_Out[2258] = \<const0> ;
  assign LOCKSTEP_Master_Out[2259] = \<const0> ;
  assign LOCKSTEP_Master_Out[2260] = \<const0> ;
  assign LOCKSTEP_Master_Out[2261] = \<const0> ;
  assign LOCKSTEP_Master_Out[2262] = \<const0> ;
  assign LOCKSTEP_Master_Out[2263] = \<const0> ;
  assign LOCKSTEP_Master_Out[2264] = \<const0> ;
  assign LOCKSTEP_Master_Out[2265] = \<const0> ;
  assign LOCKSTEP_Master_Out[2266] = \<const0> ;
  assign LOCKSTEP_Master_Out[2267] = \<const0> ;
  assign LOCKSTEP_Master_Out[2268] = \<const0> ;
  assign LOCKSTEP_Master_Out[2269] = \<const0> ;
  assign LOCKSTEP_Master_Out[2270] = \<const0> ;
  assign LOCKSTEP_Master_Out[2271] = \<const0> ;
  assign LOCKSTEP_Master_Out[2272] = \<const0> ;
  assign LOCKSTEP_Master_Out[2273] = \<const0> ;
  assign LOCKSTEP_Master_Out[2274] = \<const0> ;
  assign LOCKSTEP_Master_Out[2275] = \<const0> ;
  assign LOCKSTEP_Master_Out[2276] = \<const0> ;
  assign LOCKSTEP_Master_Out[2277] = \<const0> ;
  assign LOCKSTEP_Master_Out[2278] = \<const0> ;
  assign LOCKSTEP_Master_Out[2279] = \<const0> ;
  assign LOCKSTEP_Master_Out[2280] = \<const0> ;
  assign LOCKSTEP_Master_Out[2281] = \<const0> ;
  assign LOCKSTEP_Master_Out[2282] = \<const0> ;
  assign LOCKSTEP_Master_Out[2283] = \<const0> ;
  assign LOCKSTEP_Master_Out[2284] = \<const0> ;
  assign LOCKSTEP_Master_Out[2285] = \<const0> ;
  assign LOCKSTEP_Master_Out[2286] = \<const0> ;
  assign LOCKSTEP_Master_Out[2287] = \<const0> ;
  assign LOCKSTEP_Master_Out[2288] = \<const0> ;
  assign LOCKSTEP_Master_Out[2289] = \<const0> ;
  assign LOCKSTEP_Master_Out[2290] = \<const0> ;
  assign LOCKSTEP_Master_Out[2291] = \<const0> ;
  assign LOCKSTEP_Master_Out[2292] = \<const0> ;
  assign LOCKSTEP_Master_Out[2293] = \<const0> ;
  assign LOCKSTEP_Master_Out[2294] = \<const0> ;
  assign LOCKSTEP_Master_Out[2295] = \<const0> ;
  assign LOCKSTEP_Master_Out[2296] = \<const0> ;
  assign LOCKSTEP_Master_Out[2297] = \<const0> ;
  assign LOCKSTEP_Master_Out[2298] = \<const0> ;
  assign LOCKSTEP_Master_Out[2299] = \<const0> ;
  assign LOCKSTEP_Master_Out[2300] = \<const0> ;
  assign LOCKSTEP_Master_Out[2301] = \<const0> ;
  assign LOCKSTEP_Master_Out[2302] = \<const0> ;
  assign LOCKSTEP_Master_Out[2303] = \<const0> ;
  assign LOCKSTEP_Master_Out[2304] = \<const0> ;
  assign LOCKSTEP_Master_Out[2305] = \<const0> ;
  assign LOCKSTEP_Master_Out[2306] = \<const0> ;
  assign LOCKSTEP_Master_Out[2307] = \<const0> ;
  assign LOCKSTEP_Master_Out[2308] = \<const0> ;
  assign LOCKSTEP_Master_Out[2309] = \<const0> ;
  assign LOCKSTEP_Master_Out[2310] = \<const0> ;
  assign LOCKSTEP_Master_Out[2311] = \<const0> ;
  assign LOCKSTEP_Master_Out[2312] = \<const0> ;
  assign LOCKSTEP_Master_Out[2313] = \<const0> ;
  assign LOCKSTEP_Master_Out[2314] = \<const0> ;
  assign LOCKSTEP_Master_Out[2315] = \<const0> ;
  assign LOCKSTEP_Master_Out[2316] = \<const0> ;
  assign LOCKSTEP_Master_Out[2317] = \<const0> ;
  assign LOCKSTEP_Master_Out[2318] = \<const0> ;
  assign LOCKSTEP_Master_Out[2319] = \<const0> ;
  assign LOCKSTEP_Master_Out[2320] = \<const0> ;
  assign LOCKSTEP_Master_Out[2321] = \<const0> ;
  assign LOCKSTEP_Master_Out[2322] = \<const0> ;
  assign LOCKSTEP_Master_Out[2323] = \<const0> ;
  assign LOCKSTEP_Master_Out[2324] = \<const0> ;
  assign LOCKSTEP_Master_Out[2325] = \<const0> ;
  assign LOCKSTEP_Master_Out[2326] = \<const0> ;
  assign LOCKSTEP_Master_Out[2327] = \<const0> ;
  assign LOCKSTEP_Master_Out[2328] = \<const0> ;
  assign LOCKSTEP_Master_Out[2329] = \<const0> ;
  assign LOCKSTEP_Master_Out[2330] = \<const0> ;
  assign LOCKSTEP_Master_Out[2331] = \<const0> ;
  assign LOCKSTEP_Master_Out[2332] = \<const0> ;
  assign LOCKSTEP_Master_Out[2333] = \<const0> ;
  assign LOCKSTEP_Master_Out[2334] = \<const0> ;
  assign LOCKSTEP_Master_Out[2335] = \<const0> ;
  assign LOCKSTEP_Master_Out[2336] = \<const0> ;
  assign LOCKSTEP_Master_Out[2337] = \<const0> ;
  assign LOCKSTEP_Master_Out[2338] = \<const0> ;
  assign LOCKSTEP_Master_Out[2339] = \<const0> ;
  assign LOCKSTEP_Master_Out[2340] = \<const0> ;
  assign LOCKSTEP_Master_Out[2341] = \<const0> ;
  assign LOCKSTEP_Master_Out[2342] = \<const0> ;
  assign LOCKSTEP_Master_Out[2343] = \<const0> ;
  assign LOCKSTEP_Master_Out[2344] = \<const0> ;
  assign LOCKSTEP_Master_Out[2345] = \<const0> ;
  assign LOCKSTEP_Master_Out[2346] = \<const0> ;
  assign LOCKSTEP_Master_Out[2347] = \<const0> ;
  assign LOCKSTEP_Master_Out[2348] = \<const0> ;
  assign LOCKSTEP_Master_Out[2349] = \<const0> ;
  assign LOCKSTEP_Master_Out[2350] = \<const0> ;
  assign LOCKSTEP_Master_Out[2351] = \<const0> ;
  assign LOCKSTEP_Master_Out[2352] = \<const0> ;
  assign LOCKSTEP_Master_Out[2353] = \<const0> ;
  assign LOCKSTEP_Master_Out[2354] = \<const0> ;
  assign LOCKSTEP_Master_Out[2355] = \<const0> ;
  assign LOCKSTEP_Master_Out[2356] = \<const0> ;
  assign LOCKSTEP_Master_Out[2357] = \<const0> ;
  assign LOCKSTEP_Master_Out[2358] = \<const0> ;
  assign LOCKSTEP_Master_Out[2359] = \<const0> ;
  assign LOCKSTEP_Master_Out[2360] = \<const0> ;
  assign LOCKSTEP_Master_Out[2361] = \<const0> ;
  assign LOCKSTEP_Master_Out[2362] = \<const0> ;
  assign LOCKSTEP_Master_Out[2363] = \<const0> ;
  assign LOCKSTEP_Master_Out[2364] = \<const0> ;
  assign LOCKSTEP_Master_Out[2365] = \<const0> ;
  assign LOCKSTEP_Master_Out[2366] = \<const0> ;
  assign LOCKSTEP_Master_Out[2367] = \<const0> ;
  assign LOCKSTEP_Master_Out[2368] = \<const0> ;
  assign LOCKSTEP_Master_Out[2369] = \<const0> ;
  assign LOCKSTEP_Master_Out[2370] = \<const0> ;
  assign LOCKSTEP_Master_Out[2371] = \<const0> ;
  assign LOCKSTEP_Master_Out[2372] = \<const0> ;
  assign LOCKSTEP_Master_Out[2373] = \<const0> ;
  assign LOCKSTEP_Master_Out[2374] = \<const0> ;
  assign LOCKSTEP_Master_Out[2375] = \<const0> ;
  assign LOCKSTEP_Master_Out[2376] = \<const0> ;
  assign LOCKSTEP_Master_Out[2377] = \<const0> ;
  assign LOCKSTEP_Master_Out[2378] = \<const0> ;
  assign LOCKSTEP_Master_Out[2379] = \<const0> ;
  assign LOCKSTEP_Master_Out[2380] = \<const0> ;
  assign LOCKSTEP_Master_Out[2381] = \<const0> ;
  assign LOCKSTEP_Master_Out[2382] = \<const0> ;
  assign LOCKSTEP_Master_Out[2383] = \<const0> ;
  assign LOCKSTEP_Master_Out[2384] = \<const0> ;
  assign LOCKSTEP_Master_Out[2385] = \<const0> ;
  assign LOCKSTEP_Master_Out[2386] = \<const0> ;
  assign LOCKSTEP_Master_Out[2387] = \<const0> ;
  assign LOCKSTEP_Master_Out[2388] = \<const0> ;
  assign LOCKSTEP_Master_Out[2389] = \<const0> ;
  assign LOCKSTEP_Master_Out[2390] = \<const0> ;
  assign LOCKSTEP_Master_Out[2391] = \<const0> ;
  assign LOCKSTEP_Master_Out[2392] = \<const0> ;
  assign LOCKSTEP_Master_Out[2393] = \<const0> ;
  assign LOCKSTEP_Master_Out[2394] = \<const0> ;
  assign LOCKSTEP_Master_Out[2395] = \<const0> ;
  assign LOCKSTEP_Master_Out[2396] = \<const0> ;
  assign LOCKSTEP_Master_Out[2397] = \<const0> ;
  assign LOCKSTEP_Master_Out[2398] = \<const0> ;
  assign LOCKSTEP_Master_Out[2399] = \<const0> ;
  assign LOCKSTEP_Master_Out[2400] = \<const0> ;
  assign LOCKSTEP_Master_Out[2401] = \<const0> ;
  assign LOCKSTEP_Master_Out[2402] = \<const0> ;
  assign LOCKSTEP_Master_Out[2403] = \<const0> ;
  assign LOCKSTEP_Master_Out[2404] = \<const0> ;
  assign LOCKSTEP_Master_Out[2405] = \<const0> ;
  assign LOCKSTEP_Master_Out[2406] = \<const0> ;
  assign LOCKSTEP_Master_Out[2407] = \<const0> ;
  assign LOCKSTEP_Master_Out[2408] = \<const0> ;
  assign LOCKSTEP_Master_Out[2409] = \<const0> ;
  assign LOCKSTEP_Master_Out[2410] = \<const0> ;
  assign LOCKSTEP_Master_Out[2411] = \<const0> ;
  assign LOCKSTEP_Master_Out[2412] = \<const0> ;
  assign LOCKSTEP_Master_Out[2413] = \<const0> ;
  assign LOCKSTEP_Master_Out[2414] = \<const0> ;
  assign LOCKSTEP_Master_Out[2415] = \<const0> ;
  assign LOCKSTEP_Master_Out[2416] = \<const0> ;
  assign LOCKSTEP_Master_Out[2417] = \<const0> ;
  assign LOCKSTEP_Master_Out[2418] = \<const0> ;
  assign LOCKSTEP_Master_Out[2419] = \<const0> ;
  assign LOCKSTEP_Master_Out[2420] = \<const0> ;
  assign LOCKSTEP_Master_Out[2421] = \<const0> ;
  assign LOCKSTEP_Master_Out[2422] = \<const0> ;
  assign LOCKSTEP_Master_Out[2423] = \<const0> ;
  assign LOCKSTEP_Master_Out[2424] = \<const0> ;
  assign LOCKSTEP_Master_Out[2425] = \<const0> ;
  assign LOCKSTEP_Master_Out[2426] = \<const0> ;
  assign LOCKSTEP_Master_Out[2427] = \<const0> ;
  assign LOCKSTEP_Master_Out[2428] = \<const0> ;
  assign LOCKSTEP_Master_Out[2429] = \<const0> ;
  assign LOCKSTEP_Master_Out[2430] = \<const0> ;
  assign LOCKSTEP_Master_Out[2431] = \<const0> ;
  assign LOCKSTEP_Master_Out[2432] = \<const0> ;
  assign LOCKSTEP_Master_Out[2433] = \<const0> ;
  assign LOCKSTEP_Master_Out[2434] = \<const0> ;
  assign LOCKSTEP_Master_Out[2435] = \<const0> ;
  assign LOCKSTEP_Master_Out[2436] = \<const0> ;
  assign LOCKSTEP_Master_Out[2437] = \<const0> ;
  assign LOCKSTEP_Master_Out[2438] = \<const0> ;
  assign LOCKSTEP_Master_Out[2439] = \<const0> ;
  assign LOCKSTEP_Master_Out[2440] = \<const0> ;
  assign LOCKSTEP_Master_Out[2441] = \<const0> ;
  assign LOCKSTEP_Master_Out[2442] = \<const0> ;
  assign LOCKSTEP_Master_Out[2443] = \<const0> ;
  assign LOCKSTEP_Master_Out[2444] = \<const0> ;
  assign LOCKSTEP_Master_Out[2445] = \<const0> ;
  assign LOCKSTEP_Master_Out[2446] = \<const0> ;
  assign LOCKSTEP_Master_Out[2447] = \<const0> ;
  assign LOCKSTEP_Master_Out[2448] = \<const0> ;
  assign LOCKSTEP_Master_Out[2449] = \<const0> ;
  assign LOCKSTEP_Master_Out[2450] = \<const0> ;
  assign LOCKSTEP_Master_Out[2451] = \<const0> ;
  assign LOCKSTEP_Master_Out[2452] = \<const0> ;
  assign LOCKSTEP_Master_Out[2453] = \<const0> ;
  assign LOCKSTEP_Master_Out[2454] = \<const0> ;
  assign LOCKSTEP_Master_Out[2455] = \<const0> ;
  assign LOCKSTEP_Master_Out[2456] = \<const0> ;
  assign LOCKSTEP_Master_Out[2457] = \<const0> ;
  assign LOCKSTEP_Master_Out[2458] = \<const0> ;
  assign LOCKSTEP_Master_Out[2459] = \<const0> ;
  assign LOCKSTEP_Master_Out[2460] = \<const0> ;
  assign LOCKSTEP_Master_Out[2461] = \<const0> ;
  assign LOCKSTEP_Master_Out[2462] = \<const0> ;
  assign LOCKSTEP_Master_Out[2463] = \<const0> ;
  assign LOCKSTEP_Master_Out[2464] = \<const0> ;
  assign LOCKSTEP_Master_Out[2465] = \<const0> ;
  assign LOCKSTEP_Master_Out[2466] = \<const0> ;
  assign LOCKSTEP_Master_Out[2467] = \<const0> ;
  assign LOCKSTEP_Master_Out[2468] = \<const0> ;
  assign LOCKSTEP_Master_Out[2469] = \<const0> ;
  assign LOCKSTEP_Master_Out[2470] = \<const0> ;
  assign LOCKSTEP_Master_Out[2471] = \<const0> ;
  assign LOCKSTEP_Master_Out[2472] = \<const0> ;
  assign LOCKSTEP_Master_Out[2473] = \<const0> ;
  assign LOCKSTEP_Master_Out[2474] = \<const0> ;
  assign LOCKSTEP_Master_Out[2475] = \<const0> ;
  assign LOCKSTEP_Master_Out[2476] = \<const0> ;
  assign LOCKSTEP_Master_Out[2477] = \<const0> ;
  assign LOCKSTEP_Master_Out[2478] = \<const0> ;
  assign LOCKSTEP_Master_Out[2479] = \<const0> ;
  assign LOCKSTEP_Master_Out[2480] = \<const0> ;
  assign LOCKSTEP_Master_Out[2481] = \<const0> ;
  assign LOCKSTEP_Master_Out[2482] = \<const0> ;
  assign LOCKSTEP_Master_Out[2483] = \<const0> ;
  assign LOCKSTEP_Master_Out[2484] = \<const0> ;
  assign LOCKSTEP_Master_Out[2485] = \<const0> ;
  assign LOCKSTEP_Master_Out[2486] = \<const0> ;
  assign LOCKSTEP_Master_Out[2487] = \<const0> ;
  assign LOCKSTEP_Master_Out[2488] = \<const0> ;
  assign LOCKSTEP_Master_Out[2489] = \<const0> ;
  assign LOCKSTEP_Master_Out[2490] = \<const0> ;
  assign LOCKSTEP_Master_Out[2491] = \<const0> ;
  assign LOCKSTEP_Master_Out[2492] = \<const0> ;
  assign LOCKSTEP_Master_Out[2493] = \<const0> ;
  assign LOCKSTEP_Master_Out[2494] = \<const0> ;
  assign LOCKSTEP_Master_Out[2495] = \<const0> ;
  assign LOCKSTEP_Master_Out[2496] = \<const0> ;
  assign LOCKSTEP_Master_Out[2497] = \<const0> ;
  assign LOCKSTEP_Master_Out[2498] = \<const0> ;
  assign LOCKSTEP_Master_Out[2499] = \<const0> ;
  assign LOCKSTEP_Master_Out[2500] = \<const0> ;
  assign LOCKSTEP_Master_Out[2501] = \<const0> ;
  assign LOCKSTEP_Master_Out[2502] = \<const0> ;
  assign LOCKSTEP_Master_Out[2503] = \<const0> ;
  assign LOCKSTEP_Master_Out[2504] = \<const0> ;
  assign LOCKSTEP_Master_Out[2505] = \<const0> ;
  assign LOCKSTEP_Master_Out[2506] = \<const0> ;
  assign LOCKSTEP_Master_Out[2507] = \<const0> ;
  assign LOCKSTEP_Master_Out[2508] = \<const0> ;
  assign LOCKSTEP_Master_Out[2509] = \<const0> ;
  assign LOCKSTEP_Master_Out[2510] = \<const0> ;
  assign LOCKSTEP_Master_Out[2511] = \<const0> ;
  assign LOCKSTEP_Master_Out[2512] = \<const0> ;
  assign LOCKSTEP_Master_Out[2513] = \<const0> ;
  assign LOCKSTEP_Master_Out[2514] = \<const0> ;
  assign LOCKSTEP_Master_Out[2515] = \<const0> ;
  assign LOCKSTEP_Master_Out[2516] = \<const0> ;
  assign LOCKSTEP_Master_Out[2517] = \<const0> ;
  assign LOCKSTEP_Master_Out[2518] = \<const0> ;
  assign LOCKSTEP_Master_Out[2519] = \<const0> ;
  assign LOCKSTEP_Master_Out[2520] = \<const0> ;
  assign LOCKSTEP_Master_Out[2521] = \<const0> ;
  assign LOCKSTEP_Master_Out[2522] = \<const0> ;
  assign LOCKSTEP_Master_Out[2523] = \<const0> ;
  assign LOCKSTEP_Master_Out[2524] = \<const0> ;
  assign LOCKSTEP_Master_Out[2525] = \<const0> ;
  assign LOCKSTEP_Master_Out[2526] = \<const0> ;
  assign LOCKSTEP_Master_Out[2527] = \<const0> ;
  assign LOCKSTEP_Master_Out[2528] = \<const0> ;
  assign LOCKSTEP_Master_Out[2529] = \<const0> ;
  assign LOCKSTEP_Master_Out[2530] = \<const0> ;
  assign LOCKSTEP_Master_Out[2531] = \<const0> ;
  assign LOCKSTEP_Master_Out[2532] = \<const0> ;
  assign LOCKSTEP_Master_Out[2533] = \<const0> ;
  assign LOCKSTEP_Master_Out[2534] = \<const0> ;
  assign LOCKSTEP_Master_Out[2535] = \<const0> ;
  assign LOCKSTEP_Master_Out[2536] = \<const0> ;
  assign LOCKSTEP_Master_Out[2537] = \<const0> ;
  assign LOCKSTEP_Master_Out[2538] = \<const0> ;
  assign LOCKSTEP_Master_Out[2539] = \<const0> ;
  assign LOCKSTEP_Master_Out[2540] = \<const0> ;
  assign LOCKSTEP_Master_Out[2541] = \<const0> ;
  assign LOCKSTEP_Master_Out[2542] = \<const0> ;
  assign LOCKSTEP_Master_Out[2543] = \<const0> ;
  assign LOCKSTEP_Master_Out[2544] = \<const0> ;
  assign LOCKSTEP_Master_Out[2545] = \<const0> ;
  assign LOCKSTEP_Master_Out[2546] = \<const0> ;
  assign LOCKSTEP_Master_Out[2547] = \<const0> ;
  assign LOCKSTEP_Master_Out[2548] = \<const0> ;
  assign LOCKSTEP_Master_Out[2549] = \<const0> ;
  assign LOCKSTEP_Master_Out[2550] = \<const0> ;
  assign LOCKSTEP_Master_Out[2551] = \<const0> ;
  assign LOCKSTEP_Master_Out[2552] = \<const0> ;
  assign LOCKSTEP_Master_Out[2553] = \<const0> ;
  assign LOCKSTEP_Master_Out[2554] = \<const0> ;
  assign LOCKSTEP_Master_Out[2555] = \<const0> ;
  assign LOCKSTEP_Master_Out[2556] = \<const0> ;
  assign LOCKSTEP_Master_Out[2557] = \<const0> ;
  assign LOCKSTEP_Master_Out[2558] = \<const0> ;
  assign LOCKSTEP_Master_Out[2559] = \<const0> ;
  assign LOCKSTEP_Master_Out[2560] = \<const0> ;
  assign LOCKSTEP_Master_Out[2561] = \<const0> ;
  assign LOCKSTEP_Master_Out[2562] = \<const0> ;
  assign LOCKSTEP_Master_Out[2563] = \<const0> ;
  assign LOCKSTEP_Master_Out[2564] = \<const0> ;
  assign LOCKSTEP_Master_Out[2565] = \<const0> ;
  assign LOCKSTEP_Master_Out[2566] = \<const0> ;
  assign LOCKSTEP_Master_Out[2567] = \<const0> ;
  assign LOCKSTEP_Master_Out[2568] = \<const0> ;
  assign LOCKSTEP_Master_Out[2569] = \<const0> ;
  assign LOCKSTEP_Master_Out[2570] = \<const0> ;
  assign LOCKSTEP_Master_Out[2571] = \<const0> ;
  assign LOCKSTEP_Master_Out[2572] = \<const0> ;
  assign LOCKSTEP_Master_Out[2573] = \<const0> ;
  assign LOCKSTEP_Master_Out[2574] = \<const0> ;
  assign LOCKSTEP_Master_Out[2575] = \<const0> ;
  assign LOCKSTEP_Master_Out[2576] = \<const0> ;
  assign LOCKSTEP_Master_Out[2577] = \<const0> ;
  assign LOCKSTEP_Master_Out[2578] = \<const0> ;
  assign LOCKSTEP_Master_Out[2579] = \<const0> ;
  assign LOCKSTEP_Master_Out[2580] = \<const0> ;
  assign LOCKSTEP_Master_Out[2581] = \<const0> ;
  assign LOCKSTEP_Master_Out[2582] = \<const0> ;
  assign LOCKSTEP_Master_Out[2583] = \<const0> ;
  assign LOCKSTEP_Master_Out[2584] = \<const0> ;
  assign LOCKSTEP_Master_Out[2585] = \<const0> ;
  assign LOCKSTEP_Master_Out[2586] = \<const0> ;
  assign LOCKSTEP_Master_Out[2587] = \<const0> ;
  assign LOCKSTEP_Master_Out[2588] = \<const0> ;
  assign LOCKSTEP_Master_Out[2589] = \<const0> ;
  assign LOCKSTEP_Master_Out[2590] = \<const0> ;
  assign LOCKSTEP_Master_Out[2591] = \<const0> ;
  assign LOCKSTEP_Master_Out[2592] = \<const0> ;
  assign LOCKSTEP_Master_Out[2593] = \<const0> ;
  assign LOCKSTEP_Master_Out[2594] = \<const0> ;
  assign LOCKSTEP_Master_Out[2595] = \<const0> ;
  assign LOCKSTEP_Master_Out[2596] = \<const0> ;
  assign LOCKSTEP_Master_Out[2597] = \<const0> ;
  assign LOCKSTEP_Master_Out[2598] = \<const0> ;
  assign LOCKSTEP_Master_Out[2599] = \<const0> ;
  assign LOCKSTEP_Master_Out[2600] = \<const0> ;
  assign LOCKSTEP_Master_Out[2601] = \<const0> ;
  assign LOCKSTEP_Master_Out[2602] = \<const0> ;
  assign LOCKSTEP_Master_Out[2603] = \<const0> ;
  assign LOCKSTEP_Master_Out[2604] = \<const0> ;
  assign LOCKSTEP_Master_Out[2605] = \<const0> ;
  assign LOCKSTEP_Master_Out[2606] = \<const0> ;
  assign LOCKSTEP_Master_Out[2607] = \<const0> ;
  assign LOCKSTEP_Master_Out[2608] = \<const0> ;
  assign LOCKSTEP_Master_Out[2609] = \<const0> ;
  assign LOCKSTEP_Master_Out[2610] = \<const0> ;
  assign LOCKSTEP_Master_Out[2611] = \<const0> ;
  assign LOCKSTEP_Master_Out[2612] = \<const0> ;
  assign LOCKSTEP_Master_Out[2613] = \<const0> ;
  assign LOCKSTEP_Master_Out[2614] = \<const0> ;
  assign LOCKSTEP_Master_Out[2615] = \<const0> ;
  assign LOCKSTEP_Master_Out[2616] = \<const0> ;
  assign LOCKSTEP_Master_Out[2617] = \<const0> ;
  assign LOCKSTEP_Master_Out[2618] = \<const0> ;
  assign LOCKSTEP_Master_Out[2619] = \<const0> ;
  assign LOCKSTEP_Master_Out[2620] = \<const0> ;
  assign LOCKSTEP_Master_Out[2621] = \<const0> ;
  assign LOCKSTEP_Master_Out[2622] = \<const0> ;
  assign LOCKSTEP_Master_Out[2623] = \<const0> ;
  assign LOCKSTEP_Master_Out[2624] = \<const0> ;
  assign LOCKSTEP_Master_Out[2625] = \<const0> ;
  assign LOCKSTEP_Master_Out[2626] = \<const0> ;
  assign LOCKSTEP_Master_Out[2627] = \<const0> ;
  assign LOCKSTEP_Master_Out[2628] = \<const0> ;
  assign LOCKSTEP_Master_Out[2629] = \<const0> ;
  assign LOCKSTEP_Master_Out[2630] = \<const0> ;
  assign LOCKSTEP_Master_Out[2631] = \<const0> ;
  assign LOCKSTEP_Master_Out[2632] = \<const0> ;
  assign LOCKSTEP_Master_Out[2633] = \<const0> ;
  assign LOCKSTEP_Master_Out[2634] = \<const0> ;
  assign LOCKSTEP_Master_Out[2635] = \<const0> ;
  assign LOCKSTEP_Master_Out[2636] = \<const0> ;
  assign LOCKSTEP_Master_Out[2637] = \<const0> ;
  assign LOCKSTEP_Master_Out[2638] = \<const0> ;
  assign LOCKSTEP_Master_Out[2639] = \<const0> ;
  assign LOCKSTEP_Master_Out[2640] = \<const0> ;
  assign LOCKSTEP_Master_Out[2641] = \<const0> ;
  assign LOCKSTEP_Master_Out[2642] = \<const0> ;
  assign LOCKSTEP_Master_Out[2643] = \<const0> ;
  assign LOCKSTEP_Master_Out[2644] = \<const0> ;
  assign LOCKSTEP_Master_Out[2645] = \<const0> ;
  assign LOCKSTEP_Master_Out[2646] = \<const0> ;
  assign LOCKSTEP_Master_Out[2647] = \<const0> ;
  assign LOCKSTEP_Master_Out[2648] = \<const0> ;
  assign LOCKSTEP_Master_Out[2649] = \<const0> ;
  assign LOCKSTEP_Master_Out[2650] = \<const0> ;
  assign LOCKSTEP_Master_Out[2651] = \<const0> ;
  assign LOCKSTEP_Master_Out[2652] = \<const0> ;
  assign LOCKSTEP_Master_Out[2653] = \<const0> ;
  assign LOCKSTEP_Master_Out[2654] = \<const0> ;
  assign LOCKSTEP_Master_Out[2655] = \<const0> ;
  assign LOCKSTEP_Master_Out[2656] = \<const0> ;
  assign LOCKSTEP_Master_Out[2657] = \<const0> ;
  assign LOCKSTEP_Master_Out[2658] = \<const0> ;
  assign LOCKSTEP_Master_Out[2659] = \<const0> ;
  assign LOCKSTEP_Master_Out[2660] = \<const0> ;
  assign LOCKSTEP_Master_Out[2661] = \<const0> ;
  assign LOCKSTEP_Master_Out[2662] = \<const0> ;
  assign LOCKSTEP_Master_Out[2663] = \<const0> ;
  assign LOCKSTEP_Master_Out[2664] = \<const0> ;
  assign LOCKSTEP_Master_Out[2665] = \<const0> ;
  assign LOCKSTEP_Master_Out[2666] = \<const0> ;
  assign LOCKSTEP_Master_Out[2667] = \<const0> ;
  assign LOCKSTEP_Master_Out[2668] = \<const0> ;
  assign LOCKSTEP_Master_Out[2669] = \<const0> ;
  assign LOCKSTEP_Master_Out[2670] = \<const0> ;
  assign LOCKSTEP_Master_Out[2671] = \<const0> ;
  assign LOCKSTEP_Master_Out[2672] = \<const0> ;
  assign LOCKSTEP_Master_Out[2673] = \<const0> ;
  assign LOCKSTEP_Master_Out[2674] = \<const0> ;
  assign LOCKSTEP_Master_Out[2675] = \<const0> ;
  assign LOCKSTEP_Master_Out[2676] = \<const0> ;
  assign LOCKSTEP_Master_Out[2677] = \<const0> ;
  assign LOCKSTEP_Master_Out[2678] = \<const0> ;
  assign LOCKSTEP_Master_Out[2679] = \<const0> ;
  assign LOCKSTEP_Master_Out[2680] = \<const0> ;
  assign LOCKSTEP_Master_Out[2681] = \<const0> ;
  assign LOCKSTEP_Master_Out[2682] = \<const0> ;
  assign LOCKSTEP_Master_Out[2683] = \<const0> ;
  assign LOCKSTEP_Master_Out[2684] = \<const0> ;
  assign LOCKSTEP_Master_Out[2685] = \<const0> ;
  assign LOCKSTEP_Master_Out[2686] = \<const0> ;
  assign LOCKSTEP_Master_Out[2687] = \<const0> ;
  assign LOCKSTEP_Master_Out[2688] = \<const0> ;
  assign LOCKSTEP_Master_Out[2689] = \<const0> ;
  assign LOCKSTEP_Master_Out[2690] = \<const0> ;
  assign LOCKSTEP_Master_Out[2691] = \<const0> ;
  assign LOCKSTEP_Master_Out[2692] = \<const0> ;
  assign LOCKSTEP_Master_Out[2693] = \<const0> ;
  assign LOCKSTEP_Master_Out[2694] = \<const0> ;
  assign LOCKSTEP_Master_Out[2695] = \<const0> ;
  assign LOCKSTEP_Master_Out[2696] = \<const0> ;
  assign LOCKSTEP_Master_Out[2697] = \<const0> ;
  assign LOCKSTEP_Master_Out[2698] = \<const0> ;
  assign LOCKSTEP_Master_Out[2699] = \<const0> ;
  assign LOCKSTEP_Master_Out[2700] = \<const0> ;
  assign LOCKSTEP_Master_Out[2701] = \<const0> ;
  assign LOCKSTEP_Master_Out[2702] = \<const0> ;
  assign LOCKSTEP_Master_Out[2703] = \<const0> ;
  assign LOCKSTEP_Master_Out[2704] = \<const0> ;
  assign LOCKSTEP_Master_Out[2705] = \<const0> ;
  assign LOCKSTEP_Master_Out[2706] = \<const0> ;
  assign LOCKSTEP_Master_Out[2707] = \<const0> ;
  assign LOCKSTEP_Master_Out[2708] = \<const0> ;
  assign LOCKSTEP_Master_Out[2709] = \<const0> ;
  assign LOCKSTEP_Master_Out[2710] = \<const0> ;
  assign LOCKSTEP_Master_Out[2711] = \<const0> ;
  assign LOCKSTEP_Master_Out[2712] = \<const0> ;
  assign LOCKSTEP_Master_Out[2713] = \<const0> ;
  assign LOCKSTEP_Master_Out[2714] = \<const0> ;
  assign LOCKSTEP_Master_Out[2715] = \<const0> ;
  assign LOCKSTEP_Master_Out[2716] = \<const0> ;
  assign LOCKSTEP_Master_Out[2717] = \<const0> ;
  assign LOCKSTEP_Master_Out[2718] = \<const0> ;
  assign LOCKSTEP_Master_Out[2719] = \<const0> ;
  assign LOCKSTEP_Master_Out[2720] = \<const0> ;
  assign LOCKSTEP_Master_Out[2721] = \<const0> ;
  assign LOCKSTEP_Master_Out[2722] = \<const0> ;
  assign LOCKSTEP_Master_Out[2723] = \<const0> ;
  assign LOCKSTEP_Master_Out[2724] = \<const0> ;
  assign LOCKSTEP_Master_Out[2725] = \<const0> ;
  assign LOCKSTEP_Master_Out[2726] = \<const0> ;
  assign LOCKSTEP_Master_Out[2727] = \<const0> ;
  assign LOCKSTEP_Master_Out[2728] = \<const0> ;
  assign LOCKSTEP_Master_Out[2729] = \<const0> ;
  assign LOCKSTEP_Master_Out[2730] = \<const0> ;
  assign LOCKSTEP_Master_Out[2731] = \<const0> ;
  assign LOCKSTEP_Master_Out[2732] = \<const0> ;
  assign LOCKSTEP_Master_Out[2733] = \<const0> ;
  assign LOCKSTEP_Master_Out[2734] = \<const0> ;
  assign LOCKSTEP_Master_Out[2735] = \<const0> ;
  assign LOCKSTEP_Master_Out[2736] = \<const0> ;
  assign LOCKSTEP_Master_Out[2737] = \<const0> ;
  assign LOCKSTEP_Master_Out[2738] = \<const0> ;
  assign LOCKSTEP_Master_Out[2739] = \<const0> ;
  assign LOCKSTEP_Master_Out[2740] = \<const0> ;
  assign LOCKSTEP_Master_Out[2741] = \<const0> ;
  assign LOCKSTEP_Master_Out[2742] = \<const0> ;
  assign LOCKSTEP_Master_Out[2743] = \<const0> ;
  assign LOCKSTEP_Master_Out[2744] = \<const0> ;
  assign LOCKSTEP_Master_Out[2745] = \<const0> ;
  assign LOCKSTEP_Master_Out[2746] = \<const0> ;
  assign LOCKSTEP_Master_Out[2747] = \<const0> ;
  assign LOCKSTEP_Master_Out[2748] = \<const0> ;
  assign LOCKSTEP_Master_Out[2749] = \<const0> ;
  assign LOCKSTEP_Master_Out[2750] = \<const0> ;
  assign LOCKSTEP_Master_Out[2751] = \<const0> ;
  assign LOCKSTEP_Master_Out[2752] = \<const0> ;
  assign LOCKSTEP_Master_Out[2753] = \<const0> ;
  assign LOCKSTEP_Master_Out[2754] = \<const0> ;
  assign LOCKSTEP_Master_Out[2755] = \<const0> ;
  assign LOCKSTEP_Master_Out[2756] = \<const0> ;
  assign LOCKSTEP_Master_Out[2757] = \<const0> ;
  assign LOCKSTEP_Master_Out[2758] = \<const0> ;
  assign LOCKSTEP_Master_Out[2759] = \<const0> ;
  assign LOCKSTEP_Master_Out[2760] = \<const0> ;
  assign LOCKSTEP_Master_Out[2761] = \<const0> ;
  assign LOCKSTEP_Master_Out[2762] = \<const0> ;
  assign LOCKSTEP_Master_Out[2763] = \<const0> ;
  assign LOCKSTEP_Master_Out[2764] = \<const0> ;
  assign LOCKSTEP_Master_Out[2765] = \<const0> ;
  assign LOCKSTEP_Master_Out[2766] = \<const0> ;
  assign LOCKSTEP_Master_Out[2767] = \<const0> ;
  assign LOCKSTEP_Master_Out[2768] = \<const0> ;
  assign LOCKSTEP_Master_Out[2769] = \<const0> ;
  assign LOCKSTEP_Master_Out[2770] = \<const0> ;
  assign LOCKSTEP_Master_Out[2771] = \<const0> ;
  assign LOCKSTEP_Master_Out[2772] = \<const0> ;
  assign LOCKSTEP_Master_Out[2773] = \<const0> ;
  assign LOCKSTEP_Master_Out[2774] = \<const0> ;
  assign LOCKSTEP_Master_Out[2775] = \<const0> ;
  assign LOCKSTEP_Master_Out[2776] = \<const0> ;
  assign LOCKSTEP_Master_Out[2777] = \<const0> ;
  assign LOCKSTEP_Master_Out[2778] = \<const0> ;
  assign LOCKSTEP_Master_Out[2779] = \<const0> ;
  assign LOCKSTEP_Master_Out[2780] = \<const0> ;
  assign LOCKSTEP_Master_Out[2781] = \<const0> ;
  assign LOCKSTEP_Master_Out[2782] = \<const0> ;
  assign LOCKSTEP_Master_Out[2783] = \<const0> ;
  assign LOCKSTEP_Master_Out[2784] = \<const0> ;
  assign LOCKSTEP_Master_Out[2785] = \<const0> ;
  assign LOCKSTEP_Master_Out[2786] = \<const0> ;
  assign LOCKSTEP_Master_Out[2787] = \<const0> ;
  assign LOCKSTEP_Master_Out[2788] = \<const0> ;
  assign LOCKSTEP_Master_Out[2789] = \<const0> ;
  assign LOCKSTEP_Master_Out[2790] = \<const0> ;
  assign LOCKSTEP_Master_Out[2791] = \<const0> ;
  assign LOCKSTEP_Master_Out[2792] = \<const0> ;
  assign LOCKSTEP_Master_Out[2793] = \<const0> ;
  assign LOCKSTEP_Master_Out[2794] = \<const0> ;
  assign LOCKSTEP_Master_Out[2795] = \<const0> ;
  assign LOCKSTEP_Master_Out[2796] = \<const0> ;
  assign LOCKSTEP_Master_Out[2797] = \<const0> ;
  assign LOCKSTEP_Master_Out[2798] = \<const0> ;
  assign LOCKSTEP_Master_Out[2799] = \<const0> ;
  assign LOCKSTEP_Master_Out[2800] = \<const0> ;
  assign LOCKSTEP_Master_Out[2801] = \<const0> ;
  assign LOCKSTEP_Master_Out[2802] = \<const0> ;
  assign LOCKSTEP_Master_Out[2803] = \<const0> ;
  assign LOCKSTEP_Master_Out[2804] = \<const0> ;
  assign LOCKSTEP_Master_Out[2805] = \<const0> ;
  assign LOCKSTEP_Master_Out[2806] = \<const0> ;
  assign LOCKSTEP_Master_Out[2807] = \<const0> ;
  assign LOCKSTEP_Master_Out[2808] = \<const0> ;
  assign LOCKSTEP_Master_Out[2809] = \<const0> ;
  assign LOCKSTEP_Master_Out[2810] = \<const0> ;
  assign LOCKSTEP_Master_Out[2811] = \<const0> ;
  assign LOCKSTEP_Master_Out[2812] = \<const0> ;
  assign LOCKSTEP_Master_Out[2813] = \<const0> ;
  assign LOCKSTEP_Master_Out[2814] = \<const0> ;
  assign LOCKSTEP_Master_Out[2815] = \<const0> ;
  assign LOCKSTEP_Master_Out[2816] = \<const0> ;
  assign LOCKSTEP_Master_Out[2817] = \<const0> ;
  assign LOCKSTEP_Master_Out[2818] = \<const0> ;
  assign LOCKSTEP_Master_Out[2819] = \<const0> ;
  assign LOCKSTEP_Master_Out[2820] = \<const0> ;
  assign LOCKSTEP_Master_Out[2821] = \<const0> ;
  assign LOCKSTEP_Master_Out[2822] = \<const0> ;
  assign LOCKSTEP_Master_Out[2823] = \<const0> ;
  assign LOCKSTEP_Master_Out[2824] = \<const0> ;
  assign LOCKSTEP_Master_Out[2825] = \<const0> ;
  assign LOCKSTEP_Master_Out[2826] = \<const0> ;
  assign LOCKSTEP_Master_Out[2827] = \<const0> ;
  assign LOCKSTEP_Master_Out[2828] = \<const0> ;
  assign LOCKSTEP_Master_Out[2829] = \<const0> ;
  assign LOCKSTEP_Master_Out[2830] = \<const0> ;
  assign LOCKSTEP_Master_Out[2831] = \<const0> ;
  assign LOCKSTEP_Master_Out[2832] = \<const0> ;
  assign LOCKSTEP_Master_Out[2833] = \<const0> ;
  assign LOCKSTEP_Master_Out[2834] = \<const0> ;
  assign LOCKSTEP_Master_Out[2835] = \<const0> ;
  assign LOCKSTEP_Master_Out[2836] = \<const0> ;
  assign LOCKSTEP_Master_Out[2837] = \<const0> ;
  assign LOCKSTEP_Master_Out[2838] = \<const0> ;
  assign LOCKSTEP_Master_Out[2839] = \<const0> ;
  assign LOCKSTEP_Master_Out[2840] = \<const0> ;
  assign LOCKSTEP_Master_Out[2841] = \<const0> ;
  assign LOCKSTEP_Master_Out[2842] = \<const0> ;
  assign LOCKSTEP_Master_Out[2843] = \<const0> ;
  assign LOCKSTEP_Master_Out[2844] = \<const0> ;
  assign LOCKSTEP_Master_Out[2845] = \<const0> ;
  assign LOCKSTEP_Master_Out[2846] = \<const0> ;
  assign LOCKSTEP_Master_Out[2847] = \<const0> ;
  assign LOCKSTEP_Master_Out[2848] = \<const0> ;
  assign LOCKSTEP_Master_Out[2849] = \<const0> ;
  assign LOCKSTEP_Master_Out[2850] = \<const0> ;
  assign LOCKSTEP_Master_Out[2851] = \<const0> ;
  assign LOCKSTEP_Master_Out[2852] = \<const0> ;
  assign LOCKSTEP_Master_Out[2853] = \<const0> ;
  assign LOCKSTEP_Master_Out[2854] = \<const0> ;
  assign LOCKSTEP_Master_Out[2855] = \<const0> ;
  assign LOCKSTEP_Master_Out[2856] = \<const0> ;
  assign LOCKSTEP_Master_Out[2857] = \<const0> ;
  assign LOCKSTEP_Master_Out[2858] = \<const0> ;
  assign LOCKSTEP_Master_Out[2859] = \<const0> ;
  assign LOCKSTEP_Master_Out[2860] = \<const0> ;
  assign LOCKSTEP_Master_Out[2861] = \<const0> ;
  assign LOCKSTEP_Master_Out[2862] = \<const0> ;
  assign LOCKSTEP_Master_Out[2863] = \<const0> ;
  assign LOCKSTEP_Master_Out[2864] = \<const0> ;
  assign LOCKSTEP_Master_Out[2865] = \<const0> ;
  assign LOCKSTEP_Master_Out[2866] = \<const0> ;
  assign LOCKSTEP_Master_Out[2867] = \<const0> ;
  assign LOCKSTEP_Master_Out[2868] = \<const0> ;
  assign LOCKSTEP_Master_Out[2869] = \<const0> ;
  assign LOCKSTEP_Master_Out[2870] = \<const0> ;
  assign LOCKSTEP_Master_Out[2871] = \<const0> ;
  assign LOCKSTEP_Master_Out[2872] = \<const0> ;
  assign LOCKSTEP_Master_Out[2873] = \<const0> ;
  assign LOCKSTEP_Master_Out[2874] = \<const0> ;
  assign LOCKSTEP_Master_Out[2875] = \<const0> ;
  assign LOCKSTEP_Master_Out[2876] = \<const0> ;
  assign LOCKSTEP_Master_Out[2877] = \<const0> ;
  assign LOCKSTEP_Master_Out[2878] = \<const0> ;
  assign LOCKSTEP_Master_Out[2879] = \<const0> ;
  assign LOCKSTEP_Master_Out[2880] = \<const0> ;
  assign LOCKSTEP_Master_Out[2881] = \<const0> ;
  assign LOCKSTEP_Master_Out[2882] = \<const0> ;
  assign LOCKSTEP_Master_Out[2883] = \<const0> ;
  assign LOCKSTEP_Master_Out[2884] = \<const0> ;
  assign LOCKSTEP_Master_Out[2885] = \<const0> ;
  assign LOCKSTEP_Master_Out[2886] = \<const0> ;
  assign LOCKSTEP_Master_Out[2887] = \<const0> ;
  assign LOCKSTEP_Master_Out[2888] = \<const0> ;
  assign LOCKSTEP_Master_Out[2889] = \<const0> ;
  assign LOCKSTEP_Master_Out[2890] = \<const0> ;
  assign LOCKSTEP_Master_Out[2891] = \<const0> ;
  assign LOCKSTEP_Master_Out[2892] = \<const0> ;
  assign LOCKSTEP_Master_Out[2893] = \<const0> ;
  assign LOCKSTEP_Master_Out[2894] = \<const0> ;
  assign LOCKSTEP_Master_Out[2895] = \<const0> ;
  assign LOCKSTEP_Master_Out[2896] = \<const0> ;
  assign LOCKSTEP_Master_Out[2897] = \<const0> ;
  assign LOCKSTEP_Master_Out[2898] = \<const0> ;
  assign LOCKSTEP_Master_Out[2899] = \<const0> ;
  assign LOCKSTEP_Master_Out[2900] = \<const0> ;
  assign LOCKSTEP_Master_Out[2901] = \<const0> ;
  assign LOCKSTEP_Master_Out[2902] = \<const0> ;
  assign LOCKSTEP_Master_Out[2903] = \<const0> ;
  assign LOCKSTEP_Master_Out[2904] = \<const0> ;
  assign LOCKSTEP_Master_Out[2905] = \<const0> ;
  assign LOCKSTEP_Master_Out[2906] = \<const0> ;
  assign LOCKSTEP_Master_Out[2907] = \<const0> ;
  assign LOCKSTEP_Master_Out[2908] = \<const0> ;
  assign LOCKSTEP_Master_Out[2909] = \<const0> ;
  assign LOCKSTEP_Master_Out[2910] = \<const0> ;
  assign LOCKSTEP_Master_Out[2911] = \<const0> ;
  assign LOCKSTEP_Master_Out[2912] = \<const0> ;
  assign LOCKSTEP_Master_Out[2913] = \<const0> ;
  assign LOCKSTEP_Master_Out[2914] = \<const0> ;
  assign LOCKSTEP_Master_Out[2915] = \<const0> ;
  assign LOCKSTEP_Master_Out[2916] = \<const0> ;
  assign LOCKSTEP_Master_Out[2917] = \<const0> ;
  assign LOCKSTEP_Master_Out[2918] = \<const0> ;
  assign LOCKSTEP_Master_Out[2919] = \<const0> ;
  assign LOCKSTEP_Master_Out[2920] = \<const0> ;
  assign LOCKSTEP_Master_Out[2921] = \<const0> ;
  assign LOCKSTEP_Master_Out[2922] = \<const0> ;
  assign LOCKSTEP_Master_Out[2923] = \<const0> ;
  assign LOCKSTEP_Master_Out[2924] = \<const0> ;
  assign LOCKSTEP_Master_Out[2925] = \<const0> ;
  assign LOCKSTEP_Master_Out[2926] = \<const0> ;
  assign LOCKSTEP_Master_Out[2927] = \<const0> ;
  assign LOCKSTEP_Master_Out[2928] = \<const0> ;
  assign LOCKSTEP_Master_Out[2929] = \<const0> ;
  assign LOCKSTEP_Master_Out[2930] = \<const0> ;
  assign LOCKSTEP_Master_Out[2931] = \<const0> ;
  assign LOCKSTEP_Master_Out[2932] = \<const0> ;
  assign LOCKSTEP_Master_Out[2933] = \<const0> ;
  assign LOCKSTEP_Master_Out[2934] = \<const0> ;
  assign LOCKSTEP_Master_Out[2935] = \<const0> ;
  assign LOCKSTEP_Master_Out[2936] = \<const0> ;
  assign LOCKSTEP_Master_Out[2937] = \<const0> ;
  assign LOCKSTEP_Master_Out[2938] = \<const0> ;
  assign LOCKSTEP_Master_Out[2939] = \<const0> ;
  assign LOCKSTEP_Master_Out[2940] = \<const0> ;
  assign LOCKSTEP_Master_Out[2941] = \<const0> ;
  assign LOCKSTEP_Master_Out[2942] = \<const0> ;
  assign LOCKSTEP_Master_Out[2943] = \<const0> ;
  assign LOCKSTEP_Master_Out[2944] = \<const0> ;
  assign LOCKSTEP_Master_Out[2945] = \<const0> ;
  assign LOCKSTEP_Master_Out[2946] = \<const0> ;
  assign LOCKSTEP_Master_Out[2947] = \<const0> ;
  assign LOCKSTEP_Master_Out[2948] = \<const0> ;
  assign LOCKSTEP_Master_Out[2949] = \<const0> ;
  assign LOCKSTEP_Master_Out[2950] = \<const0> ;
  assign LOCKSTEP_Master_Out[2951] = \<const0> ;
  assign LOCKSTEP_Master_Out[2952] = \<const0> ;
  assign LOCKSTEP_Master_Out[2953] = \<const0> ;
  assign LOCKSTEP_Master_Out[2954] = \<const0> ;
  assign LOCKSTEP_Master_Out[2955] = \<const0> ;
  assign LOCKSTEP_Master_Out[2956] = \<const0> ;
  assign LOCKSTEP_Master_Out[2957] = \<const0> ;
  assign LOCKSTEP_Master_Out[2958] = \<const0> ;
  assign LOCKSTEP_Master_Out[2959] = \<const0> ;
  assign LOCKSTEP_Master_Out[2960] = \<const0> ;
  assign LOCKSTEP_Master_Out[2961] = \<const0> ;
  assign LOCKSTEP_Master_Out[2962] = \<const0> ;
  assign LOCKSTEP_Master_Out[2963] = \<const0> ;
  assign LOCKSTEP_Master_Out[2964] = \<const0> ;
  assign LOCKSTEP_Master_Out[2965] = \<const0> ;
  assign LOCKSTEP_Master_Out[2966] = \<const0> ;
  assign LOCKSTEP_Master_Out[2967] = \<const0> ;
  assign LOCKSTEP_Master_Out[2968] = \<const0> ;
  assign LOCKSTEP_Master_Out[2969] = \<const0> ;
  assign LOCKSTEP_Master_Out[2970] = \<const0> ;
  assign LOCKSTEP_Master_Out[2971] = \<const0> ;
  assign LOCKSTEP_Master_Out[2972] = \<const0> ;
  assign LOCKSTEP_Master_Out[2973] = \<const0> ;
  assign LOCKSTEP_Master_Out[2974] = \<const0> ;
  assign LOCKSTEP_Master_Out[2975] = \<const0> ;
  assign LOCKSTEP_Master_Out[2976] = \<const0> ;
  assign LOCKSTEP_Master_Out[2977] = \<const0> ;
  assign LOCKSTEP_Master_Out[2978] = \<const0> ;
  assign LOCKSTEP_Master_Out[2979] = \<const0> ;
  assign LOCKSTEP_Master_Out[2980] = \<const0> ;
  assign LOCKSTEP_Master_Out[2981] = \<const0> ;
  assign LOCKSTEP_Master_Out[2982] = \<const0> ;
  assign LOCKSTEP_Master_Out[2983] = \<const0> ;
  assign LOCKSTEP_Master_Out[2984] = \<const0> ;
  assign LOCKSTEP_Master_Out[2985] = \<const0> ;
  assign LOCKSTEP_Master_Out[2986] = \<const0> ;
  assign LOCKSTEP_Master_Out[2987] = \<const0> ;
  assign LOCKSTEP_Master_Out[2988] = \<const0> ;
  assign LOCKSTEP_Master_Out[2989] = \<const0> ;
  assign LOCKSTEP_Master_Out[2990] = \<const0> ;
  assign LOCKSTEP_Master_Out[2991] = \<const0> ;
  assign LOCKSTEP_Master_Out[2992] = \<const0> ;
  assign LOCKSTEP_Master_Out[2993] = \<const0> ;
  assign LOCKSTEP_Master_Out[2994] = \<const0> ;
  assign LOCKSTEP_Master_Out[2995] = \<const0> ;
  assign LOCKSTEP_Master_Out[2996] = \<const0> ;
  assign LOCKSTEP_Master_Out[2997] = \<const0> ;
  assign LOCKSTEP_Master_Out[2998] = \<const0> ;
  assign LOCKSTEP_Master_Out[2999] = \<const0> ;
  assign LOCKSTEP_Master_Out[3000] = \<const0> ;
  assign LOCKSTEP_Master_Out[3001] = \<const0> ;
  assign LOCKSTEP_Master_Out[3002] = \<const0> ;
  assign LOCKSTEP_Master_Out[3003] = \<const0> ;
  assign LOCKSTEP_Master_Out[3004] = \<const0> ;
  assign LOCKSTEP_Master_Out[3005] = \<const0> ;
  assign LOCKSTEP_Master_Out[3006] = \<const0> ;
  assign LOCKSTEP_Master_Out[3007] = \<const0> ;
  assign LOCKSTEP_Master_Out[3008] = \<const0> ;
  assign LOCKSTEP_Master_Out[3009] = \<const0> ;
  assign LOCKSTEP_Master_Out[3010] = \<const0> ;
  assign LOCKSTEP_Master_Out[3011] = \<const0> ;
  assign LOCKSTEP_Master_Out[3012] = \<const0> ;
  assign LOCKSTEP_Master_Out[3013] = \<const0> ;
  assign LOCKSTEP_Master_Out[3014] = \<const0> ;
  assign LOCKSTEP_Master_Out[3015] = \<const0> ;
  assign LOCKSTEP_Master_Out[3016] = \<const0> ;
  assign LOCKSTEP_Master_Out[3017] = \<const0> ;
  assign LOCKSTEP_Master_Out[3018] = \<const0> ;
  assign LOCKSTEP_Master_Out[3019] = \<const0> ;
  assign LOCKSTEP_Master_Out[3020] = \<const0> ;
  assign LOCKSTEP_Master_Out[3021] = \<const0> ;
  assign LOCKSTEP_Master_Out[3022] = \<const0> ;
  assign LOCKSTEP_Master_Out[3023] = \<const0> ;
  assign LOCKSTEP_Master_Out[3024] = \<const0> ;
  assign LOCKSTEP_Master_Out[3025] = \<const0> ;
  assign LOCKSTEP_Master_Out[3026] = \<const0> ;
  assign LOCKSTEP_Master_Out[3027] = \<const0> ;
  assign LOCKSTEP_Master_Out[3028] = \<const0> ;
  assign LOCKSTEP_Master_Out[3029] = \<const0> ;
  assign LOCKSTEP_Master_Out[3030] = \<const0> ;
  assign LOCKSTEP_Master_Out[3031] = \<const0> ;
  assign LOCKSTEP_Master_Out[3032] = \<const0> ;
  assign LOCKSTEP_Master_Out[3033] = \<const0> ;
  assign LOCKSTEP_Master_Out[3034] = \<const0> ;
  assign LOCKSTEP_Master_Out[3035] = \<const0> ;
  assign LOCKSTEP_Master_Out[3036] = \<const0> ;
  assign LOCKSTEP_Master_Out[3037] = \<const0> ;
  assign LOCKSTEP_Master_Out[3038] = \<const0> ;
  assign LOCKSTEP_Master_Out[3039] = \<const0> ;
  assign LOCKSTEP_Master_Out[3040] = \<const0> ;
  assign LOCKSTEP_Master_Out[3041] = \<const0> ;
  assign LOCKSTEP_Master_Out[3042] = \<const0> ;
  assign LOCKSTEP_Master_Out[3043] = \<const0> ;
  assign LOCKSTEP_Master_Out[3044] = \<const0> ;
  assign LOCKSTEP_Master_Out[3045] = \<const0> ;
  assign LOCKSTEP_Master_Out[3046] = \<const0> ;
  assign LOCKSTEP_Master_Out[3047] = \<const0> ;
  assign LOCKSTEP_Master_Out[3048] = \<const0> ;
  assign LOCKSTEP_Master_Out[3049] = \<const0> ;
  assign LOCKSTEP_Master_Out[3050] = \<const0> ;
  assign LOCKSTEP_Master_Out[3051] = \<const0> ;
  assign LOCKSTEP_Master_Out[3052] = \<const0> ;
  assign LOCKSTEP_Master_Out[3053] = \<const0> ;
  assign LOCKSTEP_Master_Out[3054] = \<const0> ;
  assign LOCKSTEP_Master_Out[3055] = \<const0> ;
  assign LOCKSTEP_Master_Out[3056] = \<const0> ;
  assign LOCKSTEP_Master_Out[3057] = \<const0> ;
  assign LOCKSTEP_Master_Out[3058] = \<const0> ;
  assign LOCKSTEP_Master_Out[3059] = \<const0> ;
  assign LOCKSTEP_Master_Out[3060] = \<const0> ;
  assign LOCKSTEP_Master_Out[3061] = \<const0> ;
  assign LOCKSTEP_Master_Out[3062] = \<const0> ;
  assign LOCKSTEP_Master_Out[3063] = \<const0> ;
  assign LOCKSTEP_Master_Out[3064] = \<const0> ;
  assign LOCKSTEP_Master_Out[3065] = \<const0> ;
  assign LOCKSTEP_Master_Out[3066] = \<const0> ;
  assign LOCKSTEP_Master_Out[3067] = \<const0> ;
  assign LOCKSTEP_Master_Out[3068] = \<const0> ;
  assign LOCKSTEP_Master_Out[3069] = \<const0> ;
  assign LOCKSTEP_Master_Out[3070] = \<const0> ;
  assign LOCKSTEP_Master_Out[3071] = \<const0> ;
  assign LOCKSTEP_Master_Out[3072] = \<const0> ;
  assign LOCKSTEP_Master_Out[3073] = \<const0> ;
  assign LOCKSTEP_Master_Out[3074] = \<const0> ;
  assign LOCKSTEP_Master_Out[3075] = \<const0> ;
  assign LOCKSTEP_Master_Out[3076] = \<const0> ;
  assign LOCKSTEP_Master_Out[3077] = \<const0> ;
  assign LOCKSTEP_Master_Out[3078] = \<const0> ;
  assign LOCKSTEP_Master_Out[3079] = \<const0> ;
  assign LOCKSTEP_Master_Out[3080] = \<const0> ;
  assign LOCKSTEP_Master_Out[3081] = \<const0> ;
  assign LOCKSTEP_Master_Out[3082] = \<const0> ;
  assign LOCKSTEP_Master_Out[3083] = \<const0> ;
  assign LOCKSTEP_Master_Out[3084] = \<const0> ;
  assign LOCKSTEP_Master_Out[3085] = \<const0> ;
  assign LOCKSTEP_Master_Out[3086] = \<const0> ;
  assign LOCKSTEP_Master_Out[3087] = \<const0> ;
  assign LOCKSTEP_Master_Out[3088] = \<const0> ;
  assign LOCKSTEP_Master_Out[3089] = \<const0> ;
  assign LOCKSTEP_Master_Out[3090] = \<const0> ;
  assign LOCKSTEP_Master_Out[3091] = \<const0> ;
  assign LOCKSTEP_Master_Out[3092] = \<const0> ;
  assign LOCKSTEP_Master_Out[3093] = \<const0> ;
  assign LOCKSTEP_Master_Out[3094] = \<const0> ;
  assign LOCKSTEP_Master_Out[3095] = \<const0> ;
  assign LOCKSTEP_Master_Out[3096] = \<const0> ;
  assign LOCKSTEP_Master_Out[3097] = \<const0> ;
  assign LOCKSTEP_Master_Out[3098] = \<const0> ;
  assign LOCKSTEP_Master_Out[3099] = \<const0> ;
  assign LOCKSTEP_Master_Out[3100] = \<const0> ;
  assign LOCKSTEP_Master_Out[3101] = \<const0> ;
  assign LOCKSTEP_Master_Out[3102] = \<const0> ;
  assign LOCKSTEP_Master_Out[3103] = \<const0> ;
  assign LOCKSTEP_Master_Out[3104] = \<const0> ;
  assign LOCKSTEP_Master_Out[3105] = \<const0> ;
  assign LOCKSTEP_Master_Out[3106] = \<const0> ;
  assign LOCKSTEP_Master_Out[3107] = \<const0> ;
  assign LOCKSTEP_Master_Out[3108] = \<const0> ;
  assign LOCKSTEP_Master_Out[3109] = \<const0> ;
  assign LOCKSTEP_Master_Out[3110] = \<const0> ;
  assign LOCKSTEP_Master_Out[3111] = \<const0> ;
  assign LOCKSTEP_Master_Out[3112] = \<const0> ;
  assign LOCKSTEP_Master_Out[3113] = \<const0> ;
  assign LOCKSTEP_Master_Out[3114] = \<const0> ;
  assign LOCKSTEP_Master_Out[3115] = \<const0> ;
  assign LOCKSTEP_Master_Out[3116] = \<const0> ;
  assign LOCKSTEP_Master_Out[3117] = \<const0> ;
  assign LOCKSTEP_Master_Out[3118] = \<const0> ;
  assign LOCKSTEP_Master_Out[3119] = \<const0> ;
  assign LOCKSTEP_Master_Out[3120] = \<const0> ;
  assign LOCKSTEP_Master_Out[3121] = \<const0> ;
  assign LOCKSTEP_Master_Out[3122] = \<const0> ;
  assign LOCKSTEP_Master_Out[3123] = \<const0> ;
  assign LOCKSTEP_Master_Out[3124] = \<const0> ;
  assign LOCKSTEP_Master_Out[3125] = \<const0> ;
  assign LOCKSTEP_Master_Out[3126] = \<const0> ;
  assign LOCKSTEP_Master_Out[3127] = \<const0> ;
  assign LOCKSTEP_Master_Out[3128] = \<const0> ;
  assign LOCKSTEP_Master_Out[3129] = \<const0> ;
  assign LOCKSTEP_Master_Out[3130] = \<const0> ;
  assign LOCKSTEP_Master_Out[3131] = \<const0> ;
  assign LOCKSTEP_Master_Out[3132] = \<const0> ;
  assign LOCKSTEP_Master_Out[3133] = \<const0> ;
  assign LOCKSTEP_Master_Out[3134] = \<const0> ;
  assign LOCKSTEP_Master_Out[3135] = \<const0> ;
  assign LOCKSTEP_Master_Out[3136] = \<const0> ;
  assign LOCKSTEP_Master_Out[3137] = \<const0> ;
  assign LOCKSTEP_Master_Out[3138] = \<const0> ;
  assign LOCKSTEP_Master_Out[3139] = \<const0> ;
  assign LOCKSTEP_Master_Out[3140] = \<const0> ;
  assign LOCKSTEP_Master_Out[3141] = \<const0> ;
  assign LOCKSTEP_Master_Out[3142] = \<const0> ;
  assign LOCKSTEP_Master_Out[3143] = \<const0> ;
  assign LOCKSTEP_Master_Out[3144] = \<const0> ;
  assign LOCKSTEP_Master_Out[3145] = \<const0> ;
  assign LOCKSTEP_Master_Out[3146] = \<const0> ;
  assign LOCKSTEP_Master_Out[3147] = \<const0> ;
  assign LOCKSTEP_Master_Out[3148] = \<const0> ;
  assign LOCKSTEP_Master_Out[3149] = \<const0> ;
  assign LOCKSTEP_Master_Out[3150] = \<const0> ;
  assign LOCKSTEP_Master_Out[3151] = \<const0> ;
  assign LOCKSTEP_Master_Out[3152] = \<const0> ;
  assign LOCKSTEP_Master_Out[3153] = \<const0> ;
  assign LOCKSTEP_Master_Out[3154] = \<const0> ;
  assign LOCKSTEP_Master_Out[3155] = \<const0> ;
  assign LOCKSTEP_Master_Out[3156] = \<const0> ;
  assign LOCKSTEP_Master_Out[3157] = \<const0> ;
  assign LOCKSTEP_Master_Out[3158] = \<const0> ;
  assign LOCKSTEP_Master_Out[3159] = \<const0> ;
  assign LOCKSTEP_Master_Out[3160] = \<const0> ;
  assign LOCKSTEP_Master_Out[3161] = \<const0> ;
  assign LOCKSTEP_Master_Out[3162] = \<const0> ;
  assign LOCKSTEP_Master_Out[3163] = \<const0> ;
  assign LOCKSTEP_Master_Out[3164] = \<const0> ;
  assign LOCKSTEP_Master_Out[3165] = \<const0> ;
  assign LOCKSTEP_Master_Out[3166] = \<const0> ;
  assign LOCKSTEP_Master_Out[3167] = \<const0> ;
  assign LOCKSTEP_Master_Out[3168] = \<const0> ;
  assign LOCKSTEP_Master_Out[3169] = \<const0> ;
  assign LOCKSTEP_Master_Out[3170] = \<const0> ;
  assign LOCKSTEP_Master_Out[3171] = \<const0> ;
  assign LOCKSTEP_Master_Out[3172] = \<const0> ;
  assign LOCKSTEP_Master_Out[3173] = \<const0> ;
  assign LOCKSTEP_Master_Out[3174] = \<const0> ;
  assign LOCKSTEP_Master_Out[3175] = \<const0> ;
  assign LOCKSTEP_Master_Out[3176] = \<const0> ;
  assign LOCKSTEP_Master_Out[3177] = \<const0> ;
  assign LOCKSTEP_Master_Out[3178] = \<const0> ;
  assign LOCKSTEP_Master_Out[3179] = \<const0> ;
  assign LOCKSTEP_Master_Out[3180] = \<const0> ;
  assign LOCKSTEP_Master_Out[3181] = \<const0> ;
  assign LOCKSTEP_Master_Out[3182] = \<const0> ;
  assign LOCKSTEP_Master_Out[3183] = \<const0> ;
  assign LOCKSTEP_Master_Out[3184] = \<const0> ;
  assign LOCKSTEP_Master_Out[3185] = \<const0> ;
  assign LOCKSTEP_Master_Out[3186] = \<const0> ;
  assign LOCKSTEP_Master_Out[3187] = \<const0> ;
  assign LOCKSTEP_Master_Out[3188] = \<const0> ;
  assign LOCKSTEP_Master_Out[3189] = \<const0> ;
  assign LOCKSTEP_Master_Out[3190] = \<const0> ;
  assign LOCKSTEP_Master_Out[3191] = \<const0> ;
  assign LOCKSTEP_Master_Out[3192] = \<const0> ;
  assign LOCKSTEP_Master_Out[3193] = \<const0> ;
  assign LOCKSTEP_Master_Out[3194] = \<const0> ;
  assign LOCKSTEP_Master_Out[3195] = \<const0> ;
  assign LOCKSTEP_Master_Out[3196] = \<const0> ;
  assign LOCKSTEP_Master_Out[3197] = \<const0> ;
  assign LOCKSTEP_Master_Out[3198] = \<const0> ;
  assign LOCKSTEP_Master_Out[3199] = \<const0> ;
  assign LOCKSTEP_Master_Out[3200] = \<const0> ;
  assign LOCKSTEP_Master_Out[3201] = \<const0> ;
  assign LOCKSTEP_Master_Out[3202] = \<const0> ;
  assign LOCKSTEP_Master_Out[3203] = \<const0> ;
  assign LOCKSTEP_Master_Out[3204] = \<const0> ;
  assign LOCKSTEP_Master_Out[3205] = \<const0> ;
  assign LOCKSTEP_Master_Out[3206] = \<const0> ;
  assign LOCKSTEP_Master_Out[3207] = \<const0> ;
  assign LOCKSTEP_Master_Out[3208] = \<const0> ;
  assign LOCKSTEP_Master_Out[3209] = \<const0> ;
  assign LOCKSTEP_Master_Out[3210] = \<const0> ;
  assign LOCKSTEP_Master_Out[3211] = \<const0> ;
  assign LOCKSTEP_Master_Out[3212] = \<const0> ;
  assign LOCKSTEP_Master_Out[3213] = \<const0> ;
  assign LOCKSTEP_Master_Out[3214] = \<const0> ;
  assign LOCKSTEP_Master_Out[3215] = \<const0> ;
  assign LOCKSTEP_Master_Out[3216] = \<const0> ;
  assign LOCKSTEP_Master_Out[3217] = \<const0> ;
  assign LOCKSTEP_Master_Out[3218] = \<const0> ;
  assign LOCKSTEP_Master_Out[3219] = \<const0> ;
  assign LOCKSTEP_Master_Out[3220] = \<const0> ;
  assign LOCKSTEP_Master_Out[3221] = \<const0> ;
  assign LOCKSTEP_Master_Out[3222] = \<const0> ;
  assign LOCKSTEP_Master_Out[3223] = \<const0> ;
  assign LOCKSTEP_Master_Out[3224] = \<const0> ;
  assign LOCKSTEP_Master_Out[3225] = \<const0> ;
  assign LOCKSTEP_Master_Out[3226] = \<const0> ;
  assign LOCKSTEP_Master_Out[3227] = \<const0> ;
  assign LOCKSTEP_Master_Out[3228] = \<const0> ;
  assign LOCKSTEP_Master_Out[3229] = \<const0> ;
  assign LOCKSTEP_Master_Out[3230] = \<const0> ;
  assign LOCKSTEP_Master_Out[3231] = \<const0> ;
  assign LOCKSTEP_Master_Out[3232] = \<const0> ;
  assign LOCKSTEP_Master_Out[3233] = \<const0> ;
  assign LOCKSTEP_Master_Out[3234] = \<const0> ;
  assign LOCKSTEP_Master_Out[3235] = \<const0> ;
  assign LOCKSTEP_Master_Out[3236] = \<const0> ;
  assign LOCKSTEP_Master_Out[3237] = \<const0> ;
  assign LOCKSTEP_Master_Out[3238] = \<const0> ;
  assign LOCKSTEP_Master_Out[3239] = \<const0> ;
  assign LOCKSTEP_Master_Out[3240] = \<const0> ;
  assign LOCKSTEP_Master_Out[3241] = \<const0> ;
  assign LOCKSTEP_Master_Out[3242] = \<const0> ;
  assign LOCKSTEP_Master_Out[3243] = \<const0> ;
  assign LOCKSTEP_Master_Out[3244] = \<const0> ;
  assign LOCKSTEP_Master_Out[3245] = \<const0> ;
  assign LOCKSTEP_Master_Out[3246] = \<const0> ;
  assign LOCKSTEP_Master_Out[3247] = \<const0> ;
  assign LOCKSTEP_Master_Out[3248] = \<const0> ;
  assign LOCKSTEP_Master_Out[3249] = \<const0> ;
  assign LOCKSTEP_Master_Out[3250] = \<const0> ;
  assign LOCKSTEP_Master_Out[3251] = \<const0> ;
  assign LOCKSTEP_Master_Out[3252] = \<const0> ;
  assign LOCKSTEP_Master_Out[3253] = \<const0> ;
  assign LOCKSTEP_Master_Out[3254] = \<const0> ;
  assign LOCKSTEP_Master_Out[3255] = \<const0> ;
  assign LOCKSTEP_Master_Out[3256] = \<const0> ;
  assign LOCKSTEP_Master_Out[3257] = \<const0> ;
  assign LOCKSTEP_Master_Out[3258] = \<const0> ;
  assign LOCKSTEP_Master_Out[3259] = \<const0> ;
  assign LOCKSTEP_Master_Out[3260] = \<const0> ;
  assign LOCKSTEP_Master_Out[3261] = \<const0> ;
  assign LOCKSTEP_Master_Out[3262] = \<const0> ;
  assign LOCKSTEP_Master_Out[3263] = \<const0> ;
  assign LOCKSTEP_Master_Out[3264] = \<const0> ;
  assign LOCKSTEP_Master_Out[3265] = \<const0> ;
  assign LOCKSTEP_Master_Out[3266] = \<const0> ;
  assign LOCKSTEP_Master_Out[3267] = \<const0> ;
  assign LOCKSTEP_Master_Out[3268] = \<const0> ;
  assign LOCKSTEP_Master_Out[3269] = \<const0> ;
  assign LOCKSTEP_Master_Out[3270] = \<const0> ;
  assign LOCKSTEP_Master_Out[3271] = \<const0> ;
  assign LOCKSTEP_Master_Out[3272] = \<const0> ;
  assign LOCKSTEP_Master_Out[3273] = \<const0> ;
  assign LOCKSTEP_Master_Out[3274] = \<const0> ;
  assign LOCKSTEP_Master_Out[3275] = \<const0> ;
  assign LOCKSTEP_Master_Out[3276] = \<const0> ;
  assign LOCKSTEP_Master_Out[3277] = \<const0> ;
  assign LOCKSTEP_Master_Out[3278] = \<const0> ;
  assign LOCKSTEP_Master_Out[3279] = \<const0> ;
  assign LOCKSTEP_Master_Out[3280] = \<const0> ;
  assign LOCKSTEP_Master_Out[3281] = \<const0> ;
  assign LOCKSTEP_Master_Out[3282] = \<const0> ;
  assign LOCKSTEP_Master_Out[3283] = \<const0> ;
  assign LOCKSTEP_Master_Out[3284] = \<const0> ;
  assign LOCKSTEP_Master_Out[3285] = \<const0> ;
  assign LOCKSTEP_Master_Out[3286] = \<const0> ;
  assign LOCKSTEP_Master_Out[3287] = \<const0> ;
  assign LOCKSTEP_Master_Out[3288] = \<const0> ;
  assign LOCKSTEP_Master_Out[3289] = \<const0> ;
  assign LOCKSTEP_Master_Out[3290] = \<const0> ;
  assign LOCKSTEP_Master_Out[3291] = \<const0> ;
  assign LOCKSTEP_Master_Out[3292] = \<const0> ;
  assign LOCKSTEP_Master_Out[3293] = \<const0> ;
  assign LOCKSTEP_Master_Out[3294] = \<const0> ;
  assign LOCKSTEP_Master_Out[3295] = \<const0> ;
  assign LOCKSTEP_Master_Out[3296] = \<const0> ;
  assign LOCKSTEP_Master_Out[3297] = \<const0> ;
  assign LOCKSTEP_Master_Out[3298] = \<const0> ;
  assign LOCKSTEP_Master_Out[3299] = \<const0> ;
  assign LOCKSTEP_Master_Out[3300] = \<const0> ;
  assign LOCKSTEP_Master_Out[3301] = \<const0> ;
  assign LOCKSTEP_Master_Out[3302] = \<const0> ;
  assign LOCKSTEP_Master_Out[3303] = \<const0> ;
  assign LOCKSTEP_Master_Out[3304] = \<const0> ;
  assign LOCKSTEP_Master_Out[3305] = \<const0> ;
  assign LOCKSTEP_Master_Out[3306] = \<const0> ;
  assign LOCKSTEP_Master_Out[3307] = \<const0> ;
  assign LOCKSTEP_Master_Out[3308] = \<const0> ;
  assign LOCKSTEP_Master_Out[3309] = \<const0> ;
  assign LOCKSTEP_Master_Out[3310] = \<const0> ;
  assign LOCKSTEP_Master_Out[3311] = \<const0> ;
  assign LOCKSTEP_Master_Out[3312] = \<const0> ;
  assign LOCKSTEP_Master_Out[3313] = \<const0> ;
  assign LOCKSTEP_Master_Out[3314] = \<const0> ;
  assign LOCKSTEP_Master_Out[3315] = \<const0> ;
  assign LOCKSTEP_Master_Out[3316] = \<const0> ;
  assign LOCKSTEP_Master_Out[3317] = \<const0> ;
  assign LOCKSTEP_Master_Out[3318] = \<const0> ;
  assign LOCKSTEP_Master_Out[3319] = \<const0> ;
  assign LOCKSTEP_Master_Out[3320] = \<const0> ;
  assign LOCKSTEP_Master_Out[3321] = \<const0> ;
  assign LOCKSTEP_Master_Out[3322] = \<const0> ;
  assign LOCKSTEP_Master_Out[3323] = \<const0> ;
  assign LOCKSTEP_Master_Out[3324] = \<const0> ;
  assign LOCKSTEP_Master_Out[3325] = \<const0> ;
  assign LOCKSTEP_Master_Out[3326] = \<const0> ;
  assign LOCKSTEP_Master_Out[3327] = \<const0> ;
  assign LOCKSTEP_Master_Out[3328] = \<const0> ;
  assign LOCKSTEP_Master_Out[3329] = \<const0> ;
  assign LOCKSTEP_Master_Out[3330] = \<const0> ;
  assign LOCKSTEP_Master_Out[3331] = \<const0> ;
  assign LOCKSTEP_Master_Out[3332] = \<const0> ;
  assign LOCKSTEP_Master_Out[3333] = \<const0> ;
  assign LOCKSTEP_Master_Out[3334] = \<const0> ;
  assign LOCKSTEP_Master_Out[3335] = \<const0> ;
  assign LOCKSTEP_Master_Out[3336] = \<const0> ;
  assign LOCKSTEP_Master_Out[3337] = \<const0> ;
  assign LOCKSTEP_Master_Out[3338] = \<const0> ;
  assign LOCKSTEP_Master_Out[3339] = \<const0> ;
  assign LOCKSTEP_Master_Out[3340] = \<const0> ;
  assign LOCKSTEP_Master_Out[3341] = \<const0> ;
  assign LOCKSTEP_Master_Out[3342] = \<const0> ;
  assign LOCKSTEP_Master_Out[3343] = \<const0> ;
  assign LOCKSTEP_Master_Out[3344] = \<const0> ;
  assign LOCKSTEP_Master_Out[3345] = \<const0> ;
  assign LOCKSTEP_Master_Out[3346] = \<const0> ;
  assign LOCKSTEP_Master_Out[3347] = \<const0> ;
  assign LOCKSTEP_Master_Out[3348] = \<const0> ;
  assign LOCKSTEP_Master_Out[3349] = \<const0> ;
  assign LOCKSTEP_Master_Out[3350] = \<const0> ;
  assign LOCKSTEP_Master_Out[3351] = \<const0> ;
  assign LOCKSTEP_Master_Out[3352] = \<const0> ;
  assign LOCKSTEP_Master_Out[3353] = \<const0> ;
  assign LOCKSTEP_Master_Out[3354] = \<const0> ;
  assign LOCKSTEP_Master_Out[3355] = \<const0> ;
  assign LOCKSTEP_Master_Out[3356] = \<const0> ;
  assign LOCKSTEP_Master_Out[3357] = \<const0> ;
  assign LOCKSTEP_Master_Out[3358] = \<const0> ;
  assign LOCKSTEP_Master_Out[3359] = \<const0> ;
  assign LOCKSTEP_Master_Out[3360] = \<const0> ;
  assign LOCKSTEP_Master_Out[3361] = \<const0> ;
  assign LOCKSTEP_Master_Out[3362] = \<const0> ;
  assign LOCKSTEP_Master_Out[3363] = \<const0> ;
  assign LOCKSTEP_Master_Out[3364] = \<const0> ;
  assign LOCKSTEP_Master_Out[3365] = \<const0> ;
  assign LOCKSTEP_Master_Out[3366] = \<const0> ;
  assign LOCKSTEP_Master_Out[3367] = \<const0> ;
  assign LOCKSTEP_Master_Out[3368] = \<const0> ;
  assign LOCKSTEP_Master_Out[3369] = \<const0> ;
  assign LOCKSTEP_Master_Out[3370] = \<const0> ;
  assign LOCKSTEP_Master_Out[3371] = \<const0> ;
  assign LOCKSTEP_Master_Out[3372] = \<const0> ;
  assign LOCKSTEP_Master_Out[3373] = \<const0> ;
  assign LOCKSTEP_Master_Out[3374] = \<const0> ;
  assign LOCKSTEP_Master_Out[3375] = \<const0> ;
  assign LOCKSTEP_Master_Out[3376] = \<const0> ;
  assign LOCKSTEP_Master_Out[3377] = \<const0> ;
  assign LOCKSTEP_Master_Out[3378] = \<const0> ;
  assign LOCKSTEP_Master_Out[3379] = \<const0> ;
  assign LOCKSTEP_Master_Out[3380] = \<const0> ;
  assign LOCKSTEP_Master_Out[3381] = \<const0> ;
  assign LOCKSTEP_Master_Out[3382] = \<const0> ;
  assign LOCKSTEP_Master_Out[3383] = \<const0> ;
  assign LOCKSTEP_Master_Out[3384] = \<const0> ;
  assign LOCKSTEP_Master_Out[3385] = \<const0> ;
  assign LOCKSTEP_Master_Out[3386] = \<const0> ;
  assign LOCKSTEP_Master_Out[3387] = \<const0> ;
  assign LOCKSTEP_Master_Out[3388] = \<const0> ;
  assign LOCKSTEP_Master_Out[3389] = \<const0> ;
  assign LOCKSTEP_Master_Out[3390] = \<const0> ;
  assign LOCKSTEP_Master_Out[3391] = \<const0> ;
  assign LOCKSTEP_Master_Out[3392] = \<const0> ;
  assign LOCKSTEP_Master_Out[3393] = \<const0> ;
  assign LOCKSTEP_Master_Out[3394] = \<const0> ;
  assign LOCKSTEP_Master_Out[3395] = \<const0> ;
  assign LOCKSTEP_Master_Out[3396] = \<const0> ;
  assign LOCKSTEP_Master_Out[3397] = \<const0> ;
  assign LOCKSTEP_Master_Out[3398] = \<const0> ;
  assign LOCKSTEP_Master_Out[3399] = \<const0> ;
  assign LOCKSTEP_Master_Out[3400] = \<const0> ;
  assign LOCKSTEP_Master_Out[3401] = \<const0> ;
  assign LOCKSTEP_Master_Out[3402] = \<const0> ;
  assign LOCKSTEP_Master_Out[3403] = \<const0> ;
  assign LOCKSTEP_Master_Out[3404] = \<const0> ;
  assign LOCKSTEP_Master_Out[3405] = \<const0> ;
  assign LOCKSTEP_Master_Out[3406] = \<const0> ;
  assign LOCKSTEP_Master_Out[3407] = \<const0> ;
  assign LOCKSTEP_Master_Out[3408] = \<const0> ;
  assign LOCKSTEP_Master_Out[3409] = \<const0> ;
  assign LOCKSTEP_Master_Out[3410] = \<const0> ;
  assign LOCKSTEP_Master_Out[3411] = \<const0> ;
  assign LOCKSTEP_Master_Out[3412] = \<const0> ;
  assign LOCKSTEP_Master_Out[3413] = \<const0> ;
  assign LOCKSTEP_Master_Out[3414] = \<const0> ;
  assign LOCKSTEP_Master_Out[3415] = \<const0> ;
  assign LOCKSTEP_Master_Out[3416] = \<const0> ;
  assign LOCKSTEP_Master_Out[3417] = \<const0> ;
  assign LOCKSTEP_Master_Out[3418] = \<const0> ;
  assign LOCKSTEP_Master_Out[3419] = \<const0> ;
  assign LOCKSTEP_Master_Out[3420] = \<const0> ;
  assign LOCKSTEP_Master_Out[3421] = \<const0> ;
  assign LOCKSTEP_Master_Out[3422] = \<const0> ;
  assign LOCKSTEP_Master_Out[3423] = \<const0> ;
  assign LOCKSTEP_Master_Out[3424] = \<const0> ;
  assign LOCKSTEP_Master_Out[3425] = \<const0> ;
  assign LOCKSTEP_Master_Out[3426] = \<const0> ;
  assign LOCKSTEP_Master_Out[3427] = \<const0> ;
  assign LOCKSTEP_Master_Out[3428] = \<const0> ;
  assign LOCKSTEP_Master_Out[3429] = \<const0> ;
  assign LOCKSTEP_Master_Out[3430] = \<const0> ;
  assign LOCKSTEP_Master_Out[3431] = \<const0> ;
  assign LOCKSTEP_Master_Out[3432] = \<const0> ;
  assign LOCKSTEP_Master_Out[3433] = \<const0> ;
  assign LOCKSTEP_Master_Out[3434] = \<const0> ;
  assign LOCKSTEP_Master_Out[3435] = \<const0> ;
  assign LOCKSTEP_Master_Out[3436] = \<const0> ;
  assign LOCKSTEP_Master_Out[3437] = \<const0> ;
  assign LOCKSTEP_Master_Out[3438] = \<const0> ;
  assign LOCKSTEP_Master_Out[3439] = \<const0> ;
  assign LOCKSTEP_Master_Out[3440] = \<const0> ;
  assign LOCKSTEP_Master_Out[3441] = \<const0> ;
  assign LOCKSTEP_Master_Out[3442] = \<const0> ;
  assign LOCKSTEP_Master_Out[3443] = \<const0> ;
  assign LOCKSTEP_Master_Out[3444] = \<const0> ;
  assign LOCKSTEP_Master_Out[3445] = \<const0> ;
  assign LOCKSTEP_Master_Out[3446] = \<const0> ;
  assign LOCKSTEP_Master_Out[3447] = \<const0> ;
  assign LOCKSTEP_Master_Out[3448] = \<const0> ;
  assign LOCKSTEP_Master_Out[3449] = \<const0> ;
  assign LOCKSTEP_Master_Out[3450] = \<const0> ;
  assign LOCKSTEP_Master_Out[3451] = \<const0> ;
  assign LOCKSTEP_Master_Out[3452] = \<const0> ;
  assign LOCKSTEP_Master_Out[3453] = \<const0> ;
  assign LOCKSTEP_Master_Out[3454] = \<const0> ;
  assign LOCKSTEP_Master_Out[3455] = \<const0> ;
  assign LOCKSTEP_Master_Out[3456] = \<const0> ;
  assign LOCKSTEP_Master_Out[3457] = \<const0> ;
  assign LOCKSTEP_Master_Out[3458] = \<const0> ;
  assign LOCKSTEP_Master_Out[3459] = \<const0> ;
  assign LOCKSTEP_Master_Out[3460] = \<const0> ;
  assign LOCKSTEP_Master_Out[3461] = \<const0> ;
  assign LOCKSTEP_Master_Out[3462] = \<const0> ;
  assign LOCKSTEP_Master_Out[3463] = \<const0> ;
  assign LOCKSTEP_Master_Out[3464] = \<const0> ;
  assign LOCKSTEP_Master_Out[3465] = \<const0> ;
  assign LOCKSTEP_Master_Out[3466] = \<const0> ;
  assign LOCKSTEP_Master_Out[3467] = \<const0> ;
  assign LOCKSTEP_Master_Out[3468] = \<const0> ;
  assign LOCKSTEP_Master_Out[3469] = \<const0> ;
  assign LOCKSTEP_Master_Out[3470] = \<const0> ;
  assign LOCKSTEP_Master_Out[3471] = \<const0> ;
  assign LOCKSTEP_Master_Out[3472] = \<const0> ;
  assign LOCKSTEP_Master_Out[3473] = \<const0> ;
  assign LOCKSTEP_Master_Out[3474] = \<const0> ;
  assign LOCKSTEP_Master_Out[3475] = \<const0> ;
  assign LOCKSTEP_Master_Out[3476] = \<const0> ;
  assign LOCKSTEP_Master_Out[3477] = \<const0> ;
  assign LOCKSTEP_Master_Out[3478] = \<const0> ;
  assign LOCKSTEP_Master_Out[3479] = \<const0> ;
  assign LOCKSTEP_Master_Out[3480] = \<const0> ;
  assign LOCKSTEP_Master_Out[3481] = \<const0> ;
  assign LOCKSTEP_Master_Out[3482] = \<const0> ;
  assign LOCKSTEP_Master_Out[3483] = \<const0> ;
  assign LOCKSTEP_Master_Out[3484] = \<const0> ;
  assign LOCKSTEP_Master_Out[3485] = \<const0> ;
  assign LOCKSTEP_Master_Out[3486] = \<const0> ;
  assign LOCKSTEP_Master_Out[3487] = \<const0> ;
  assign LOCKSTEP_Master_Out[3488] = \<const0> ;
  assign LOCKSTEP_Master_Out[3489] = \<const0> ;
  assign LOCKSTEP_Master_Out[3490] = \<const0> ;
  assign LOCKSTEP_Master_Out[3491] = \<const0> ;
  assign LOCKSTEP_Master_Out[3492] = \<const0> ;
  assign LOCKSTEP_Master_Out[3493] = \<const0> ;
  assign LOCKSTEP_Master_Out[3494] = \<const0> ;
  assign LOCKSTEP_Master_Out[3495] = \<const0> ;
  assign LOCKSTEP_Master_Out[3496] = \<const0> ;
  assign LOCKSTEP_Master_Out[3497] = \<const0> ;
  assign LOCKSTEP_Master_Out[3498] = \<const0> ;
  assign LOCKSTEP_Master_Out[3499] = \<const0> ;
  assign LOCKSTEP_Master_Out[3500] = \<const0> ;
  assign LOCKSTEP_Master_Out[3501] = \<const0> ;
  assign LOCKSTEP_Master_Out[3502] = \<const0> ;
  assign LOCKSTEP_Master_Out[3503] = \<const0> ;
  assign LOCKSTEP_Master_Out[3504] = \<const0> ;
  assign LOCKSTEP_Master_Out[3505] = \<const0> ;
  assign LOCKSTEP_Master_Out[3506] = \<const0> ;
  assign LOCKSTEP_Master_Out[3507] = \<const0> ;
  assign LOCKSTEP_Master_Out[3508] = \<const0> ;
  assign LOCKSTEP_Master_Out[3509] = \<const0> ;
  assign LOCKSTEP_Master_Out[3510] = \<const0> ;
  assign LOCKSTEP_Master_Out[3511] = \<const0> ;
  assign LOCKSTEP_Master_Out[3512] = \<const0> ;
  assign LOCKSTEP_Master_Out[3513] = \<const0> ;
  assign LOCKSTEP_Master_Out[3514] = \<const0> ;
  assign LOCKSTEP_Master_Out[3515] = \<const0> ;
  assign LOCKSTEP_Master_Out[3516] = \<const0> ;
  assign LOCKSTEP_Master_Out[3517] = \<const0> ;
  assign LOCKSTEP_Master_Out[3518] = \<const0> ;
  assign LOCKSTEP_Master_Out[3519] = \<const0> ;
  assign LOCKSTEP_Master_Out[3520] = \<const0> ;
  assign LOCKSTEP_Master_Out[3521] = \<const0> ;
  assign LOCKSTEP_Master_Out[3522] = \<const0> ;
  assign LOCKSTEP_Master_Out[3523] = \<const0> ;
  assign LOCKSTEP_Master_Out[3524] = \<const0> ;
  assign LOCKSTEP_Master_Out[3525] = \<const0> ;
  assign LOCKSTEP_Master_Out[3526] = \<const0> ;
  assign LOCKSTEP_Master_Out[3527] = \<const0> ;
  assign LOCKSTEP_Master_Out[3528] = \<const0> ;
  assign LOCKSTEP_Master_Out[3529] = \<const0> ;
  assign LOCKSTEP_Master_Out[3530] = \<const0> ;
  assign LOCKSTEP_Master_Out[3531] = \<const0> ;
  assign LOCKSTEP_Master_Out[3532] = \<const0> ;
  assign LOCKSTEP_Master_Out[3533] = \<const0> ;
  assign LOCKSTEP_Master_Out[3534] = \<const0> ;
  assign LOCKSTEP_Master_Out[3535] = \<const0> ;
  assign LOCKSTEP_Master_Out[3536] = \<const0> ;
  assign LOCKSTEP_Master_Out[3537] = \<const0> ;
  assign LOCKSTEP_Master_Out[3538] = \<const0> ;
  assign LOCKSTEP_Master_Out[3539] = \<const0> ;
  assign LOCKSTEP_Master_Out[3540] = \<const0> ;
  assign LOCKSTEP_Master_Out[3541] = \<const0> ;
  assign LOCKSTEP_Master_Out[3542] = \<const0> ;
  assign LOCKSTEP_Master_Out[3543] = \<const0> ;
  assign LOCKSTEP_Master_Out[3544] = \<const0> ;
  assign LOCKSTEP_Master_Out[3545] = \<const0> ;
  assign LOCKSTEP_Master_Out[3546] = \<const0> ;
  assign LOCKSTEP_Master_Out[3547] = \<const0> ;
  assign LOCKSTEP_Master_Out[3548] = \<const0> ;
  assign LOCKSTEP_Master_Out[3549] = \<const0> ;
  assign LOCKSTEP_Master_Out[3550] = \<const0> ;
  assign LOCKSTEP_Master_Out[3551] = \<const0> ;
  assign LOCKSTEP_Master_Out[3552] = \<const0> ;
  assign LOCKSTEP_Master_Out[3553] = \<const0> ;
  assign LOCKSTEP_Master_Out[3554] = \<const0> ;
  assign LOCKSTEP_Master_Out[3555] = \<const0> ;
  assign LOCKSTEP_Master_Out[3556] = \<const0> ;
  assign LOCKSTEP_Master_Out[3557] = \<const0> ;
  assign LOCKSTEP_Master_Out[3558] = \<const0> ;
  assign LOCKSTEP_Master_Out[3559] = \<const0> ;
  assign LOCKSTEP_Master_Out[3560] = \<const0> ;
  assign LOCKSTEP_Master_Out[3561] = \<const0> ;
  assign LOCKSTEP_Master_Out[3562] = \<const0> ;
  assign LOCKSTEP_Master_Out[3563] = \<const0> ;
  assign LOCKSTEP_Master_Out[3564] = \<const0> ;
  assign LOCKSTEP_Master_Out[3565] = \<const0> ;
  assign LOCKSTEP_Master_Out[3566] = \<const0> ;
  assign LOCKSTEP_Master_Out[3567] = \<const0> ;
  assign LOCKSTEP_Master_Out[3568] = \<const0> ;
  assign LOCKSTEP_Master_Out[3569] = \<const0> ;
  assign LOCKSTEP_Master_Out[3570] = \<const0> ;
  assign LOCKSTEP_Master_Out[3571] = \<const0> ;
  assign LOCKSTEP_Master_Out[3572] = \<const0> ;
  assign LOCKSTEP_Master_Out[3573] = \<const0> ;
  assign LOCKSTEP_Master_Out[3574] = \<const0> ;
  assign LOCKSTEP_Master_Out[3575] = \<const0> ;
  assign LOCKSTEP_Master_Out[3576] = \<const0> ;
  assign LOCKSTEP_Master_Out[3577] = \<const0> ;
  assign LOCKSTEP_Master_Out[3578] = \<const0> ;
  assign LOCKSTEP_Master_Out[3579] = \<const0> ;
  assign LOCKSTEP_Master_Out[3580] = \<const0> ;
  assign LOCKSTEP_Master_Out[3581] = \<const0> ;
  assign LOCKSTEP_Master_Out[3582] = \<const0> ;
  assign LOCKSTEP_Master_Out[3583] = \<const0> ;
  assign LOCKSTEP_Master_Out[3584] = \<const0> ;
  assign LOCKSTEP_Master_Out[3585] = \<const0> ;
  assign LOCKSTEP_Master_Out[3586] = \<const0> ;
  assign LOCKSTEP_Master_Out[3587] = \<const0> ;
  assign LOCKSTEP_Master_Out[3588] = \<const0> ;
  assign LOCKSTEP_Master_Out[3589] = \<const0> ;
  assign LOCKSTEP_Master_Out[3590] = \<const0> ;
  assign LOCKSTEP_Master_Out[3591] = \<const0> ;
  assign LOCKSTEP_Master_Out[3592] = \<const0> ;
  assign LOCKSTEP_Master_Out[3593] = \<const0> ;
  assign LOCKSTEP_Master_Out[3594] = \<const0> ;
  assign LOCKSTEP_Master_Out[3595] = \<const0> ;
  assign LOCKSTEP_Master_Out[3596] = \<const0> ;
  assign LOCKSTEP_Master_Out[3597] = \<const0> ;
  assign LOCKSTEP_Master_Out[3598] = \<const0> ;
  assign LOCKSTEP_Master_Out[3599] = \<const0> ;
  assign LOCKSTEP_Master_Out[3600] = \<const0> ;
  assign LOCKSTEP_Master_Out[3601] = \<const0> ;
  assign LOCKSTEP_Master_Out[3602] = \<const0> ;
  assign LOCKSTEP_Master_Out[3603] = \<const0> ;
  assign LOCKSTEP_Master_Out[3604] = \<const0> ;
  assign LOCKSTEP_Master_Out[3605] = \<const0> ;
  assign LOCKSTEP_Master_Out[3606] = \<const0> ;
  assign LOCKSTEP_Master_Out[3607] = \<const0> ;
  assign LOCKSTEP_Master_Out[3608] = \<const0> ;
  assign LOCKSTEP_Master_Out[3609] = \<const0> ;
  assign LOCKSTEP_Master_Out[3610] = \<const0> ;
  assign LOCKSTEP_Master_Out[3611] = \<const0> ;
  assign LOCKSTEP_Master_Out[3612] = \<const0> ;
  assign LOCKSTEP_Master_Out[3613] = \<const0> ;
  assign LOCKSTEP_Master_Out[3614] = \<const0> ;
  assign LOCKSTEP_Master_Out[3615] = \<const0> ;
  assign LOCKSTEP_Master_Out[3616] = \<const0> ;
  assign LOCKSTEP_Master_Out[3617] = \<const0> ;
  assign LOCKSTEP_Master_Out[3618] = \<const0> ;
  assign LOCKSTEP_Master_Out[3619] = \<const0> ;
  assign LOCKSTEP_Master_Out[3620] = \<const0> ;
  assign LOCKSTEP_Master_Out[3621] = \<const0> ;
  assign LOCKSTEP_Master_Out[3622] = \<const0> ;
  assign LOCKSTEP_Master_Out[3623] = \<const0> ;
  assign LOCKSTEP_Master_Out[3624] = \<const0> ;
  assign LOCKSTEP_Master_Out[3625] = \<const0> ;
  assign LOCKSTEP_Master_Out[3626] = \<const0> ;
  assign LOCKSTEP_Master_Out[3627] = \<const0> ;
  assign LOCKSTEP_Master_Out[3628] = \<const0> ;
  assign LOCKSTEP_Master_Out[3629] = \<const0> ;
  assign LOCKSTEP_Master_Out[3630] = \<const0> ;
  assign LOCKSTEP_Master_Out[3631] = \<const0> ;
  assign LOCKSTEP_Master_Out[3632] = \<const0> ;
  assign LOCKSTEP_Master_Out[3633] = \<const0> ;
  assign LOCKSTEP_Master_Out[3634] = \<const0> ;
  assign LOCKSTEP_Master_Out[3635] = \<const0> ;
  assign LOCKSTEP_Master_Out[3636] = \<const0> ;
  assign LOCKSTEP_Master_Out[3637] = \<const0> ;
  assign LOCKSTEP_Master_Out[3638] = \<const0> ;
  assign LOCKSTEP_Master_Out[3639] = \<const0> ;
  assign LOCKSTEP_Master_Out[3640] = \<const0> ;
  assign LOCKSTEP_Master_Out[3641] = \<const0> ;
  assign LOCKSTEP_Master_Out[3642] = \<const0> ;
  assign LOCKSTEP_Master_Out[3643] = \<const0> ;
  assign LOCKSTEP_Master_Out[3644] = \<const0> ;
  assign LOCKSTEP_Master_Out[3645] = \<const0> ;
  assign LOCKSTEP_Master_Out[3646] = \<const0> ;
  assign LOCKSTEP_Master_Out[3647] = \<const0> ;
  assign LOCKSTEP_Master_Out[3648] = \<const0> ;
  assign LOCKSTEP_Master_Out[3649] = \<const0> ;
  assign LOCKSTEP_Master_Out[3650] = \<const0> ;
  assign LOCKSTEP_Master_Out[3651] = \<const0> ;
  assign LOCKSTEP_Master_Out[3652] = \<const0> ;
  assign LOCKSTEP_Master_Out[3653] = \<const0> ;
  assign LOCKSTEP_Master_Out[3654] = \<const0> ;
  assign LOCKSTEP_Master_Out[3655] = \<const0> ;
  assign LOCKSTEP_Master_Out[3656] = \<const0> ;
  assign LOCKSTEP_Master_Out[3657] = \<const0> ;
  assign LOCKSTEP_Master_Out[3658] = \<const0> ;
  assign LOCKSTEP_Master_Out[3659] = \<const0> ;
  assign LOCKSTEP_Master_Out[3660] = \<const0> ;
  assign LOCKSTEP_Master_Out[3661] = \<const0> ;
  assign LOCKSTEP_Master_Out[3662] = \<const0> ;
  assign LOCKSTEP_Master_Out[3663] = \<const0> ;
  assign LOCKSTEP_Master_Out[3664] = \<const0> ;
  assign LOCKSTEP_Master_Out[3665] = \<const0> ;
  assign LOCKSTEP_Master_Out[3666] = \<const0> ;
  assign LOCKSTEP_Master_Out[3667] = \<const0> ;
  assign LOCKSTEP_Master_Out[3668] = \<const0> ;
  assign LOCKSTEP_Master_Out[3669] = \<const0> ;
  assign LOCKSTEP_Master_Out[3670] = \<const0> ;
  assign LOCKSTEP_Master_Out[3671] = \<const0> ;
  assign LOCKSTEP_Master_Out[3672] = \<const0> ;
  assign LOCKSTEP_Master_Out[3673] = \<const0> ;
  assign LOCKSTEP_Master_Out[3674] = \<const0> ;
  assign LOCKSTEP_Master_Out[3675] = \<const0> ;
  assign LOCKSTEP_Master_Out[3676] = \<const0> ;
  assign LOCKSTEP_Master_Out[3677] = \<const0> ;
  assign LOCKSTEP_Master_Out[3678] = \<const0> ;
  assign LOCKSTEP_Master_Out[3679] = \<const0> ;
  assign LOCKSTEP_Master_Out[3680] = \<const0> ;
  assign LOCKSTEP_Master_Out[3681] = \<const0> ;
  assign LOCKSTEP_Master_Out[3682] = \<const0> ;
  assign LOCKSTEP_Master_Out[3683] = \<const0> ;
  assign LOCKSTEP_Master_Out[3684] = \<const0> ;
  assign LOCKSTEP_Master_Out[3685] = \<const0> ;
  assign LOCKSTEP_Master_Out[3686] = \<const0> ;
  assign LOCKSTEP_Master_Out[3687] = \<const0> ;
  assign LOCKSTEP_Master_Out[3688] = \<const0> ;
  assign LOCKSTEP_Master_Out[3689] = \<const0> ;
  assign LOCKSTEP_Master_Out[3690] = \<const0> ;
  assign LOCKSTEP_Master_Out[3691] = \<const0> ;
  assign LOCKSTEP_Master_Out[3692] = \<const0> ;
  assign LOCKSTEP_Master_Out[3693] = \<const0> ;
  assign LOCKSTEP_Master_Out[3694] = \<const0> ;
  assign LOCKSTEP_Master_Out[3695] = \<const0> ;
  assign LOCKSTEP_Master_Out[3696] = \<const0> ;
  assign LOCKSTEP_Master_Out[3697] = \<const0> ;
  assign LOCKSTEP_Master_Out[3698] = \<const0> ;
  assign LOCKSTEP_Master_Out[3699] = \<const0> ;
  assign LOCKSTEP_Master_Out[3700] = \<const0> ;
  assign LOCKSTEP_Master_Out[3701] = \<const0> ;
  assign LOCKSTEP_Master_Out[3702] = \<const0> ;
  assign LOCKSTEP_Master_Out[3703] = \<const0> ;
  assign LOCKSTEP_Master_Out[3704] = \<const0> ;
  assign LOCKSTEP_Master_Out[3705] = \<const0> ;
  assign LOCKSTEP_Master_Out[3706] = \<const0> ;
  assign LOCKSTEP_Master_Out[3707] = \<const0> ;
  assign LOCKSTEP_Master_Out[3708] = \<const0> ;
  assign LOCKSTEP_Master_Out[3709] = \<const0> ;
  assign LOCKSTEP_Master_Out[3710] = \<const0> ;
  assign LOCKSTEP_Master_Out[3711] = \<const0> ;
  assign LOCKSTEP_Master_Out[3712] = \<const0> ;
  assign LOCKSTEP_Master_Out[3713] = \<const0> ;
  assign LOCKSTEP_Master_Out[3714] = \<const0> ;
  assign LOCKSTEP_Master_Out[3715] = \<const0> ;
  assign LOCKSTEP_Master_Out[3716] = \<const0> ;
  assign LOCKSTEP_Master_Out[3717] = \<const0> ;
  assign LOCKSTEP_Master_Out[3718] = \<const0> ;
  assign LOCKSTEP_Master_Out[3719] = \<const0> ;
  assign LOCKSTEP_Master_Out[3720] = \<const0> ;
  assign LOCKSTEP_Master_Out[3721] = \<const0> ;
  assign LOCKSTEP_Master_Out[3722] = \<const0> ;
  assign LOCKSTEP_Master_Out[3723] = \<const0> ;
  assign LOCKSTEP_Master_Out[3724] = \<const0> ;
  assign LOCKSTEP_Master_Out[3725] = \<const0> ;
  assign LOCKSTEP_Master_Out[3726] = \<const0> ;
  assign LOCKSTEP_Master_Out[3727] = \<const0> ;
  assign LOCKSTEP_Master_Out[3728] = \<const0> ;
  assign LOCKSTEP_Master_Out[3729] = \<const0> ;
  assign LOCKSTEP_Master_Out[3730] = \<const0> ;
  assign LOCKSTEP_Master_Out[3731] = \<const0> ;
  assign LOCKSTEP_Master_Out[3732] = \<const0> ;
  assign LOCKSTEP_Master_Out[3733] = \<const0> ;
  assign LOCKSTEP_Master_Out[3734] = \<const0> ;
  assign LOCKSTEP_Master_Out[3735] = \<const0> ;
  assign LOCKSTEP_Master_Out[3736] = \<const0> ;
  assign LOCKSTEP_Master_Out[3737] = \<const0> ;
  assign LOCKSTEP_Master_Out[3738] = \<const0> ;
  assign LOCKSTEP_Master_Out[3739] = \<const0> ;
  assign LOCKSTEP_Master_Out[3740] = \<const0> ;
  assign LOCKSTEP_Master_Out[3741] = \<const0> ;
  assign LOCKSTEP_Master_Out[3742] = \<const0> ;
  assign LOCKSTEP_Master_Out[3743] = \<const0> ;
  assign LOCKSTEP_Master_Out[3744] = \<const0> ;
  assign LOCKSTEP_Master_Out[3745] = \<const0> ;
  assign LOCKSTEP_Master_Out[3746] = \<const0> ;
  assign LOCKSTEP_Master_Out[3747] = \<const0> ;
  assign LOCKSTEP_Master_Out[3748] = \<const0> ;
  assign LOCKSTEP_Master_Out[3749] = \<const0> ;
  assign LOCKSTEP_Master_Out[3750] = \<const0> ;
  assign LOCKSTEP_Master_Out[3751] = \<const0> ;
  assign LOCKSTEP_Master_Out[3752] = \<const0> ;
  assign LOCKSTEP_Master_Out[3753] = \<const0> ;
  assign LOCKSTEP_Master_Out[3754] = \<const0> ;
  assign LOCKSTEP_Master_Out[3755] = \<const0> ;
  assign LOCKSTEP_Master_Out[3756] = \<const0> ;
  assign LOCKSTEP_Master_Out[3757] = \<const0> ;
  assign LOCKSTEP_Master_Out[3758] = \<const0> ;
  assign LOCKSTEP_Master_Out[3759] = \<const0> ;
  assign LOCKSTEP_Master_Out[3760] = \<const0> ;
  assign LOCKSTEP_Master_Out[3761] = \<const0> ;
  assign LOCKSTEP_Master_Out[3762] = \<const0> ;
  assign LOCKSTEP_Master_Out[3763] = \<const0> ;
  assign LOCKSTEP_Master_Out[3764] = \<const0> ;
  assign LOCKSTEP_Master_Out[3765] = \<const0> ;
  assign LOCKSTEP_Master_Out[3766] = \<const0> ;
  assign LOCKSTEP_Master_Out[3767] = \<const0> ;
  assign LOCKSTEP_Master_Out[3768] = \<const0> ;
  assign LOCKSTEP_Master_Out[3769] = \<const0> ;
  assign LOCKSTEP_Master_Out[3770] = \<const0> ;
  assign LOCKSTEP_Master_Out[3771] = \<const0> ;
  assign LOCKSTEP_Master_Out[3772] = \<const0> ;
  assign LOCKSTEP_Master_Out[3773] = \<const0> ;
  assign LOCKSTEP_Master_Out[3774] = \<const0> ;
  assign LOCKSTEP_Master_Out[3775] = \<const0> ;
  assign LOCKSTEP_Master_Out[3776] = \<const0> ;
  assign LOCKSTEP_Master_Out[3777] = \<const0> ;
  assign LOCKSTEP_Master_Out[3778] = \<const0> ;
  assign LOCKSTEP_Master_Out[3779] = \<const0> ;
  assign LOCKSTEP_Master_Out[3780] = \<const0> ;
  assign LOCKSTEP_Master_Out[3781] = \<const0> ;
  assign LOCKSTEP_Master_Out[3782] = \<const0> ;
  assign LOCKSTEP_Master_Out[3783] = \<const0> ;
  assign LOCKSTEP_Master_Out[3784] = \<const0> ;
  assign LOCKSTEP_Master_Out[3785] = \<const0> ;
  assign LOCKSTEP_Master_Out[3786] = \<const0> ;
  assign LOCKSTEP_Master_Out[3787] = \<const0> ;
  assign LOCKSTEP_Master_Out[3788] = \<const0> ;
  assign LOCKSTEP_Master_Out[3789] = \<const0> ;
  assign LOCKSTEP_Master_Out[3790] = \<const0> ;
  assign LOCKSTEP_Master_Out[3791] = \<const0> ;
  assign LOCKSTEP_Master_Out[3792] = \<const0> ;
  assign LOCKSTEP_Master_Out[3793] = \<const0> ;
  assign LOCKSTEP_Master_Out[3794] = \<const0> ;
  assign LOCKSTEP_Master_Out[3795] = \<const0> ;
  assign LOCKSTEP_Master_Out[3796] = \<const0> ;
  assign LOCKSTEP_Master_Out[3797] = \<const0> ;
  assign LOCKSTEP_Master_Out[3798] = \<const0> ;
  assign LOCKSTEP_Master_Out[3799] = \<const0> ;
  assign LOCKSTEP_Master_Out[3800] = \<const0> ;
  assign LOCKSTEP_Master_Out[3801] = \<const0> ;
  assign LOCKSTEP_Master_Out[3802] = \<const0> ;
  assign LOCKSTEP_Master_Out[3803] = \<const0> ;
  assign LOCKSTEP_Master_Out[3804] = \<const0> ;
  assign LOCKSTEP_Master_Out[3805] = \<const0> ;
  assign LOCKSTEP_Master_Out[3806] = \<const0> ;
  assign LOCKSTEP_Master_Out[3807] = \<const0> ;
  assign LOCKSTEP_Master_Out[3808] = \<const0> ;
  assign LOCKSTEP_Master_Out[3809] = \<const0> ;
  assign LOCKSTEP_Master_Out[3810] = \<const0> ;
  assign LOCKSTEP_Master_Out[3811] = \<const0> ;
  assign LOCKSTEP_Master_Out[3812] = \<const0> ;
  assign LOCKSTEP_Master_Out[3813] = \<const0> ;
  assign LOCKSTEP_Master_Out[3814] = \<const0> ;
  assign LOCKSTEP_Master_Out[3815] = \<const0> ;
  assign LOCKSTEP_Master_Out[3816] = \<const0> ;
  assign LOCKSTEP_Master_Out[3817] = \<const0> ;
  assign LOCKSTEP_Master_Out[3818] = \<const0> ;
  assign LOCKSTEP_Master_Out[3819] = \<const0> ;
  assign LOCKSTEP_Master_Out[3820] = \<const0> ;
  assign LOCKSTEP_Master_Out[3821] = \<const0> ;
  assign LOCKSTEP_Master_Out[3822] = \<const0> ;
  assign LOCKSTEP_Master_Out[3823] = \<const0> ;
  assign LOCKSTEP_Master_Out[3824] = \<const0> ;
  assign LOCKSTEP_Master_Out[3825] = \<const0> ;
  assign LOCKSTEP_Master_Out[3826] = \<const0> ;
  assign LOCKSTEP_Master_Out[3827] = \<const0> ;
  assign LOCKSTEP_Master_Out[3828] = \<const0> ;
  assign LOCKSTEP_Master_Out[3829] = \<const0> ;
  assign LOCKSTEP_Master_Out[3830] = \<const0> ;
  assign LOCKSTEP_Master_Out[3831] = \<const0> ;
  assign LOCKSTEP_Master_Out[3832] = \<const0> ;
  assign LOCKSTEP_Master_Out[3833] = \<const0> ;
  assign LOCKSTEP_Master_Out[3834] = \<const0> ;
  assign LOCKSTEP_Master_Out[3835] = \<const0> ;
  assign LOCKSTEP_Master_Out[3836] = \<const0> ;
  assign LOCKSTEP_Master_Out[3837] = \<const0> ;
  assign LOCKSTEP_Master_Out[3838] = \<const0> ;
  assign LOCKSTEP_Master_Out[3839] = \<const0> ;
  assign LOCKSTEP_Master_Out[3840] = \<const0> ;
  assign LOCKSTEP_Master_Out[3841] = \<const0> ;
  assign LOCKSTEP_Master_Out[3842] = \<const0> ;
  assign LOCKSTEP_Master_Out[3843] = \<const0> ;
  assign LOCKSTEP_Master_Out[3844] = \<const0> ;
  assign LOCKSTEP_Master_Out[3845] = \<const0> ;
  assign LOCKSTEP_Master_Out[3846] = \<const0> ;
  assign LOCKSTEP_Master_Out[3847] = \<const0> ;
  assign LOCKSTEP_Master_Out[3848] = \<const0> ;
  assign LOCKSTEP_Master_Out[3849] = \<const0> ;
  assign LOCKSTEP_Master_Out[3850] = \<const0> ;
  assign LOCKSTEP_Master_Out[3851] = \<const0> ;
  assign LOCKSTEP_Master_Out[3852] = \<const0> ;
  assign LOCKSTEP_Master_Out[3853] = \<const0> ;
  assign LOCKSTEP_Master_Out[3854] = \<const0> ;
  assign LOCKSTEP_Master_Out[3855] = \<const0> ;
  assign LOCKSTEP_Master_Out[3856] = \<const0> ;
  assign LOCKSTEP_Master_Out[3857] = \<const0> ;
  assign LOCKSTEP_Master_Out[3858] = \<const0> ;
  assign LOCKSTEP_Master_Out[3859] = \<const0> ;
  assign LOCKSTEP_Master_Out[3860] = \<const0> ;
  assign LOCKSTEP_Master_Out[3861] = \<const0> ;
  assign LOCKSTEP_Master_Out[3862] = \<const0> ;
  assign LOCKSTEP_Master_Out[3863] = \<const0> ;
  assign LOCKSTEP_Master_Out[3864] = \<const0> ;
  assign LOCKSTEP_Master_Out[3865] = \<const0> ;
  assign LOCKSTEP_Master_Out[3866] = \<const0> ;
  assign LOCKSTEP_Master_Out[3867] = \<const0> ;
  assign LOCKSTEP_Master_Out[3868] = \<const0> ;
  assign LOCKSTEP_Master_Out[3869] = \<const0> ;
  assign LOCKSTEP_Master_Out[3870] = \<const0> ;
  assign LOCKSTEP_Master_Out[3871] = \<const0> ;
  assign LOCKSTEP_Master_Out[3872] = \<const0> ;
  assign LOCKSTEP_Master_Out[3873] = \<const0> ;
  assign LOCKSTEP_Master_Out[3874] = \<const0> ;
  assign LOCKSTEP_Master_Out[3875] = \<const0> ;
  assign LOCKSTEP_Master_Out[3876] = \<const0> ;
  assign LOCKSTEP_Master_Out[3877] = \<const0> ;
  assign LOCKSTEP_Master_Out[3878] = \<const0> ;
  assign LOCKSTEP_Master_Out[3879] = \<const0> ;
  assign LOCKSTEP_Master_Out[3880] = \<const0> ;
  assign LOCKSTEP_Master_Out[3881] = \<const0> ;
  assign LOCKSTEP_Master_Out[3882] = \<const0> ;
  assign LOCKSTEP_Master_Out[3883] = \<const0> ;
  assign LOCKSTEP_Master_Out[3884] = \<const0> ;
  assign LOCKSTEP_Master_Out[3885] = \<const0> ;
  assign LOCKSTEP_Master_Out[3886] = \<const0> ;
  assign LOCKSTEP_Master_Out[3887] = \<const0> ;
  assign LOCKSTEP_Master_Out[3888] = \<const0> ;
  assign LOCKSTEP_Master_Out[3889] = \<const0> ;
  assign LOCKSTEP_Master_Out[3890] = \<const0> ;
  assign LOCKSTEP_Master_Out[3891] = \<const0> ;
  assign LOCKSTEP_Master_Out[3892] = \<const0> ;
  assign LOCKSTEP_Master_Out[3893] = \<const0> ;
  assign LOCKSTEP_Master_Out[3894] = \<const0> ;
  assign LOCKSTEP_Master_Out[3895] = \<const0> ;
  assign LOCKSTEP_Master_Out[3896] = \<const0> ;
  assign LOCKSTEP_Master_Out[3897] = \<const0> ;
  assign LOCKSTEP_Master_Out[3898] = \<const0> ;
  assign LOCKSTEP_Master_Out[3899] = \<const0> ;
  assign LOCKSTEP_Master_Out[3900] = \<const0> ;
  assign LOCKSTEP_Master_Out[3901] = \<const0> ;
  assign LOCKSTEP_Master_Out[3902] = \<const0> ;
  assign LOCKSTEP_Master_Out[3903] = \<const0> ;
  assign LOCKSTEP_Master_Out[3904] = \<const0> ;
  assign LOCKSTEP_Master_Out[3905] = \<const0> ;
  assign LOCKSTEP_Master_Out[3906] = \<const0> ;
  assign LOCKSTEP_Master_Out[3907] = \<const0> ;
  assign LOCKSTEP_Master_Out[3908] = \<const0> ;
  assign LOCKSTEP_Master_Out[3909] = \<const0> ;
  assign LOCKSTEP_Master_Out[3910] = \<const0> ;
  assign LOCKSTEP_Master_Out[3911] = \<const0> ;
  assign LOCKSTEP_Master_Out[3912] = \<const0> ;
  assign LOCKSTEP_Master_Out[3913] = \<const0> ;
  assign LOCKSTEP_Master_Out[3914] = \<const0> ;
  assign LOCKSTEP_Master_Out[3915] = \<const0> ;
  assign LOCKSTEP_Master_Out[3916] = \<const0> ;
  assign LOCKSTEP_Master_Out[3917] = \<const0> ;
  assign LOCKSTEP_Master_Out[3918] = \<const0> ;
  assign LOCKSTEP_Master_Out[3919] = \<const0> ;
  assign LOCKSTEP_Master_Out[3920] = \<const0> ;
  assign LOCKSTEP_Master_Out[3921] = \<const0> ;
  assign LOCKSTEP_Master_Out[3922] = \<const0> ;
  assign LOCKSTEP_Master_Out[3923] = \<const0> ;
  assign LOCKSTEP_Master_Out[3924] = \<const0> ;
  assign LOCKSTEP_Master_Out[3925] = \<const0> ;
  assign LOCKSTEP_Master_Out[3926] = \<const0> ;
  assign LOCKSTEP_Master_Out[3927] = \<const0> ;
  assign LOCKSTEP_Master_Out[3928] = \<const0> ;
  assign LOCKSTEP_Master_Out[3929] = \<const0> ;
  assign LOCKSTEP_Master_Out[3930] = \<const0> ;
  assign LOCKSTEP_Master_Out[3931] = \<const0> ;
  assign LOCKSTEP_Master_Out[3932] = \<const0> ;
  assign LOCKSTEP_Master_Out[3933] = \<const0> ;
  assign LOCKSTEP_Master_Out[3934] = \<const0> ;
  assign LOCKSTEP_Master_Out[3935] = \<const0> ;
  assign LOCKSTEP_Master_Out[3936] = \<const0> ;
  assign LOCKSTEP_Master_Out[3937] = \<const0> ;
  assign LOCKSTEP_Master_Out[3938] = \<const0> ;
  assign LOCKSTEP_Master_Out[3939] = \<const0> ;
  assign LOCKSTEP_Master_Out[3940] = \<const0> ;
  assign LOCKSTEP_Master_Out[3941] = \<const0> ;
  assign LOCKSTEP_Master_Out[3942] = \<const0> ;
  assign LOCKSTEP_Master_Out[3943] = \<const0> ;
  assign LOCKSTEP_Master_Out[3944] = \<const0> ;
  assign LOCKSTEP_Master_Out[3945] = \<const0> ;
  assign LOCKSTEP_Master_Out[3946] = \<const0> ;
  assign LOCKSTEP_Master_Out[3947] = \<const0> ;
  assign LOCKSTEP_Master_Out[3948] = \<const0> ;
  assign LOCKSTEP_Master_Out[3949] = \<const0> ;
  assign LOCKSTEP_Master_Out[3950] = \<const0> ;
  assign LOCKSTEP_Master_Out[3951] = \<const0> ;
  assign LOCKSTEP_Master_Out[3952] = \<const0> ;
  assign LOCKSTEP_Master_Out[3953] = \<const0> ;
  assign LOCKSTEP_Master_Out[3954] = \<const0> ;
  assign LOCKSTEP_Master_Out[3955] = \<const0> ;
  assign LOCKSTEP_Master_Out[3956] = \<const0> ;
  assign LOCKSTEP_Master_Out[3957] = \<const0> ;
  assign LOCKSTEP_Master_Out[3958] = \<const0> ;
  assign LOCKSTEP_Master_Out[3959] = \<const0> ;
  assign LOCKSTEP_Master_Out[3960] = \<const0> ;
  assign LOCKSTEP_Master_Out[3961] = \<const0> ;
  assign LOCKSTEP_Master_Out[3962] = \<const0> ;
  assign LOCKSTEP_Master_Out[3963] = \<const0> ;
  assign LOCKSTEP_Master_Out[3964] = \<const0> ;
  assign LOCKSTEP_Master_Out[3965] = \<const0> ;
  assign LOCKSTEP_Master_Out[3966] = \<const0> ;
  assign LOCKSTEP_Master_Out[3967] = \<const0> ;
  assign LOCKSTEP_Master_Out[3968] = \<const0> ;
  assign LOCKSTEP_Master_Out[3969] = \<const0> ;
  assign LOCKSTEP_Master_Out[3970] = \<const0> ;
  assign LOCKSTEP_Master_Out[3971] = \<const0> ;
  assign LOCKSTEP_Master_Out[3972] = \<const0> ;
  assign LOCKSTEP_Master_Out[3973] = \<const0> ;
  assign LOCKSTEP_Master_Out[3974] = \<const0> ;
  assign LOCKSTEP_Master_Out[3975] = \<const0> ;
  assign LOCKSTEP_Master_Out[3976] = \<const0> ;
  assign LOCKSTEP_Master_Out[3977] = \<const0> ;
  assign LOCKSTEP_Master_Out[3978] = \<const0> ;
  assign LOCKSTEP_Master_Out[3979] = \<const0> ;
  assign LOCKSTEP_Master_Out[3980] = \<const0> ;
  assign LOCKSTEP_Master_Out[3981] = \<const0> ;
  assign LOCKSTEP_Master_Out[3982] = \<const0> ;
  assign LOCKSTEP_Master_Out[3983] = \<const0> ;
  assign LOCKSTEP_Master_Out[3984] = \<const0> ;
  assign LOCKSTEP_Master_Out[3985] = \<const0> ;
  assign LOCKSTEP_Master_Out[3986] = \<const0> ;
  assign LOCKSTEP_Master_Out[3987] = \<const0> ;
  assign LOCKSTEP_Master_Out[3988] = \<const0> ;
  assign LOCKSTEP_Master_Out[3989] = \<const0> ;
  assign LOCKSTEP_Master_Out[3990] = \<const0> ;
  assign LOCKSTEP_Master_Out[3991] = \<const0> ;
  assign LOCKSTEP_Master_Out[3992] = \<const0> ;
  assign LOCKSTEP_Master_Out[3993] = \<const0> ;
  assign LOCKSTEP_Master_Out[3994] = \<const0> ;
  assign LOCKSTEP_Master_Out[3995] = \<const0> ;
  assign LOCKSTEP_Master_Out[3996] = \<const0> ;
  assign LOCKSTEP_Master_Out[3997] = \<const0> ;
  assign LOCKSTEP_Master_Out[3998] = \<const0> ;
  assign LOCKSTEP_Master_Out[3999] = \<const0> ;
  assign LOCKSTEP_Master_Out[4000] = \<const0> ;
  assign LOCKSTEP_Master_Out[4001] = \<const0> ;
  assign LOCKSTEP_Master_Out[4002] = \<const0> ;
  assign LOCKSTEP_Master_Out[4003] = \<const0> ;
  assign LOCKSTEP_Master_Out[4004] = \<const0> ;
  assign LOCKSTEP_Master_Out[4005] = \<const0> ;
  assign LOCKSTEP_Master_Out[4006] = \<const0> ;
  assign LOCKSTEP_Master_Out[4007] = \<const0> ;
  assign LOCKSTEP_Master_Out[4008] = \<const0> ;
  assign LOCKSTEP_Master_Out[4009] = \<const0> ;
  assign LOCKSTEP_Master_Out[4010] = \<const0> ;
  assign LOCKSTEP_Master_Out[4011] = \<const0> ;
  assign LOCKSTEP_Master_Out[4012] = \<const0> ;
  assign LOCKSTEP_Master_Out[4013] = \<const0> ;
  assign LOCKSTEP_Master_Out[4014] = \<const0> ;
  assign LOCKSTEP_Master_Out[4015] = \<const0> ;
  assign LOCKSTEP_Master_Out[4016] = \<const0> ;
  assign LOCKSTEP_Master_Out[4017] = \<const0> ;
  assign LOCKSTEP_Master_Out[4018] = \<const0> ;
  assign LOCKSTEP_Master_Out[4019] = \<const0> ;
  assign LOCKSTEP_Master_Out[4020] = \<const0> ;
  assign LOCKSTEP_Master_Out[4021] = \<const0> ;
  assign LOCKSTEP_Master_Out[4022] = \<const0> ;
  assign LOCKSTEP_Master_Out[4023] = \<const0> ;
  assign LOCKSTEP_Master_Out[4024] = \<const0> ;
  assign LOCKSTEP_Master_Out[4025] = \<const0> ;
  assign LOCKSTEP_Master_Out[4026] = \<const0> ;
  assign LOCKSTEP_Master_Out[4027] = \<const0> ;
  assign LOCKSTEP_Master_Out[4028] = \<const0> ;
  assign LOCKSTEP_Master_Out[4029] = \<const0> ;
  assign LOCKSTEP_Master_Out[4030] = \<const0> ;
  assign LOCKSTEP_Master_Out[4031] = \<const0> ;
  assign LOCKSTEP_Master_Out[4032] = \<const0> ;
  assign LOCKSTEP_Master_Out[4033] = \<const0> ;
  assign LOCKSTEP_Master_Out[4034] = \<const0> ;
  assign LOCKSTEP_Master_Out[4035] = \<const0> ;
  assign LOCKSTEP_Master_Out[4036] = \<const0> ;
  assign LOCKSTEP_Master_Out[4037] = \<const0> ;
  assign LOCKSTEP_Master_Out[4038] = \<const0> ;
  assign LOCKSTEP_Master_Out[4039] = \<const0> ;
  assign LOCKSTEP_Master_Out[4040] = \<const0> ;
  assign LOCKSTEP_Master_Out[4041] = \<const0> ;
  assign LOCKSTEP_Master_Out[4042] = \<const0> ;
  assign LOCKSTEP_Master_Out[4043] = \<const0> ;
  assign LOCKSTEP_Master_Out[4044] = \<const0> ;
  assign LOCKSTEP_Master_Out[4045] = \<const0> ;
  assign LOCKSTEP_Master_Out[4046] = \<const0> ;
  assign LOCKSTEP_Master_Out[4047] = \<const0> ;
  assign LOCKSTEP_Master_Out[4048] = \<const0> ;
  assign LOCKSTEP_Master_Out[4049] = \<const0> ;
  assign LOCKSTEP_Master_Out[4050] = \<const0> ;
  assign LOCKSTEP_Master_Out[4051] = \<const0> ;
  assign LOCKSTEP_Master_Out[4052] = \<const0> ;
  assign LOCKSTEP_Master_Out[4053] = \<const0> ;
  assign LOCKSTEP_Master_Out[4054] = \<const0> ;
  assign LOCKSTEP_Master_Out[4055] = \<const0> ;
  assign LOCKSTEP_Master_Out[4056] = \<const0> ;
  assign LOCKSTEP_Master_Out[4057] = \<const0> ;
  assign LOCKSTEP_Master_Out[4058] = \<const0> ;
  assign LOCKSTEP_Master_Out[4059] = \<const0> ;
  assign LOCKSTEP_Master_Out[4060] = \<const0> ;
  assign LOCKSTEP_Master_Out[4061] = \<const0> ;
  assign LOCKSTEP_Master_Out[4062] = \<const0> ;
  assign LOCKSTEP_Master_Out[4063] = \<const0> ;
  assign LOCKSTEP_Master_Out[4064] = \<const0> ;
  assign LOCKSTEP_Master_Out[4065] = \<const0> ;
  assign LOCKSTEP_Master_Out[4066] = \<const0> ;
  assign LOCKSTEP_Master_Out[4067] = \<const0> ;
  assign LOCKSTEP_Master_Out[4068] = \<const0> ;
  assign LOCKSTEP_Master_Out[4069] = \<const0> ;
  assign LOCKSTEP_Master_Out[4070] = \<const0> ;
  assign LOCKSTEP_Master_Out[4071] = \<const0> ;
  assign LOCKSTEP_Master_Out[4072] = \<const0> ;
  assign LOCKSTEP_Master_Out[4073] = \<const0> ;
  assign LOCKSTEP_Master_Out[4074] = \<const0> ;
  assign LOCKSTEP_Master_Out[4075] = \<const0> ;
  assign LOCKSTEP_Master_Out[4076] = \<const0> ;
  assign LOCKSTEP_Master_Out[4077] = \<const0> ;
  assign LOCKSTEP_Master_Out[4078] = \<const0> ;
  assign LOCKSTEP_Master_Out[4079] = \<const0> ;
  assign LOCKSTEP_Master_Out[4080] = \<const0> ;
  assign LOCKSTEP_Master_Out[4081] = \<const0> ;
  assign LOCKSTEP_Master_Out[4082] = \<const0> ;
  assign LOCKSTEP_Master_Out[4083] = \<const0> ;
  assign LOCKSTEP_Master_Out[4084] = \<const0> ;
  assign LOCKSTEP_Master_Out[4085] = \<const0> ;
  assign LOCKSTEP_Master_Out[4086] = \<const0> ;
  assign LOCKSTEP_Master_Out[4087] = \<const0> ;
  assign LOCKSTEP_Master_Out[4088] = \<const0> ;
  assign LOCKSTEP_Master_Out[4089] = \<const0> ;
  assign LOCKSTEP_Master_Out[4090] = \<const0> ;
  assign LOCKSTEP_Master_Out[4091] = \<const0> ;
  assign LOCKSTEP_Master_Out[4092] = \<const0> ;
  assign LOCKSTEP_Master_Out[4093] = \<const0> ;
  assign LOCKSTEP_Master_Out[4094] = \<const0> ;
  assign LOCKSTEP_Master_Out[4095] = \<const0> ;
  assign M0_AXIS_TDATA[31] = \<const0> ;
  assign M0_AXIS_TDATA[30] = \<const0> ;
  assign M0_AXIS_TDATA[29] = \<const0> ;
  assign M0_AXIS_TDATA[28] = \<const0> ;
  assign M0_AXIS_TDATA[27] = \<const0> ;
  assign M0_AXIS_TDATA[26] = \<const0> ;
  assign M0_AXIS_TDATA[25] = \<const0> ;
  assign M0_AXIS_TDATA[24] = \<const0> ;
  assign M0_AXIS_TDATA[23] = \<const0> ;
  assign M0_AXIS_TDATA[22] = \<const0> ;
  assign M0_AXIS_TDATA[21] = \<const0> ;
  assign M0_AXIS_TDATA[20] = \<const0> ;
  assign M0_AXIS_TDATA[19] = \<const0> ;
  assign M0_AXIS_TDATA[18] = \<const0> ;
  assign M0_AXIS_TDATA[17] = \<const0> ;
  assign M0_AXIS_TDATA[16] = \<const0> ;
  assign M0_AXIS_TDATA[15] = \<const0> ;
  assign M0_AXIS_TDATA[14] = \<const0> ;
  assign M0_AXIS_TDATA[13] = \<const0> ;
  assign M0_AXIS_TDATA[12] = \<const0> ;
  assign M0_AXIS_TDATA[11] = \<const0> ;
  assign M0_AXIS_TDATA[10] = \<const0> ;
  assign M0_AXIS_TDATA[9] = \<const0> ;
  assign M0_AXIS_TDATA[8] = \<const0> ;
  assign M0_AXIS_TDATA[7] = \<const0> ;
  assign M0_AXIS_TDATA[6] = \<const0> ;
  assign M0_AXIS_TDATA[5] = \<const0> ;
  assign M0_AXIS_TDATA[4] = \<const0> ;
  assign M0_AXIS_TDATA[3] = \<const0> ;
  assign M0_AXIS_TDATA[2] = \<const0> ;
  assign M0_AXIS_TDATA[1] = \<const0> ;
  assign M0_AXIS_TDATA[0] = \<const0> ;
  assign M0_AXIS_TLAST = \<const0> ;
  assign M0_AXIS_TVALID = \<const0> ;
  assign M10_AXIS_TDATA[31] = \<const0> ;
  assign M10_AXIS_TDATA[30] = \<const0> ;
  assign M10_AXIS_TDATA[29] = \<const0> ;
  assign M10_AXIS_TDATA[28] = \<const0> ;
  assign M10_AXIS_TDATA[27] = \<const0> ;
  assign M10_AXIS_TDATA[26] = \<const0> ;
  assign M10_AXIS_TDATA[25] = \<const0> ;
  assign M10_AXIS_TDATA[24] = \<const0> ;
  assign M10_AXIS_TDATA[23] = \<const0> ;
  assign M10_AXIS_TDATA[22] = \<const0> ;
  assign M10_AXIS_TDATA[21] = \<const0> ;
  assign M10_AXIS_TDATA[20] = \<const0> ;
  assign M10_AXIS_TDATA[19] = \<const0> ;
  assign M10_AXIS_TDATA[18] = \<const0> ;
  assign M10_AXIS_TDATA[17] = \<const0> ;
  assign M10_AXIS_TDATA[16] = \<const0> ;
  assign M10_AXIS_TDATA[15] = \<const0> ;
  assign M10_AXIS_TDATA[14] = \<const0> ;
  assign M10_AXIS_TDATA[13] = \<const0> ;
  assign M10_AXIS_TDATA[12] = \<const0> ;
  assign M10_AXIS_TDATA[11] = \<const0> ;
  assign M10_AXIS_TDATA[10] = \<const0> ;
  assign M10_AXIS_TDATA[9] = \<const0> ;
  assign M10_AXIS_TDATA[8] = \<const0> ;
  assign M10_AXIS_TDATA[7] = \<const0> ;
  assign M10_AXIS_TDATA[6] = \<const0> ;
  assign M10_AXIS_TDATA[5] = \<const0> ;
  assign M10_AXIS_TDATA[4] = \<const0> ;
  assign M10_AXIS_TDATA[3] = \<const0> ;
  assign M10_AXIS_TDATA[2] = \<const0> ;
  assign M10_AXIS_TDATA[1] = \<const0> ;
  assign M10_AXIS_TDATA[0] = \<const0> ;
  assign M10_AXIS_TLAST = \<const0> ;
  assign M10_AXIS_TVALID = \<const0> ;
  assign M11_AXIS_TDATA[31] = \<const0> ;
  assign M11_AXIS_TDATA[30] = \<const0> ;
  assign M11_AXIS_TDATA[29] = \<const0> ;
  assign M11_AXIS_TDATA[28] = \<const0> ;
  assign M11_AXIS_TDATA[27] = \<const0> ;
  assign M11_AXIS_TDATA[26] = \<const0> ;
  assign M11_AXIS_TDATA[25] = \<const0> ;
  assign M11_AXIS_TDATA[24] = \<const0> ;
  assign M11_AXIS_TDATA[23] = \<const0> ;
  assign M11_AXIS_TDATA[22] = \<const0> ;
  assign M11_AXIS_TDATA[21] = \<const0> ;
  assign M11_AXIS_TDATA[20] = \<const0> ;
  assign M11_AXIS_TDATA[19] = \<const0> ;
  assign M11_AXIS_TDATA[18] = \<const0> ;
  assign M11_AXIS_TDATA[17] = \<const0> ;
  assign M11_AXIS_TDATA[16] = \<const0> ;
  assign M11_AXIS_TDATA[15] = \<const0> ;
  assign M11_AXIS_TDATA[14] = \<const0> ;
  assign M11_AXIS_TDATA[13] = \<const0> ;
  assign M11_AXIS_TDATA[12] = \<const0> ;
  assign M11_AXIS_TDATA[11] = \<const0> ;
  assign M11_AXIS_TDATA[10] = \<const0> ;
  assign M11_AXIS_TDATA[9] = \<const0> ;
  assign M11_AXIS_TDATA[8] = \<const0> ;
  assign M11_AXIS_TDATA[7] = \<const0> ;
  assign M11_AXIS_TDATA[6] = \<const0> ;
  assign M11_AXIS_TDATA[5] = \<const0> ;
  assign M11_AXIS_TDATA[4] = \<const0> ;
  assign M11_AXIS_TDATA[3] = \<const0> ;
  assign M11_AXIS_TDATA[2] = \<const0> ;
  assign M11_AXIS_TDATA[1] = \<const0> ;
  assign M11_AXIS_TDATA[0] = \<const0> ;
  assign M11_AXIS_TLAST = \<const0> ;
  assign M11_AXIS_TVALID = \<const0> ;
  assign M12_AXIS_TDATA[31] = \<const0> ;
  assign M12_AXIS_TDATA[30] = \<const0> ;
  assign M12_AXIS_TDATA[29] = \<const0> ;
  assign M12_AXIS_TDATA[28] = \<const0> ;
  assign M12_AXIS_TDATA[27] = \<const0> ;
  assign M12_AXIS_TDATA[26] = \<const0> ;
  assign M12_AXIS_TDATA[25] = \<const0> ;
  assign M12_AXIS_TDATA[24] = \<const0> ;
  assign M12_AXIS_TDATA[23] = \<const0> ;
  assign M12_AXIS_TDATA[22] = \<const0> ;
  assign M12_AXIS_TDATA[21] = \<const0> ;
  assign M12_AXIS_TDATA[20] = \<const0> ;
  assign M12_AXIS_TDATA[19] = \<const0> ;
  assign M12_AXIS_TDATA[18] = \<const0> ;
  assign M12_AXIS_TDATA[17] = \<const0> ;
  assign M12_AXIS_TDATA[16] = \<const0> ;
  assign M12_AXIS_TDATA[15] = \<const0> ;
  assign M12_AXIS_TDATA[14] = \<const0> ;
  assign M12_AXIS_TDATA[13] = \<const0> ;
  assign M12_AXIS_TDATA[12] = \<const0> ;
  assign M12_AXIS_TDATA[11] = \<const0> ;
  assign M12_AXIS_TDATA[10] = \<const0> ;
  assign M12_AXIS_TDATA[9] = \<const0> ;
  assign M12_AXIS_TDATA[8] = \<const0> ;
  assign M12_AXIS_TDATA[7] = \<const0> ;
  assign M12_AXIS_TDATA[6] = \<const0> ;
  assign M12_AXIS_TDATA[5] = \<const0> ;
  assign M12_AXIS_TDATA[4] = \<const0> ;
  assign M12_AXIS_TDATA[3] = \<const0> ;
  assign M12_AXIS_TDATA[2] = \<const0> ;
  assign M12_AXIS_TDATA[1] = \<const0> ;
  assign M12_AXIS_TDATA[0] = \<const0> ;
  assign M12_AXIS_TLAST = \<const0> ;
  assign M12_AXIS_TVALID = \<const0> ;
  assign M13_AXIS_TDATA[31] = \<const0> ;
  assign M13_AXIS_TDATA[30] = \<const0> ;
  assign M13_AXIS_TDATA[29] = \<const0> ;
  assign M13_AXIS_TDATA[28] = \<const0> ;
  assign M13_AXIS_TDATA[27] = \<const0> ;
  assign M13_AXIS_TDATA[26] = \<const0> ;
  assign M13_AXIS_TDATA[25] = \<const0> ;
  assign M13_AXIS_TDATA[24] = \<const0> ;
  assign M13_AXIS_TDATA[23] = \<const0> ;
  assign M13_AXIS_TDATA[22] = \<const0> ;
  assign M13_AXIS_TDATA[21] = \<const0> ;
  assign M13_AXIS_TDATA[20] = \<const0> ;
  assign M13_AXIS_TDATA[19] = \<const0> ;
  assign M13_AXIS_TDATA[18] = \<const0> ;
  assign M13_AXIS_TDATA[17] = \<const0> ;
  assign M13_AXIS_TDATA[16] = \<const0> ;
  assign M13_AXIS_TDATA[15] = \<const0> ;
  assign M13_AXIS_TDATA[14] = \<const0> ;
  assign M13_AXIS_TDATA[13] = \<const0> ;
  assign M13_AXIS_TDATA[12] = \<const0> ;
  assign M13_AXIS_TDATA[11] = \<const0> ;
  assign M13_AXIS_TDATA[10] = \<const0> ;
  assign M13_AXIS_TDATA[9] = \<const0> ;
  assign M13_AXIS_TDATA[8] = \<const0> ;
  assign M13_AXIS_TDATA[7] = \<const0> ;
  assign M13_AXIS_TDATA[6] = \<const0> ;
  assign M13_AXIS_TDATA[5] = \<const0> ;
  assign M13_AXIS_TDATA[4] = \<const0> ;
  assign M13_AXIS_TDATA[3] = \<const0> ;
  assign M13_AXIS_TDATA[2] = \<const0> ;
  assign M13_AXIS_TDATA[1] = \<const0> ;
  assign M13_AXIS_TDATA[0] = \<const0> ;
  assign M13_AXIS_TLAST = \<const0> ;
  assign M13_AXIS_TVALID = \<const0> ;
  assign M14_AXIS_TDATA[31] = \<const0> ;
  assign M14_AXIS_TDATA[30] = \<const0> ;
  assign M14_AXIS_TDATA[29] = \<const0> ;
  assign M14_AXIS_TDATA[28] = \<const0> ;
  assign M14_AXIS_TDATA[27] = \<const0> ;
  assign M14_AXIS_TDATA[26] = \<const0> ;
  assign M14_AXIS_TDATA[25] = \<const0> ;
  assign M14_AXIS_TDATA[24] = \<const0> ;
  assign M14_AXIS_TDATA[23] = \<const0> ;
  assign M14_AXIS_TDATA[22] = \<const0> ;
  assign M14_AXIS_TDATA[21] = \<const0> ;
  assign M14_AXIS_TDATA[20] = \<const0> ;
  assign M14_AXIS_TDATA[19] = \<const0> ;
  assign M14_AXIS_TDATA[18] = \<const0> ;
  assign M14_AXIS_TDATA[17] = \<const0> ;
  assign M14_AXIS_TDATA[16] = \<const0> ;
  assign M14_AXIS_TDATA[15] = \<const0> ;
  assign M14_AXIS_TDATA[14] = \<const0> ;
  assign M14_AXIS_TDATA[13] = \<const0> ;
  assign M14_AXIS_TDATA[12] = \<const0> ;
  assign M14_AXIS_TDATA[11] = \<const0> ;
  assign M14_AXIS_TDATA[10] = \<const0> ;
  assign M14_AXIS_TDATA[9] = \<const0> ;
  assign M14_AXIS_TDATA[8] = \<const0> ;
  assign M14_AXIS_TDATA[7] = \<const0> ;
  assign M14_AXIS_TDATA[6] = \<const0> ;
  assign M14_AXIS_TDATA[5] = \<const0> ;
  assign M14_AXIS_TDATA[4] = \<const0> ;
  assign M14_AXIS_TDATA[3] = \<const0> ;
  assign M14_AXIS_TDATA[2] = \<const0> ;
  assign M14_AXIS_TDATA[1] = \<const0> ;
  assign M14_AXIS_TDATA[0] = \<const0> ;
  assign M14_AXIS_TLAST = \<const0> ;
  assign M14_AXIS_TVALID = \<const0> ;
  assign M15_AXIS_TDATA[31] = \<const0> ;
  assign M15_AXIS_TDATA[30] = \<const0> ;
  assign M15_AXIS_TDATA[29] = \<const0> ;
  assign M15_AXIS_TDATA[28] = \<const0> ;
  assign M15_AXIS_TDATA[27] = \<const0> ;
  assign M15_AXIS_TDATA[26] = \<const0> ;
  assign M15_AXIS_TDATA[25] = \<const0> ;
  assign M15_AXIS_TDATA[24] = \<const0> ;
  assign M15_AXIS_TDATA[23] = \<const0> ;
  assign M15_AXIS_TDATA[22] = \<const0> ;
  assign M15_AXIS_TDATA[21] = \<const0> ;
  assign M15_AXIS_TDATA[20] = \<const0> ;
  assign M15_AXIS_TDATA[19] = \<const0> ;
  assign M15_AXIS_TDATA[18] = \<const0> ;
  assign M15_AXIS_TDATA[17] = \<const0> ;
  assign M15_AXIS_TDATA[16] = \<const0> ;
  assign M15_AXIS_TDATA[15] = \<const0> ;
  assign M15_AXIS_TDATA[14] = \<const0> ;
  assign M15_AXIS_TDATA[13] = \<const0> ;
  assign M15_AXIS_TDATA[12] = \<const0> ;
  assign M15_AXIS_TDATA[11] = \<const0> ;
  assign M15_AXIS_TDATA[10] = \<const0> ;
  assign M15_AXIS_TDATA[9] = \<const0> ;
  assign M15_AXIS_TDATA[8] = \<const0> ;
  assign M15_AXIS_TDATA[7] = \<const0> ;
  assign M15_AXIS_TDATA[6] = \<const0> ;
  assign M15_AXIS_TDATA[5] = \<const0> ;
  assign M15_AXIS_TDATA[4] = \<const0> ;
  assign M15_AXIS_TDATA[3] = \<const0> ;
  assign M15_AXIS_TDATA[2] = \<const0> ;
  assign M15_AXIS_TDATA[1] = \<const0> ;
  assign M15_AXIS_TDATA[0] = \<const0> ;
  assign M15_AXIS_TLAST = \<const0> ;
  assign M15_AXIS_TVALID = \<const0> ;
  assign M1_AXIS_TDATA[31] = \<const0> ;
  assign M1_AXIS_TDATA[30] = \<const0> ;
  assign M1_AXIS_TDATA[29] = \<const0> ;
  assign M1_AXIS_TDATA[28] = \<const0> ;
  assign M1_AXIS_TDATA[27] = \<const0> ;
  assign M1_AXIS_TDATA[26] = \<const0> ;
  assign M1_AXIS_TDATA[25] = \<const0> ;
  assign M1_AXIS_TDATA[24] = \<const0> ;
  assign M1_AXIS_TDATA[23] = \<const0> ;
  assign M1_AXIS_TDATA[22] = \<const0> ;
  assign M1_AXIS_TDATA[21] = \<const0> ;
  assign M1_AXIS_TDATA[20] = \<const0> ;
  assign M1_AXIS_TDATA[19] = \<const0> ;
  assign M1_AXIS_TDATA[18] = \<const0> ;
  assign M1_AXIS_TDATA[17] = \<const0> ;
  assign M1_AXIS_TDATA[16] = \<const0> ;
  assign M1_AXIS_TDATA[15] = \<const0> ;
  assign M1_AXIS_TDATA[14] = \<const0> ;
  assign M1_AXIS_TDATA[13] = \<const0> ;
  assign M1_AXIS_TDATA[12] = \<const0> ;
  assign M1_AXIS_TDATA[11] = \<const0> ;
  assign M1_AXIS_TDATA[10] = \<const0> ;
  assign M1_AXIS_TDATA[9] = \<const0> ;
  assign M1_AXIS_TDATA[8] = \<const0> ;
  assign M1_AXIS_TDATA[7] = \<const0> ;
  assign M1_AXIS_TDATA[6] = \<const0> ;
  assign M1_AXIS_TDATA[5] = \<const0> ;
  assign M1_AXIS_TDATA[4] = \<const0> ;
  assign M1_AXIS_TDATA[3] = \<const0> ;
  assign M1_AXIS_TDATA[2] = \<const0> ;
  assign M1_AXIS_TDATA[1] = \<const0> ;
  assign M1_AXIS_TDATA[0] = \<const0> ;
  assign M1_AXIS_TLAST = \<const0> ;
  assign M1_AXIS_TVALID = \<const0> ;
  assign M2_AXIS_TDATA[31] = \<const0> ;
  assign M2_AXIS_TDATA[30] = \<const0> ;
  assign M2_AXIS_TDATA[29] = \<const0> ;
  assign M2_AXIS_TDATA[28] = \<const0> ;
  assign M2_AXIS_TDATA[27] = \<const0> ;
  assign M2_AXIS_TDATA[26] = \<const0> ;
  assign M2_AXIS_TDATA[25] = \<const0> ;
  assign M2_AXIS_TDATA[24] = \<const0> ;
  assign M2_AXIS_TDATA[23] = \<const0> ;
  assign M2_AXIS_TDATA[22] = \<const0> ;
  assign M2_AXIS_TDATA[21] = \<const0> ;
  assign M2_AXIS_TDATA[20] = \<const0> ;
  assign M2_AXIS_TDATA[19] = \<const0> ;
  assign M2_AXIS_TDATA[18] = \<const0> ;
  assign M2_AXIS_TDATA[17] = \<const0> ;
  assign M2_AXIS_TDATA[16] = \<const0> ;
  assign M2_AXIS_TDATA[15] = \<const0> ;
  assign M2_AXIS_TDATA[14] = \<const0> ;
  assign M2_AXIS_TDATA[13] = \<const0> ;
  assign M2_AXIS_TDATA[12] = \<const0> ;
  assign M2_AXIS_TDATA[11] = \<const0> ;
  assign M2_AXIS_TDATA[10] = \<const0> ;
  assign M2_AXIS_TDATA[9] = \<const0> ;
  assign M2_AXIS_TDATA[8] = \<const0> ;
  assign M2_AXIS_TDATA[7] = \<const0> ;
  assign M2_AXIS_TDATA[6] = \<const0> ;
  assign M2_AXIS_TDATA[5] = \<const0> ;
  assign M2_AXIS_TDATA[4] = \<const0> ;
  assign M2_AXIS_TDATA[3] = \<const0> ;
  assign M2_AXIS_TDATA[2] = \<const0> ;
  assign M2_AXIS_TDATA[1] = \<const0> ;
  assign M2_AXIS_TDATA[0] = \<const0> ;
  assign M2_AXIS_TLAST = \<const0> ;
  assign M2_AXIS_TVALID = \<const0> ;
  assign M3_AXIS_TDATA[31] = \<const0> ;
  assign M3_AXIS_TDATA[30] = \<const0> ;
  assign M3_AXIS_TDATA[29] = \<const0> ;
  assign M3_AXIS_TDATA[28] = \<const0> ;
  assign M3_AXIS_TDATA[27] = \<const0> ;
  assign M3_AXIS_TDATA[26] = \<const0> ;
  assign M3_AXIS_TDATA[25] = \<const0> ;
  assign M3_AXIS_TDATA[24] = \<const0> ;
  assign M3_AXIS_TDATA[23] = \<const0> ;
  assign M3_AXIS_TDATA[22] = \<const0> ;
  assign M3_AXIS_TDATA[21] = \<const0> ;
  assign M3_AXIS_TDATA[20] = \<const0> ;
  assign M3_AXIS_TDATA[19] = \<const0> ;
  assign M3_AXIS_TDATA[18] = \<const0> ;
  assign M3_AXIS_TDATA[17] = \<const0> ;
  assign M3_AXIS_TDATA[16] = \<const0> ;
  assign M3_AXIS_TDATA[15] = \<const0> ;
  assign M3_AXIS_TDATA[14] = \<const0> ;
  assign M3_AXIS_TDATA[13] = \<const0> ;
  assign M3_AXIS_TDATA[12] = \<const0> ;
  assign M3_AXIS_TDATA[11] = \<const0> ;
  assign M3_AXIS_TDATA[10] = \<const0> ;
  assign M3_AXIS_TDATA[9] = \<const0> ;
  assign M3_AXIS_TDATA[8] = \<const0> ;
  assign M3_AXIS_TDATA[7] = \<const0> ;
  assign M3_AXIS_TDATA[6] = \<const0> ;
  assign M3_AXIS_TDATA[5] = \<const0> ;
  assign M3_AXIS_TDATA[4] = \<const0> ;
  assign M3_AXIS_TDATA[3] = \<const0> ;
  assign M3_AXIS_TDATA[2] = \<const0> ;
  assign M3_AXIS_TDATA[1] = \<const0> ;
  assign M3_AXIS_TDATA[0] = \<const0> ;
  assign M3_AXIS_TLAST = \<const0> ;
  assign M3_AXIS_TVALID = \<const0> ;
  assign M4_AXIS_TDATA[31] = \<const0> ;
  assign M4_AXIS_TDATA[30] = \<const0> ;
  assign M4_AXIS_TDATA[29] = \<const0> ;
  assign M4_AXIS_TDATA[28] = \<const0> ;
  assign M4_AXIS_TDATA[27] = \<const0> ;
  assign M4_AXIS_TDATA[26] = \<const0> ;
  assign M4_AXIS_TDATA[25] = \<const0> ;
  assign M4_AXIS_TDATA[24] = \<const0> ;
  assign M4_AXIS_TDATA[23] = \<const0> ;
  assign M4_AXIS_TDATA[22] = \<const0> ;
  assign M4_AXIS_TDATA[21] = \<const0> ;
  assign M4_AXIS_TDATA[20] = \<const0> ;
  assign M4_AXIS_TDATA[19] = \<const0> ;
  assign M4_AXIS_TDATA[18] = \<const0> ;
  assign M4_AXIS_TDATA[17] = \<const0> ;
  assign M4_AXIS_TDATA[16] = \<const0> ;
  assign M4_AXIS_TDATA[15] = \<const0> ;
  assign M4_AXIS_TDATA[14] = \<const0> ;
  assign M4_AXIS_TDATA[13] = \<const0> ;
  assign M4_AXIS_TDATA[12] = \<const0> ;
  assign M4_AXIS_TDATA[11] = \<const0> ;
  assign M4_AXIS_TDATA[10] = \<const0> ;
  assign M4_AXIS_TDATA[9] = \<const0> ;
  assign M4_AXIS_TDATA[8] = \<const0> ;
  assign M4_AXIS_TDATA[7] = \<const0> ;
  assign M4_AXIS_TDATA[6] = \<const0> ;
  assign M4_AXIS_TDATA[5] = \<const0> ;
  assign M4_AXIS_TDATA[4] = \<const0> ;
  assign M4_AXIS_TDATA[3] = \<const0> ;
  assign M4_AXIS_TDATA[2] = \<const0> ;
  assign M4_AXIS_TDATA[1] = \<const0> ;
  assign M4_AXIS_TDATA[0] = \<const0> ;
  assign M4_AXIS_TLAST = \<const0> ;
  assign M4_AXIS_TVALID = \<const0> ;
  assign M5_AXIS_TDATA[31] = \<const0> ;
  assign M5_AXIS_TDATA[30] = \<const0> ;
  assign M5_AXIS_TDATA[29] = \<const0> ;
  assign M5_AXIS_TDATA[28] = \<const0> ;
  assign M5_AXIS_TDATA[27] = \<const0> ;
  assign M5_AXIS_TDATA[26] = \<const0> ;
  assign M5_AXIS_TDATA[25] = \<const0> ;
  assign M5_AXIS_TDATA[24] = \<const0> ;
  assign M5_AXIS_TDATA[23] = \<const0> ;
  assign M5_AXIS_TDATA[22] = \<const0> ;
  assign M5_AXIS_TDATA[21] = \<const0> ;
  assign M5_AXIS_TDATA[20] = \<const0> ;
  assign M5_AXIS_TDATA[19] = \<const0> ;
  assign M5_AXIS_TDATA[18] = \<const0> ;
  assign M5_AXIS_TDATA[17] = \<const0> ;
  assign M5_AXIS_TDATA[16] = \<const0> ;
  assign M5_AXIS_TDATA[15] = \<const0> ;
  assign M5_AXIS_TDATA[14] = \<const0> ;
  assign M5_AXIS_TDATA[13] = \<const0> ;
  assign M5_AXIS_TDATA[12] = \<const0> ;
  assign M5_AXIS_TDATA[11] = \<const0> ;
  assign M5_AXIS_TDATA[10] = \<const0> ;
  assign M5_AXIS_TDATA[9] = \<const0> ;
  assign M5_AXIS_TDATA[8] = \<const0> ;
  assign M5_AXIS_TDATA[7] = \<const0> ;
  assign M5_AXIS_TDATA[6] = \<const0> ;
  assign M5_AXIS_TDATA[5] = \<const0> ;
  assign M5_AXIS_TDATA[4] = \<const0> ;
  assign M5_AXIS_TDATA[3] = \<const0> ;
  assign M5_AXIS_TDATA[2] = \<const0> ;
  assign M5_AXIS_TDATA[1] = \<const0> ;
  assign M5_AXIS_TDATA[0] = \<const0> ;
  assign M5_AXIS_TLAST = \<const0> ;
  assign M5_AXIS_TVALID = \<const0> ;
  assign M6_AXIS_TDATA[31] = \<const0> ;
  assign M6_AXIS_TDATA[30] = \<const0> ;
  assign M6_AXIS_TDATA[29] = \<const0> ;
  assign M6_AXIS_TDATA[28] = \<const0> ;
  assign M6_AXIS_TDATA[27] = \<const0> ;
  assign M6_AXIS_TDATA[26] = \<const0> ;
  assign M6_AXIS_TDATA[25] = \<const0> ;
  assign M6_AXIS_TDATA[24] = \<const0> ;
  assign M6_AXIS_TDATA[23] = \<const0> ;
  assign M6_AXIS_TDATA[22] = \<const0> ;
  assign M6_AXIS_TDATA[21] = \<const0> ;
  assign M6_AXIS_TDATA[20] = \<const0> ;
  assign M6_AXIS_TDATA[19] = \<const0> ;
  assign M6_AXIS_TDATA[18] = \<const0> ;
  assign M6_AXIS_TDATA[17] = \<const0> ;
  assign M6_AXIS_TDATA[16] = \<const0> ;
  assign M6_AXIS_TDATA[15] = \<const0> ;
  assign M6_AXIS_TDATA[14] = \<const0> ;
  assign M6_AXIS_TDATA[13] = \<const0> ;
  assign M6_AXIS_TDATA[12] = \<const0> ;
  assign M6_AXIS_TDATA[11] = \<const0> ;
  assign M6_AXIS_TDATA[10] = \<const0> ;
  assign M6_AXIS_TDATA[9] = \<const0> ;
  assign M6_AXIS_TDATA[8] = \<const0> ;
  assign M6_AXIS_TDATA[7] = \<const0> ;
  assign M6_AXIS_TDATA[6] = \<const0> ;
  assign M6_AXIS_TDATA[5] = \<const0> ;
  assign M6_AXIS_TDATA[4] = \<const0> ;
  assign M6_AXIS_TDATA[3] = \<const0> ;
  assign M6_AXIS_TDATA[2] = \<const0> ;
  assign M6_AXIS_TDATA[1] = \<const0> ;
  assign M6_AXIS_TDATA[0] = \<const0> ;
  assign M6_AXIS_TLAST = \<const0> ;
  assign M6_AXIS_TVALID = \<const0> ;
  assign M7_AXIS_TDATA[31] = \<const0> ;
  assign M7_AXIS_TDATA[30] = \<const0> ;
  assign M7_AXIS_TDATA[29] = \<const0> ;
  assign M7_AXIS_TDATA[28] = \<const0> ;
  assign M7_AXIS_TDATA[27] = \<const0> ;
  assign M7_AXIS_TDATA[26] = \<const0> ;
  assign M7_AXIS_TDATA[25] = \<const0> ;
  assign M7_AXIS_TDATA[24] = \<const0> ;
  assign M7_AXIS_TDATA[23] = \<const0> ;
  assign M7_AXIS_TDATA[22] = \<const0> ;
  assign M7_AXIS_TDATA[21] = \<const0> ;
  assign M7_AXIS_TDATA[20] = \<const0> ;
  assign M7_AXIS_TDATA[19] = \<const0> ;
  assign M7_AXIS_TDATA[18] = \<const0> ;
  assign M7_AXIS_TDATA[17] = \<const0> ;
  assign M7_AXIS_TDATA[16] = \<const0> ;
  assign M7_AXIS_TDATA[15] = \<const0> ;
  assign M7_AXIS_TDATA[14] = \<const0> ;
  assign M7_AXIS_TDATA[13] = \<const0> ;
  assign M7_AXIS_TDATA[12] = \<const0> ;
  assign M7_AXIS_TDATA[11] = \<const0> ;
  assign M7_AXIS_TDATA[10] = \<const0> ;
  assign M7_AXIS_TDATA[9] = \<const0> ;
  assign M7_AXIS_TDATA[8] = \<const0> ;
  assign M7_AXIS_TDATA[7] = \<const0> ;
  assign M7_AXIS_TDATA[6] = \<const0> ;
  assign M7_AXIS_TDATA[5] = \<const0> ;
  assign M7_AXIS_TDATA[4] = \<const0> ;
  assign M7_AXIS_TDATA[3] = \<const0> ;
  assign M7_AXIS_TDATA[2] = \<const0> ;
  assign M7_AXIS_TDATA[1] = \<const0> ;
  assign M7_AXIS_TDATA[0] = \<const0> ;
  assign M7_AXIS_TLAST = \<const0> ;
  assign M7_AXIS_TVALID = \<const0> ;
  assign M8_AXIS_TDATA[31] = \<const0> ;
  assign M8_AXIS_TDATA[30] = \<const0> ;
  assign M8_AXIS_TDATA[29] = \<const0> ;
  assign M8_AXIS_TDATA[28] = \<const0> ;
  assign M8_AXIS_TDATA[27] = \<const0> ;
  assign M8_AXIS_TDATA[26] = \<const0> ;
  assign M8_AXIS_TDATA[25] = \<const0> ;
  assign M8_AXIS_TDATA[24] = \<const0> ;
  assign M8_AXIS_TDATA[23] = \<const0> ;
  assign M8_AXIS_TDATA[22] = \<const0> ;
  assign M8_AXIS_TDATA[21] = \<const0> ;
  assign M8_AXIS_TDATA[20] = \<const0> ;
  assign M8_AXIS_TDATA[19] = \<const0> ;
  assign M8_AXIS_TDATA[18] = \<const0> ;
  assign M8_AXIS_TDATA[17] = \<const0> ;
  assign M8_AXIS_TDATA[16] = \<const0> ;
  assign M8_AXIS_TDATA[15] = \<const0> ;
  assign M8_AXIS_TDATA[14] = \<const0> ;
  assign M8_AXIS_TDATA[13] = \<const0> ;
  assign M8_AXIS_TDATA[12] = \<const0> ;
  assign M8_AXIS_TDATA[11] = \<const0> ;
  assign M8_AXIS_TDATA[10] = \<const0> ;
  assign M8_AXIS_TDATA[9] = \<const0> ;
  assign M8_AXIS_TDATA[8] = \<const0> ;
  assign M8_AXIS_TDATA[7] = \<const0> ;
  assign M8_AXIS_TDATA[6] = \<const0> ;
  assign M8_AXIS_TDATA[5] = \<const0> ;
  assign M8_AXIS_TDATA[4] = \<const0> ;
  assign M8_AXIS_TDATA[3] = \<const0> ;
  assign M8_AXIS_TDATA[2] = \<const0> ;
  assign M8_AXIS_TDATA[1] = \<const0> ;
  assign M8_AXIS_TDATA[0] = \<const0> ;
  assign M8_AXIS_TLAST = \<const0> ;
  assign M8_AXIS_TVALID = \<const0> ;
  assign M9_AXIS_TDATA[31] = \<const0> ;
  assign M9_AXIS_TDATA[30] = \<const0> ;
  assign M9_AXIS_TDATA[29] = \<const0> ;
  assign M9_AXIS_TDATA[28] = \<const0> ;
  assign M9_AXIS_TDATA[27] = \<const0> ;
  assign M9_AXIS_TDATA[26] = \<const0> ;
  assign M9_AXIS_TDATA[25] = \<const0> ;
  assign M9_AXIS_TDATA[24] = \<const0> ;
  assign M9_AXIS_TDATA[23] = \<const0> ;
  assign M9_AXIS_TDATA[22] = \<const0> ;
  assign M9_AXIS_TDATA[21] = \<const0> ;
  assign M9_AXIS_TDATA[20] = \<const0> ;
  assign M9_AXIS_TDATA[19] = \<const0> ;
  assign M9_AXIS_TDATA[18] = \<const0> ;
  assign M9_AXIS_TDATA[17] = \<const0> ;
  assign M9_AXIS_TDATA[16] = \<const0> ;
  assign M9_AXIS_TDATA[15] = \<const0> ;
  assign M9_AXIS_TDATA[14] = \<const0> ;
  assign M9_AXIS_TDATA[13] = \<const0> ;
  assign M9_AXIS_TDATA[12] = \<const0> ;
  assign M9_AXIS_TDATA[11] = \<const0> ;
  assign M9_AXIS_TDATA[10] = \<const0> ;
  assign M9_AXIS_TDATA[9] = \<const0> ;
  assign M9_AXIS_TDATA[8] = \<const0> ;
  assign M9_AXIS_TDATA[7] = \<const0> ;
  assign M9_AXIS_TDATA[6] = \<const0> ;
  assign M9_AXIS_TDATA[5] = \<const0> ;
  assign M9_AXIS_TDATA[4] = \<const0> ;
  assign M9_AXIS_TDATA[3] = \<const0> ;
  assign M9_AXIS_TDATA[2] = \<const0> ;
  assign M9_AXIS_TDATA[1] = \<const0> ;
  assign M9_AXIS_TDATA[0] = \<const0> ;
  assign M9_AXIS_TLAST = \<const0> ;
  assign M9_AXIS_TVALID = \<const0> ;
  assign MB_Error = \<const0> ;
  assign MB_Halted = \^LOCKSTEP_Master_Out [10];
  assign M_AXI_DC_ACREADY = \<const0> ;
  assign M_AXI_DC_ARADDR[31] = \<const0> ;
  assign M_AXI_DC_ARADDR[30] = \<const0> ;
  assign M_AXI_DC_ARADDR[29] = \<const0> ;
  assign M_AXI_DC_ARADDR[28] = \<const0> ;
  assign M_AXI_DC_ARADDR[27] = \<const0> ;
  assign M_AXI_DC_ARADDR[26] = \<const0> ;
  assign M_AXI_DC_ARADDR[25] = \<const0> ;
  assign M_AXI_DC_ARADDR[24] = \<const0> ;
  assign M_AXI_DC_ARADDR[23] = \<const0> ;
  assign M_AXI_DC_ARADDR[22] = \<const0> ;
  assign M_AXI_DC_ARADDR[21] = \<const0> ;
  assign M_AXI_DC_ARADDR[20] = \<const0> ;
  assign M_AXI_DC_ARADDR[19] = \<const0> ;
  assign M_AXI_DC_ARADDR[18] = \<const0> ;
  assign M_AXI_DC_ARADDR[17] = \<const0> ;
  assign M_AXI_DC_ARADDR[16] = \<const0> ;
  assign M_AXI_DC_ARADDR[15] = \<const0> ;
  assign M_AXI_DC_ARADDR[14] = \<const0> ;
  assign M_AXI_DC_ARADDR[13] = \<const0> ;
  assign M_AXI_DC_ARADDR[12] = \<const0> ;
  assign M_AXI_DC_ARADDR[11] = \<const0> ;
  assign M_AXI_DC_ARADDR[10] = \<const0> ;
  assign M_AXI_DC_ARADDR[9] = \<const0> ;
  assign M_AXI_DC_ARADDR[8] = \<const0> ;
  assign M_AXI_DC_ARADDR[7] = \<const0> ;
  assign M_AXI_DC_ARADDR[6] = \<const0> ;
  assign M_AXI_DC_ARADDR[5] = \<const0> ;
  assign M_AXI_DC_ARADDR[4] = \<const0> ;
  assign M_AXI_DC_ARADDR[3] = \<const0> ;
  assign M_AXI_DC_ARADDR[2] = \<const0> ;
  assign M_AXI_DC_ARADDR[1] = \<const0> ;
  assign M_AXI_DC_ARADDR[0] = \<const0> ;
  assign M_AXI_DC_ARBAR[1] = \<const0> ;
  assign M_AXI_DC_ARBAR[0] = \<const0> ;
  assign M_AXI_DC_ARBURST[1] = \<const0> ;
  assign M_AXI_DC_ARBURST[0] = \<const0> ;
  assign M_AXI_DC_ARCACHE[3] = \<const0> ;
  assign M_AXI_DC_ARCACHE[2] = \<const0> ;
  assign M_AXI_DC_ARCACHE[1] = \<const0> ;
  assign M_AXI_DC_ARCACHE[0] = \<const0> ;
  assign M_AXI_DC_ARDOMAIN[1] = \<const0> ;
  assign M_AXI_DC_ARDOMAIN[0] = \<const0> ;
  assign M_AXI_DC_ARID[0] = \<const0> ;
  assign M_AXI_DC_ARLEN[7] = \<const0> ;
  assign M_AXI_DC_ARLEN[6] = \<const0> ;
  assign M_AXI_DC_ARLEN[5] = \<const0> ;
  assign M_AXI_DC_ARLEN[4] = \<const0> ;
  assign M_AXI_DC_ARLEN[3] = \<const0> ;
  assign M_AXI_DC_ARLEN[2] = \<const0> ;
  assign M_AXI_DC_ARLEN[1] = \<const0> ;
  assign M_AXI_DC_ARLEN[0] = \<const0> ;
  assign M_AXI_DC_ARLOCK = \<const0> ;
  assign M_AXI_DC_ARPROT[2] = \<const0> ;
  assign M_AXI_DC_ARPROT[1] = \<const0> ;
  assign M_AXI_DC_ARPROT[0] = \<const0> ;
  assign M_AXI_DC_ARQOS[3] = \<const0> ;
  assign M_AXI_DC_ARQOS[2] = \<const0> ;
  assign M_AXI_DC_ARQOS[1] = \<const0> ;
  assign M_AXI_DC_ARQOS[0] = \<const0> ;
  assign M_AXI_DC_ARSIZE[2] = \<const0> ;
  assign M_AXI_DC_ARSIZE[1] = \<const0> ;
  assign M_AXI_DC_ARSIZE[0] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[3] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[2] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[1] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[0] = \<const0> ;
  assign M_AXI_DC_ARUSER[4] = \<const0> ;
  assign M_AXI_DC_ARUSER[3] = \<const0> ;
  assign M_AXI_DC_ARUSER[2] = \<const0> ;
  assign M_AXI_DC_ARUSER[1] = \<const0> ;
  assign M_AXI_DC_ARUSER[0] = \<const0> ;
  assign M_AXI_DC_ARVALID = \<const0> ;
  assign M_AXI_DC_AWADDR[31] = \<const0> ;
  assign M_AXI_DC_AWADDR[30] = \<const0> ;
  assign M_AXI_DC_AWADDR[29] = \<const0> ;
  assign M_AXI_DC_AWADDR[28] = \<const0> ;
  assign M_AXI_DC_AWADDR[27] = \<const0> ;
  assign M_AXI_DC_AWADDR[26] = \<const0> ;
  assign M_AXI_DC_AWADDR[25] = \<const0> ;
  assign M_AXI_DC_AWADDR[24] = \<const0> ;
  assign M_AXI_DC_AWADDR[23] = \<const0> ;
  assign M_AXI_DC_AWADDR[22] = \<const0> ;
  assign M_AXI_DC_AWADDR[21] = \<const0> ;
  assign M_AXI_DC_AWADDR[20] = \<const0> ;
  assign M_AXI_DC_AWADDR[19] = \<const0> ;
  assign M_AXI_DC_AWADDR[18] = \<const0> ;
  assign M_AXI_DC_AWADDR[17] = \<const0> ;
  assign M_AXI_DC_AWADDR[16] = \<const0> ;
  assign M_AXI_DC_AWADDR[15] = \<const0> ;
  assign M_AXI_DC_AWADDR[14] = \<const0> ;
  assign M_AXI_DC_AWADDR[13] = \<const0> ;
  assign M_AXI_DC_AWADDR[12] = \<const0> ;
  assign M_AXI_DC_AWADDR[11] = \<const0> ;
  assign M_AXI_DC_AWADDR[10] = \<const0> ;
  assign M_AXI_DC_AWADDR[9] = \<const0> ;
  assign M_AXI_DC_AWADDR[8] = \<const0> ;
  assign M_AXI_DC_AWADDR[7] = \<const0> ;
  assign M_AXI_DC_AWADDR[6] = \<const0> ;
  assign M_AXI_DC_AWADDR[5] = \<const0> ;
  assign M_AXI_DC_AWADDR[4] = \<const0> ;
  assign M_AXI_DC_AWADDR[3] = \<const0> ;
  assign M_AXI_DC_AWADDR[2] = \<const0> ;
  assign M_AXI_DC_AWADDR[1] = \<const0> ;
  assign M_AXI_DC_AWADDR[0] = \<const0> ;
  assign M_AXI_DC_AWBAR[1] = \<const0> ;
  assign M_AXI_DC_AWBAR[0] = \<const0> ;
  assign M_AXI_DC_AWBURST[1] = \<const0> ;
  assign M_AXI_DC_AWBURST[0] = \<const0> ;
  assign M_AXI_DC_AWCACHE[3] = \<const0> ;
  assign M_AXI_DC_AWCACHE[2] = \<const0> ;
  assign M_AXI_DC_AWCACHE[1] = \<const0> ;
  assign M_AXI_DC_AWCACHE[0] = \<const0> ;
  assign M_AXI_DC_AWDOMAIN[1] = \<const0> ;
  assign M_AXI_DC_AWDOMAIN[0] = \<const0> ;
  assign M_AXI_DC_AWID[0] = \<const0> ;
  assign M_AXI_DC_AWLEN[7] = \<const0> ;
  assign M_AXI_DC_AWLEN[6] = \<const0> ;
  assign M_AXI_DC_AWLEN[5] = \<const0> ;
  assign M_AXI_DC_AWLEN[4] = \<const0> ;
  assign M_AXI_DC_AWLEN[3] = \<const0> ;
  assign M_AXI_DC_AWLEN[2] = \<const0> ;
  assign M_AXI_DC_AWLEN[1] = \<const0> ;
  assign M_AXI_DC_AWLEN[0] = \<const0> ;
  assign M_AXI_DC_AWLOCK = \<const0> ;
  assign M_AXI_DC_AWPROT[2] = \<const0> ;
  assign M_AXI_DC_AWPROT[1] = \<const0> ;
  assign M_AXI_DC_AWPROT[0] = \<const0> ;
  assign M_AXI_DC_AWQOS[3] = \<const0> ;
  assign M_AXI_DC_AWQOS[2] = \<const0> ;
  assign M_AXI_DC_AWQOS[1] = \<const0> ;
  assign M_AXI_DC_AWQOS[0] = \<const0> ;
  assign M_AXI_DC_AWSIZE[2] = \<const0> ;
  assign M_AXI_DC_AWSIZE[1] = \<const0> ;
  assign M_AXI_DC_AWSIZE[0] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[2] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[1] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[0] = \<const0> ;
  assign M_AXI_DC_AWUSER[4] = \<const0> ;
  assign M_AXI_DC_AWUSER[3] = \<const0> ;
  assign M_AXI_DC_AWUSER[2] = \<const0> ;
  assign M_AXI_DC_AWUSER[1] = \<const0> ;
  assign M_AXI_DC_AWUSER[0] = \<const0> ;
  assign M_AXI_DC_AWVALID = \<const0> ;
  assign M_AXI_DC_BREADY = \<const0> ;
  assign M_AXI_DC_CDDATA[31] = \<const0> ;
  assign M_AXI_DC_CDDATA[30] = \<const0> ;
  assign M_AXI_DC_CDDATA[29] = \<const0> ;
  assign M_AXI_DC_CDDATA[28] = \<const0> ;
  assign M_AXI_DC_CDDATA[27] = \<const0> ;
  assign M_AXI_DC_CDDATA[26] = \<const0> ;
  assign M_AXI_DC_CDDATA[25] = \<const0> ;
  assign M_AXI_DC_CDDATA[24] = \<const0> ;
  assign M_AXI_DC_CDDATA[23] = \<const0> ;
  assign M_AXI_DC_CDDATA[22] = \<const0> ;
  assign M_AXI_DC_CDDATA[21] = \<const0> ;
  assign M_AXI_DC_CDDATA[20] = \<const0> ;
  assign M_AXI_DC_CDDATA[19] = \<const0> ;
  assign M_AXI_DC_CDDATA[18] = \<const0> ;
  assign M_AXI_DC_CDDATA[17] = \<const0> ;
  assign M_AXI_DC_CDDATA[16] = \<const0> ;
  assign M_AXI_DC_CDDATA[15] = \<const0> ;
  assign M_AXI_DC_CDDATA[14] = \<const0> ;
  assign M_AXI_DC_CDDATA[13] = \<const0> ;
  assign M_AXI_DC_CDDATA[12] = \<const0> ;
  assign M_AXI_DC_CDDATA[11] = \<const0> ;
  assign M_AXI_DC_CDDATA[10] = \<const0> ;
  assign M_AXI_DC_CDDATA[9] = \<const0> ;
  assign M_AXI_DC_CDDATA[8] = \<const0> ;
  assign M_AXI_DC_CDDATA[7] = \<const0> ;
  assign M_AXI_DC_CDDATA[6] = \<const0> ;
  assign M_AXI_DC_CDDATA[5] = \<const0> ;
  assign M_AXI_DC_CDDATA[4] = \<const0> ;
  assign M_AXI_DC_CDDATA[3] = \<const0> ;
  assign M_AXI_DC_CDDATA[2] = \<const0> ;
  assign M_AXI_DC_CDDATA[1] = \<const0> ;
  assign M_AXI_DC_CDDATA[0] = \<const0> ;
  assign M_AXI_DC_CDLAST = \<const0> ;
  assign M_AXI_DC_CDVALID = \<const0> ;
  assign M_AXI_DC_CRRESP[4] = \<const0> ;
  assign M_AXI_DC_CRRESP[3] = \<const0> ;
  assign M_AXI_DC_CRRESP[2] = \<const0> ;
  assign M_AXI_DC_CRRESP[1] = \<const0> ;
  assign M_AXI_DC_CRRESP[0] = \<const0> ;
  assign M_AXI_DC_CRVALID = \<const0> ;
  assign M_AXI_DC_RACK = \<const0> ;
  assign M_AXI_DC_RREADY = \<const0> ;
  assign M_AXI_DC_WACK = \<const0> ;
  assign M_AXI_DC_WDATA[31] = \<const0> ;
  assign M_AXI_DC_WDATA[30] = \<const0> ;
  assign M_AXI_DC_WDATA[29] = \<const0> ;
  assign M_AXI_DC_WDATA[28] = \<const0> ;
  assign M_AXI_DC_WDATA[27] = \<const0> ;
  assign M_AXI_DC_WDATA[26] = \<const0> ;
  assign M_AXI_DC_WDATA[25] = \<const0> ;
  assign M_AXI_DC_WDATA[24] = \<const0> ;
  assign M_AXI_DC_WDATA[23] = \<const0> ;
  assign M_AXI_DC_WDATA[22] = \<const0> ;
  assign M_AXI_DC_WDATA[21] = \<const0> ;
  assign M_AXI_DC_WDATA[20] = \<const0> ;
  assign M_AXI_DC_WDATA[19] = \<const0> ;
  assign M_AXI_DC_WDATA[18] = \<const0> ;
  assign M_AXI_DC_WDATA[17] = \<const0> ;
  assign M_AXI_DC_WDATA[16] = \<const0> ;
  assign M_AXI_DC_WDATA[15] = \<const0> ;
  assign M_AXI_DC_WDATA[14] = \<const0> ;
  assign M_AXI_DC_WDATA[13] = \<const0> ;
  assign M_AXI_DC_WDATA[12] = \<const0> ;
  assign M_AXI_DC_WDATA[11] = \<const0> ;
  assign M_AXI_DC_WDATA[10] = \<const0> ;
  assign M_AXI_DC_WDATA[9] = \<const0> ;
  assign M_AXI_DC_WDATA[8] = \<const0> ;
  assign M_AXI_DC_WDATA[7] = \<const0> ;
  assign M_AXI_DC_WDATA[6] = \<const0> ;
  assign M_AXI_DC_WDATA[5] = \<const0> ;
  assign M_AXI_DC_WDATA[4] = \<const0> ;
  assign M_AXI_DC_WDATA[3] = \<const0> ;
  assign M_AXI_DC_WDATA[2] = \<const0> ;
  assign M_AXI_DC_WDATA[1] = \<const0> ;
  assign M_AXI_DC_WDATA[0] = \<const0> ;
  assign M_AXI_DC_WLAST = \<const0> ;
  assign M_AXI_DC_WSTRB[3] = \<const0> ;
  assign M_AXI_DC_WSTRB[2] = \<const0> ;
  assign M_AXI_DC_WSTRB[1] = \<const0> ;
  assign M_AXI_DC_WSTRB[0] = \<const0> ;
  assign M_AXI_DC_WUSER[0] = \<const0> ;
  assign M_AXI_DC_WVALID = \<const0> ;
  assign M_AXI_DP_ARBURST[1] = \<const0> ;
  assign M_AXI_DP_ARBURST[0] = \<const1> ;
  assign M_AXI_DP_ARCACHE[3] = \<const0> ;
  assign M_AXI_DP_ARCACHE[2] = \<const0> ;
  assign M_AXI_DP_ARCACHE[1] = \<const1> ;
  assign M_AXI_DP_ARCACHE[0] = \<const1> ;
  assign M_AXI_DP_ARID[0] = \<const0> ;
  assign M_AXI_DP_ARLEN[7] = \<const0> ;
  assign M_AXI_DP_ARLEN[6] = \<const0> ;
  assign M_AXI_DP_ARLEN[5] = \<const0> ;
  assign M_AXI_DP_ARLEN[4] = \<const0> ;
  assign M_AXI_DP_ARLEN[3] = \<const0> ;
  assign M_AXI_DP_ARLEN[2] = \<const0> ;
  assign M_AXI_DP_ARLEN[1] = \<const0> ;
  assign M_AXI_DP_ARLEN[0] = \<const0> ;
  assign M_AXI_DP_ARLOCK = \<const0> ;
  assign M_AXI_DP_ARPROT[2] = \<const0> ;
  assign M_AXI_DP_ARPROT[1] = \<const0> ;
  assign M_AXI_DP_ARPROT[0] = \<const0> ;
  assign M_AXI_DP_ARQOS[3] = \<const1> ;
  assign M_AXI_DP_ARQOS[2] = \<const0> ;
  assign M_AXI_DP_ARQOS[1] = \<const0> ;
  assign M_AXI_DP_ARQOS[0] = \<const0> ;
  assign M_AXI_DP_ARSIZE[2] = \<const0> ;
  assign M_AXI_DP_ARSIZE[1] = \<const1> ;
  assign M_AXI_DP_ARSIZE[0] = \<const0> ;
  assign M_AXI_DP_AWADDR[31:0] = M_AXI_DP_ARADDR;
  assign M_AXI_DP_AWBURST[1] = \<const0> ;
  assign M_AXI_DP_AWBURST[0] = \<const1> ;
  assign M_AXI_DP_AWCACHE[3] = \<const0> ;
  assign M_AXI_DP_AWCACHE[2] = \<const0> ;
  assign M_AXI_DP_AWCACHE[1] = \<const1> ;
  assign M_AXI_DP_AWCACHE[0] = \<const1> ;
  assign M_AXI_DP_AWID[0] = \<const0> ;
  assign M_AXI_DP_AWLEN[7] = \<const0> ;
  assign M_AXI_DP_AWLEN[6] = \<const0> ;
  assign M_AXI_DP_AWLEN[5] = \<const0> ;
  assign M_AXI_DP_AWLEN[4] = \<const0> ;
  assign M_AXI_DP_AWLEN[3] = \<const0> ;
  assign M_AXI_DP_AWLEN[2] = \<const0> ;
  assign M_AXI_DP_AWLEN[1] = \<const0> ;
  assign M_AXI_DP_AWLEN[0] = \<const0> ;
  assign M_AXI_DP_AWLOCK = \<const0> ;
  assign M_AXI_DP_AWPROT[2] = \<const0> ;
  assign M_AXI_DP_AWPROT[1] = \<const0> ;
  assign M_AXI_DP_AWPROT[0] = \<const0> ;
  assign M_AXI_DP_AWQOS[3] = \<const1> ;
  assign M_AXI_DP_AWQOS[2] = \<const0> ;
  assign M_AXI_DP_AWQOS[1] = \<const0> ;
  assign M_AXI_DP_AWQOS[0] = \<const0> ;
  assign M_AXI_DP_AWSIZE[2] = \<const0> ;
  assign M_AXI_DP_AWSIZE[1] = \<const1> ;
  assign M_AXI_DP_AWSIZE[0] = \<const0> ;
  assign M_AXI_DP_BREADY = \<const1> ;
  assign M_AXI_DP_RREADY = \<const1> ;
  assign M_AXI_DP_WLAST = \<const1> ;
  assign M_AXI_IC_ACREADY = \<const0> ;
  assign M_AXI_IC_ARADDR[31] = \<const0> ;
  assign M_AXI_IC_ARADDR[30] = \<const0> ;
  assign M_AXI_IC_ARADDR[29] = \<const0> ;
  assign M_AXI_IC_ARADDR[28] = \<const0> ;
  assign M_AXI_IC_ARADDR[27] = \<const0> ;
  assign M_AXI_IC_ARADDR[26] = \<const0> ;
  assign M_AXI_IC_ARADDR[25] = \<const0> ;
  assign M_AXI_IC_ARADDR[24] = \<const0> ;
  assign M_AXI_IC_ARADDR[23] = \<const0> ;
  assign M_AXI_IC_ARADDR[22] = \<const0> ;
  assign M_AXI_IC_ARADDR[21] = \<const0> ;
  assign M_AXI_IC_ARADDR[20] = \<const0> ;
  assign M_AXI_IC_ARADDR[19] = \<const0> ;
  assign M_AXI_IC_ARADDR[18] = \<const0> ;
  assign M_AXI_IC_ARADDR[17] = \<const0> ;
  assign M_AXI_IC_ARADDR[16] = \<const0> ;
  assign M_AXI_IC_ARADDR[15] = \<const0> ;
  assign M_AXI_IC_ARADDR[14] = \<const0> ;
  assign M_AXI_IC_ARADDR[13] = \<const0> ;
  assign M_AXI_IC_ARADDR[12] = \<const0> ;
  assign M_AXI_IC_ARADDR[11] = \<const0> ;
  assign M_AXI_IC_ARADDR[10] = \<const0> ;
  assign M_AXI_IC_ARADDR[9] = \<const0> ;
  assign M_AXI_IC_ARADDR[8] = \<const0> ;
  assign M_AXI_IC_ARADDR[7] = \<const0> ;
  assign M_AXI_IC_ARADDR[6] = \<const0> ;
  assign M_AXI_IC_ARADDR[5] = \<const0> ;
  assign M_AXI_IC_ARADDR[4] = \<const0> ;
  assign M_AXI_IC_ARADDR[3] = \<const0> ;
  assign M_AXI_IC_ARADDR[2] = \<const0> ;
  assign M_AXI_IC_ARADDR[1] = \<const0> ;
  assign M_AXI_IC_ARADDR[0] = \<const0> ;
  assign M_AXI_IC_ARBAR[1] = \<const0> ;
  assign M_AXI_IC_ARBAR[0] = \<const0> ;
  assign M_AXI_IC_ARBURST[1] = \<const0> ;
  assign M_AXI_IC_ARBURST[0] = \<const0> ;
  assign M_AXI_IC_ARCACHE[3] = \<const0> ;
  assign M_AXI_IC_ARCACHE[2] = \<const0> ;
  assign M_AXI_IC_ARCACHE[1] = \<const0> ;
  assign M_AXI_IC_ARCACHE[0] = \<const0> ;
  assign M_AXI_IC_ARDOMAIN[1] = \<const0> ;
  assign M_AXI_IC_ARDOMAIN[0] = \<const0> ;
  assign M_AXI_IC_ARID[0] = \<const0> ;
  assign M_AXI_IC_ARLEN[7] = \<const0> ;
  assign M_AXI_IC_ARLEN[6] = \<const0> ;
  assign M_AXI_IC_ARLEN[5] = \<const0> ;
  assign M_AXI_IC_ARLEN[4] = \<const0> ;
  assign M_AXI_IC_ARLEN[3] = \<const0> ;
  assign M_AXI_IC_ARLEN[2] = \<const0> ;
  assign M_AXI_IC_ARLEN[1] = \<const0> ;
  assign M_AXI_IC_ARLEN[0] = \<const0> ;
  assign M_AXI_IC_ARLOCK = \<const0> ;
  assign M_AXI_IC_ARPROT[2] = \<const0> ;
  assign M_AXI_IC_ARPROT[1] = \<const0> ;
  assign M_AXI_IC_ARPROT[0] = \<const0> ;
  assign M_AXI_IC_ARQOS[3] = \<const0> ;
  assign M_AXI_IC_ARQOS[2] = \<const0> ;
  assign M_AXI_IC_ARQOS[1] = \<const0> ;
  assign M_AXI_IC_ARQOS[0] = \<const0> ;
  assign M_AXI_IC_ARSIZE[2] = \<const0> ;
  assign M_AXI_IC_ARSIZE[1] = \<const0> ;
  assign M_AXI_IC_ARSIZE[0] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[3] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[2] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[1] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[0] = \<const0> ;
  assign M_AXI_IC_ARUSER[4] = \<const0> ;
  assign M_AXI_IC_ARUSER[3] = \<const0> ;
  assign M_AXI_IC_ARUSER[2] = \<const0> ;
  assign M_AXI_IC_ARUSER[1] = \<const0> ;
  assign M_AXI_IC_ARUSER[0] = \<const0> ;
  assign M_AXI_IC_ARVALID = \<const0> ;
  assign M_AXI_IC_AWADDR[31] = \<const0> ;
  assign M_AXI_IC_AWADDR[30] = \<const0> ;
  assign M_AXI_IC_AWADDR[29] = \<const0> ;
  assign M_AXI_IC_AWADDR[28] = \<const0> ;
  assign M_AXI_IC_AWADDR[27] = \<const0> ;
  assign M_AXI_IC_AWADDR[26] = \<const0> ;
  assign M_AXI_IC_AWADDR[25] = \<const0> ;
  assign M_AXI_IC_AWADDR[24] = \<const0> ;
  assign M_AXI_IC_AWADDR[23] = \<const0> ;
  assign M_AXI_IC_AWADDR[22] = \<const0> ;
  assign M_AXI_IC_AWADDR[21] = \<const0> ;
  assign M_AXI_IC_AWADDR[20] = \<const0> ;
  assign M_AXI_IC_AWADDR[19] = \<const0> ;
  assign M_AXI_IC_AWADDR[18] = \<const0> ;
  assign M_AXI_IC_AWADDR[17] = \<const0> ;
  assign M_AXI_IC_AWADDR[16] = \<const0> ;
  assign M_AXI_IC_AWADDR[15] = \<const0> ;
  assign M_AXI_IC_AWADDR[14] = \<const0> ;
  assign M_AXI_IC_AWADDR[13] = \<const0> ;
  assign M_AXI_IC_AWADDR[12] = \<const0> ;
  assign M_AXI_IC_AWADDR[11] = \<const0> ;
  assign M_AXI_IC_AWADDR[10] = \<const0> ;
  assign M_AXI_IC_AWADDR[9] = \<const0> ;
  assign M_AXI_IC_AWADDR[8] = \<const0> ;
  assign M_AXI_IC_AWADDR[7] = \<const0> ;
  assign M_AXI_IC_AWADDR[6] = \<const0> ;
  assign M_AXI_IC_AWADDR[5] = \<const0> ;
  assign M_AXI_IC_AWADDR[4] = \<const0> ;
  assign M_AXI_IC_AWADDR[3] = \<const0> ;
  assign M_AXI_IC_AWADDR[2] = \<const0> ;
  assign M_AXI_IC_AWADDR[1] = \<const0> ;
  assign M_AXI_IC_AWADDR[0] = \<const0> ;
  assign M_AXI_IC_AWBAR[1] = \<const0> ;
  assign M_AXI_IC_AWBAR[0] = \<const0> ;
  assign M_AXI_IC_AWBURST[1] = \<const0> ;
  assign M_AXI_IC_AWBURST[0] = \<const0> ;
  assign M_AXI_IC_AWCACHE[3] = \<const0> ;
  assign M_AXI_IC_AWCACHE[2] = \<const0> ;
  assign M_AXI_IC_AWCACHE[1] = \<const0> ;
  assign M_AXI_IC_AWCACHE[0] = \<const0> ;
  assign M_AXI_IC_AWDOMAIN[1] = \<const0> ;
  assign M_AXI_IC_AWDOMAIN[0] = \<const0> ;
  assign M_AXI_IC_AWID[0] = \<const0> ;
  assign M_AXI_IC_AWLEN[7] = \<const0> ;
  assign M_AXI_IC_AWLEN[6] = \<const0> ;
  assign M_AXI_IC_AWLEN[5] = \<const0> ;
  assign M_AXI_IC_AWLEN[4] = \<const0> ;
  assign M_AXI_IC_AWLEN[3] = \<const0> ;
  assign M_AXI_IC_AWLEN[2] = \<const0> ;
  assign M_AXI_IC_AWLEN[1] = \<const0> ;
  assign M_AXI_IC_AWLEN[0] = \<const0> ;
  assign M_AXI_IC_AWLOCK = \<const0> ;
  assign M_AXI_IC_AWPROT[2] = \<const0> ;
  assign M_AXI_IC_AWPROT[1] = \<const0> ;
  assign M_AXI_IC_AWPROT[0] = \<const0> ;
  assign M_AXI_IC_AWQOS[3] = \<const0> ;
  assign M_AXI_IC_AWQOS[2] = \<const0> ;
  assign M_AXI_IC_AWQOS[1] = \<const0> ;
  assign M_AXI_IC_AWQOS[0] = \<const0> ;
  assign M_AXI_IC_AWSIZE[2] = \<const0> ;
  assign M_AXI_IC_AWSIZE[1] = \<const0> ;
  assign M_AXI_IC_AWSIZE[0] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[2] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[1] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[0] = \<const0> ;
  assign M_AXI_IC_AWUSER[4] = \<const0> ;
  assign M_AXI_IC_AWUSER[3] = \<const0> ;
  assign M_AXI_IC_AWUSER[2] = \<const0> ;
  assign M_AXI_IC_AWUSER[1] = \<const0> ;
  assign M_AXI_IC_AWUSER[0] = \<const0> ;
  assign M_AXI_IC_AWVALID = \<const0> ;
  assign M_AXI_IC_BREADY = \<const0> ;
  assign M_AXI_IC_CDDATA[31] = \<const0> ;
  assign M_AXI_IC_CDDATA[30] = \<const0> ;
  assign M_AXI_IC_CDDATA[29] = \<const0> ;
  assign M_AXI_IC_CDDATA[28] = \<const0> ;
  assign M_AXI_IC_CDDATA[27] = \<const0> ;
  assign M_AXI_IC_CDDATA[26] = \<const0> ;
  assign M_AXI_IC_CDDATA[25] = \<const0> ;
  assign M_AXI_IC_CDDATA[24] = \<const0> ;
  assign M_AXI_IC_CDDATA[23] = \<const0> ;
  assign M_AXI_IC_CDDATA[22] = \<const0> ;
  assign M_AXI_IC_CDDATA[21] = \<const0> ;
  assign M_AXI_IC_CDDATA[20] = \<const0> ;
  assign M_AXI_IC_CDDATA[19] = \<const0> ;
  assign M_AXI_IC_CDDATA[18] = \<const0> ;
  assign M_AXI_IC_CDDATA[17] = \<const0> ;
  assign M_AXI_IC_CDDATA[16] = \<const0> ;
  assign M_AXI_IC_CDDATA[15] = \<const0> ;
  assign M_AXI_IC_CDDATA[14] = \<const0> ;
  assign M_AXI_IC_CDDATA[13] = \<const0> ;
  assign M_AXI_IC_CDDATA[12] = \<const0> ;
  assign M_AXI_IC_CDDATA[11] = \<const0> ;
  assign M_AXI_IC_CDDATA[10] = \<const0> ;
  assign M_AXI_IC_CDDATA[9] = \<const0> ;
  assign M_AXI_IC_CDDATA[8] = \<const0> ;
  assign M_AXI_IC_CDDATA[7] = \<const0> ;
  assign M_AXI_IC_CDDATA[6] = \<const0> ;
  assign M_AXI_IC_CDDATA[5] = \<const0> ;
  assign M_AXI_IC_CDDATA[4] = \<const0> ;
  assign M_AXI_IC_CDDATA[3] = \<const0> ;
  assign M_AXI_IC_CDDATA[2] = \<const0> ;
  assign M_AXI_IC_CDDATA[1] = \<const0> ;
  assign M_AXI_IC_CDDATA[0] = \<const0> ;
  assign M_AXI_IC_CDLAST = \<const0> ;
  assign M_AXI_IC_CDVALID = \<const0> ;
  assign M_AXI_IC_CRRESP[4] = \<const0> ;
  assign M_AXI_IC_CRRESP[3] = \<const0> ;
  assign M_AXI_IC_CRRESP[2] = \<const0> ;
  assign M_AXI_IC_CRRESP[1] = \<const0> ;
  assign M_AXI_IC_CRRESP[0] = \<const0> ;
  assign M_AXI_IC_CRVALID = \<const0> ;
  assign M_AXI_IC_RACK = \<const0> ;
  assign M_AXI_IC_RREADY = \<const0> ;
  assign M_AXI_IC_WACK = \<const0> ;
  assign M_AXI_IC_WDATA[31] = \<const0> ;
  assign M_AXI_IC_WDATA[30] = \<const0> ;
  assign M_AXI_IC_WDATA[29] = \<const0> ;
  assign M_AXI_IC_WDATA[28] = \<const0> ;
  assign M_AXI_IC_WDATA[27] = \<const0> ;
  assign M_AXI_IC_WDATA[26] = \<const0> ;
  assign M_AXI_IC_WDATA[25] = \<const0> ;
  assign M_AXI_IC_WDATA[24] = \<const0> ;
  assign M_AXI_IC_WDATA[23] = \<const0> ;
  assign M_AXI_IC_WDATA[22] = \<const0> ;
  assign M_AXI_IC_WDATA[21] = \<const0> ;
  assign M_AXI_IC_WDATA[20] = \<const0> ;
  assign M_AXI_IC_WDATA[19] = \<const0> ;
  assign M_AXI_IC_WDATA[18] = \<const0> ;
  assign M_AXI_IC_WDATA[17] = \<const0> ;
  assign M_AXI_IC_WDATA[16] = \<const0> ;
  assign M_AXI_IC_WDATA[15] = \<const0> ;
  assign M_AXI_IC_WDATA[14] = \<const0> ;
  assign M_AXI_IC_WDATA[13] = \<const0> ;
  assign M_AXI_IC_WDATA[12] = \<const0> ;
  assign M_AXI_IC_WDATA[11] = \<const0> ;
  assign M_AXI_IC_WDATA[10] = \<const0> ;
  assign M_AXI_IC_WDATA[9] = \<const0> ;
  assign M_AXI_IC_WDATA[8] = \<const0> ;
  assign M_AXI_IC_WDATA[7] = \<const0> ;
  assign M_AXI_IC_WDATA[6] = \<const0> ;
  assign M_AXI_IC_WDATA[5] = \<const0> ;
  assign M_AXI_IC_WDATA[4] = \<const0> ;
  assign M_AXI_IC_WDATA[3] = \<const0> ;
  assign M_AXI_IC_WDATA[2] = \<const0> ;
  assign M_AXI_IC_WDATA[1] = \<const0> ;
  assign M_AXI_IC_WDATA[0] = \<const0> ;
  assign M_AXI_IC_WLAST = \<const0> ;
  assign M_AXI_IC_WSTRB[3] = \<const0> ;
  assign M_AXI_IC_WSTRB[2] = \<const0> ;
  assign M_AXI_IC_WSTRB[1] = \<const0> ;
  assign M_AXI_IC_WSTRB[0] = \<const0> ;
  assign M_AXI_IC_WUSER[0] = \<const0> ;
  assign M_AXI_IC_WVALID = \<const0> ;
  assign M_AXI_IP_ARADDR[31] = \<const0> ;
  assign M_AXI_IP_ARADDR[30] = \<const0> ;
  assign M_AXI_IP_ARADDR[29] = \<const0> ;
  assign M_AXI_IP_ARADDR[28] = \<const0> ;
  assign M_AXI_IP_ARADDR[27] = \<const0> ;
  assign M_AXI_IP_ARADDR[26] = \<const0> ;
  assign M_AXI_IP_ARADDR[25] = \<const0> ;
  assign M_AXI_IP_ARADDR[24] = \<const0> ;
  assign M_AXI_IP_ARADDR[23] = \<const0> ;
  assign M_AXI_IP_ARADDR[22] = \<const0> ;
  assign M_AXI_IP_ARADDR[21] = \<const0> ;
  assign M_AXI_IP_ARADDR[20] = \<const0> ;
  assign M_AXI_IP_ARADDR[19] = \<const0> ;
  assign M_AXI_IP_ARADDR[18] = \<const0> ;
  assign M_AXI_IP_ARADDR[17] = \<const0> ;
  assign M_AXI_IP_ARADDR[16] = \<const0> ;
  assign M_AXI_IP_ARADDR[15] = \<const0> ;
  assign M_AXI_IP_ARADDR[14] = \<const0> ;
  assign M_AXI_IP_ARADDR[13] = \<const0> ;
  assign M_AXI_IP_ARADDR[12] = \<const0> ;
  assign M_AXI_IP_ARADDR[11] = \<const0> ;
  assign M_AXI_IP_ARADDR[10] = \<const0> ;
  assign M_AXI_IP_ARADDR[9] = \<const0> ;
  assign M_AXI_IP_ARADDR[8] = \<const0> ;
  assign M_AXI_IP_ARADDR[7] = \<const0> ;
  assign M_AXI_IP_ARADDR[6] = \<const0> ;
  assign M_AXI_IP_ARADDR[5] = \<const0> ;
  assign M_AXI_IP_ARADDR[4] = \<const0> ;
  assign M_AXI_IP_ARADDR[3] = \<const0> ;
  assign M_AXI_IP_ARADDR[2] = \<const0> ;
  assign M_AXI_IP_ARADDR[1] = \<const0> ;
  assign M_AXI_IP_ARADDR[0] = \<const0> ;
  assign M_AXI_IP_ARBURST[1] = \<const0> ;
  assign M_AXI_IP_ARBURST[0] = \<const0> ;
  assign M_AXI_IP_ARCACHE[3] = \<const0> ;
  assign M_AXI_IP_ARCACHE[2] = \<const0> ;
  assign M_AXI_IP_ARCACHE[1] = \<const0> ;
  assign M_AXI_IP_ARCACHE[0] = \<const0> ;
  assign M_AXI_IP_ARID[0] = \<const0> ;
  assign M_AXI_IP_ARLEN[7] = \<const0> ;
  assign M_AXI_IP_ARLEN[6] = \<const0> ;
  assign M_AXI_IP_ARLEN[5] = \<const0> ;
  assign M_AXI_IP_ARLEN[4] = \<const0> ;
  assign M_AXI_IP_ARLEN[3] = \<const0> ;
  assign M_AXI_IP_ARLEN[2] = \<const0> ;
  assign M_AXI_IP_ARLEN[1] = \<const0> ;
  assign M_AXI_IP_ARLEN[0] = \<const0> ;
  assign M_AXI_IP_ARLOCK = \<const0> ;
  assign M_AXI_IP_ARPROT[2] = \<const0> ;
  assign M_AXI_IP_ARPROT[1] = \<const0> ;
  assign M_AXI_IP_ARPROT[0] = \<const0> ;
  assign M_AXI_IP_ARQOS[3] = \<const0> ;
  assign M_AXI_IP_ARQOS[2] = \<const0> ;
  assign M_AXI_IP_ARQOS[1] = \<const0> ;
  assign M_AXI_IP_ARQOS[0] = \<const0> ;
  assign M_AXI_IP_ARSIZE[2] = \<const0> ;
  assign M_AXI_IP_ARSIZE[1] = \<const0> ;
  assign M_AXI_IP_ARSIZE[0] = \<const0> ;
  assign M_AXI_IP_ARVALID = \<const0> ;
  assign M_AXI_IP_AWADDR[31] = \<const0> ;
  assign M_AXI_IP_AWADDR[30] = \<const0> ;
  assign M_AXI_IP_AWADDR[29] = \<const0> ;
  assign M_AXI_IP_AWADDR[28] = \<const0> ;
  assign M_AXI_IP_AWADDR[27] = \<const0> ;
  assign M_AXI_IP_AWADDR[26] = \<const0> ;
  assign M_AXI_IP_AWADDR[25] = \<const0> ;
  assign M_AXI_IP_AWADDR[24] = \<const0> ;
  assign M_AXI_IP_AWADDR[23] = \<const0> ;
  assign M_AXI_IP_AWADDR[22] = \<const0> ;
  assign M_AXI_IP_AWADDR[21] = \<const0> ;
  assign M_AXI_IP_AWADDR[20] = \<const0> ;
  assign M_AXI_IP_AWADDR[19] = \<const0> ;
  assign M_AXI_IP_AWADDR[18] = \<const0> ;
  assign M_AXI_IP_AWADDR[17] = \<const0> ;
  assign M_AXI_IP_AWADDR[16] = \<const0> ;
  assign M_AXI_IP_AWADDR[15] = \<const0> ;
  assign M_AXI_IP_AWADDR[14] = \<const0> ;
  assign M_AXI_IP_AWADDR[13] = \<const0> ;
  assign M_AXI_IP_AWADDR[12] = \<const0> ;
  assign M_AXI_IP_AWADDR[11] = \<const0> ;
  assign M_AXI_IP_AWADDR[10] = \<const0> ;
  assign M_AXI_IP_AWADDR[9] = \<const0> ;
  assign M_AXI_IP_AWADDR[8] = \<const0> ;
  assign M_AXI_IP_AWADDR[7] = \<const0> ;
  assign M_AXI_IP_AWADDR[6] = \<const0> ;
  assign M_AXI_IP_AWADDR[5] = \<const0> ;
  assign M_AXI_IP_AWADDR[4] = \<const0> ;
  assign M_AXI_IP_AWADDR[3] = \<const0> ;
  assign M_AXI_IP_AWADDR[2] = \<const0> ;
  assign M_AXI_IP_AWADDR[1] = \<const0> ;
  assign M_AXI_IP_AWADDR[0] = \<const0> ;
  assign M_AXI_IP_AWBURST[1] = \<const0> ;
  assign M_AXI_IP_AWBURST[0] = \<const0> ;
  assign M_AXI_IP_AWCACHE[3] = \<const0> ;
  assign M_AXI_IP_AWCACHE[2] = \<const0> ;
  assign M_AXI_IP_AWCACHE[1] = \<const0> ;
  assign M_AXI_IP_AWCACHE[0] = \<const0> ;
  assign M_AXI_IP_AWID[0] = \<const0> ;
  assign M_AXI_IP_AWLEN[7] = \<const0> ;
  assign M_AXI_IP_AWLEN[6] = \<const0> ;
  assign M_AXI_IP_AWLEN[5] = \<const0> ;
  assign M_AXI_IP_AWLEN[4] = \<const0> ;
  assign M_AXI_IP_AWLEN[3] = \<const0> ;
  assign M_AXI_IP_AWLEN[2] = \<const0> ;
  assign M_AXI_IP_AWLEN[1] = \<const0> ;
  assign M_AXI_IP_AWLEN[0] = \<const0> ;
  assign M_AXI_IP_AWLOCK = \<const0> ;
  assign M_AXI_IP_AWPROT[2] = \<const0> ;
  assign M_AXI_IP_AWPROT[1] = \<const0> ;
  assign M_AXI_IP_AWPROT[0] = \<const0> ;
  assign M_AXI_IP_AWQOS[3] = \<const0> ;
  assign M_AXI_IP_AWQOS[2] = \<const0> ;
  assign M_AXI_IP_AWQOS[1] = \<const0> ;
  assign M_AXI_IP_AWQOS[0] = \<const0> ;
  assign M_AXI_IP_AWSIZE[2] = \<const0> ;
  assign M_AXI_IP_AWSIZE[1] = \<const0> ;
  assign M_AXI_IP_AWSIZE[0] = \<const0> ;
  assign M_AXI_IP_AWVALID = \<const0> ;
  assign M_AXI_IP_BREADY = \<const0> ;
  assign M_AXI_IP_RREADY = \<const0> ;
  assign M_AXI_IP_WDATA[31] = \<const0> ;
  assign M_AXI_IP_WDATA[30] = \<const0> ;
  assign M_AXI_IP_WDATA[29] = \<const0> ;
  assign M_AXI_IP_WDATA[28] = \<const0> ;
  assign M_AXI_IP_WDATA[27] = \<const0> ;
  assign M_AXI_IP_WDATA[26] = \<const0> ;
  assign M_AXI_IP_WDATA[25] = \<const0> ;
  assign M_AXI_IP_WDATA[24] = \<const0> ;
  assign M_AXI_IP_WDATA[23] = \<const0> ;
  assign M_AXI_IP_WDATA[22] = \<const0> ;
  assign M_AXI_IP_WDATA[21] = \<const0> ;
  assign M_AXI_IP_WDATA[20] = \<const0> ;
  assign M_AXI_IP_WDATA[19] = \<const0> ;
  assign M_AXI_IP_WDATA[18] = \<const0> ;
  assign M_AXI_IP_WDATA[17] = \<const0> ;
  assign M_AXI_IP_WDATA[16] = \<const0> ;
  assign M_AXI_IP_WDATA[15] = \<const0> ;
  assign M_AXI_IP_WDATA[14] = \<const0> ;
  assign M_AXI_IP_WDATA[13] = \<const0> ;
  assign M_AXI_IP_WDATA[12] = \<const0> ;
  assign M_AXI_IP_WDATA[11] = \<const0> ;
  assign M_AXI_IP_WDATA[10] = \<const0> ;
  assign M_AXI_IP_WDATA[9] = \<const0> ;
  assign M_AXI_IP_WDATA[8] = \<const0> ;
  assign M_AXI_IP_WDATA[7] = \<const0> ;
  assign M_AXI_IP_WDATA[6] = \<const0> ;
  assign M_AXI_IP_WDATA[5] = \<const0> ;
  assign M_AXI_IP_WDATA[4] = \<const0> ;
  assign M_AXI_IP_WDATA[3] = \<const0> ;
  assign M_AXI_IP_WDATA[2] = \<const0> ;
  assign M_AXI_IP_WDATA[1] = \<const0> ;
  assign M_AXI_IP_WDATA[0] = \<const0> ;
  assign M_AXI_IP_WLAST = \<const0> ;
  assign M_AXI_IP_WSTRB[3] = \<const0> ;
  assign M_AXI_IP_WSTRB[2] = \<const0> ;
  assign M_AXI_IP_WSTRB[1] = \<const0> ;
  assign M_AXI_IP_WSTRB[0] = \<const0> ;
  assign M_AXI_IP_WVALID = \<const0> ;
  assign S0_AXIS_TREADY = \<const0> ;
  assign S10_AXIS_TREADY = \<const0> ;
  assign S11_AXIS_TREADY = \<const0> ;
  assign S12_AXIS_TREADY = \<const0> ;
  assign S13_AXIS_TREADY = \<const0> ;
  assign S14_AXIS_TREADY = \<const0> ;
  assign S15_AXIS_TREADY = \<const0> ;
  assign S1_AXIS_TREADY = \<const0> ;
  assign S2_AXIS_TREADY = \<const0> ;
  assign S3_AXIS_TREADY = \<const0> ;
  assign S4_AXIS_TREADY = \<const0> ;
  assign S5_AXIS_TREADY = \<const0> ;
  assign S6_AXIS_TREADY = \<const0> ;
  assign S7_AXIS_TREADY = \<const0> ;
  assign S8_AXIS_TREADY = \<const0> ;
  assign S9_AXIS_TREADY = \<const0> ;
  assign Trace_DCache_Hit = \<const0> ;
  assign Trace_DCache_Rdy = \<const0> ;
  assign Trace_DCache_Read = \<const0> ;
  assign Trace_DCache_Req = \<const0> ;
  assign Trace_ICache_Hit = \<const0> ;
  assign Trace_ICache_Rdy = \<const0> ;
  assign Trace_ICache_Req = \<const0> ;
  assign Trace_MB_Halted = \^LOCKSTEP_Master_Out [10];
  assign Trace_MSR_Reg[0] = \<const0> ;
  assign Trace_MSR_Reg[1] = \<const0> ;
  assign Trace_MSR_Reg[2] = \<const0> ;
  assign Trace_MSR_Reg[3] = \<const0> ;
  assign Trace_MSR_Reg[4] = \<const0> ;
  assign Trace_MSR_Reg[5] = \<const0> ;
  assign Trace_MSR_Reg[6] = \<const0> ;
  assign Trace_MSR_Reg[7] = \<const0> ;
  assign Trace_MSR_Reg[8] = \<const0> ;
  assign Trace_MSR_Reg[9] = \<const0> ;
  assign Trace_MSR_Reg[10] = \<const0> ;
  assign Trace_MSR_Reg[11:13] = \^Trace_MSR_Reg [11:13];
  assign Trace_MSR_Reg[14] = \<const0> ;
  assign Trace_PID_Reg[0] = \<const0> ;
  assign Trace_PID_Reg[1] = \<const0> ;
  assign Trace_PID_Reg[2] = \<const0> ;
  assign Trace_PID_Reg[3] = \<const0> ;
  assign Trace_PID_Reg[4] = \<const0> ;
  assign Trace_PID_Reg[5] = \<const0> ;
  assign Trace_PID_Reg[6] = \<const0> ;
  assign Trace_PID_Reg[7] = \<const0> ;
  LUT5 #(
    .INIT(32'h00000001)) 
    Dbg_TDO_INST_0_i_12
       (.I0(Dbg_Reg_En[1]),
        .I1(Dbg_Reg_En[0]),
        .I2(Dbg_Reg_En[4]),
        .I3(Dbg_Reg_En[3]),
        .I4(Dbg_Reg_En[2]),
        .O(Dbg_TDO_INST_0_i_12_n_0));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'h80)) 
    Dbg_TDO_INST_0_i_4
       (.I0(Dbg_TDO_INST_0_i_12_n_0),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En[6]),
        .O(Dbg_TDO_INST_0_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'h80)) 
    Dbg_TDO_INST_0_i_6
       (.I0(Dbg_TDO_INST_0_i_12_n_0),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[7]),
        .O(Dbg_TDO_INST_0_i_6_n_0));
  GND GND
       (.G(\<const0> ));
  FDRE \LOCKSTEP_Out_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^LOCKSTEP_Master_Out [10]),
        .Q(LOCKSTEP_Out[0]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1000] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[25]),
        .Q(LOCKSTEP_Out[1000]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1001] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[24]),
        .Q(LOCKSTEP_Out[1001]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1002] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[23]),
        .Q(LOCKSTEP_Out[1002]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1003] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[22]),
        .Q(LOCKSTEP_Out[1003]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1004] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[21]),
        .Q(LOCKSTEP_Out[1004]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1005] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[20]),
        .Q(LOCKSTEP_Out[1005]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1006] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[19]),
        .Q(LOCKSTEP_Out[1006]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1007] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[18]),
        .Q(LOCKSTEP_Out[1007]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1008] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[17]),
        .Q(LOCKSTEP_Out[1008]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1009] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[16]),
        .Q(LOCKSTEP_Out[1009]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[100] 
       (.C(Clk),
        .CE(1'b1),
        .D(D_AS),
        .Q(LOCKSTEP_Out[100]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1010] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[15]),
        .Q(LOCKSTEP_Out[1010]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1011] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[14]),
        .Q(LOCKSTEP_Out[1011]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1012] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[13]),
        .Q(LOCKSTEP_Out[1012]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1013] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[12]),
        .Q(LOCKSTEP_Out[1013]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1014] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[11]),
        .Q(LOCKSTEP_Out[1014]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1015] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[10]),
        .Q(LOCKSTEP_Out[1015]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1016] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[9]),
        .Q(LOCKSTEP_Out[1016]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1017] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[8]),
        .Q(LOCKSTEP_Out[1017]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1018] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[7]),
        .Q(LOCKSTEP_Out[1018]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1019] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[6]),
        .Q(LOCKSTEP_Out[1019]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[101] 
       (.C(Clk),
        .CE(1'b1),
        .D(Read_Strobe),
        .Q(LOCKSTEP_Out[101]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1020] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[5]),
        .Q(LOCKSTEP_Out[1020]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1021] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[4]),
        .Q(LOCKSTEP_Out[1021]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1022] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[3]),
        .Q(LOCKSTEP_Out[1022]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1023] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[2]),
        .Q(LOCKSTEP_Out[1023]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1024] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[1]),
        .Q(LOCKSTEP_Out[1024]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1025] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[0]),
        .Q(LOCKSTEP_Out[1025]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1026] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1026]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1027] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1027]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1028] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1028]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1029] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1029]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[102] 
       (.C(Clk),
        .CE(1'b1),
        .D(Write_Strobe),
        .Q(LOCKSTEP_Out[102]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1030] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1030]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1031] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1031]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1032] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1032]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1033] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1033]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1034] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1034]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1035] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[1035]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1036] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1036]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1037] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1037]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1038] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[1038]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1039] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1039]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[103] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[0]),
        .Q(LOCKSTEP_Out[103]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1040] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1040]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1041] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1041]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1042] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[1042]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1043] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[1043]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1044] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1044]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1045] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1045]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1046] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1046]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1047] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[1047]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1048] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1048]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1049] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1049]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[104] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[1]),
        .Q(LOCKSTEP_Out[104]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1050] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1050]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1051] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARVALID),
        .Q(LOCKSTEP_Out[1051]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1052] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[1052]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1053] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1053]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1054] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1054]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1055] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1055]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1056] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1056]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1057] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1057]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1058] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1058]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1059] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1059]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[105] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[2]),
        .Q(LOCKSTEP_Out[105]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1060] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1060]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1061] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1061]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1062] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1062]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1063] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1063]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1064] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1064]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1065] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1065]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1066] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1066]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1067] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1067]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1068] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1068]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1069] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1069]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[106] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[3]),
        .Q(LOCKSTEP_Out[106]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1070] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1070]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1071] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1071]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1072] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1072]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1073] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1073]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1074] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1074]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1075] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1075]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1076] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1076]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1077] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1077]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1078] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1078]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1079] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1079]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[107] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[107]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1080] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1080]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1081] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1081]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1082] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1082]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1083] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1083]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1084] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1084]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1085] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1085]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1086] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1086]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1087] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1087]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1088] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1088]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1089] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1089]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[108] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[108]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1090] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1090]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1091] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1091]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1092] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1092]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1093] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1093]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1094] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1094]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1095] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1095]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1096] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1096]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1097] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1097]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1098] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1098]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1099] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1099]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[109] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[109]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[6]),
        .Q(LOCKSTEP_Out[10]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1100] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1100]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1101] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1101]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1102] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1102]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1103] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1103]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1104] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1104]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1105] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1105]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1106] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1106]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1107] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1107]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1108] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1108]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1109] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1109]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[110] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[110]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1110] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1110]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1111] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1111]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1112] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1112]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1113] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1113]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1114] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1114]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1115] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1115]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1116] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1116]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1117] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1117]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1118] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1118]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1119] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1119]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[111] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[111]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1120] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1120]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1121] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1121]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1122] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1122]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1123] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1123]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1124] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1124]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1125] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1125]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1126] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1126]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1127] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1127]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1128] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1128]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1129] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1129]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[112] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[112]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1130] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1130]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1131] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1131]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1132] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1132]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1133] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1133]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1134] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1134]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1135] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1135]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1136] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1136]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1137] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1137]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1138] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1138]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1139] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1139]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[113] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[113]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1140] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1140]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1141] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1141]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1142] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1142]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1143] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1143]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1144] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1144]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1145] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1145]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1146] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1146]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1147] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1147]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1148] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1148]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1149] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1149]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[114] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[114]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1150] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1150]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1151] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1151]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1152] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1152]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1153] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1153]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1154] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1154]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1155] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1155]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1156] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1156]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1157] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1157]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1158] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1158]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1159] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1159]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[115] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[115]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1160] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1160]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1161] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1161]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1162] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1162]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1163] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1163]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1164] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1164]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1165] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1165]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1166] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1166]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1167] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1167]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1168] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1168]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1169] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1169]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[116] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[116]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1170] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1170]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1171] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1171]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1172] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1172]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1173] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1173]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1174] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1174]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1175] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1175]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1176] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1176]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1177] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1177]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1178] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1178]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1179] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1179]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[117] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[117]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1180] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1180]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1181] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1181]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1182] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1182]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1183] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1183]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1184] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1184]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1185] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1185]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1186] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1186]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1187] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1187]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1188] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1188]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1189] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1189]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[118] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[118]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1190] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1190]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1191] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1191]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1192] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1192]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1193] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1193]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1194] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1194]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1195] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1195]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1196] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1196]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1197] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1197]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1198] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1198]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1199] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1199]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[119] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[119]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[7]),
        .Q(LOCKSTEP_Out[11]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1200] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1200]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1201] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1201]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1202] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1202]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1203] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1203]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1204] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1204]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1205] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1205]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1206] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1206]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1207] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1207]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1208] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1208]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1209] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1209]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[120] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[120]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1210] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1210]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1211] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1211]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1212] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1212]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1213] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1213]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1214] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1214]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1215] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1215]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1216] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1216]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1217] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1217]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1218] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1218]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1219] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1219]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[121] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[121]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1220] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1220]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1221] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1221]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1222] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1222]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1223] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1223]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1224] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1224]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1225] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1225]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1226] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1226]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1227] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1227]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1228] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1228]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1229] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1229]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[122] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[122]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1230] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1230]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1231] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1231]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1232] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1232]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1233] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1233]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1234] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1234]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1235] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1235]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1236] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1236]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1237] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1237]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1238] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1238]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1239] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1239]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[123] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[123]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1240] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1240]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1241] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1241]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1242] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1242]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1243] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1243]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1244] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1244]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1245] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1245]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1246] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1246]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1247] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1247]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1248] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1248]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1249] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1249]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[124] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[124]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1250] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1250]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1251] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1251]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1252] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1252]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1253] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1253]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1254] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1254]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1255] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1255]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1256] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1256]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1257] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1257]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1258] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1258]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1259] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1259]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[125] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[125]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1260] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1260]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1261] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1261]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1262] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1262]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1263] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1263]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1264] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1264]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1265] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1265]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1266] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1266]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1267] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1267]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1268] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1268]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1269] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1269]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[126] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[126]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1270] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1270]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1271] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1271]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1272] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1272]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1273] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1273]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1274] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1274]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1275] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1275]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1276] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1276]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1277] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1277]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1278] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1278]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1279] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1279]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[127] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[127]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1280] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1280]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1281] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1281]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1282] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1282]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1283] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1283]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1284] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1284]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1285] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1285]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1286] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1286]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1287] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1287]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1288] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1288]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1289] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1289]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[128] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[128]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1290] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1290]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1291] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1291]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1292] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1292]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1293] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1293]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1294] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1294]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1295] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1295]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1296] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1296]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1297] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1297]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1298] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1298]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1299] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1299]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[129] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[129]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[8]),
        .Q(LOCKSTEP_Out[12]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1300] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1300]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1301] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1301]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1302] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1302]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1303] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1303]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1304] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1304]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1305] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1305]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1306] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1306]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1307] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1307]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1308] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1308]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1309] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1309]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[130] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[130]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1310] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1310]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1311] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1311]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1312] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1312]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1313] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1313]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1314] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1314]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1315] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1315]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1316] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1316]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1317] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1317]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1318] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1318]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1319] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1319]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[131] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[131]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1320] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1320]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1321] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1321]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1322] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1322]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1323] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1323]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1324] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1324]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1325] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1325]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1326] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1326]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1327] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1327]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1328] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1328]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1329] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1329]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[132] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[132]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1330] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1330]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1331] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1331]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1332] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1332]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1333] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1333]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1334] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1334]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1335] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1335]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1336] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1336]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1337] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1337]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1338] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1338]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1339] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1339]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[133] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[133]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1340] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1340]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1341] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1341]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1342] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1342]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1343] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1343]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1344] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1344]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1345] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1345]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1346] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1346]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1347] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1347]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1348] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1348]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1349] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1349]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[134] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[134]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1350] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1350]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1351] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1351]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1352] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1352]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1353] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1353]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1354] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1354]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1355] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1355]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1356] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1356]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1357] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1357]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1358] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1358]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1359] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1359]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[135] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[135]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1360] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1360]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1361] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1361]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1362] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1362]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1363] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1363]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1364] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1364]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1365] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1365]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1366] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1366]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1367] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1367]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1368] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1368]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1369] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1369]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[136] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[136]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1370] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1370]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1371] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1371]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1372] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1372]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1373] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1373]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1374] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1374]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1375] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1375]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1376] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1376]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1377] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1377]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1378] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1378]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1379] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1379]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[137] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[137]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1380] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1380]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1381] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1381]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1382] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1382]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1383] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1383]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1384] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1384]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1385] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1385]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1386] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1386]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1387] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1387]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1388] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1388]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1389] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1389]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[138] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[138]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1390] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1390]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1391] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1391]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1392] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1392]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1393] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1393]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1394] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1394]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1395] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1395]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1396] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1396]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1397] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1397]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1398] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1398]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1399] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1399]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[139] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[139]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[9]),
        .Q(LOCKSTEP_Out[13]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1400] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1400]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1401] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1401]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1402] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1402]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1403] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1403]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1404] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1404]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1405] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1405]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1406] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1406]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1407] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1407]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1408] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1408]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1409] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1409]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[140] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[140]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1410] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1410]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1411] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1411]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1412] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1412]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1413] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1413]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1414] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1414]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1415] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1415]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1416] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1416]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1417] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1417]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1418] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1418]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1419] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1419]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[141] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[141]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1420] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1420]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1421] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1421]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1422] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1422]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1423] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1423]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1424] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1424]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1425] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1425]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1426] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1426]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1427] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1427]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1428] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1428]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1429] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1429]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[142] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[142]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1430] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1430]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1431] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1431]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1432] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1432]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1433] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1433]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1434] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1434]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1435] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1435]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1436] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1436]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1437] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1437]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1438] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1438]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1439] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1439]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[143] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[143]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1440] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1440]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1441] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1441]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1442] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1442]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1443] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1443]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1444] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1444]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1445] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1445]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1446] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1446]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1447] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1447]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1448] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1448]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1449] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1449]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[144] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[144]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1450] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1450]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1451] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1451]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1452] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1452]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1453] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1453]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1454] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1454]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1455] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1455]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1456] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1456]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1457] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1457]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1458] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1458]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1459] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1459]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[145] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[145]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1460] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1460]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1461] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1461]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1462] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1462]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1463] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1463]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1464] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1464]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1465] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1465]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1466] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1466]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1467] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1467]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1468] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1468]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1469] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1469]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[146] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[146]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1470] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1470]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1471] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1471]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1472] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1472]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1473] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1473]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1474] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1474]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1475] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1475]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1476] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1476]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1477] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1477]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1478] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1478]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1479] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1479]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[147] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[147]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1480] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1480]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1481] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1481]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1482] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1482]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1483] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1483]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1484] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1484]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1485] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1485]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1486] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1486]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1487] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1487]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1488] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1488]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1489] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1489]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[148] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[148]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1490] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1490]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1491] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1491]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1492] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1492]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1493] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1493]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1494] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1494]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1495] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1495]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1496] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1496]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1497] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1497]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1498] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1498]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1499] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1499]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[149] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[149]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[10]),
        .Q(LOCKSTEP_Out[14]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1500] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1500]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1501] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1501]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1502] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1502]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1503] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1503]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1504] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1504]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1505] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1505]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1506] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1506]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1507] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1507]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1508] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1508]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1509] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1509]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[150] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[150]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1510] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1510]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1511] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1511]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1512] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1512]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1513] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1513]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1514] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1514]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1515] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1515]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1516] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1516]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1517] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1517]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1518] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1518]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1519] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1519]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[151] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[151]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1520] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1520]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1521] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1521]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1522] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1522]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1523] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1523]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1524] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1524]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1525] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1525]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1526] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1526]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1527] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1527]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1528] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1528]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1529] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1529]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[152] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[152]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1530] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1530]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1531] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1531]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1532] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1532]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1533] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1533]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1534] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1534]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1535] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1535]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1536] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1536]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1537] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1537]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1538] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1538]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1539] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1539]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[153] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[153]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1540] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1540]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1541] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1541]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1542] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1542]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1543] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1543]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1544] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1544]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1545] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1545]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1546] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1546]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1547] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1547]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1548] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1548]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1549] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1549]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[154] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[154]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1550] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1550]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1551] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1551]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1552] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1552]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1553] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1553]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1554] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1554]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1555] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1555]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1556] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1556]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1557] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1557]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1558] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1558]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1559] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1559]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[155] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[155]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1560] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1560]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1561] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1561]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1562] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1562]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1563] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1563]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1564] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1564]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1565] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1565]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1566] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1566]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1567] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1567]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1568] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1568]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1569] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1569]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[156] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[156]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1570] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1570]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1571] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1571]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1572] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1572]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1573] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1573]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1574] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1574]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1575] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1575]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1576] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1576]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1577] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1577]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1578] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1578]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1579] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1579]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[157] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[157]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1580] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1580]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1581] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1581]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1582] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1582]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1583] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1583]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1584] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1584]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1585] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1585]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1586] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1586]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1587] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1587]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1588] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1588]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1589] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1589]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[158] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[158]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1590] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1590]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1591] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1591]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1592] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1592]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1593] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1593]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1594] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1594]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1595] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1595]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1596] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1596]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1597] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1597]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1598] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1598]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1599] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1599]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[159] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[159]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[11]),
        .Q(LOCKSTEP_Out[15]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1600] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1600]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1601] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1601]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1602] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1602]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1603] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1603]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1604] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1604]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1605] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1605]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1606] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1606]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1607] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1607]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1608] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1608]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1609] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1609]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[160] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[160]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1610] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1610]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1611] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1611]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1612] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1612]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1613] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1613]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1614] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1614]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1615] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1615]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1616] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1616]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1617] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1617]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1618] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1618]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1619] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1619]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[161] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[161]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1620] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1620]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1621] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1621]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1622] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1622]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1623] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1623]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1624] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1624]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1625] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1625]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1626] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1626]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1627] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1627]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1628] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1628]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1629] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1629]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[162] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[162]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1630] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1630]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1631] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1631]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1632] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1632]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1633] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1633]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1634] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1634]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1635] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1635]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1636] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1636]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1637] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1637]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1638] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1638]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1639] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1639]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[163] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[163]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1640] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1640]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1641] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1641]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1642] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1642]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1643] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1643]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1644] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1644]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1645] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1645]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1646] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1646]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1647] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1647]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1648] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1648]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1649] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1649]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[164] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[164]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1650] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1650]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1651] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1651]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1652] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1652]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1653] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1653]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1654] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1654]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1655] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1655]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1656] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1656]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1657] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1657]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1658] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1658]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1659] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1659]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[165] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[165]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1660] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1660]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1661] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1661]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1662] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1662]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1663] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1663]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1664] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1664]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1665] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1665]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1666] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1666]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1667] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1667]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1668] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1668]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1669] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1669]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[166] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[166]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1670] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1670]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1671] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1671]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1672] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1672]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1673] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1673]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1674] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1674]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1675] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1675]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1676] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1676]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1677] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1677]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1678] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1678]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1679] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1679]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[167] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[167]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1680] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1680]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1681] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1681]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1682] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1682]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1683] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1683]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1684] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1684]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1685] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1685]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1686] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1686]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1687] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1687]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1688] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1688]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1689] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1689]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[168] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[168]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1690] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1690]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1691] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1691]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1692] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1692]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1693] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1693]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1694] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1694]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1695] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1695]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1696] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1696]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1697] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1697]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1698] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1698]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1699] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1699]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[169] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[169]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[12]),
        .Q(LOCKSTEP_Out[16]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1700] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1700]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1701] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1701]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1702] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1702]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1703] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1703]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1704] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1704]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1705] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1705]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1706] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1706]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1707] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1707]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1708] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1708]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1709] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1709]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[170] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[170]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1710] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1710]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1711] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1711]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1712] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1712]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1713] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1713]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1714] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1714]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1715] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1715]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1716] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1716]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1717] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1717]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1718] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1718]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1719] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1719]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[171] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[171]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1720] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1720]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1721] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1721]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1722] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1722]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1723] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1723]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1724] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1724]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1725] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1725]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1726] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1726]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1727] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1727]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1728] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1728]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1729] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1729]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[172] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[172]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1730] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1730]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1731] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1731]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1732] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1732]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1733] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1733]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1734] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1734]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1735] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1735]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1736] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1736]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1737] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1737]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1738] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1738]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1739] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1739]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[173] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[173]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1740] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1740]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1741] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1741]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1742] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1742]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1743] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1743]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1744] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1744]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1745] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1745]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1746] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1746]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1747] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1747]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1748] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1748]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1749] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1749]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[174] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[174]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1750] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1750]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1751] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1751]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1752] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1752]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1753] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1753]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1754] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1754]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1755] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1755]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1756] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1756]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1757] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1757]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1758] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1758]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1759] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1759]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[175] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[175]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1760] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1760]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1761] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1761]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1762] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1762]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1763] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1763]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1764] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1764]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1765] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1765]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1766] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1766]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1767] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1767]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1768] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1768]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1769] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1769]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[176] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[176]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1770] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1770]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1771] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1771]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1772] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1772]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1773] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1773]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1774] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1774]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1775] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1775]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1776] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1776]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1777] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1777]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1778] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1778]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1779] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1779]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[177] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[177]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1780] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1780]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1781] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1781]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1782] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1782]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1783] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1783]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1784] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1784]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1785] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1785]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1786] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1786]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1787] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1787]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1788] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1788]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1789] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1789]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[178] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[178]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1790] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1790]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1791] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1791]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1792] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1792]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1793] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1793]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1794] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1794]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1795] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1795]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1796] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1796]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1797] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1797]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1798] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1798]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1799] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1799]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[179] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[179]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[13]),
        .Q(LOCKSTEP_Out[17]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1800] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1800]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1801] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1801]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1802] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1802]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1803] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1803]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1804] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1804]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1805] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1805]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1806] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1806]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1807] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1807]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1808] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1808]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1809] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1809]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[180] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[180]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1810] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1810]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1811] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1811]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1812] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1812]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1813] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1813]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1814] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1814]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1815] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1815]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1816] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1816]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1817] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1817]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1818] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1818]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1819] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1819]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[181] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[181]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1820] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1820]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1821] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1821]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1822] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1822]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1823] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1823]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1824] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1824]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1825] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1825]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1826] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1826]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1827] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1827]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1828] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1828]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1829] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1829]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[182] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[182]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1830] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1830]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1831] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1831]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1832] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1832]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1833] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1833]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1834] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1834]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1835] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1835]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1836] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1836]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1837] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1837]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1838] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1838]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1839] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1839]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[183] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[183]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1840] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1840]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1841] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1841]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1842] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1842]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1843] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1843]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1844] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1844]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1845] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1845]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1846] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1846]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1847] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1847]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1848] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1848]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1849] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1849]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[184] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[184]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1850] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1850]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1851] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1851]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1852] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1852]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1853] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1853]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1854] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1854]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1855] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1855]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1856] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1856]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1857] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1857]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1858] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1858]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1859] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1859]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[185] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[185]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1860] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1860]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1861] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1861]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1862] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1862]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1863] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1863]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1864] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1864]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1865] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1865]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1866] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1866]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1867] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1867]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1868] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1868]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1869] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1869]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[186] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[186]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1870] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1870]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1871] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1871]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1872] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1872]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1873] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1873]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1874] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1874]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1875] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1875]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1876] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1876]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1877] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1877]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1878] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1878]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1879] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1879]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[187] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[187]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1880] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1880]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1881] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1881]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1882] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1882]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1883] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1883]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1884] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1884]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1885] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1885]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1886] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1886]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1887] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1887]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1888] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1888]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1889] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1889]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[188] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[188]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1890] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1890]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1891] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1891]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1892] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1892]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1893] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1893]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1894] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1894]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1895] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1895]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1896] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1896]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1897] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1897]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1898] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1898]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1899] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1899]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[189] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[189]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[14]),
        .Q(LOCKSTEP_Out[18]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1900] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1900]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1901] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1901]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1902] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1902]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1903] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1903]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1904] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1904]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1905] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1905]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1906] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1906]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1907] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1907]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1908] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1908]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1909] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1909]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[190] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[190]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1910] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1910]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1911] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1911]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1912] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1912]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1913] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1913]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1914] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1914]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1915] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1915]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1916] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1916]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1917] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1917]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1918] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1918]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1919] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1919]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[191] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[191]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1920] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1920]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1921] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1921]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1922] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1922]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1923] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1923]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1924] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1924]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1925] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1925]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1926] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1926]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1927] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1927]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1928] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1928]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1929] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1929]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[192] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[192]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1930] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1930]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1931] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1931]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1932] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1932]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1933] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1933]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1934] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1934]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1935] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1935]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1936] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1936]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1937] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1937]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1938] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1938]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1939] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1939]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[193] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[193]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1940] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1940]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1941] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1941]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1942] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1942]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1943] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1943]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1944] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1944]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1945] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1945]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1946] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1946]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1947] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1947]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1948] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1948]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1949] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1949]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[194] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[194]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1950] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1950]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1951] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1951]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1952] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1952]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1953] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1953]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1954] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1954]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1955] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1955]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1956] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1956]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1957] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1957]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1958] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1958]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1959] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1959]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[195] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[195]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1960] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1960]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1961] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1961]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1962] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1962]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1963] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1963]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1964] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1964]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1965] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1965]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1966] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1966]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1967] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1967]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1968] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1968]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1969] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1969]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[196] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[196]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1970] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1970]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1971] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1971]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1972] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1972]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1973] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1973]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1974] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1974]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1975] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1975]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1976] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1976]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1977] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1977]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1978] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1978]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1979] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1979]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[197] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[197]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1980] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1980]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1981] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1981]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1982] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1982]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1983] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1983]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1984] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1984]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1985] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1985]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1986] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1986]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1987] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1987]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1988] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1988]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1989] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1989]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[198] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[198]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1990] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1990]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1991] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1991]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1992] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1992]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1993] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1993]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1994] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1994]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1995] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1995]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1996] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1996]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1997] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1997]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1998] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1998]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1999] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1999]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[199] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[199]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[15]),
        .Q(LOCKSTEP_Out[19]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[1]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2000] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2000]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2001] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2001]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2002] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2002]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2003] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2003]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2004] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2004]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2005] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2005]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2006] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2006]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2007] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2007]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2008] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2008]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2009] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2009]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[200] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[200]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2010] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2010]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2011] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2011]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2012] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2012]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2013] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2013]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2014] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2014]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2015] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2015]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2016] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2016]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2017] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2017]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2018] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2018]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2019] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2019]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[201] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[201]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2020] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2020]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2021] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2021]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2022] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2022]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2023] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2023]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2024] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2024]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2025] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2025]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2026] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2026]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2027] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2027]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2028] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2028]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2029] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2029]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[202] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[202]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2030] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2030]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2031] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2031]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2032] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2032]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2033] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2033]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2034] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2034]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2035] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2035]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2036] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2036]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2037] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2037]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2038] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2038]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2039] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2039]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[203] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[203]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2040] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2040]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2041] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2041]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2042] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2042]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2043] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2043]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2044] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2044]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2045] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2045]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2046] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2046]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2047] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2047]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2048] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2048]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2049] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2049]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[204] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[204]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2050] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2050]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2051] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2051]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2052] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2052]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2053] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2053]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2054] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2054]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2055] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2055]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2056] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2056]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2057] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2057]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2058] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2058]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2059] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2059]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[205] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[205]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2060] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2060]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2061] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2061]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2062] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2062]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2063] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2063]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2064] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2064]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2065] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2065]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2066] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2066]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2067] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2067]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2068] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2068]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2069] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2069]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[206] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[206]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2070] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2070]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2071] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2071]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2072] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2072]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2073] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2073]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2074] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2074]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2075] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2075]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2076] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2076]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2077] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2077]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2078] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2078]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2079] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2079]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[207] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[207]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2080] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2080]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2081] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2081]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2082] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2082]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2083] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2083]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2084] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2084]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2085] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2085]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2086] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2086]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2087] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2087]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2088] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2088]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2089] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2089]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[208] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[208]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2090] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2090]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2091] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2091]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2092] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2092]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2093] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2093]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2094] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2094]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2095] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2095]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2096] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2096]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2097] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2097]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2098] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2098]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2099] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2099]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[209] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[209]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[16]),
        .Q(LOCKSTEP_Out[20]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2100] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2100]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2101] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2101]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2102] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2102]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2103] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2103]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2104] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2104]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2105] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2105]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2106] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2106]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2107] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2107]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2108] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2108]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2109] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2109]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[210] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[210]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2110] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2110]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2111] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2111]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2112] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2112]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2113] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2113]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2114] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2114]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2115] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2115]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2116] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2116]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2117] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2117]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2118] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2118]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2119] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2119]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[211] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[211]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2120] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2120]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2121] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2121]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2122] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2122]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2123] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2123]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2124] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2124]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2125] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2125]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2126] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2126]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2127] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2127]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2128] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2128]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2129] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2129]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[212] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[212]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2130] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2130]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2131] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2131]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2132] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2132]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2133] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2133]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2134] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2134]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2135] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2135]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2136] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2136]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2137] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2137]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2138] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2138]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2139] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2139]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[213] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[213]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2140] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2140]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2141] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2141]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2142] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2142]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2143] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2143]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2144] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2144]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2145] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2145]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2146] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2146]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2147] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2147]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2148] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2148]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2149] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2149]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[214] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[214]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2150] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2150]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2151] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2151]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2152] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2152]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2153] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2153]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2154] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2154]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2155] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2155]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2156] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2156]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2157] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2157]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2158] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2158]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2159] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2159]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[215] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[215]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2160] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2160]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2161] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2161]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2162] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2162]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2163] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2163]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2164] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2164]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2165] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2165]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2166] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2166]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2167] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2167]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2168] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2168]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2169] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2169]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[216] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[216]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2170] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2170]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2171] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2171]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2172] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2172]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2173] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2173]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2174] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2174]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2175] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2175]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2176] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2176]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2177] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2177]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2178] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2178]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2179] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2179]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[217] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[217]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2180] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2180]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2181] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2181]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2182] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2182]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2183] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2183]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2184] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2184]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2185] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2185]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2186] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2186]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2187] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2187]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2188] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2188]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2189] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2189]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[218] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[218]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2190] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2190]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2191] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2191]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2192] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2192]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2193] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2193]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2194] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2194]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2195] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2195]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2196] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2196]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2197] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2197]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2198] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2198]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2199] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2199]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[219] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[219]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[17]),
        .Q(LOCKSTEP_Out[21]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2200] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2200]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2201] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2201]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2202] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2202]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2203] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2203]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2204] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2204]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2205] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2205]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2206] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2206]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2207] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2207]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2208] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2208]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2209] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2209]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[220] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[220]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2210] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2210]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2211] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2211]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2212] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2212]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2213] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2213]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2214] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2214]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2215] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2215]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2216] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2216]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2217] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2217]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2218] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2218]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2219] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2219]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[221] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[221]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2220] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2220]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2221] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2221]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2222] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2222]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2223] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2223]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2224] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2224]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2225] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2225]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2226] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2226]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2227] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2227]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2228] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2228]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2229] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2229]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[222] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[222]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2230] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2230]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2231] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2231]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2232] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2232]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2233] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2233]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2234] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2234]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2235] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2235]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2236] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2236]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2237] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2237]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2238] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2238]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2239] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2239]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[223] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[223]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2240] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2240]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2241] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2241]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2242] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2242]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2243] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2243]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2244] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2244]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2245] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2245]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2246] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2246]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2247] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2247]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2248] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2248]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2249] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2249]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[224] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[224]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2250] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2250]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2251] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2251]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2252] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2252]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2253] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2253]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2254] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2254]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2255] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2255]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2256] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2256]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2257] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2257]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2258] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2258]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2259] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2259]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[225] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[225]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2260] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2260]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2261] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2261]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2262] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2262]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2263] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2263]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2264] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2264]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2265] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2265]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2266] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2266]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2267] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2267]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2268] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2268]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2269] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2269]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[226] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[226]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2270] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2270]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2271] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2271]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2272] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2272]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2273] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2273]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2274] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2274]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2275] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2275]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2276] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2276]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2277] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2277]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2278] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2278]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2279] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2279]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[227] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[227]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2280] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2280]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2281] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2281]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2282] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2282]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2283] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2283]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2284] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2284]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2285] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2285]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2286] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2286]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2287] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2287]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2288] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2288]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2289] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2289]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[228] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[228]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2290] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2290]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2291] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2291]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2292] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2292]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2293] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2293]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2294] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2294]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2295] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2295]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2296] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2296]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2297] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2297]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2298] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2298]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2299] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2299]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[229] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[229]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[18]),
        .Q(LOCKSTEP_Out[22]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2300] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2300]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2301] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2301]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2302] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2302]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2303] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2303]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2304] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2304]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2305] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2305]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2306] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2306]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2307] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2307]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2308] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2308]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2309] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2309]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[230] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[230]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2310] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2310]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2311] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2311]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2312] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2312]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2313] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2313]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2314] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2314]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2315] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2315]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2316] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2316]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2317] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2317]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2318] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2318]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2319] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2319]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[231] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[231]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2320] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2320]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2321] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2321]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2322] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2322]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2323] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2323]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2324] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2324]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2325] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2325]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2326] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2326]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2327] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2327]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2328] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2328]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2329] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2329]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[232] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[232]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2330] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2330]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2331] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2331]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2332] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2332]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2333] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2333]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2334] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2334]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2335] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2335]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2336] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2336]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2337] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2337]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2338] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2338]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2339] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2339]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[233] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[233]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2340] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2340]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2341] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2341]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2342] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2342]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2343] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2343]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2344] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2344]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2345] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2345]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2346] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2346]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2347] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2347]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2348] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2348]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2349] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2349]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[234] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[234]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2350] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2350]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2351] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2351]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2352] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2352]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2353] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2353]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2354] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2354]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2355] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2355]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2356] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2356]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2357] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2357]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2358] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2358]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2359] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2359]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[235] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[235]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2360] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2360]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2361] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2361]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2362] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2362]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2363] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2363]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2364] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2364]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2365] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2365]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2366] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2366]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2367] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2367]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2368] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2368]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2369] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2369]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[236] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[236]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2370] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2370]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2371] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2371]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2372] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2372]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2373] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2373]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2374] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2374]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2375] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2375]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2376] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2376]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2377] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2377]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2378] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2378]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2379] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2379]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[237] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[237]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2380] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2380]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2381] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2381]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2382] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2382]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2383] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2383]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2384] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2384]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2385] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2385]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2386] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2386]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2387] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2387]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2388] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2388]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2389] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2389]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[238] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[238]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2390] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2390]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2391] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2391]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2392] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2392]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2393] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2393]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2394] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2394]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2395] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2395]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2396] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2396]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2397] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2397]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2398] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2398]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2399] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2399]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[239] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[239]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[19]),
        .Q(LOCKSTEP_Out[23]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2400] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2400]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2401] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2401]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2402] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2402]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2403] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2403]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2404] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2404]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2405] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2405]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2406] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2406]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2407] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2407]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2408] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2408]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2409] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2409]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[240] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[240]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2410] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2410]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2411] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2411]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2412] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2412]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2413] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2413]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2414] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2414]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2415] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2415]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2416] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2416]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2417] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2417]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2418] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2418]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2419] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2419]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[241] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[241]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2420] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2420]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2421] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2421]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2422] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2422]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2423] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2423]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2424] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2424]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2425] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2425]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2426] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2426]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2427] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2427]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2428] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2428]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2429] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2429]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[242] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[242]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2430] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2430]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2431] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2431]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2432] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2432]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2433] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2433]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2434] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2434]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2435] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2435]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2436] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2436]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2437] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2437]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2438] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2438]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2439] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2439]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[243] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[243]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2440] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2440]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2441] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2441]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2442] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2442]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2443] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2443]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2444] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2444]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2445] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2445]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2446] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2446]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2447] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2447]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2448] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2448]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2449] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2449]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[244] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[244]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2450] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2450]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2451] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2451]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2452] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2452]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2453] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2453]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2454] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2454]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2455] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2455]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2456] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2456]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2457] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2457]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2458] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2458]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2459] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2459]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[245] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[245]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2460] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2460]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2461] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2461]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2462] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2462]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2463] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2463]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2464] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2464]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2465] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2465]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2466] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2466]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2467] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2467]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2468] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2468]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2469] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2469]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[246] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[246]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2470] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2470]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2471] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2471]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2472] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2472]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2473] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2473]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2474] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2474]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2475] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2475]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2476] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2476]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2477] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2477]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2478] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2478]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2479] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2479]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[247] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[247]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2480] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2480]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2481] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2481]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2482] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2482]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2483] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2483]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2484] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2484]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2485] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2485]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2486] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2486]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2487] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2487]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2488] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2488]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2489] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2489]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[248] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[248]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2490] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2490]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2491] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2491]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2492] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2492]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2493] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2493]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2494] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2494]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2495] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2495]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2496] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2496]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2497] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2497]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2498] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2498]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2499] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2499]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[249] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[249]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[20]),
        .Q(LOCKSTEP_Out[24]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2500] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2500]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2501] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2501]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2502] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2502]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2503] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2503]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2504] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2504]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2505] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2505]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2506] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2506]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2507] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2507]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2508] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2508]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2509] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2509]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[250] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[250]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2510] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2510]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2511] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2511]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2512] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2512]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2513] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2513]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2514] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2514]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2515] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2515]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2516] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2516]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2517] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2517]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2518] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2518]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2519] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2519]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[251] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[251]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2520] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2520]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2521] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2521]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2522] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2522]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2523] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2523]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2524] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2524]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2525] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2525]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2526] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2526]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2527] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2527]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2528] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2528]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2529] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2529]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[252] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[252]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2530] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2530]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2531] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2531]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2532] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2532]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2533] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2533]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2534] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2534]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2535] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2535]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2536] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2536]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2537] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2537]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2538] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2538]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2539] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2539]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[253] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[253]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2540] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2540]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2541] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2541]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2542] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2542]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2543] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2543]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2544] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2544]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2545] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2545]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2546] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2546]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2547] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2547]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2548] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2548]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2549] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2549]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[254] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[254]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2550] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2550]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2551] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2551]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2552] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2552]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2553] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2553]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2554] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2554]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2555] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2555]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2556] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2556]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2557] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2557]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2558] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2558]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2559] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2559]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[255] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[255]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2560] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2560]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2561] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2561]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2562] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2562]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2563] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2563]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2564] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2564]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2565] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2565]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2566] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2566]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2567] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2567]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2568] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2568]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2569] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2569]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[256] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[256]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2570] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2570]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2571] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2571]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2572] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2572]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2573] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2573]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2574] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2574]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2575] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2575]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2576] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2576]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2577] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2577]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2578] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2578]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2579] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2579]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[257] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[257]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2580] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2580]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2581] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2581]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2582] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2582]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2583] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2583]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2584] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2584]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2585] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2585]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2586] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2586]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2587] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2587]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2588] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2588]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2589] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2589]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[258] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[258]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2590] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2590]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2591] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2591]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2592] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2592]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2593] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2593]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2594] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2594]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2595] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2595]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2596] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2596]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2597] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2597]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2598] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2598]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2599] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2599]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[259] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[259]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[21]),
        .Q(LOCKSTEP_Out[25]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2600] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2600]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2601] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2601]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2602] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2602]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2603] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2603]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2604] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2604]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2605] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2605]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2606] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2606]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2607] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2607]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2608] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2608]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2609] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2609]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[260] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[260]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2610] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2610]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2611] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2611]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2612] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2612]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2613] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2613]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2614] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2614]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2615] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2615]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2616] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2616]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2617] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2617]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2618] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2618]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2619] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2619]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[261] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[261]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2620] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2620]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2621] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2621]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2622] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2622]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2623] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2623]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2624] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2624]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2625] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2625]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2626] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2626]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2627] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2627]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2628] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2628]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2629] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2629]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[262] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[262]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2630] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2630]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2631] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2631]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2632] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2632]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2633] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2633]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2634] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2634]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2635] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2635]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2636] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2636]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2637] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2637]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2638] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2638]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2639] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2639]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[263] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[263]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2640] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2640]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2641] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2641]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2642] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2642]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2643] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2643]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2644] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2644]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2645] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2645]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2646] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2646]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2647] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2647]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2648] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2648]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2649] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2649]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[264] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[264]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2650] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2650]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2651] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2651]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2652] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2652]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2653] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2653]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2654] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2654]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2655] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2655]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2656] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2656]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2657] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2657]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2658] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2658]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2659] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2659]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[265] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[265]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2660] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2660]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2661] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2661]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2662] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2662]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2663] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2663]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2664] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2664]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2665] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2665]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2666] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2666]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2667] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2667]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2668] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2668]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2669] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2669]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[266] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[266]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2670] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2670]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2671] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2671]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2672] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2672]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2673] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2673]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2674] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2674]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2675] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2675]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2676] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2676]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2677] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2677]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2678] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2678]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2679] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2679]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[267] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[267]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2680] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2680]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2681] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2681]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2682] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2682]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2683] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2683]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2684] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2684]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2685] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2685]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2686] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2686]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2687] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2687]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2688] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2688]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2689] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2689]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[268] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[268]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2690] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2690]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2691] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2691]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2692] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2692]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2693] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2693]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2694] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2694]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2695] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2695]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2696] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2696]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2697] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2697]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2698] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2698]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2699] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2699]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[269] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[269]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[22]),
        .Q(LOCKSTEP_Out[26]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2700] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2700]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2701] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2701]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2702] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2702]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2703] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2703]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2704] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2704]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2705] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2705]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2706] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2706]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2707] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2707]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2708] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2708]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2709] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2709]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[270] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[270]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2710] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2710]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2711] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2711]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2712] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2712]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2713] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2713]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2714] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2714]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2715] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2715]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2716] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2716]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2717] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2717]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2718] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2718]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2719] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2719]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[271] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[271]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2720] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2720]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2721] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2721]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2722] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2722]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2723] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2723]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2724] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2724]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2725] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2725]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2726] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2726]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2727] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2727]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2728] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2728]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2729] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2729]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[272] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[272]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2730] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2730]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2731] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2731]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2732] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2732]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2733] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2733]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2734] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2734]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2735] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2735]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2736] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2736]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2737] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2737]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2738] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2738]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2739] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2739]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[273] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[273]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2740] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2740]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2741] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2741]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2742] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2742]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2743] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2743]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2744] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2744]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2745] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2745]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2746] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2746]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2747] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2747]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2748] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2748]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2749] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2749]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[274] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[274]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2750] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2750]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2751] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2751]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2752] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2752]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2753] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2753]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2754] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2754]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2755] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2755]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2756] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2756]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2757] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2757]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2758] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2758]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2759] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2759]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[275] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[275]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2760] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2760]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2761] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2761]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2762] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2762]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2763] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2763]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2764] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2764]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2765] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2765]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2766] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2766]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2767] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2767]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2768] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2768]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2769] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2769]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[276] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[276]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2770] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2770]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2771] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2771]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2772] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2772]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2773] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2773]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2774] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2774]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2775] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2775]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2776] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2776]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2777] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2777]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2778] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2778]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2779] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2779]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[277] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[277]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2780] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2780]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2781] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2781]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2782] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2782]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2783] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2783]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2784] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2784]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2785] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2785]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2786] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2786]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2787] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2787]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2788] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2788]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2789] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2789]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[278] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[278]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2790] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2790]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2791] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2791]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2792] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2792]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2793] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2793]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2794] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2794]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2795] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2795]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2796] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2796]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2797] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2797]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2798] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2798]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2799] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2799]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[279] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[279]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[23]),
        .Q(LOCKSTEP_Out[27]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2800] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2800]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2801] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2801]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2802] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2802]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2803] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2803]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2804] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2804]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2805] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2805]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2806] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2806]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2807] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2807]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2808] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2808]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2809] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2809]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[280] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[280]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2810] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2810]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2811] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2811]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2812] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2812]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2813] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2813]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2814] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2814]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2815] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2815]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2816] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2816]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2817] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2817]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2818] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2818]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2819] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2819]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[281] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[281]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2820] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2820]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2821] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2821]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2822] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2822]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2823] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2823]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2824] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2824]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2825] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2825]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2826] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2826]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2827] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2827]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2828] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2828]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2829] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2829]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[282] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[282]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2830] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2830]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2831] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2831]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2832] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2832]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2833] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2833]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2834] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2834]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2835] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2835]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2836] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2836]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2837] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2837]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2838] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2838]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2839] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2839]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[283] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[283]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2840] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2840]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2841] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2841]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2842] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2842]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2843] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2843]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2844] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2844]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2845] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2845]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2846] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2846]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2847] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2847]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2848] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2848]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2849] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2849]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[284] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[284]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2850] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2850]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2851] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2851]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2852] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2852]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2853] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2853]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2854] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2854]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2855] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2855]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2856] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2856]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2857] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2857]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2858] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2858]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2859] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2859]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[285] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[285]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2860] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2860]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2861] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2861]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2862] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2862]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2863] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2863]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2864] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2864]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2865] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2865]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2866] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2866]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2867] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2867]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2868] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2868]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2869] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2869]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[286] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[286]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2870] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2870]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2871] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2871]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2872] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2872]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2873] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2873]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2874] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2874]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2875] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2875]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2876] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2876]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2877] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2877]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2878] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2878]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2879] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2879]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[287] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[287]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2880] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2880]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2881] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2881]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2882] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2882]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2883] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2883]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2884] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2884]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2885] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2885]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2886] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2886]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2887] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2887]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2888] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2888]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2889] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2889]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[288] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[288]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2890] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2890]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2891] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2891]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2892] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2892]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2893] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2893]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2894] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2894]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2895] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2895]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2896] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2896]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2897] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2897]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2898] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2898]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2899] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2899]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[289] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[289]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[24]),
        .Q(LOCKSTEP_Out[28]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2900] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2900]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2901] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2901]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2902] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2902]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2903] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2903]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2904] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2904]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2905] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2905]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2906] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2906]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2907] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2907]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2908] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2908]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2909] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2909]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[290] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[290]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2910] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2910]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2911] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2911]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2912] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2912]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2913] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2913]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2914] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2914]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2915] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2915]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2916] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2916]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2917] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2917]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2918] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2918]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2919] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2919]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[291] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[291]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2920] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2920]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2921] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2921]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2922] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2922]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2923] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2923]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2924] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2924]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2925] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2925]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2926] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2926]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2927] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2927]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2928] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2928]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2929] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2929]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[292] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[292]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2930] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2930]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2931] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2931]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2932] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2932]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2933] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2933]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2934] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2934]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2935] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2935]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2936] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2936]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2937] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2937]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2938] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2938]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2939] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2939]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[293] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[293]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2940] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2940]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2941] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2941]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2942] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2942]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2943] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2943]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2944] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2944]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2945] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2945]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2946] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2946]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2947] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2947]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2948] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2948]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2949] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2949]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[294] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[294]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2950] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2950]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2951] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2951]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2952] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2952]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2953] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2953]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2954] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2954]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2955] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2955]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2956] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2956]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2957] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2957]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2958] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2958]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2959] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2959]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[295] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[295]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2960] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2960]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2961] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2961]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2962] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2962]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2963] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2963]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2964] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2964]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2965] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2965]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2966] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2966]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2967] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2967]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2968] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2968]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2969] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2969]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[296] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[296]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2970] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2970]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2971] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2971]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2972] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2972]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2973] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2973]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2974] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2974]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2975] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2975]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2976] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2976]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2977] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2977]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2978] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2978]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2979] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2979]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[297] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[297]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2980] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2980]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2981] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2981]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2982] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2982]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2983] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2983]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2984] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2984]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2985] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2985]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2986] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2986]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2987] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2987]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2988] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2988]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2989] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2989]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[298] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[298]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2990] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2990]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2991] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2991]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2992] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2992]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2993] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2993]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2994] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2994]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2995] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2995]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2996] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2996]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2997] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2997]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2998] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2998]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2999] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[2999]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[299] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[299]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[25]),
        .Q(LOCKSTEP_Out[29]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(IFetch),
        .Q(LOCKSTEP_Out[2]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3000] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3000]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3001] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3001]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3002] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3002]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3003] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3003]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3004] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3004]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3005] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3005]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3006] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3006]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3007] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3007]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3008] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3008]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3009] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3009]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[300] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[300]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3010] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3010]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3011] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3011]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3012] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3012]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3013] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3013]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3014] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3014]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3015] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3015]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3016] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3016]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3017] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3017]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3018] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3018]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3019] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3019]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[301] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[301]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3020] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3020]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3021] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3021]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3022] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3022]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3023] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3023]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3024] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3024]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3025] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3025]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3026] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3026]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3027] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3027]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3028] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3028]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3029] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3029]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[302] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[302]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3030] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3030]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3031] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3031]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3032] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3032]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3033] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3033]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3034] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3034]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3035] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3035]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3036] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3036]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3037] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3037]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3038] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3038]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3039] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3039]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[303] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[303]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3040] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3040]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3041] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3041]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3042] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3042]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3043] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3043]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3044] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3044]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3045] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3045]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3046] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3046]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3047] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3047]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3048] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3048]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3049] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3049]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[304] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[304]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3050] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3050]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3051] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3051]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3052] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3052]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3053] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3053]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3054] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3054]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3055] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3055]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3056] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3056]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3057] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3057]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3058] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3058]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3059] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3059]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[305] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[305]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3060] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3060]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3061] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3061]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3062] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3062]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3063] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3063]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3064] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3064]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3065] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3065]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3066] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3066]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3067] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3067]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3068] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3068]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3069] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3069]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[306] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[306]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3070] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3070]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3071] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3071]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3072] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3072]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3073] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3073]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3074] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3074]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3075] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3075]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3076] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3076]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3077] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3077]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3078] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3078]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3079] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3079]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[307] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[307]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3080] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3080]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3081] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3081]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3082] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3082]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3083] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3083]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3084] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3084]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3085] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3085]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3086] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3086]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3087] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3087]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3088] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3088]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3089] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3089]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[308] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[308]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3090] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3090]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3091] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3091]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3092] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3092]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3093] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3093]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3094] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3094]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3095] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3095]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3096] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3096]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3097] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3097]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3098] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3098]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3099] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3099]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[309] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[309]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[26]),
        .Q(LOCKSTEP_Out[30]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3100] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3100]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3101] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3101]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3102] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3102]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3103] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3103]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3104] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3104]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3105] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3105]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3106] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3106]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3107] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3107]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3108] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3108]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3109] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3109]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[310] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[310]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3110] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3110]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3111] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3111]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3112] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3112]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3113] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3113]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3114] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3114]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3115] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3115]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3116] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3116]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3117] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3117]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3118] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3118]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3119] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3119]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[311] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[311]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3120] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3120]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3121] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3121]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3122] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3122]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3123] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3123]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3124] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3124]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3125] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3125]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3126] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3126]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3127] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3127]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3128] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3128]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3129] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3129]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[312] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[312]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3130] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3130]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3131] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3131]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3132] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3132]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3133] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3133]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3134] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3134]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3135] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3135]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3136] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3136]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3137] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3137]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3138] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3138]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3139] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3139]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[313] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[313]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3140] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3140]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3141] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3141]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3142] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3142]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3143] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3143]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3144] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3144]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3145] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3145]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3146] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3146]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3147] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3147]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3148] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3148]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3149] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3149]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[314] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[314]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3150] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3150]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3151] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3151]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3152] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3152]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3153] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3153]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3154] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3154]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3155] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3155]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3156] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3156]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3157] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3157]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3158] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3158]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3159] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3159]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[315] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[315]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3160] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3160]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3161] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3161]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3162] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3162]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3163] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3163]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3164] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3164]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3165] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3165]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3166] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3166]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3167] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3167]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3168] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3168]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3169] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3169]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[316] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[316]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3170] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3170]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3171] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3171]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3172] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3172]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3173] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3173]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3174] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3174]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3175] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3175]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3176] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3176]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3177] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3177]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3178] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3178]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3179] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3179]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[317] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[317]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3180] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3180]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3181] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3181]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3182] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3182]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3183] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3183]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3184] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3184]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3185] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3185]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3186] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3186]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3187] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3187]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3188] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3188]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3189] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3189]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[318] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[318]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3190] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3190]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3191] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3191]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3192] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3192]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3193] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3193]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3194] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3194]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3195] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3195]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3196] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3196]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3197] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3197]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3198] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3198]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3199] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3199]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[319] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[319]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[27]),
        .Q(LOCKSTEP_Out[31]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3200] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3200]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3201] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3201]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3202] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3202]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3203] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3203]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3204] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3204]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3205] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3205]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3206] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3206]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3207] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3207]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3208] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3208]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3209] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3209]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[320] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[320]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3210] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3210]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3211] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3211]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3212] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3212]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3213] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3213]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3214] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3214]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3215] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3215]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3216] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3216]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3217] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3217]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3218] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3218]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3219] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3219]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[321] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[321]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3220] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3220]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3221] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3221]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3222] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3222]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3223] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3223]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3224] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3224]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3225] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3225]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3226] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3226]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3227] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3227]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3228] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3228]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3229] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3229]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[322] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[322]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3230] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3230]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3231] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3231]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3232] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3232]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3233] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3233]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3234] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3234]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3235] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3235]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3236] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3236]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3237] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3237]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3238] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3238]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3239] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3239]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[323] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[323]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3240] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3240]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3241] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3241]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3242] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3242]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3243] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3243]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3244] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3244]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3245] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3245]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3246] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3246]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3247] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3247]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3248] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3248]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3249] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3249]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[324] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[324]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3250] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3250]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3251] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3251]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3252] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3252]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3253] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3253]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3254] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3254]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3255] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3255]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3256] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3256]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3257] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3257]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3258] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3258]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3259] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3259]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[325] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[325]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3260] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3260]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3261] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3261]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3262] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3262]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3263] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3263]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3264] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3264]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3265] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3265]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3266] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3266]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3267] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3267]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3268] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3268]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3269] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3269]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[326] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[326]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3270] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3270]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3271] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3271]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3272] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3272]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3273] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3273]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3274] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3274]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3275] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3275]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3276] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3276]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3277] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3277]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3278] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3278]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3279] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3279]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[327] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[327]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3280] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3280]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3281] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3281]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3282] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3282]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3283] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3283]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3284] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3284]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3285] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3285]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3286] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3286]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3287] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3287]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3288] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3288]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3289] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3289]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[328] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[328]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3290] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3290]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3291] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3291]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3292] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3292]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3293] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3293]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3294] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3294]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3295] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3295]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3296] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3296]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3297] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3297]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3298] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3298]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3299] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3299]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[329] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[329]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[32] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[28]),
        .Q(LOCKSTEP_Out[32]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3300] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3300]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3301] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3301]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3302] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3302]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3303] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3303]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3304] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3304]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3305] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3305]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3306] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3306]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3307] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3307]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3308] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3308]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3309] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3309]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[330] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[330]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3310] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3310]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3311] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3311]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3312] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3312]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3313] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3313]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3314] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3314]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3315] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3315]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3316] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3316]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3317] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3317]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3318] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3318]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3319] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3319]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[331] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[331]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3320] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3320]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3321] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3321]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3322] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3322]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3323] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3323]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3324] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3324]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3325] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3325]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3326] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3326]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3327] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3327]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3328] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3328]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3329] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3329]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[332] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[332]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3330] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3330]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3331] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3331]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3332] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3332]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3333] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3333]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3334] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3334]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3335] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3335]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3336] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3336]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3337] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3337]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3338] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3338]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3339] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3339]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[333] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[333]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3340] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3340]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3341] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3341]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3342] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3342]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3343] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3343]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3344] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3344]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3345] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3345]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3346] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3346]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3347] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3347]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3348] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3348]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3349] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3349]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[334] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[334]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3350] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3350]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3351] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3351]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3352] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3352]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3353] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3353]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3354] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3354]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3355] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3355]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3356] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3356]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3357] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3357]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3358] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3358]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3359] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3359]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[335] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[335]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3360] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3360]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3361] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3361]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3362] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3362]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3363] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3363]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3364] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3364]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3365] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3365]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3366] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3366]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3367] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3367]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3368] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3368]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3369] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3369]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[336] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[336]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3370] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3370]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3371] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3371]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3372] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3372]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3373] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3373]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3374] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3374]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3375] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3375]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3376] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3376]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3377] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3377]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3378] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3378]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3379] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3379]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[337] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[337]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3380] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3380]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3381] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3381]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3382] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3382]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3383] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3383]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3384] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3384]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3385] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3385]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3386] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3386]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3387] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3387]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3388] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3388]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3389] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3389]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[338] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[338]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3390] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3390]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3391] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3391]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3392] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3392]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3393] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3393]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3394] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3394]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3395] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3395]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3396] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3396]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3397] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3397]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3398] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3398]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3399] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3399]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[339] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[339]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[33] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[29]),
        .Q(LOCKSTEP_Out[33]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3400] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3400]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3401] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3401]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3402] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3402]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3403] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3403]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3404] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3404]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3405] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3405]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3406] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3406]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3407] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3407]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3408] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3408]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3409] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3409]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[340] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[340]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3410] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3410]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3411] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3411]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3412] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3412]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3413] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3413]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3414] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3414]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3415] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3415]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3416] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3416]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3417] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3417]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3418] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3418]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3419] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3419]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[341] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[341]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3420] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3420]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3421] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3421]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3422] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3422]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3423] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3423]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3424] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3424]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3425] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3425]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3426] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3426]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3427] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3427]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3428] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3428]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3429] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3429]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[342] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[342]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3430] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3430]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3431] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3431]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3432] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3432]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3433] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3433]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3434] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3434]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3435] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3435]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3436] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3436]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3437] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3437]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3438] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3438]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3439] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3439]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[343] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[343]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3440] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3440]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3441] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3441]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3442] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3442]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3443] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3443]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3444] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3444]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3445] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3445]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3446] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3446]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3447] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3447]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3448] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3448]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3449] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3449]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[344] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[344]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3450] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3450]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3451] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3451]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3452] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3452]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3453] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3453]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3454] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3454]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3455] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3455]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3456] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3456]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3457] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3457]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3458] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3458]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3459] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3459]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[345] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[345]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3460] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3460]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3461] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3461]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3462] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3462]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3463] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3463]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3464] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3464]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3465] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3465]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3466] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3466]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3467] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3467]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3468] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3468]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3469] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3469]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[346] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[346]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3470] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3470]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3471] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3471]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3472] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3472]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3473] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3473]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3474] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3474]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3475] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3475]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3476] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3476]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3477] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3477]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3478] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3478]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3479] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3479]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[347] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[347]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3480] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3480]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3481] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3481]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3482] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3482]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3483] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3483]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3484] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3484]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3485] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3485]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3486] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3486]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3487] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3487]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3488] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3488]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3489] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3489]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[348] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[348]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3490] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3490]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3491] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3491]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3492] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3492]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3493] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3493]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3494] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3494]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3495] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3495]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3496] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3496]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3497] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3497]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3498] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3498]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3499] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3499]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[349] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[349]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[34] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[30]),
        .Q(LOCKSTEP_Out[34]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3500] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3500]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3501] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3501]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3502] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3502]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3503] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3503]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3504] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3504]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3505] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3505]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3506] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3506]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3507] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3507]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3508] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3508]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3509] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3509]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[350] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[350]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3510] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3510]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3511] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3511]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3512] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3512]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3513] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3513]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3514] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3514]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3515] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3515]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3516] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3516]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3517] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3517]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3518] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3518]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3519] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3519]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[351] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[351]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3520] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3520]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3521] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3521]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3522] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3522]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3523] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3523]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3524] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3524]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3525] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3525]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3526] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3526]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3527] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3527]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3528] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3528]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3529] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3529]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[352] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[352]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3530] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3530]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3531] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3531]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3532] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3532]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3533] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3533]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3534] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3534]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3535] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3535]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3536] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3536]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3537] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3537]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3538] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3538]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3539] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3539]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[353] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[353]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3540] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3540]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3541] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3541]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3542] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3542]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3543] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3543]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3544] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3544]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3545] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3545]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3546] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3546]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3547] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3547]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3548] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3548]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3549] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3549]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[354] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[354]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3550] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3550]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3551] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3551]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3552] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3552]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3553] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3553]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3554] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3554]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3555] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3555]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3556] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3556]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3557] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3557]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3558] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3558]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3559] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3559]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[355] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[355]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3560] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3560]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3561] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3561]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3562] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3562]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3563] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3563]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3564] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3564]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3565] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3565]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3566] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3566]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3567] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3567]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3568] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3568]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3569] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3569]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[356] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[356]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3570] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3570]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3571] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3571]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3572] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3572]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3573] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3573]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3574] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3574]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3575] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3575]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3576] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3576]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3577] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3577]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3578] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3578]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3579] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3579]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[357] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[357]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3580] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3580]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3581] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3581]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3582] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3582]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3583] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3583]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3584] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3584]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3585] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3585]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3586] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3586]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3587] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3587]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3588] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3588]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3589] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3589]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[358] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[358]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3590] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3590]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3591] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3591]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3592] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3592]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3593] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3593]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3594] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3594]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3595] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3595]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3596] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3596]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3597] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3597]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3598] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3598]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3599] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3599]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[359] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[359]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[35] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[31]),
        .Q(LOCKSTEP_Out[35]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3600] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3600]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3601] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3601]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3602] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3602]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3603] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3603]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3604] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3604]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3605] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3605]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3606] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3606]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3607] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3607]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3608] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3608]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3609] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3609]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[360] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[360]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3610] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3610]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3611] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3611]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3612] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3612]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3613] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3613]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3614] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3614]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3615] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3615]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3616] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3616]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3617] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3617]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3618] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3618]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3619] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3619]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[361] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[361]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3620] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3620]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3621] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3621]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3622] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3622]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3623] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3623]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3624] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3624]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3625] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3625]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3626] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3626]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3627] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3627]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3628] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3628]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3629] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3629]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[362] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[362]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3630] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3630]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3631] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3631]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3632] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3632]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3633] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3633]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3634] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3634]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3635] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3635]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3636] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3636]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3637] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3637]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3638] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3638]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3639] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3639]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[363] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[363]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3640] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3640]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3641] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3641]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3642] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3642]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3643] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3643]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3644] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3644]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3645] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3645]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3646] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3646]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3647] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3647]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3648] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3648]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3649] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3649]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[364] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[364]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3650] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3650]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3651] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3651]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3652] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3652]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3653] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3653]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3654] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3654]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3655] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3655]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3656] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3656]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3657] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3657]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3658] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3658]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3659] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3659]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[365] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[365]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3660] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3660]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3661] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3661]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3662] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3662]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3663] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3663]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3664] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3664]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3665] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3665]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3666] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3666]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3667] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3667]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3668] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3668]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3669] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3669]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[366] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[366]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3670] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3670]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3671] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3671]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3672] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3672]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3673] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3673]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3674] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3674]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3675] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[0]),
        .Q(LOCKSTEP_Out[3675]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3676] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[1]),
        .Q(LOCKSTEP_Out[3676]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3677] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[2]),
        .Q(LOCKSTEP_Out[3677]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3678] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[3]),
        .Q(LOCKSTEP_Out[3678]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3679] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[4]),
        .Q(LOCKSTEP_Out[3679]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[367] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[367]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3680] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[5]),
        .Q(LOCKSTEP_Out[3680]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3681] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[6]),
        .Q(LOCKSTEP_Out[3681]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3682] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[7]),
        .Q(LOCKSTEP_Out[3682]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3683] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[8]),
        .Q(LOCKSTEP_Out[3683]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3684] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[9]),
        .Q(LOCKSTEP_Out[3684]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3685] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[10]),
        .Q(LOCKSTEP_Out[3685]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3686] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[11]),
        .Q(LOCKSTEP_Out[3686]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3687] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[12]),
        .Q(LOCKSTEP_Out[3687]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3688] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[13]),
        .Q(LOCKSTEP_Out[3688]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3689] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[14]),
        .Q(LOCKSTEP_Out[3689]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[368] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[368]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3690] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[15]),
        .Q(LOCKSTEP_Out[3690]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3691] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[16]),
        .Q(LOCKSTEP_Out[3691]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3692] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[17]),
        .Q(LOCKSTEP_Out[3692]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3693] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[18]),
        .Q(LOCKSTEP_Out[3693]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3694] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[19]),
        .Q(LOCKSTEP_Out[3694]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3695] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[20]),
        .Q(LOCKSTEP_Out[3695]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3696] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[21]),
        .Q(LOCKSTEP_Out[3696]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3697] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[22]),
        .Q(LOCKSTEP_Out[3697]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3698] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[23]),
        .Q(LOCKSTEP_Out[3698]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3699] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[24]),
        .Q(LOCKSTEP_Out[3699]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[369] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[369]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[36] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[0]),
        .Q(LOCKSTEP_Out[36]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3700] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[25]),
        .Q(LOCKSTEP_Out[3700]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3701] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[26]),
        .Q(LOCKSTEP_Out[3701]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3702] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[27]),
        .Q(LOCKSTEP_Out[3702]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3703] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[28]),
        .Q(LOCKSTEP_Out[3703]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3704] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[29]),
        .Q(LOCKSTEP_Out[3704]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3705] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[30]),
        .Q(LOCKSTEP_Out[3705]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3706] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[31]),
        .Q(LOCKSTEP_Out[3706]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3707] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Valid_Instr),
        .Q(LOCKSTEP_Out[3707]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3708] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[0]),
        .Q(LOCKSTEP_Out[3708]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3709] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[1]),
        .Q(LOCKSTEP_Out[3709]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[370] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[370]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3710] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[2]),
        .Q(LOCKSTEP_Out[3710]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3711] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[3]),
        .Q(LOCKSTEP_Out[3711]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3712] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[4]),
        .Q(LOCKSTEP_Out[3712]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3713] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[5]),
        .Q(LOCKSTEP_Out[3713]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3714] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[6]),
        .Q(LOCKSTEP_Out[3714]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3715] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[7]),
        .Q(LOCKSTEP_Out[3715]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3716] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[8]),
        .Q(LOCKSTEP_Out[3716]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3717] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[9]),
        .Q(LOCKSTEP_Out[3717]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3718] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[10]),
        .Q(LOCKSTEP_Out[3718]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3719] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[11]),
        .Q(LOCKSTEP_Out[3719]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[371] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[371]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3720] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[12]),
        .Q(LOCKSTEP_Out[3720]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3721] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[13]),
        .Q(LOCKSTEP_Out[3721]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3722] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[14]),
        .Q(LOCKSTEP_Out[3722]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3723] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[15]),
        .Q(LOCKSTEP_Out[3723]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3724] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[16]),
        .Q(LOCKSTEP_Out[3724]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3725] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[17]),
        .Q(LOCKSTEP_Out[3725]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3726] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[18]),
        .Q(LOCKSTEP_Out[3726]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3727] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[19]),
        .Q(LOCKSTEP_Out[3727]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3728] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[20]),
        .Q(LOCKSTEP_Out[3728]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3729] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[21]),
        .Q(LOCKSTEP_Out[3729]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[372] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[372]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3730] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[22]),
        .Q(LOCKSTEP_Out[3730]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3731] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[23]),
        .Q(LOCKSTEP_Out[3731]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3732] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[24]),
        .Q(LOCKSTEP_Out[3732]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3733] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[25]),
        .Q(LOCKSTEP_Out[3733]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3734] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[26]),
        .Q(LOCKSTEP_Out[3734]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3735] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[27]),
        .Q(LOCKSTEP_Out[3735]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3736] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[28]),
        .Q(LOCKSTEP_Out[3736]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3737] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[29]),
        .Q(LOCKSTEP_Out[3737]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3738] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[30]),
        .Q(LOCKSTEP_Out[3738]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3739] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[31]),
        .Q(LOCKSTEP_Out[3739]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[373] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[373]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3740] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Write),
        .Q(LOCKSTEP_Out[3740]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3741] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[0]),
        .Q(LOCKSTEP_Out[3741]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3742] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[1]),
        .Q(LOCKSTEP_Out[3742]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3743] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[2]),
        .Q(LOCKSTEP_Out[3743]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3744] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[3]),
        .Q(LOCKSTEP_Out[3744]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3745] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[4]),
        .Q(LOCKSTEP_Out[3745]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3746] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3746]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3747] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3747]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3748] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3748]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3749] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3749]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[374] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[374]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3750] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3750]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3751] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3751]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3752] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3752]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3753] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3753]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3754] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3754]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3755] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3755]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3756] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3756]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3757] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [11]),
        .Q(LOCKSTEP_Out[3757]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3758] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [12]),
        .Q(LOCKSTEP_Out[3758]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3759] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [13]),
        .Q(LOCKSTEP_Out[3759]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[375] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[375]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3760] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3760]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3761] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3761]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3762] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3762]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3763] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3763]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3764] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3764]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3765] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3765]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3766] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3766]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3767] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3767]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3768] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3768]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3769] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[0]),
        .Q(LOCKSTEP_Out[3769]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[376] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[376]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3770] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[1]),
        .Q(LOCKSTEP_Out[3770]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3771] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[2]),
        .Q(LOCKSTEP_Out[3771]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3772] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[3]),
        .Q(LOCKSTEP_Out[3772]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3773] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[4]),
        .Q(LOCKSTEP_Out[3773]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3774] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[5]),
        .Q(LOCKSTEP_Out[3774]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3775] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[6]),
        .Q(LOCKSTEP_Out[3775]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3776] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[7]),
        .Q(LOCKSTEP_Out[3776]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3777] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[8]),
        .Q(LOCKSTEP_Out[3777]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3778] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[9]),
        .Q(LOCKSTEP_Out[3778]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3779] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[10]),
        .Q(LOCKSTEP_Out[3779]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[377] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[377]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3780] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[11]),
        .Q(LOCKSTEP_Out[3780]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3781] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[12]),
        .Q(LOCKSTEP_Out[3781]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3782] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[13]),
        .Q(LOCKSTEP_Out[3782]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3783] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[14]),
        .Q(LOCKSTEP_Out[3783]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3784] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[15]),
        .Q(LOCKSTEP_Out[3784]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3785] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[16]),
        .Q(LOCKSTEP_Out[3785]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3786] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[17]),
        .Q(LOCKSTEP_Out[3786]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3787] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[18]),
        .Q(LOCKSTEP_Out[3787]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3788] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[19]),
        .Q(LOCKSTEP_Out[3788]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3789] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[20]),
        .Q(LOCKSTEP_Out[3789]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[378] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[378]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3790] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[21]),
        .Q(LOCKSTEP_Out[3790]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3791] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[22]),
        .Q(LOCKSTEP_Out[3791]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3792] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[23]),
        .Q(LOCKSTEP_Out[3792]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3793] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[24]),
        .Q(LOCKSTEP_Out[3793]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3794] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[25]),
        .Q(LOCKSTEP_Out[3794]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3795] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[26]),
        .Q(LOCKSTEP_Out[3795]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3796] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[27]),
        .Q(LOCKSTEP_Out[3796]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3797] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[28]),
        .Q(LOCKSTEP_Out[3797]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3798] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[29]),
        .Q(LOCKSTEP_Out[3798]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3799] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[30]),
        .Q(LOCKSTEP_Out[3799]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[379] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[379]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[37] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[1]),
        .Q(LOCKSTEP_Out[37]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3800] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[31]),
        .Q(LOCKSTEP_Out[3800]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3801] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Exception_Taken),
        .Q(LOCKSTEP_Out[3801]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3802] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Exception_Kind[0]),
        .Q(LOCKSTEP_Out[3802]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3803] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Exception_Kind[1]),
        .Q(LOCKSTEP_Out[3803]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3804] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Exception_Kind[2]),
        .Q(LOCKSTEP_Out[3804]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3805] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Exception_Kind[3]),
        .Q(LOCKSTEP_Out[3805]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3806] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Exception_Kind[4]),
        .Q(LOCKSTEP_Out[3806]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3807] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Jump_Taken),
        .Q(LOCKSTEP_Out[3807]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3808] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Delay_Slot),
        .Q(LOCKSTEP_Out[3808]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3809] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[0]),
        .Q(LOCKSTEP_Out[3809]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[380] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[380]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3810] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[1]),
        .Q(LOCKSTEP_Out[3810]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3811] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[2]),
        .Q(LOCKSTEP_Out[3811]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3812] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[3]),
        .Q(LOCKSTEP_Out[3812]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3813] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[4]),
        .Q(LOCKSTEP_Out[3813]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3814] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[5]),
        .Q(LOCKSTEP_Out[3814]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3815] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[6]),
        .Q(LOCKSTEP_Out[3815]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3816] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[7]),
        .Q(LOCKSTEP_Out[3816]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3817] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[8]),
        .Q(LOCKSTEP_Out[3817]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3818] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[9]),
        .Q(LOCKSTEP_Out[3818]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3819] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[10]),
        .Q(LOCKSTEP_Out[3819]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[381] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[381]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3820] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[11]),
        .Q(LOCKSTEP_Out[3820]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3821] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[12]),
        .Q(LOCKSTEP_Out[3821]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3822] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[13]),
        .Q(LOCKSTEP_Out[3822]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3823] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[14]),
        .Q(LOCKSTEP_Out[3823]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3824] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[15]),
        .Q(LOCKSTEP_Out[3824]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3825] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[16]),
        .Q(LOCKSTEP_Out[3825]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3826] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[17]),
        .Q(LOCKSTEP_Out[3826]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3827] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[18]),
        .Q(LOCKSTEP_Out[3827]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3828] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[19]),
        .Q(LOCKSTEP_Out[3828]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3829] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[20]),
        .Q(LOCKSTEP_Out[3829]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[382] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[382]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3830] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[21]),
        .Q(LOCKSTEP_Out[3830]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3831] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[22]),
        .Q(LOCKSTEP_Out[3831]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3832] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[23]),
        .Q(LOCKSTEP_Out[3832]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3833] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[24]),
        .Q(LOCKSTEP_Out[3833]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3834] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[25]),
        .Q(LOCKSTEP_Out[3834]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3835] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[26]),
        .Q(LOCKSTEP_Out[3835]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3836] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[27]),
        .Q(LOCKSTEP_Out[3836]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3837] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[28]),
        .Q(LOCKSTEP_Out[3837]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3838] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[29]),
        .Q(LOCKSTEP_Out[3838]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3839] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[30]),
        .Q(LOCKSTEP_Out[3839]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[383] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[383]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3840] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[31]),
        .Q(LOCKSTEP_Out[3840]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3841] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[0]),
        .Q(LOCKSTEP_Out[3841]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3842] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[1]),
        .Q(LOCKSTEP_Out[3842]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3843] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[2]),
        .Q(LOCKSTEP_Out[3843]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3844] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[3]),
        .Q(LOCKSTEP_Out[3844]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3845] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[4]),
        .Q(LOCKSTEP_Out[3845]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3846] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[5]),
        .Q(LOCKSTEP_Out[3846]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3847] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[6]),
        .Q(LOCKSTEP_Out[3847]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3848] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[7]),
        .Q(LOCKSTEP_Out[3848]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3849] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[8]),
        .Q(LOCKSTEP_Out[3849]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[384] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[384]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3850] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[9]),
        .Q(LOCKSTEP_Out[3850]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3851] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[10]),
        .Q(LOCKSTEP_Out[3851]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3852] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[11]),
        .Q(LOCKSTEP_Out[3852]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3853] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[12]),
        .Q(LOCKSTEP_Out[3853]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3854] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[13]),
        .Q(LOCKSTEP_Out[3854]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3855] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[14]),
        .Q(LOCKSTEP_Out[3855]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3856] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[15]),
        .Q(LOCKSTEP_Out[3856]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3857] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[16]),
        .Q(LOCKSTEP_Out[3857]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3858] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[17]),
        .Q(LOCKSTEP_Out[3858]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3859] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[18]),
        .Q(LOCKSTEP_Out[3859]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[385] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[385]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3860] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[19]),
        .Q(LOCKSTEP_Out[3860]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3861] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[20]),
        .Q(LOCKSTEP_Out[3861]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3862] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[21]),
        .Q(LOCKSTEP_Out[3862]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3863] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[22]),
        .Q(LOCKSTEP_Out[3863]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3864] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[23]),
        .Q(LOCKSTEP_Out[3864]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3865] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[24]),
        .Q(LOCKSTEP_Out[3865]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3866] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[25]),
        .Q(LOCKSTEP_Out[3866]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3867] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[26]),
        .Q(LOCKSTEP_Out[3867]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3868] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[27]),
        .Q(LOCKSTEP_Out[3868]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3869] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[28]),
        .Q(LOCKSTEP_Out[3869]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[386] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[386]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3870] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[29]),
        .Q(LOCKSTEP_Out[3870]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3871] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[30]),
        .Q(LOCKSTEP_Out[3871]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3872] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[31]),
        .Q(LOCKSTEP_Out[3872]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3873] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[0]),
        .Q(LOCKSTEP_Out[3873]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3874] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[1]),
        .Q(LOCKSTEP_Out[3874]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3875] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[2]),
        .Q(LOCKSTEP_Out[3875]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3876] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[3]),
        .Q(LOCKSTEP_Out[3876]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3877] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Access),
        .Q(LOCKSTEP_Out[3877]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3878] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Read),
        .Q(LOCKSTEP_Out[3878]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3879] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write),
        .Q(LOCKSTEP_Out[3879]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[387] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[387]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3880] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3880]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3881] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3881]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3882] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3882]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3883] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3883]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3884] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3884]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3885] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3885]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3886] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3886]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3887] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_OF_PipeRun),
        .Q(LOCKSTEP_Out[3887]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3888] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_EX_PipeRun),
        .Q(LOCKSTEP_Out[3888]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3889] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_MEM_PipeRun),
        .Q(LOCKSTEP_Out[3889]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[388] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[388]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3890] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^LOCKSTEP_Master_Out [10]),
        .Q(LOCKSTEP_Out[3890]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3891] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Jump_Hit),
        .Q(LOCKSTEP_Out[3891]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3892] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3892]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3893] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3893]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3894] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3894]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3895] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3895]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3896] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3896]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3897] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3897]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3898] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3898]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3899] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3899]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[389] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[389]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[38] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[2]),
        .Q(LOCKSTEP_Out[38]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3900] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3900]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3901] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3901]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3902] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3902]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3903] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3903]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3904] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3904]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3905] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3905]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3906] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3906]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3907] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3907]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3908] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3908]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3909] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3909]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[390] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[390]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3910] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3910]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3911] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3911]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3912] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3912]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3913] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3913]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3914] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3914]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3915] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3915]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3916] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3916]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3917] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3917]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3918] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3918]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3919] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3919]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[391] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[391]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3920] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3920]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3921] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3921]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3922] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3922]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3923] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3923]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3924] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3924]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3925] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3925]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3926] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3926]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3927] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3927]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3928] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3928]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3929] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3929]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[392] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[392]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3930] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3930]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3931] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3931]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3932] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3932]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3933] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3933]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3934] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3934]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3935] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3935]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3936] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3936]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3937] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3937]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3938] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3938]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3939] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3939]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[393] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[393]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3940] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3940]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3941] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3941]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3942] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3942]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3943] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3943]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3944] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3944]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3945] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3945]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3946] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3946]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3947] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3947]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3948] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3948]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3949] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3949]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[394] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[394]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3950] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3950]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3951] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3951]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3952] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3952]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3953] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3953]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3954] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3954]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3955] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3955]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3956] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3956]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3957] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3957]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3958] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3958]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3959] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3959]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[395] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[395]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3960] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3960]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3961] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3961]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3962] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3962]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3963] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3963]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3964] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3964]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3965] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3965]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3966] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3966]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3967] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3967]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3968] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3968]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3969] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3969]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[396] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[396]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3970] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3970]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3971] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3971]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3972] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3972]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3973] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3973]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3974] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3974]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3975] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3975]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3976] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3976]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3977] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3977]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3978] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3978]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3979] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3979]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[397] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[397]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3980] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3980]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3981] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3981]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3982] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3982]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3983] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3983]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3984] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3984]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3985] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3985]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3986] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3986]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3987] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3987]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3988] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3988]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3989] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3989]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[398] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[398]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3990] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3990]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3991] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3991]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3992] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3992]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3993] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3993]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3994] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3994]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3995] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3995]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3996] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3996]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3997] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3997]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3998] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3998]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[3999] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[3999]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[399] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[399]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[39] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[3]),
        .Q(LOCKSTEP_Out[39]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(I_AS),
        .Q(LOCKSTEP_Out[3]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4000] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4000]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4001] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4001]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4002] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4002]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4003] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4003]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4004] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4004]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4005] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4005]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4006] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4006]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4007] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4007]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4008] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4008]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4009] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4009]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[400] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[400]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4010] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4010]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4011] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4011]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4012] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4012]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4013] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4013]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4014] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4014]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4015] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4015]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4016] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4016]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4017] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4017]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4018] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4018]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4019] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4019]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[401] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[401]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4020] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4020]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4021] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4021]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4022] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4022]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4023] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4023]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4024] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4024]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4025] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4025]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4026] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4026]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4027] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4027]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4028] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4028]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4029] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4029]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[402] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[402]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4030] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4030]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4031] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4031]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4032] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4032]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4033] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4033]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4034] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4034]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4035] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4035]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4036] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4036]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4037] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4037]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4038] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4038]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4039] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4039]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[403] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[403]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4040] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4040]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4041] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4041]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4042] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4042]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4043] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4043]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4044] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4044]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4045] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4045]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4046] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4046]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4047] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4047]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4048] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4048]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4049] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4049]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[404] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[404]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4050] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4050]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4051] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4051]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4052] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4052]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4053] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4053]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4054] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4054]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4055] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4055]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4056] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4056]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4057] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4057]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4058] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4058]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4059] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4059]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[405] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[405]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4060] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4060]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4061] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4061]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4062] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4062]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4063] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4063]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4064] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4064]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4065] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4065]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4066] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4066]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4067] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4067]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4068] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4068]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4069] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4069]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[406] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[406]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4070] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4070]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4071] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4071]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4072] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4072]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4073] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4073]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4074] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4074]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4075] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4075]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4076] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4076]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4077] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4077]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4078] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4078]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4079] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4079]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[407] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[407]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4080] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4080]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4081] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4081]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4082] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4082]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4083] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4083]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4084] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4084]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4085] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4085]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4086] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4086]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4087] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4087]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4088] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4088]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4089] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4089]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[408] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[408]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4090] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4090]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4091] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4091]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4092] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4092]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4093] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4093]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4094] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4094]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[4095] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[4095]),
        .R(1'b0));
  FDRE \LOCKSTEP_Out_reg[409] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[409]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[40] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[4]),
        .Q(LOCKSTEP_Out[40]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[410] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[410]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[411] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[411]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[412] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[412]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[413] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[413]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[414] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[414]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[415] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[415]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[416] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[416]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[417] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[417]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[418] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[418]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[419] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[419]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[41] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[5]),
        .Q(LOCKSTEP_Out[41]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[420] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[420]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[421] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[421]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[422] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[422]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[423] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[423]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[424] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[424]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[425] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[425]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[426] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[426]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[427] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[427]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[428] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[428]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[429] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[429]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[42] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[6]),
        .Q(LOCKSTEP_Out[42]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[430] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[430]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[431] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[431]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[432] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[432]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[433] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[433]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[434] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[434]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[435] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[435]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[436] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[436]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[437] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[437]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[438] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[438]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[439] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[439]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[43] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[7]),
        .Q(LOCKSTEP_Out[43]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[440] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[440]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[441] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[441]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[442] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[442]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[443] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[443]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[444] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[444]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[445] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[445]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[446] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[446]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[447] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[447]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[448] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[448]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[449] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[449]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[44] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[8]),
        .Q(LOCKSTEP_Out[44]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[450] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[450]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[451] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[451]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[452] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[452]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[453] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[453]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[454] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[454]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[455] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[455]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[456] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[456]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[457] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[457]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[458] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[458]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[459] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[459]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[45] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[9]),
        .Q(LOCKSTEP_Out[45]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[460] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[460]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[461] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[461]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[462] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[462]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[463] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[463]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[464] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[464]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[465] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[465]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[466] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[466]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[467] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[467]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[468] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[468]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[469] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[469]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[46] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[10]),
        .Q(LOCKSTEP_Out[46]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[470] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[470]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[471] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[471]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[472] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[472]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[473] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[473]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[474] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[474]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[475] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[475]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[476] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[476]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[477] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[477]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[478] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[478]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[479] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[479]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[47] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[11]),
        .Q(LOCKSTEP_Out[47]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[480] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[480]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[481] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[481]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[482] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[482]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[483] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[483]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[484] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[484]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[485] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[485]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[486] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[486]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[487] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[487]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[488] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[488]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[489] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[489]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[48] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[12]),
        .Q(LOCKSTEP_Out[48]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[490] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[490]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[491] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[491]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[492] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[492]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[493] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[493]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[494] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[494]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[495] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[495]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[496] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[496]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[497] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[497]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[498] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[498]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[499] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[499]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[49] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[13]),
        .Q(LOCKSTEP_Out[49]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[0]),
        .Q(LOCKSTEP_Out[4]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[500] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[500]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[501] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[501]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[502] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[502]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[503] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[503]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[504] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[504]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[505] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[505]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[506] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[506]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[507] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[507]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[508] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[508]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[509] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[509]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[50] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[14]),
        .Q(LOCKSTEP_Out[50]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[510] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[510]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[511] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[511]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[512] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[512]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[513] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[513]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[514] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[514]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[515] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[515]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[516] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[516]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[517] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[517]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[518] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[518]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[519] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[519]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[51] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[15]),
        .Q(LOCKSTEP_Out[51]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[520] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[520]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[521] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[521]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[522] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[522]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[523] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[523]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[524] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[524]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[525] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[525]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[526] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[526]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[527] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[527]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[528] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[528]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[529] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[529]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[52] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[16]),
        .Q(LOCKSTEP_Out[52]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[530] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[530]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[531] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[531]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[532] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[532]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[533] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[533]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[534] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[534]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[535] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[535]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[536] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[536]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[537] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[537]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[538] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[538]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[539] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[539]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[53] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[17]),
        .Q(LOCKSTEP_Out[53]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[540] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[540]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[541] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[541]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[542] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[542]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[543] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[543]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[544] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[544]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[545] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[545]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[546] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[546]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[547] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[547]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[548] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[548]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[549] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[549]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[54] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[18]),
        .Q(LOCKSTEP_Out[54]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[550] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[550]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[551] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[551]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[552] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[552]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[553] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[553]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[554] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[554]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[555] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[555]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[556] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[556]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[557] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[557]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[558] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[558]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[559] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[559]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[55] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[19]),
        .Q(LOCKSTEP_Out[55]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[560] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[560]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[561] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[561]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[562] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[562]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[563] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[563]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[564] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[564]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[565] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[565]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[566] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[566]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[567] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[567]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[568] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[568]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[569] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[569]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[56] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[20]),
        .Q(LOCKSTEP_Out[56]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[570] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[570]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[571] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[571]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[572] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[572]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[573] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[573]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[574] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[574]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[575] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[575]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[576] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[576]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[577] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[577]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[578] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[578]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[579] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[579]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[57] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[21]),
        .Q(LOCKSTEP_Out[57]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[580] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[580]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[581] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[581]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[582] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[582]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[583] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[583]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[584] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[584]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[585] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[585]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[586] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[586]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[587] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[587]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[588] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[588]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[589] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[589]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[58] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[22]),
        .Q(LOCKSTEP_Out[58]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[590] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[590]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[591] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[591]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[592] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[592]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[593] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[593]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[594] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[594]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[595] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[595]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[596] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[596]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[597] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[597]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[598] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[598]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[599] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[599]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[59] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[23]),
        .Q(LOCKSTEP_Out[59]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[1]),
        .Q(LOCKSTEP_Out[5]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[600] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[600]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[601] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[601]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[602] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[602]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[603] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[603]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[604] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[604]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[605] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[605]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[606] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[606]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[607] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[607]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[608] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[608]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[609] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[609]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[60] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[24]),
        .Q(LOCKSTEP_Out[60]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[610] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[610]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[611] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[611]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[612] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[612]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[613] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[613]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[614] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[614]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[615] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[615]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[616] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[616]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[617] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[617]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[618] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[618]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[619] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[619]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[61] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[25]),
        .Q(LOCKSTEP_Out[61]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[620] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[620]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[621] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[621]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[622] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[622]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[623] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[623]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[624] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[624]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[625] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[625]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[626] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[626]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[627] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[627]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[628] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[628]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[629] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[629]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[62] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[26]),
        .Q(LOCKSTEP_Out[62]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[630] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[630]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[631] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[631]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[632] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[632]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[633] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[633]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[634] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[634]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[635] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[635]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[636] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[636]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[637] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[637]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[638] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[638]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[639] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[639]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[63] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[27]),
        .Q(LOCKSTEP_Out[63]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[640] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[640]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[641] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[641]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[642] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[642]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[643] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[643]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[644] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[644]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[645] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[645]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[646] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[646]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[647] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[647]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[648] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[648]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[649] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[649]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[64] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[28]),
        .Q(LOCKSTEP_Out[64]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[650] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[650]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[651] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[651]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[652] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[652]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[653] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[653]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[654] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[654]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[655] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[655]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[656] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[656]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[657] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[657]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[658] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[658]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[659] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[659]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[65] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[29]),
        .Q(LOCKSTEP_Out[65]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[660] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[660]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[661] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[661]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[662] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[662]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[663] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[663]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[664] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[664]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[665] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[665]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[666] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[666]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[667] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[667]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[668] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[668]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[669] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[669]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[66] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[30]),
        .Q(LOCKSTEP_Out[66]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[670] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[670]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[671] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[671]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[672] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[672]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[673] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[673]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[674] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[674]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[675] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[675]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[676] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[676]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[677] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[677]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[678] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[678]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[679] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[679]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[67] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[31]),
        .Q(LOCKSTEP_Out[67]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[680] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[680]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[681] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[681]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[682] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[682]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[683] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[683]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[684] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[684]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[685] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[685]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[686] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[686]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[687] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[687]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[688] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[688]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[689] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[689]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[68] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[0]),
        .Q(LOCKSTEP_Out[68]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[690] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[690]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[691] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[691]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[692] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[692]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[693] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[693]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[694] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[694]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[695] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[695]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[696] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[696]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[697] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[697]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[698] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[698]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[699] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[699]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[69] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[1]),
        .Q(LOCKSTEP_Out[69]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[2]),
        .Q(LOCKSTEP_Out[6]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[700] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[700]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[701] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[701]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[702] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[702]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[703] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[703]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[704] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[704]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[705] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[705]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[706] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[706]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[707] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[707]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[708] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[708]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[709] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[709]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[70] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[2]),
        .Q(LOCKSTEP_Out[70]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[710] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[710]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[711] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[711]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[712] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[712]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[713] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[713]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[714] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[714]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[715] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[715]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[716] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[716]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[717] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[717]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[718] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[718]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[719] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[719]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[71] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[3]),
        .Q(LOCKSTEP_Out[71]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[720] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[720]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[721] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[721]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[722] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[722]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[723] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[723]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[724] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[724]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[725] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[725]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[726] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[726]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[727] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[727]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[728] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[728]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[729] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[729]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[72] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[4]),
        .Q(LOCKSTEP_Out[72]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[730] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[730]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[731] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[731]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[732] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[732]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[733] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[733]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[734] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[734]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[735] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[735]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[736] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[736]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[737] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[737]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[738] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[738]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[739] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[739]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[73] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[5]),
        .Q(LOCKSTEP_Out[73]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[740] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[740]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[741] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[741]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[742] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[742]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[743] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[743]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[744] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[744]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[745] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[745]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[746] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[746]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[747] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[747]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[748] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[748]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[749] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[749]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[74] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[6]),
        .Q(LOCKSTEP_Out[74]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[750] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[750]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[751] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[751]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[752] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[752]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[753] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[753]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[754] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[754]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[755] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[755]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[756] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[756]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[757] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[757]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[758] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[758]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[759] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[759]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[75] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[7]),
        .Q(LOCKSTEP_Out[75]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[760] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[760]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[761] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[761]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[762] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[762]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[763] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[763]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[764] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[764]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[765] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[765]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[766] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[766]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[767] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[767]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[768] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[768]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[769] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[769]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[76] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[8]),
        .Q(LOCKSTEP_Out[76]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[770] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[770]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[771] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[771]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[772] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[772]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[773] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[773]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[774] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[774]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[775] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[775]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[776] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[776]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[777] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[777]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[778] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[778]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[779] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[779]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[77] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[9]),
        .Q(LOCKSTEP_Out[77]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[780] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[780]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[781] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[781]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[782] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[782]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[783] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[783]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[784] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[784]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[785] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[785]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[786] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[786]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[787] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[787]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[788] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[788]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[789] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[789]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[78] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[10]),
        .Q(LOCKSTEP_Out[78]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[790] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[790]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[791] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[791]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[792] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[792]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[793] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[793]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[794] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[794]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[795] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[795]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[796] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[796]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[797] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[797]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[798] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[798]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[799] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[799]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[79] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[11]),
        .Q(LOCKSTEP_Out[79]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[3]),
        .Q(LOCKSTEP_Out[7]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[800] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[800]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[801] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[801]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[802] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[802]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[803] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[803]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[804] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[804]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[805] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[805]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[806] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[806]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[807] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[807]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[808] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[808]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[809] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[809]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[80] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[12]),
        .Q(LOCKSTEP_Out[80]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[810] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[810]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[811] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[811]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[812] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[812]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[813] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[813]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[814] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[814]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[815] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[815]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[816] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[816]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[817] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[817]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[818] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[818]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[819] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[819]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[81] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[13]),
        .Q(LOCKSTEP_Out[81]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[820] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[820]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[821] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[821]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[822] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[822]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[823] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[823]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[824] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[824]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[825] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[825]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[826] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[826]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[827] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[827]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[828] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[828]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[829] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[829]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[82] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[14]),
        .Q(LOCKSTEP_Out[82]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[830] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[830]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[831] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[831]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[832] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[832]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[833] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[833]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[834] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[834]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[835] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[835]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[836] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[836]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[837] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[837]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[838] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[838]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[839] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[839]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[83] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[15]),
        .Q(LOCKSTEP_Out[83]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[840] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[840]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[841] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[841]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[842] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[842]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[843] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[843]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[844] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[844]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[845] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[845]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[846] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[846]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[847] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[847]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[848] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[848]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[849] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[849]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[84] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[16]),
        .Q(LOCKSTEP_Out[84]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[850] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[850]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[851] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[851]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[852] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[852]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[853] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[853]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[854] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[854]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[855] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[855]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[856] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[856]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[857] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[857]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[858] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[858]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[859] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[859]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[85] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[17]),
        .Q(LOCKSTEP_Out[85]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[860] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[860]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[861] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[861]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[862] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[862]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[863] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[863]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[864] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[864]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[865] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[865]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[866] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[866]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[867] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[867]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[868] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[868]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[869] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[869]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[86] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[18]),
        .Q(LOCKSTEP_Out[86]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[870] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[870]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[871] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[871]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[872] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[872]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[873] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[873]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[874] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[874]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[875] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[875]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[876] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[876]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[877] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[877]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[878] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[878]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[879] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[879]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[87] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[19]),
        .Q(LOCKSTEP_Out[87]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[880] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[880]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[881] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[881]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[882] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[882]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[883] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[883]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[884] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[884]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[885] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[885]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[886] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[886]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[887] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[887]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[888] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[888]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[889] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[889]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[88] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[20]),
        .Q(LOCKSTEP_Out[88]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[890] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[890]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[891] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[891]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[892] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[892]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[893] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[893]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[894] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[894]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[895] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[895]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[896] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[31]),
        .Q(LOCKSTEP_Out[896]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[897] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[30]),
        .Q(LOCKSTEP_Out[897]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[898] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[29]),
        .Q(LOCKSTEP_Out[898]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[899] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[28]),
        .Q(LOCKSTEP_Out[899]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[89] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[21]),
        .Q(LOCKSTEP_Out[89]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[4]),
        .Q(LOCKSTEP_Out[8]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[900] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[27]),
        .Q(LOCKSTEP_Out[900]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[901] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[26]),
        .Q(LOCKSTEP_Out[901]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[902] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[25]),
        .Q(LOCKSTEP_Out[902]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[903] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[24]),
        .Q(LOCKSTEP_Out[903]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[904] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[23]),
        .Q(LOCKSTEP_Out[904]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[905] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[22]),
        .Q(LOCKSTEP_Out[905]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[906] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[21]),
        .Q(LOCKSTEP_Out[906]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[907] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[20]),
        .Q(LOCKSTEP_Out[907]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[908] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[19]),
        .Q(LOCKSTEP_Out[908]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[909] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[18]),
        .Q(LOCKSTEP_Out[909]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[90] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[22]),
        .Q(LOCKSTEP_Out[90]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[910] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[17]),
        .Q(LOCKSTEP_Out[910]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[911] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[16]),
        .Q(LOCKSTEP_Out[911]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[912] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[15]),
        .Q(LOCKSTEP_Out[912]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[913] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[14]),
        .Q(LOCKSTEP_Out[913]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[914] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[13]),
        .Q(LOCKSTEP_Out[914]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[915] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[12]),
        .Q(LOCKSTEP_Out[915]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[916] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[11]),
        .Q(LOCKSTEP_Out[916]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[917] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[10]),
        .Q(LOCKSTEP_Out[917]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[918] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[9]),
        .Q(LOCKSTEP_Out[918]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[919] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[8]),
        .Q(LOCKSTEP_Out[919]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[91] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[23]),
        .Q(LOCKSTEP_Out[91]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[920] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[7]),
        .Q(LOCKSTEP_Out[920]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[921] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[6]),
        .Q(LOCKSTEP_Out[921]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[922] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[5]),
        .Q(LOCKSTEP_Out[922]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[923] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[4]),
        .Q(LOCKSTEP_Out[923]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[924] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[3]),
        .Q(LOCKSTEP_Out[924]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[925] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[2]),
        .Q(LOCKSTEP_Out[925]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[926] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[1]),
        .Q(LOCKSTEP_Out[926]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[927] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[0]),
        .Q(LOCKSTEP_Out[927]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[928] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[928]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[929] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[929]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[92] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[24]),
        .Q(LOCKSTEP_Out[92]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[930] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[930]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[931] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[931]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[932] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[932]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[933] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[933]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[934] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[934]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[935] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[935]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[936] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[936]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[937] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[937]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[938] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[938]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[939] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[939]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[93] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[25]),
        .Q(LOCKSTEP_Out[93]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[940] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[940]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[941] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[941]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[942] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[942]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[943] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[943]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[944] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[944]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[945] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[945]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[946] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[946]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[947] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[947]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[948] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[948]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[949] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[949]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[94] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[26]),
        .Q(LOCKSTEP_Out[94]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[950] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[950]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[951] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[951]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[952] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[952]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[953] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWVALID),
        .Q(LOCKSTEP_Out[953]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[954] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[31]),
        .Q(LOCKSTEP_Out[954]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[955] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[30]),
        .Q(LOCKSTEP_Out[955]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[956] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[29]),
        .Q(LOCKSTEP_Out[956]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[957] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[28]),
        .Q(LOCKSTEP_Out[957]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[958] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[27]),
        .Q(LOCKSTEP_Out[958]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[959] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[26]),
        .Q(LOCKSTEP_Out[959]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[95] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[27]),
        .Q(LOCKSTEP_Out[95]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[960] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[25]),
        .Q(LOCKSTEP_Out[960]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[961] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[24]),
        .Q(LOCKSTEP_Out[961]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[962] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[23]),
        .Q(LOCKSTEP_Out[962]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[963] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[22]),
        .Q(LOCKSTEP_Out[963]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[964] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[21]),
        .Q(LOCKSTEP_Out[964]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[965] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[20]),
        .Q(LOCKSTEP_Out[965]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[966] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[19]),
        .Q(LOCKSTEP_Out[966]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[967] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[18]),
        .Q(LOCKSTEP_Out[967]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[968] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[17]),
        .Q(LOCKSTEP_Out[968]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[969] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[16]),
        .Q(LOCKSTEP_Out[969]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[96] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[28]),
        .Q(LOCKSTEP_Out[96]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[970] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[15]),
        .Q(LOCKSTEP_Out[970]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[971] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[14]),
        .Q(LOCKSTEP_Out[971]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[972] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[13]),
        .Q(LOCKSTEP_Out[972]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[973] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[12]),
        .Q(LOCKSTEP_Out[973]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[974] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[11]),
        .Q(LOCKSTEP_Out[974]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[975] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[10]),
        .Q(LOCKSTEP_Out[975]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[976] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[9]),
        .Q(LOCKSTEP_Out[976]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[977] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[8]),
        .Q(LOCKSTEP_Out[977]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[978] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[7]),
        .Q(LOCKSTEP_Out[978]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[979] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[6]),
        .Q(LOCKSTEP_Out[979]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[97] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[29]),
        .Q(LOCKSTEP_Out[97]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[980] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[5]),
        .Q(LOCKSTEP_Out[980]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[981] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[4]),
        .Q(LOCKSTEP_Out[981]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[982] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[3]),
        .Q(LOCKSTEP_Out[982]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[983] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[2]),
        .Q(LOCKSTEP_Out[983]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[984] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[1]),
        .Q(LOCKSTEP_Out[984]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[985] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[0]),
        .Q(LOCKSTEP_Out[985]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[986] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[3]),
        .Q(LOCKSTEP_Out[986]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[987] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[2]),
        .Q(LOCKSTEP_Out[987]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[988] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[1]),
        .Q(LOCKSTEP_Out[988]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[989] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[0]),
        .Q(LOCKSTEP_Out[989]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[98] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[30]),
        .Q(LOCKSTEP_Out[98]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[990] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[990]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[991] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WVALID),
        .Q(LOCKSTEP_Out[991]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[992] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(LOCKSTEP_Out[992]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[993] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(LOCKSTEP_Out[993]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[994] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[31]),
        .Q(LOCKSTEP_Out[994]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[995] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[30]),
        .Q(LOCKSTEP_Out[995]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[996] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[29]),
        .Q(LOCKSTEP_Out[996]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[997] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[28]),
        .Q(LOCKSTEP_Out[997]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[998] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[27]),
        .Q(LOCKSTEP_Out[998]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[999] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARADDR[26]),
        .Q(LOCKSTEP_Out[999]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[99] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[31]),
        .Q(LOCKSTEP_Out[99]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[5]),
        .Q(LOCKSTEP_Out[9]),
        .R(Reset));
  system_microblaze_0_0_MicroBlaze_Core MicroBlaze_Core_I
       (.Clk(Clk),
        .D({\^LOCKSTEP_Master_Out [10],IFetch,I_AS,Instr_Addr[0],Instr_Addr[1],Instr_Addr[2],Instr_Addr[3],Instr_Addr[4],Instr_Addr[5],Instr_Addr[6],Instr_Addr[7],Instr_Addr[8],Instr_Addr[9],Instr_Addr[10],Instr_Addr[11],Instr_Addr[12],Instr_Addr[13],Instr_Addr[14],Instr_Addr[15],Instr_Addr[16],Instr_Addr[17],Instr_Addr[18],Instr_Addr[19],Instr_Addr[20],Instr_Addr[21],Instr_Addr[22],Instr_Addr[23],Instr_Addr[24],Instr_Addr[25],Instr_Addr[26],Instr_Addr[27],Instr_Addr[28],Instr_Addr[29],Instr_Addr[30],Instr_Addr[31],Data_Addr[0],Data_Addr[1],Data_Addr[2],Data_Addr[3],Data_Addr[4],Data_Addr[5],Data_Addr[6],Data_Addr[7],Data_Addr[8],Data_Addr[9],Data_Addr[10],Data_Addr[11],Data_Addr[12],Data_Addr[13],Data_Addr[14],Data_Addr[15],Data_Addr[16],Data_Addr[17],Data_Addr[18],Data_Addr[19],Data_Addr[20],Data_Addr[21],Data_Addr[22],Data_Addr[23],Data_Addr[24],Data_Addr[25],Data_Addr[26],Data_Addr[27],Data_Addr[28],Data_Addr[29],Data_Addr[30],Data_Addr[31],Data_Write[0],Data_Write[1],Data_Write[2],Data_Write[3],Data_Write[4],Data_Write[5],Data_Write[6],Data_Write[7],Data_Write[8],Data_Write[9],Data_Write[10],Data_Write[11],Data_Write[12],Data_Write[13],Data_Write[14],Data_Write[15],Data_Write[16],Data_Write[17],Data_Write[18],Data_Write[19],Data_Write[20],Data_Write[21],Data_Write[22],Data_Write[23],Data_Write[24],Data_Write[25],Data_Write[26],Data_Write[27],Data_Write[28],Data_Write[29],Data_Write[30],Data_Write[31],D_AS,Read_Strobe,Write_Strobe,Byte_Enable[0],Byte_Enable[1],Byte_Enable[2],Byte_Enable[3],M_AXI_DP_ARADDR,M_AXI_DP_AWVALID,M_AXI_DP_WDATA,M_AXI_DP_WSTRB,M_AXI_DP_WVALID,M_AXI_DP_ARVALID,Trace_Instruction[0],Trace_Instruction[1],Trace_Instruction[2],Trace_Instruction[3],Trace_Instruction[4],Trace_Instruction[5],Trace_Instruction[6],Trace_Instruction[7],Trace_Instruction[8],Trace_Instruction[9],Trace_Instruction[10],Trace_Instruction[11],Trace_Instruction[12],Trace_Instruction[13],Trace_Instruction[14],Trace_Instruction[15],Trace_Instruction[16],Trace_Instruction[17],Trace_Instruction[18],Trace_Instruction[19],Trace_Instruction[20],Trace_Instruction[21],Trace_Instruction[22],Trace_Instruction[23],Trace_Instruction[24],Trace_Instruction[25],Trace_Instruction[26],Trace_Instruction[27],Trace_Instruction[28],Trace_Instruction[29],Trace_Instruction[30],Trace_Instruction[31],Trace_Valid_Instr,Trace_PC[0],Trace_PC[1],Trace_PC[2],Trace_PC[3],Trace_PC[4],Trace_PC[5],Trace_PC[6],Trace_PC[7],Trace_PC[8],Trace_PC[9],Trace_PC[10],Trace_PC[11],Trace_PC[12],Trace_PC[13],Trace_PC[14],Trace_PC[15],Trace_PC[16],Trace_PC[17],Trace_PC[18],Trace_PC[19],Trace_PC[20],Trace_PC[21],Trace_PC[22],Trace_PC[23],Trace_PC[24],Trace_PC[25],Trace_PC[26],Trace_PC[27],Trace_PC[28],Trace_PC[29],Trace_PC[30],Trace_PC[31],Trace_Reg_Write,Trace_Reg_Addr[0],Trace_Reg_Addr[1],Trace_Reg_Addr[2],Trace_Reg_Addr[3],Trace_Reg_Addr[4],\^Trace_MSR_Reg [11],\^Trace_MSR_Reg [12],\^Trace_MSR_Reg [13],Trace_New_Reg_Value[0],Trace_New_Reg_Value[1],Trace_New_Reg_Value[2],Trace_New_Reg_Value[3],Trace_New_Reg_Value[4],Trace_New_Reg_Value[5],Trace_New_Reg_Value[6],Trace_New_Reg_Value[7],Trace_New_Reg_Value[8],Trace_New_Reg_Value[9],Trace_New_Reg_Value[10],Trace_New_Reg_Value[11],Trace_New_Reg_Value[12],Trace_New_Reg_Value[13],Trace_New_Reg_Value[14],Trace_New_Reg_Value[15],Trace_New_Reg_Value[16],Trace_New_Reg_Value[17],Trace_New_Reg_Value[18],Trace_New_Reg_Value[19],Trace_New_Reg_Value[20],Trace_New_Reg_Value[21],Trace_New_Reg_Value[22],Trace_New_Reg_Value[23],Trace_New_Reg_Value[24],Trace_New_Reg_Value[25],Trace_New_Reg_Value[26],Trace_New_Reg_Value[27],Trace_New_Reg_Value[28],Trace_New_Reg_Value[29],Trace_New_Reg_Value[30],Trace_New_Reg_Value[31],Trace_Exception_Taken,Trace_Exception_Kind[0],Trace_Exception_Kind[1],Trace_Exception_Kind[2],Trace_Exception_Kind[3],Trace_Exception_Kind[4],Trace_Jump_Taken,Trace_Delay_Slot,Trace_Data_Address[0],Trace_Data_Address[1],Trace_Data_Address[2],Trace_Data_Address[3],Trace_Data_Address[4],Trace_Data_Address[5],Trace_Data_Address[6],Trace_Data_Address[7],Trace_Data_Address[8],Trace_Data_Address[9],Trace_Data_Address[10],Trace_Data_Address[11],Trace_Data_Address[12],Trace_Data_Address[13],Trace_Data_Address[14],Trace_Data_Address[15],Trace_Data_Address[16],Trace_Data_Address[17],Trace_Data_Address[18],Trace_Data_Address[19],Trace_Data_Address[20],Trace_Data_Address[21],Trace_Data_Address[22],Trace_Data_Address[23],Trace_Data_Address[24],Trace_Data_Address[25],Trace_Data_Address[26],Trace_Data_Address[27],Trace_Data_Address[28],Trace_Data_Address[29],Trace_Data_Address[30],Trace_Data_Address[31],Trace_Data_Write_Value[0],Trace_Data_Write_Value[1],Trace_Data_Write_Value[2],Trace_Data_Write_Value[3],Trace_Data_Write_Value[4],Trace_Data_Write_Value[5],Trace_Data_Write_Value[6],Trace_Data_Write_Value[7],Trace_Data_Write_Value[8],Trace_Data_Write_Value[9],Trace_Data_Write_Value[10],Trace_Data_Write_Value[11],Trace_Data_Write_Value[12],Trace_Data_Write_Value[13],Trace_Data_Write_Value[14],Trace_Data_Write_Value[15],Trace_Data_Write_Value[16],Trace_Data_Write_Value[17],Trace_Data_Write_Value[18],Trace_Data_Write_Value[19],Trace_Data_Write_Value[20],Trace_Data_Write_Value[21],Trace_Data_Write_Value[22],Trace_Data_Write_Value[23],Trace_Data_Write_Value[24],Trace_Data_Write_Value[25],Trace_Data_Write_Value[26],Trace_Data_Write_Value[27],Trace_Data_Write_Value[28],Trace_Data_Write_Value[29],Trace_Data_Write_Value[30],Trace_Data_Write_Value[31],Trace_Data_Byte_Enable[0],Trace_Data_Byte_Enable[1],Trace_Data_Byte_Enable[2],Trace_Data_Byte_Enable[3],Trace_Data_Access,Trace_Data_Read,Trace_Data_Write,Trace_Jump_Hit}),
        .DReady(DReady),
        .DWait(DWait),
        .Data_Read(Data_Read),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .Dbg_Reg_En(Dbg_Reg_En),
        .\Dbg_Reg_En[2]_0 (Dbg_TDO_INST_0_i_6_n_0),
        .\Dbg_Reg_En[2]_1 (Dbg_TDO_INST_0_i_12_n_0),
        .\Dbg_Reg_En_2__s_port_] (Dbg_TDO_INST_0_i_4_n_0),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In({Dbg_Trig_Ack_In[0],Dbg_Trig_Ack_In[1]}),
        .Dbg_Trig_Ack_Out({\^Dbg_Trig_Ack_Out [0],\^Dbg_Trig_Ack_Out [1]}),
        .Dbg_Trig_In({\^Dbg_Trig_In [0],\^Dbg_Trig_In [1]}),
        .Dbg_Trig_Out({Dbg_Trig_Out[0],Dbg_Trig_Out[1]}),
        .Dbg_Update(Dbg_Update),
        .Debug_Rst(Debug_Rst),
        .IReady(IReady),
        .Instr(Instr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out({\^LOCKSTEP_Master_Out [1],\^LOCKSTEP_Master_Out [3],\^LOCKSTEP_Master_Out [4],\^LOCKSTEP_Master_Out [5],\^LOCKSTEP_Master_Out [6],\^LOCKSTEP_Master_Out [7],\^LOCKSTEP_Master_Out [8],\^LOCKSTEP_Master_Out [11],\^LOCKSTEP_Master_Out [12],\^LOCKSTEP_Master_Out [13],\^LOCKSTEP_Master_Out [14],\^LOCKSTEP_Master_Out [15],\^LOCKSTEP_Master_Out [16],\^LOCKSTEP_Master_Out [17],\^LOCKSTEP_Master_Out [18],\^LOCKSTEP_Master_Out [19],\^LOCKSTEP_Master_Out [20],\^LOCKSTEP_Master_Out [21],\^LOCKSTEP_Master_Out [22],\^LOCKSTEP_Master_Out [23],\^LOCKSTEP_Master_Out [24],\^LOCKSTEP_Master_Out [25],\^LOCKSTEP_Master_Out [26],\^LOCKSTEP_Master_Out [27],\^LOCKSTEP_Master_Out [28],\^LOCKSTEP_Master_Out [29],\^LOCKSTEP_Master_Out [30],\^LOCKSTEP_Master_Out [31],\^LOCKSTEP_Master_Out [32],\^LOCKSTEP_Master_Out [33],\^LOCKSTEP_Master_Out [34],\^LOCKSTEP_Master_Out [35],\^LOCKSTEP_Master_Out [36],\^LOCKSTEP_Master_Out [37],\^LOCKSTEP_Master_Out [38],\^LOCKSTEP_Master_Out [39],\^LOCKSTEP_Master_Out [40],\^LOCKSTEP_Master_Out [41],\^LOCKSTEP_Master_Out [42],\^LOCKSTEP_Master_Out [43],\^LOCKSTEP_Master_Out [44],\^LOCKSTEP_Master_Out [45]}),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Mb_Reset(Mb_Reset),
        .Reset(Reset),
        .Reset_Mode(Reset_Mode),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .Sleep(Sleep),
        .Trace_WB_Jump_Hit_reg(Trace_MEM_PipeRun),
        .\Using_FPGA.Native (Trace_EX_PipeRun),
        .Wakeup(Wakeup),
        .use_Reg_Neg_S_reg(Trace_OF_PipeRun));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MicroBlaze_Core" *) 
module system_microblaze_0_0_MicroBlaze_Core
   (use_Reg_Neg_S_reg,
    \Using_FPGA.Native ,
    Trace_WB_Jump_Hit_reg,
    D,
    Sleep,
    Dbg_TDO,
    LOCKSTEP_Master_Out,
    Interrupt_Ack,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    Clk,
    Dbg_Clk,
    Dbg_Update,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Stop,
    Dbg_Capture,
    Debug_Rst,
    Reset,
    Mb_Reset,
    Dbg_Disable,
    DWait,
    DReady,
    M_AXI_DP_BVALID,
    M_AXI_DP_RVALID,
    Scan_Reset,
    Scan_Reset_Sel,
    Reset_Mode,
    IReady,
    \Dbg_Reg_En_2__s_port_] ,
    \Dbg_Reg_En[2]_0 ,
    Dbg_Reg_En,
    Wakeup,
    \Dbg_Reg_En[2]_1 ,
    Interrupt,
    Dbg_Shift,
    Instr,
    Dbg_TDI,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WREADY,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RDATA,
    Interrupt_Address,
    Data_Read);
  output use_Reg_Neg_S_reg;
  output \Using_FPGA.Native ;
  output Trace_WB_Jump_Hit_reg;
  output [362:0]D;
  output Sleep;
  output Dbg_TDO;
  output [41:0]LOCKSTEP_Master_Out;
  output [0:1]Interrupt_Ack;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  input Clk;
  input Dbg_Clk;
  input Dbg_Update;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input Dbg_Stop;
  input Dbg_Capture;
  input Debug_Rst;
  input Reset;
  input Mb_Reset;
  input Dbg_Disable;
  input DWait;
  input DReady;
  input M_AXI_DP_BVALID;
  input M_AXI_DP_RVALID;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input [0:1]Reset_Mode;
  input IReady;
  input \Dbg_Reg_En_2__s_port_] ;
  input \Dbg_Reg_En[2]_0 ;
  input [0:7]Dbg_Reg_En;
  input [0:1]Wakeup;
  input \Dbg_Reg_En[2]_1 ;
  input Interrupt;
  input Dbg_Shift;
  input [0:31]Instr;
  input Dbg_TDI;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_ARREADY;
  input [31:0]M_AXI_DP_RDATA;
  input [0:31]Interrupt_Address;
  input [0:31]Data_Read;

  wire Clk;
  wire [362:0]D;
  wire DReady;
  wire DWait;
  wire [0:31]Data_Read;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire [0:7]Dbg_Reg_En;
  wire \Dbg_Reg_En[2]_0 ;
  wire \Dbg_Reg_En[2]_1 ;
  wire Dbg_Reg_En_2__s_net_1;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Debug_Rst;
  wire \Decode_I/flush_pipe ;
  wire IReady;
  wire [0:31]Instr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [41:0]LOCKSTEP_Master_Out;
  wire MEM_Sel_MEM_Res;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire Mb_Reset;
  wire Reset;
  wire Reset_DFF_n_3;
  wire Reset_DFF_n_4;
  wire Reset_DFF_n_5;
  wire [0:1]Reset_Mode;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire Sleep;
  wire Synced;
  wire Trace_WB_Jump_Hit_reg;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf/Rst18_out ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf/saved_reset_mode_dbg_halt ;
  wire \Using_FPGA.Native ;
  wire [0:1]Wakeup;
  wire use_Reg_Neg_S_reg;
  wire wb_exception;

  assign Dbg_Reg_En_2__s_net_1 = \Dbg_Reg_En_2__s_port_] ;
  system_microblaze_0_0_MicroBlaze_GTi \Performance.Core 
       (.Clk(Clk),
        .D(D),
        .DReady(DReady),
        .DWait(DWait),
        .Data_Read(Data_Read),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .Dbg_Reg_En(Dbg_Reg_En),
        .\Dbg_Reg_En[2]_0 (\Dbg_Reg_En[2]_0 ),
        .\Dbg_Reg_En[2]_1 (\Dbg_Reg_En[2]_1 ),
        .\Dbg_Reg_En_2__s_port_] (Dbg_Reg_En_2__s_net_1),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Dbg_Update(Dbg_Update),
        .E(\Using_FPGA.Native ),
        .IReady(IReady),
        .Instr(Instr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .MEM_Sel_MEM_Res(MEM_Sel_MEM_Res),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Reset_Mode(Reset_Mode),
        .Rst18_out(\Use_Debug_Logic.Master_Core.Debug_Perf/Rst18_out ),
        .SR(Reset_DFF_n_4),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .Sleep(Sleep),
        .\Synchronize.use_sync_reset.sync_reg[2] (Reset_DFF_n_3),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (Reset_DFF_n_5),
        .Trace_WB_Jump_Hit_reg(Trace_WB_Jump_Hit_reg),
        .Wakeup(Wakeup),
        .flush_pipe(\Decode_I/flush_pipe ),
        .out(Synced),
        .saved_reset_mode_dbg_halt(\Use_Debug_Logic.Master_Core.Debug_Perf/saved_reset_mode_dbg_halt ),
        .use_Reg_Neg_S_reg(use_Reg_Neg_S_reg),
        .wb_exception(wb_exception));
  system_microblaze_0_0_mb_sync_bit Reset_DFF
       (.Clk(Clk),
        .DReady(DReady),
        .Dbg_Disable(Dbg_Disable),
        .Debug_Rst(Debug_Rst),
        .MEM_Sel_MEM_Res(MEM_Sel_MEM_Res),
        .Mb_Reset(Mb_Reset),
        .Reset(Reset),
        .Reset_Mode(Reset_Mode),
        .Rst18_out(\Use_Debug_Logic.Master_Core.Debug_Perf/Rst18_out ),
        .SR(Reset_DFF_n_4),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[31] (Reset_DFF_n_5),
        .flush_pipe(\Decode_I/flush_pipe ),
        .out(Synced),
        .saved_reset_mode_dbg_halt(\Use_Debug_Logic.Master_Core.Debug_Perf/saved_reset_mode_dbg_halt ),
        .saved_reset_mode_dbg_halt_reg(Reset_DFF_n_3),
        .wb_exception(wb_exception));
endmodule

(* ORIG_REF_NAME = "MicroBlaze_GTi" *) 
module system_microblaze_0_0_MicroBlaze_GTi
   (use_Reg_Neg_S_reg,
    E,
    Trace_WB_Jump_Hit_reg,
    wb_exception,
    D,
    MEM_Sel_MEM_Res,
    saved_reset_mode_dbg_halt,
    Sleep,
    Dbg_TDO,
    LOCKSTEP_Master_Out,
    Interrupt_Ack,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    out,
    Clk,
    Dbg_Clk,
    Rst18_out,
    Dbg_Update,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Stop,
    Dbg_Capture,
    flush_pipe,
    \Synchronize.use_sync_reset.sync_reg[2] ,
    Dbg_Disable,
    DWait,
    DReady,
    M_AXI_DP_BVALID,
    M_AXI_DP_RVALID,
    Scan_Reset,
    Scan_Reset_Sel,
    Reset_Mode,
    IReady,
    \Dbg_Reg_En_2__s_port_] ,
    \Dbg_Reg_En[2]_0 ,
    Dbg_Reg_En,
    Wakeup,
    \Dbg_Reg_En[2]_1 ,
    Interrupt,
    Dbg_Shift,
    SR,
    Instr,
    Dbg_TDI,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WREADY,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RDATA,
    Interrupt_Address,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    Data_Read);
  output use_Reg_Neg_S_reg;
  output [0:0]E;
  output [0:0]Trace_WB_Jump_Hit_reg;
  output wb_exception;
  output [362:0]D;
  output MEM_Sel_MEM_Res;
  output saved_reset_mode_dbg_halt;
  output Sleep;
  output Dbg_TDO;
  output [41:0]LOCKSTEP_Master_Out;
  output [0:1]Interrupt_Ack;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  input [0:0]out;
  input Clk;
  input Dbg_Clk;
  input Rst18_out;
  input Dbg_Update;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input Dbg_Stop;
  input Dbg_Capture;
  input flush_pipe;
  input \Synchronize.use_sync_reset.sync_reg[2] ;
  input Dbg_Disable;
  input DWait;
  input DReady;
  input M_AXI_DP_BVALID;
  input M_AXI_DP_RVALID;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input [0:1]Reset_Mode;
  input IReady;
  input \Dbg_Reg_En_2__s_port_] ;
  input \Dbg_Reg_En[2]_0 ;
  input [0:7]Dbg_Reg_En;
  input [0:1]Wakeup;
  input \Dbg_Reg_En[2]_1 ;
  input Interrupt;
  input Dbg_Shift;
  input [0:0]SR;
  input [0:31]Instr;
  input Dbg_TDI;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_ARREADY;
  input [31:0]M_AXI_DP_RDATA;
  input [0:31]Interrupt_Address;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input [0:31]Data_Read;

  wire \ALU_I/DI ;
  wire [0:0]\Byte_Doublet_Handle_gti_I/ex_byte_selects ;
  wire \Byte_Doublet_Handle_gti_I/ex_reverse_byteorder ;
  wire Clk;
  wire [362:0]D;
  wire DReady;
  wire DWait;
  wire Data_Flow_I_n_241;
  wire Data_Flow_I_n_242;
  wire Data_Flow_I_n_243;
  wire Data_Flow_I_n_280;
  wire Data_Flow_I_n_281;
  wire Data_Flow_I_n_282;
  wire Data_Flow_I_n_283;
  wire Data_Flow_I_n_284;
  wire Data_Flow_I_n_285;
  wire Data_Flow_I_n_286;
  wire Data_Flow_I_n_287;
  wire Data_Flow_I_n_288;
  wire Data_Flow_I_n_289;
  wire Data_Flow_I_n_290;
  wire Data_Flow_I_n_291;
  wire Data_Flow_I_n_292;
  wire Data_Flow_I_n_293;
  wire Data_Flow_I_n_294;
  wire Data_Flow_I_n_295;
  wire Data_Flow_I_n_312;
  wire Data_Flow_I_n_313;
  wire Data_Flow_I_n_314;
  wire Data_Flow_I_n_315;
  wire Data_Flow_I_n_316;
  wire Data_Flow_I_n_317;
  wire Data_Flow_I_n_318;
  wire Data_Flow_I_n_319;
  wire Data_Flow_I_n_320;
  wire Data_Flow_I_n_321;
  wire Data_Flow_I_n_322;
  wire Data_Flow_I_n_323;
  wire Data_Flow_I_n_324;
  wire Data_Flow_I_n_325;
  wire Data_Flow_I_n_326;
  wire Data_Flow_I_n_327;
  wire Data_Flow_I_n_328;
  wire Data_Flow_I_n_329;
  wire Data_Flow_I_n_33;
  wire Data_Flow_I_n_330;
  wire Data_Flow_I_n_331;
  wire Data_Flow_I_n_332;
  wire Data_Flow_I_n_333;
  wire Data_Flow_I_n_334;
  wire Data_Flow_I_n_335;
  wire Data_Flow_I_n_336;
  wire Data_Flow_I_n_337;
  wire Data_Flow_I_n_338;
  wire Data_Flow_I_n_339;
  wire Data_Flow_I_n_34;
  wire Data_Flow_I_n_340;
  wire Data_Flow_I_n_341;
  wire Data_Flow_I_n_342;
  wire Data_Flow_I_n_343;
  wire Data_Flow_I_n_344;
  wire Data_Flow_I_n_345;
  wire Data_Flow_I_n_396;
  wire Data_Flow_I_n_397;
  wire Data_Flow_I_n_398;
  wire \Data_Flow_Logic_I/R ;
  wire [0:31]Data_Read;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire [0:7]Dbg_Reg_En;
  wire \Dbg_Reg_En[2]_0 ;
  wire \Dbg_Reg_En[2]_1 ;
  wire Dbg_Reg_En_2__s_net_1;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Decode_I_n_300;
  wire Decode_I_n_301;
  wire Decode_I_n_304;
  wire Decode_I_n_305;
  wire Decode_I_n_326;
  wire Decode_I_n_327;
  wire Decode_I_n_328;
  wire Decode_I_n_329;
  wire Decode_I_n_330;
  wire Decode_I_n_331;
  wire Decode_I_n_332;
  wire Decode_I_n_333;
  wire Decode_I_n_334;
  wire Decode_I_n_335;
  wire Decode_I_n_336;
  wire Decode_I_n_337;
  wire Decode_I_n_338;
  wire Decode_I_n_339;
  wire Decode_I_n_340;
  wire Decode_I_n_343;
  wire Decode_I_n_345;
  wire Decode_I_n_35;
  wire Decode_I_n_353;
  wire Decode_I_n_355;
  wire Decode_I_n_356;
  wire Decode_I_n_357;
  wire Decode_I_n_358;
  wire Decode_I_n_359;
  wire Decode_I_n_360;
  wire Decode_I_n_361;
  wire Decode_I_n_363;
  wire Decode_I_n_364;
  wire Decode_I_n_365;
  wire Decode_I_n_366;
  wire Decode_I_n_367;
  wire Decode_I_n_368;
  wire Decode_I_n_369;
  wire Decode_I_n_370;
  wire Decode_I_n_371;
  wire Decode_I_n_372;
  wire Decode_I_n_373;
  wire Decode_I_n_374;
  wire Decode_I_n_375;
  wire Decode_I_n_376;
  wire Decode_I_n_377;
  wire Decode_I_n_378;
  wire Decode_I_n_379;
  wire Decode_I_n_380;
  wire Decode_I_n_381;
  wire Decode_I_n_382;
  wire Decode_I_n_383;
  wire Decode_I_n_384;
  wire Decode_I_n_385;
  wire Decode_I_n_386;
  wire Decode_I_n_387;
  wire Decode_I_n_388;
  wire Decode_I_n_389;
  wire Decode_I_n_390;
  wire Decode_I_n_391;
  wire Decode_I_n_392;
  wire Decode_I_n_393;
  wire Decode_I_n_394;
  wire [0:0]E;
  wire EX_ALU_Sel_Logic;
  wire EX_Enable_ALU;
  wire [0:31]EX_Fwd;
  wire IB_Ready;
  wire IReady;
  wire [0:31]Instr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [41:0]LOCKSTEP_Master_Out;
  wire [0:30]MEM_Fwd;
  wire [0:31]MEM_PC;
  wire MEM_Sel_MEM_Res;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID_i;
  wire M_AXI_DP_AWVALID_i1;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire \Operand_Select_I/I0 ;
  wire \Operand_Select_I/I1 ;
  wire \PreFetch_Buffer_I1/I041_out ;
  wire \PreFetch_Buffer_I1/I139_out ;
  wire [0:0]\PreFetch_Buffer_I1/if_predecode ;
  wire \PreFetch_Buffer_I1/p_1_in49_in ;
  wire [0:1]Reset_Mode;
  wire Rst18_out;
  wire [0:0]SR;
  wire SRI;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire Sleep;
  wire Sleep_Decode;
  wire \Synchronize.use_sync_reset.sync_reg[2] ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[2]_0 ;
  wire [0:0]Trace_WB_Jump_Hit_reg;
  wire \Use_DBUS.DAXI_Interface_I1_n_10 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_11 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_12 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_13 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_14 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_15 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_16 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_17 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_18 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_19 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_2 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_20 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_21 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_22 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_23 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_24 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_25 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_26 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_27 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_28 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_29 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_3 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_30 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_31 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_32 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_33 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_34 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_35 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_36 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_37 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_38 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_39 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_4 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_40 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_41 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_42 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_5 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_6 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_7 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_8 ;
  wire \Use_DBUS.DAXI_Interface_I1_n_9 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_0 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_10 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_11 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_13 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_15 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_2 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_3 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_5 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_6 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_61 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_62 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_63 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_7 ;
  wire [0:1]Wakeup;
  wire active_access_d1;
  wire dbg_clean_stop;
  wire dbg_state_i;
  wire dbg_stop_i;
  wire dbg_stop_if_delay_i;
  wire ex_Exception_Taken;
  wire [28:30]ex_MSR;
  wire ex_alu_carry;
  wire [0:1]ex_alu_op;
  wire ex_byte_access;
  wire ex_cmp_op;
  wire [30:31]ex_databus_addr_mmu;
  wire ex_doublet_access;
  wire ex_move_to_MSR_instr;
  wire ex_op1_cmp_equal;
  wire ex_op1_cmp_equal_n;
  wire [0:31]ex_op1_i;
  wire ex_op1_neg;
  wire ex_op1_zero;
  wire [31:31]ex_op2;
  wire [0:1]ex_sext_op;
  wire ex_swap_byte_instr;
  wire ex_unsigned_op;
  wire ex_use_carry;
  wire executing0;
  wire flush_pipe;
  wire [0:15]gpr_op1;
  wire [0:31]gpr_op2;
  wire [0:15]gpr_op3;
  wire [0:31]ib_data;
  wire [3:4]if_sel_input;
  wire [0:15]imm_reg;
  wire [0:1]instr_rd_reg;
  wire [0:31]interrupt_address_d1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire mem_Exception_Taken;
  wire [29:29]mem_MSR;
  wire mem_databus_access;
  wire mem_databus_read;
  wire mem_databus_ready;
  wire mem_databus_write;
  wire mem_daxi_exclusive_failed;
  wire [0:31]mem_ex_result;
  wire mem_sel_msr;
  wire \msr_reg_i/restore_wb_msr_to_ex ;
  wire [28:28]\msr_reg_i/wb_MSR_cmb ;
  wire no_sleeping;
  wire [28:30]of_MSR;
  wire of_Take_Interrupt;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [0:15]of_imm_data;
  wire [0:1]of_op1_sel;
  wire of_op1_sel_spr;
  wire [0:31]of_op2;
  wire [0:15]of_op3;
  wire [0:1]of_op3_sel;
  wire [0:31]of_pc;
  wire [0:0]of_predecode;
  wire of_write_imm_reg;
  wire [0:0]out;
  wire p_36_out;
  wire saved_reset_mode_dbg_halt;
  wire use_Reg_Neg_S_reg;
  wire wb_Halted;
  wire wb_byte_access;
  wire [0:31]wb_dlmb_valid_read_data;
  wire [0:15]wb_excep_return_addr;
  wire wb_exception;
  wire wb_gpr_wr_dbg;
  wire [0:15]wb_mem_result;
  wire wb_pc_valid;
  wire wb_piperun;
  wire wb_read_imm_reg;
  wire wb_read_imm_reg_1;
  wire wb_read_msb_doublet_sel;
  wire wb_sel_spr_shr;

  assign Dbg_Reg_En_2__s_net_1 = \Dbg_Reg_En_2__s_port_] ;
  system_microblaze_0_0_Data_Flow_gti Data_Flow_I
       (.ADDRD(D[119:115]),
        .Clk(Clk),
        .D({\Operand_Select_I/I0 ,Decode_I_n_326,Decode_I_n_327,Decode_I_n_328,Decode_I_n_329,Decode_I_n_330,Decode_I_n_331,Decode_I_n_332,Decode_I_n_333,Decode_I_n_334,Decode_I_n_335,Decode_I_n_336,Decode_I_n_337,Decode_I_n_338,Decode_I_n_339,Decode_I_n_340}),
        .DI(D[121]),
        .DI_0(\ALU_I/DI ),
        .\Data_Addr[0] ({D[327:264],D[223:188],D[152],D[114:112],D[95:80]}),
        .Dbg_Disable(Dbg_Disable),
        .E(of_write_imm_reg),
        .\EX_ALU_Op_reg[0] ({ex_alu_op[0],ex_alu_op[1]}),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .EX_Enable_ALU(EX_Enable_ALU),
        .EX_Fwd(EX_Fwd),
        .\EX_Op1_reg[24] (Decode_I_n_353),
        .\EX_Op2_reg[0] ({imm_reg[0],imm_reg[1],imm_reg[2],imm_reg[3],imm_reg[4],imm_reg[5],imm_reg[6],imm_reg[7],imm_reg[8],imm_reg[9],imm_reg[10],imm_reg[11],imm_reg[12],imm_reg[13],imm_reg[14],imm_reg[15]}),
        .\EX_Sext_Op_reg[0] ({ex_sext_op[0],ex_sext_op[1]}),
        .GPR_Op1({gpr_op1[0],gpr_op1[1],gpr_op1[2],gpr_op1[3],gpr_op1[4],gpr_op1[5],gpr_op1[6],gpr_op1[7],gpr_op1[8],gpr_op1[9],gpr_op1[10],gpr_op1[11],gpr_op1[12],gpr_op1[13],gpr_op1[14],gpr_op1[15]}),
        .GPR_Op2(gpr_op2),
        .GPR_Op3({gpr_op3[0],gpr_op3[1],gpr_op3[2],gpr_op3[3],gpr_op3[4],gpr_op3[5],gpr_op3[6],gpr_op3[7],gpr_op3[8],gpr_op3[9],gpr_op3[10],gpr_op3[11],gpr_op3[12],gpr_op3[13],gpr_op3[14],gpr_op3[15]}),
        .I1(\Operand_Select_I/I1 ),
        .Interrupt(Interrupt),
        .LO(ex_alu_carry),
        .\LOCKSTEP_Out_reg[3709] (D[151]),
        .\LOCKSTEP_Out_reg[3710] (D[150]),
        .\LOCKSTEP_Out_reg[3711] (D[149]),
        .\LOCKSTEP_Out_reg[3712] (D[148]),
        .\LOCKSTEP_Out_reg[3713] (D[147]),
        .\LOCKSTEP_Out_reg[3714] (D[146]),
        .\LOCKSTEP_Out_reg[3715] (D[145]),
        .\LOCKSTEP_Out_reg[3716] (D[144]),
        .\LOCKSTEP_Out_reg[3717] (D[143]),
        .\LOCKSTEP_Out_reg[3718] (D[142]),
        .\LOCKSTEP_Out_reg[3719] (D[141]),
        .\LOCKSTEP_Out_reg[3720] (D[140]),
        .\LOCKSTEP_Out_reg[3721] (D[139]),
        .\LOCKSTEP_Out_reg[3722] (D[138]),
        .\LOCKSTEP_Out_reg[3723] (D[137]),
        .\LOCKSTEP_Out_reg[3724] (D[136]),
        .\LOCKSTEP_Out_reg[3725] (D[135]),
        .\LOCKSTEP_Out_reg[3726] (D[134]),
        .\LOCKSTEP_Out_reg[3727] (D[133]),
        .\LOCKSTEP_Out_reg[3728] (D[132]),
        .\LOCKSTEP_Out_reg[3729] (D[131]),
        .\LOCKSTEP_Out_reg[3730] (D[130]),
        .\LOCKSTEP_Out_reg[3731] (D[129]),
        .\LOCKSTEP_Out_reg[3732] (D[128]),
        .\LOCKSTEP_Out_reg[3733] (D[127]),
        .\LOCKSTEP_Out_reg[3734] (D[126]),
        .\LOCKSTEP_Out_reg[3735] (D[125]),
        .\LOCKSTEP_Out_reg[3736] (D[124]),
        .\LOCKSTEP_Out_reg[3737] (D[123]),
        .\LOCKSTEP_Out_reg[3738] (D[122]),
        .\LOCKSTEP_Out_reg[3769] ({wb_excep_return_addr[0],wb_excep_return_addr[1],wb_excep_return_addr[2],wb_excep_return_addr[3],wb_excep_return_addr[4],wb_excep_return_addr[5],wb_excep_return_addr[6],wb_excep_return_addr[7],wb_excep_return_addr[8],wb_excep_return_addr[9],wb_excep_return_addr[10],wb_excep_return_addr[11],wb_excep_return_addr[12],wb_excep_return_addr[13],wb_excep_return_addr[14],wb_excep_return_addr[15]}),
        .\LOCKSTEP_Out_reg[3769]_0 ({wb_mem_result[0],wb_mem_result[1],wb_mem_result[2],wb_mem_result[3],wb_mem_result[4],wb_mem_result[5],wb_mem_result[6],wb_mem_result[7],wb_mem_result[8],wb_mem_result[9],wb_mem_result[10],wb_mem_result[11],wb_mem_result[12],wb_mem_result[13],wb_mem_result[14],wb_mem_result[15]}),
        .\LOCKSTEP_Out_reg[3792] ({Data_Flow_I_n_396,Data_Flow_I_n_397}),
        .\LOCKSTEP_Out_reg[3800] (Data_Flow_I_n_398),
        .\MEM_DataBus_Addr_reg[30] ({ex_databus_addr_mmu[30],ex_databus_addr_mmu[31]}),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (Decode_I_n_359),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Use_Debug_Logic.Master_Core.Debug_Perf_n_3 ),
        .Q(ex_op2),
        .R(\Data_Flow_Logic_I/R ),
        .SR(SR),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[16] (\Use_DBUS.DAXI_Interface_I1_n_16 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[17] (\Use_DBUS.DAXI_Interface_I1_n_14 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[18] (\Use_DBUS.DAXI_Interface_I1_n_12 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[19] (\Use_DBUS.DAXI_Interface_I1_n_10 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[20] (\Use_DBUS.DAXI_Interface_I1_n_8 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[21] (\Use_DBUS.DAXI_Interface_I1_n_6 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[22] (\Use_DBUS.DAXI_Interface_I1_n_4 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[23] (\Use_DBUS.DAXI_Interface_I1_n_2 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[24] (\Use_DBUS.DAXI_Interface_I1_n_17 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[25] (\Use_DBUS.DAXI_Interface_I1_n_15 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[26] (\Use_DBUS.DAXI_Interface_I1_n_13 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[27] (\Use_DBUS.DAXI_Interface_I1_n_11 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[28] (\Use_DBUS.DAXI_Interface_I1_n_9 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[29] (\Use_DBUS.DAXI_Interface_I1_n_7 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[30] (\Use_DBUS.DAXI_Interface_I1_n_5 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[31] (\Use_DBUS.DAXI_Interface_I1_n_3 ),
        .\Using_FPGA.Native ({ex_op1_i[0],ex_op1_i[1],ex_op1_i[2],ex_op1_i[3],ex_op1_i[4],ex_op1_i[5],ex_op1_i[6],ex_op1_i[7],ex_op1_i[8],ex_op1_i[9],ex_op1_i[10],ex_op1_i[11],ex_op1_i[12],ex_op1_i[13],ex_op1_i[14],ex_op1_i[15],ex_op1_i[16],ex_op1_i[17],ex_op1_i[18],ex_op1_i[19],ex_op1_i[20],ex_op1_i[21],ex_op1_i[22],ex_op1_i[23],ex_op1_i[24],ex_op1_i[25],ex_op1_i[26],ex_op1_i[27],ex_op1_i[28],ex_op1_i[29],ex_op1_i[30],ex_op1_i[31]}),
        .\Using_FPGA.Native_0 (Data_Flow_I_n_33),
        .\Using_FPGA.Native_1 (Data_Flow_I_n_34),
        .\Using_FPGA.Native_10 (Data_Flow_I_n_317),
        .\Using_FPGA.Native_11 (Data_Flow_I_n_318),
        .\Using_FPGA.Native_12 (Data_Flow_I_n_319),
        .\Using_FPGA.Native_13 (Data_Flow_I_n_320),
        .\Using_FPGA.Native_14 (Data_Flow_I_n_321),
        .\Using_FPGA.Native_15 (Data_Flow_I_n_322),
        .\Using_FPGA.Native_16 (Data_Flow_I_n_323),
        .\Using_FPGA.Native_17 (Data_Flow_I_n_324),
        .\Using_FPGA.Native_18 (Data_Flow_I_n_325),
        .\Using_FPGA.Native_19 (Data_Flow_I_n_326),
        .\Using_FPGA.Native_2 (Data_Flow_I_n_241),
        .\Using_FPGA.Native_20 (Data_Flow_I_n_327),
        .\Using_FPGA.Native_21 (Data_Flow_I_n_328),
        .\Using_FPGA.Native_22 (Data_Flow_I_n_329),
        .\Using_FPGA.Native_23 (Data_Flow_I_n_330),
        .\Using_FPGA.Native_24 (Data_Flow_I_n_331),
        .\Using_FPGA.Native_25 (Data_Flow_I_n_332),
        .\Using_FPGA.Native_26 (Data_Flow_I_n_333),
        .\Using_FPGA.Native_27 (Data_Flow_I_n_334),
        .\Using_FPGA.Native_28 (Data_Flow_I_n_335),
        .\Using_FPGA.Native_29 (Data_Flow_I_n_336),
        .\Using_FPGA.Native_3 (Data_Flow_I_n_242),
        .\Using_FPGA.Native_30 (Data_Flow_I_n_337),
        .\Using_FPGA.Native_31 (Data_Flow_I_n_338),
        .\Using_FPGA.Native_32 (Data_Flow_I_n_339),
        .\Using_FPGA.Native_33 (Data_Flow_I_n_340),
        .\Using_FPGA.Native_34 (Data_Flow_I_n_341),
        .\Using_FPGA.Native_35 (Data_Flow_I_n_342),
        .\Using_FPGA.Native_36 (Data_Flow_I_n_343),
        .\Using_FPGA.Native_37 (ex_op1_neg),
        .\Using_FPGA.Native_38 (Decode_I_n_393),
        .\Using_FPGA.Native_39 (Decode_I_n_392),
        .\Using_FPGA.Native_4 (Data_Flow_I_n_243),
        .\Using_FPGA.Native_40 (Decode_I_n_391),
        .\Using_FPGA.Native_41 (Decode_I_n_390),
        .\Using_FPGA.Native_42 (Decode_I_n_389),
        .\Using_FPGA.Native_43 (Decode_I_n_388),
        .\Using_FPGA.Native_44 (Decode_I_n_387),
        .\Using_FPGA.Native_45 (Decode_I_n_386),
        .\Using_FPGA.Native_46 (Decode_I_n_385),
        .\Using_FPGA.Native_47 (Decode_I_n_384),
        .\Using_FPGA.Native_48 (Decode_I_n_383),
        .\Using_FPGA.Native_49 (Decode_I_n_382),
        .\Using_FPGA.Native_5 (Data_Flow_I_n_312),
        .\Using_FPGA.Native_50 (Decode_I_n_381),
        .\Using_FPGA.Native_51 (Decode_I_n_380),
        .\Using_FPGA.Native_52 (Decode_I_n_379),
        .\Using_FPGA.Native_53 (Decode_I_n_378),
        .\Using_FPGA.Native_54 (Decode_I_n_377),
        .\Using_FPGA.Native_55 (Decode_I_n_376),
        .\Using_FPGA.Native_56 (Decode_I_n_375),
        .\Using_FPGA.Native_57 (Decode_I_n_374),
        .\Using_FPGA.Native_58 (Decode_I_n_373),
        .\Using_FPGA.Native_59 (Decode_I_n_372),
        .\Using_FPGA.Native_6 (Data_Flow_I_n_313),
        .\Using_FPGA.Native_60 (Decode_I_n_371),
        .\Using_FPGA.Native_61 (Decode_I_n_370),
        .\Using_FPGA.Native_62 (Decode_I_n_369),
        .\Using_FPGA.Native_63 (Decode_I_n_368),
        .\Using_FPGA.Native_64 (Decode_I_n_367),
        .\Using_FPGA.Native_65 (Decode_I_n_363),
        .\Using_FPGA.Native_66 (Decode_I_n_364),
        .\Using_FPGA.Native_67 (Decode_I_n_365),
        .\Using_FPGA.Native_68 (Decode_I_n_366),
        .\Using_FPGA.Native_69 (Decode_I_n_305),
        .\Using_FPGA.Native_7 (Data_Flow_I_n_314),
        .\Using_FPGA.Native_70 (Decode_I_n_304),
        .\Using_FPGA.Native_71 (Decode_I_n_301),
        .\Using_FPGA.Native_72 (use_Reg_Neg_S_reg),
        .\Using_FPGA.Native_73 (D[260:257]),
        .\Using_FPGA.Native_8 (Data_Flow_I_n_315),
        .\Using_FPGA.Native_9 (Data_Flow_I_n_316),
        .\Using_Fast_Interrupt.wb_ie_rising_reg (Data_Flow_I_n_345),
        .WB_Doublet_Access_reg({of_op3[0],of_op3[1],of_op3[2],of_op3[3],of_op3[4],of_op3[5],of_op3[6],of_op3[7],of_op3[8],of_op3[9],of_op3[10],of_op3[11],of_op3[12],of_op3[13],of_op3[14],of_op3[15]}),
        .WB_Doublet_Access_reg_0(D[111]),
        .WB_Doublet_Access_reg_1(D[110]),
        .WB_Doublet_Access_reg_10(D[101]),
        .WB_Doublet_Access_reg_11(D[100]),
        .WB_Doublet_Access_reg_12(D[99]),
        .WB_Doublet_Access_reg_13(D[98]),
        .WB_Doublet_Access_reg_14(D[97]),
        .WB_Doublet_Access_reg_15(D[96]),
        .WB_Doublet_Access_reg_2(D[109]),
        .WB_Doublet_Access_reg_3(D[108]),
        .WB_Doublet_Access_reg_4(D[107]),
        .WB_Doublet_Access_reg_5(D[106]),
        .WB_Doublet_Access_reg_6(D[105]),
        .WB_Doublet_Access_reg_7(D[104]),
        .WB_Doublet_Access_reg_8(D[103]),
        .WB_Doublet_Access_reg_9(D[102]),
        .WB_GPR_Wr(D[120]),
        .\WB_MEM_Result_reg[0] ({mem_ex_result[0],mem_ex_result[1],mem_ex_result[2],mem_ex_result[3],mem_ex_result[4],mem_ex_result[5],mem_ex_result[6],mem_ex_result[7],mem_ex_result[8],mem_ex_result[9],mem_ex_result[10],mem_ex_result[11],mem_ex_result[12],mem_ex_result[13],mem_ex_result[14],mem_ex_result[15],mem_ex_result[16],mem_ex_result[17],mem_ex_result[18],mem_ex_result[19],mem_ex_result[20],mem_ex_result[21],mem_ex_result[22],mem_ex_result[23],mem_ex_result[24],mem_ex_result[25],mem_ex_result[26],mem_ex_result[27],mem_ex_result[28],mem_ex_result[31]}),
        .\WB_MEM_Result_reg[0]_0 ({MEM_Fwd[0],MEM_Fwd[29],MEM_Fwd[30]}),
        .\WB_MEM_Result_reg[29] (mem_MSR),
        .\control_reg_reg[3] (\Use_Debug_Logic.Master_Core.Debug_Perf_n_62 ),
        .\data_rd_reg_reg[16] (Data_Flow_I_n_295),
        .\data_rd_reg_reg[17] (Data_Flow_I_n_294),
        .\data_rd_reg_reg[18] (Data_Flow_I_n_293),
        .\data_rd_reg_reg[19] (Data_Flow_I_n_292),
        .\data_rd_reg_reg[20] (Data_Flow_I_n_291),
        .\data_rd_reg_reg[21] (Data_Flow_I_n_290),
        .\data_rd_reg_reg[22] (Data_Flow_I_n_289),
        .\data_rd_reg_reg[23] (Data_Flow_I_n_288),
        .\data_rd_reg_reg[24] (Data_Flow_I_n_287),
        .\data_rd_reg_reg[25] (Data_Flow_I_n_286),
        .\data_rd_reg_reg[26] (Data_Flow_I_n_285),
        .\data_rd_reg_reg[27] (Data_Flow_I_n_284),
        .\data_rd_reg_reg[28] (Data_Flow_I_n_283),
        .\data_rd_reg_reg[29] (Data_Flow_I_n_282),
        .\data_rd_reg_reg[30] (Data_Flow_I_n_281),
        .\data_rd_reg_reg[31] (Data_Flow_I_n_280),
        .ex_Interrupt_Brk_combo_reg(Data_Flow_I_n_344),
        .ex_MSR({ex_MSR[28],ex_MSR[29],ex_MSR[30]}),
        .ex_Take_Intr_or_Exc_reg(Decode_I_n_300),
        .ex_branch_with_delayslot_reg(E),
        .ex_byte_access(ex_byte_access),
        .ex_cmp_op(ex_cmp_op),
        .ex_doublet_access(ex_doublet_access),
        .ex_move_to_MSR_instr(ex_move_to_MSR_instr),
        .ex_op1_cmp_equal(ex_op1_cmp_equal),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .ex_op1_zero(ex_op1_zero),
        .ex_reverse_byteorder(\Byte_Doublet_Handle_gti_I/ex_reverse_byteorder ),
        .ex_set_MSR_IE_instr_reg(Decode_I_n_360),
        .ex_set_MSR_IE_instr_reg_0(Decode_I_n_361),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .ex_unsigned_op(ex_unsigned_op),
        .ex_use_carry(ex_use_carry),
        .\interrupt_address_d1_reg[0] ({of_op2[0],of_op2[1],of_op2[2],of_op2[3],of_op2[4],of_op2[5],of_op2[6],of_op2[7],of_op2[8],of_op2[9],of_op2[10],of_op2[11],of_op2[12],of_op2[13],of_op2[14],of_op2[15],of_op2[16],of_op2[17],of_op2[18],of_op2[19],of_op2[20],of_op2[21],of_op2[22],of_op2[23],of_op2[24],of_op2[25],of_op2[26],of_op2[27],of_op2[28],of_op2[29],of_op2[30],of_op2[31]}),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\mem_byte_selects_reg[0] (\Byte_Doublet_Handle_gti_I/ex_byte_selects ),
        .mem_daxi_exclusive_failed(mem_daxi_exclusive_failed),
        .\mem_pc_i_reg[0] ({MEM_PC[0],MEM_PC[1],MEM_PC[2],MEM_PC[3],MEM_PC[4],MEM_PC[5],MEM_PC[6],MEM_PC[7],MEM_PC[8],MEM_PC[9],MEM_PC[10],MEM_PC[11],MEM_PC[12],MEM_PC[13],MEM_PC[14],MEM_PC[15],MEM_PC[16],MEM_PC[17],MEM_PC[18],MEM_PC[19],MEM_PC[20],MEM_PC[21],MEM_PC[22],MEM_PC[23],MEM_PC[24],MEM_PC[25],MEM_PC[26],MEM_PC[27],MEM_PC[28],MEM_PC[29],MEM_PC[30],MEM_PC[31]}),
        .mem_sel_msr(mem_sel_msr),
        .mem_valid_reg(Trace_WB_Jump_Hit_reg),
        .of_MSR({of_MSR[28],of_MSR[30]}),
        .of_Take_Interrupt(of_Take_Interrupt),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data),
        .of_op1_sel(of_op1_sel),
        .of_op1_sel_spr(of_op1_sel_spr),
        .of_op3_sel(of_op3_sel),
        .out(out),
        .read_register_MSR_1_reg(\Use_Debug_Logic.Master_Core.Debug_Perf_n_2 ),
        .restore_wb_msr_to_ex(\msr_reg_i/restore_wb_msr_to_ex ),
        .wb_MSR_cmb(\msr_reg_i/wb_MSR_cmb ),
        .wb_byte_access(wb_byte_access),
        .wb_exception_i_reg(D[79]),
        .\wb_exception_kind_i_reg[28] (D[77]),
        .\wb_exception_kind_i_reg[28]_0 (Decode_I_n_343),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .wb_piperun(wb_piperun),
        .\wb_read_lsb_1_sel_reg[0] (\Use_DBUS.DAXI_Interface_I1_n_24 ),
        .\wb_read_lsb_1_sel_reg[0]_0 (\Use_DBUS.DAXI_Interface_I1_n_22 ),
        .\wb_read_lsb_1_sel_reg[0]_1 (\Use_DBUS.DAXI_Interface_I1_n_20 ),
        .\wb_read_lsb_1_sel_reg[0]_2 (\Use_DBUS.DAXI_Interface_I1_n_18 ),
        .\wb_read_lsb_1_sel_reg[0]_3 (\Use_DBUS.DAXI_Interface_I1_n_19 ),
        .\wb_read_lsb_1_sel_reg[0]_4 (\Use_DBUS.DAXI_Interface_I1_n_21 ),
        .\wb_read_lsb_1_sel_reg[0]_5 (\Use_DBUS.DAXI_Interface_I1_n_23 ),
        .\wb_read_lsb_1_sel_reg[0]_6 (\Use_DBUS.DAXI_Interface_I1_n_25 ),
        .wb_read_msb_doublet_sel(wb_read_msb_doublet_sel),
        .wb_sel_spr_shr(wb_sel_spr_shr));
  system_microblaze_0_0_Decode_gti Decode_I
       (.Clk(Clk),
        .D({of_pc[0],of_pc[1],of_pc[2],of_pc[3],of_pc[4],of_pc[5],of_pc[6],of_pc[7],of_pc[8],of_pc[9],of_pc[10],of_pc[11],of_pc[12],of_pc[13],of_pc[14],of_pc[15],of_pc[16],of_pc[17],of_pc[18],of_pc[19],of_pc[20],of_pc[21],of_pc[22],of_pc[23],of_pc[24],of_pc[25],of_pc[26],of_pc[27],of_pc[28],of_pc[29],of_pc[30],of_pc[31]}),
        .DI(\ALU_I/DI ),
        .DReady(DReady),
        .DWait(DWait),
        .Dbg_Disable(Dbg_Disable),
        .E(of_write_imm_reg),
        .EX_ALU_Sel_Logic(EX_ALU_Sel_Logic),
        .\EX_Branch_CMP_Op1_reg[0] ({\Operand_Select_I/I0 ,Decode_I_n_326,Decode_I_n_327,Decode_I_n_328,Decode_I_n_329,Decode_I_n_330,Decode_I_n_331,Decode_I_n_332,Decode_I_n_333,Decode_I_n_334,Decode_I_n_335,Decode_I_n_336,Decode_I_n_337,Decode_I_n_338,Decode_I_n_339,Decode_I_n_340}),
        .\EX_Branch_CMP_Op1_reg[0]_0 (ex_op1_neg),
        .EX_Enable_ALU(EX_Enable_ALU),
        .EX_Fwd(EX_Fwd),
        .\EX_Op1_reg[0] ({ex_op1_i[0],ex_op1_i[1],ex_op1_i[2],ex_op1_i[3],ex_op1_i[4],ex_op1_i[5],ex_op1_i[6],ex_op1_i[7],ex_op1_i[8],ex_op1_i[9],ex_op1_i[10],ex_op1_i[11],ex_op1_i[12],ex_op1_i[13],ex_op1_i[14],ex_op1_i[15],ex_op1_i[16],ex_op1_i[17],ex_op1_i[18],ex_op1_i[19],ex_op1_i[20],ex_op1_i[21],ex_op1_i[22],ex_op1_i[23],ex_op1_i[24],ex_op1_i[25],ex_op1_i[26],ex_op1_i[27],ex_op1_i[28],ex_op1_i[29],ex_op1_i[30],ex_op1_i[31]}),
        .\EX_Op1_reg[0]_0 (Data_Flow_I_n_319),
        .\EX_Op1_reg[10] (Decode_I_n_384),
        .\EX_Op1_reg[10]_0 (Data_Flow_I_n_325),
        .\EX_Op1_reg[11] (Decode_I_n_383),
        .\EX_Op1_reg[11]_0 (Data_Flow_I_n_324),
        .\EX_Op1_reg[12] (Decode_I_n_382),
        .\EX_Op1_reg[12]_0 (Data_Flow_I_n_323),
        .\EX_Op1_reg[13] (Decode_I_n_381),
        .\EX_Op1_reg[13]_0 (Data_Flow_I_n_322),
        .\EX_Op1_reg[14] (Decode_I_n_380),
        .\EX_Op1_reg[14]_0 (Data_Flow_I_n_321),
        .\EX_Op1_reg[15] (Decode_I_n_379),
        .\EX_Op1_reg[15]_0 (Data_Flow_I_n_320),
        .\EX_Op1_reg[16] (Decode_I_n_378),
        .\EX_Op1_reg[16]_0 (Data_Flow_I_n_335),
        .\EX_Op1_reg[17] (Decode_I_n_377),
        .\EX_Op1_reg[17]_0 (Data_Flow_I_n_334),
        .\EX_Op1_reg[18] (Decode_I_n_376),
        .\EX_Op1_reg[18]_0 (Data_Flow_I_n_333),
        .\EX_Op1_reg[19] (Decode_I_n_375),
        .\EX_Op1_reg[19]_0 (Data_Flow_I_n_332),
        .\EX_Op1_reg[1] (Decode_I_n_393),
        .\EX_Op1_reg[1]_0 (Data_Flow_I_n_318),
        .\EX_Op1_reg[20] (Decode_I_n_374),
        .\EX_Op1_reg[20]_0 (Data_Flow_I_n_331),
        .\EX_Op1_reg[21] (Decode_I_n_373),
        .\EX_Op1_reg[21]_0 (Data_Flow_I_n_330),
        .\EX_Op1_reg[22] (Decode_I_n_372),
        .\EX_Op1_reg[22]_0 (Data_Flow_I_n_329),
        .\EX_Op1_reg[23] (Decode_I_n_371),
        .\EX_Op1_reg[23]_0 (Data_Flow_I_n_328),
        .\EX_Op1_reg[24] (Decode_I_n_370),
        .\EX_Op1_reg[24]_0 (Data_Flow_I_n_33),
        .\EX_Op1_reg[24]_1 (Data_Flow_I_n_34),
        .\EX_Op1_reg[24]_2 (Data_Flow_I_n_343),
        .\EX_Op1_reg[25] (Decode_I_n_369),
        .\EX_Op1_reg[25]_0 (Data_Flow_I_n_342),
        .\EX_Op1_reg[26] (Decode_I_n_368),
        .\EX_Op1_reg[26]_0 (Data_Flow_I_n_341),
        .\EX_Op1_reg[27] (Decode_I_n_367),
        .\EX_Op1_reg[27]_0 (Data_Flow_I_n_340),
        .\EX_Op1_reg[28] (Decode_I_n_363),
        .\EX_Op1_reg[28]_0 (Data_Flow_I_n_243),
        .\EX_Op1_reg[28]_1 (Data_Flow_I_n_339),
        .\EX_Op1_reg[29] (Decode_I_n_364),
        .\EX_Op1_reg[29]_0 (Data_Flow_I_n_242),
        .\EX_Op1_reg[29]_1 (Data_Flow_I_n_338),
        .\EX_Op1_reg[2] (Decode_I_n_392),
        .\EX_Op1_reg[2]_0 (Data_Flow_I_n_317),
        .\EX_Op1_reg[30] (Decode_I_n_365),
        .\EX_Op1_reg[30]_0 (Data_Flow_I_n_337),
        .\EX_Op1_reg[30]_1 (Data_Flow_I_n_241),
        .\EX_Op1_reg[31] (Decode_I_n_366),
        .\EX_Op1_reg[31]_0 (Data_Flow_I_n_336),
        .\EX_Op1_reg[3] (Decode_I_n_391),
        .\EX_Op1_reg[3]_0 (Data_Flow_I_n_316),
        .\EX_Op1_reg[4] (Decode_I_n_390),
        .\EX_Op1_reg[4]_0 (Data_Flow_I_n_315),
        .\EX_Op1_reg[5] (Decode_I_n_389),
        .\EX_Op1_reg[5]_0 (Data_Flow_I_n_314),
        .\EX_Op1_reg[6] (Decode_I_n_388),
        .\EX_Op1_reg[6]_0 (Data_Flow_I_n_313),
        .\EX_Op1_reg[7] (Decode_I_n_387),
        .\EX_Op1_reg[7]_0 (Data_Flow_I_n_312),
        .\EX_Op1_reg[8] (Decode_I_n_386),
        .\EX_Op1_reg[8]_0 (Data_Flow_I_n_327),
        .\EX_Op1_reg[9] (Decode_I_n_385),
        .\EX_Op1_reg[9]_0 (Data_Flow_I_n_326),
        .\EX_Op2_reg[0] ({of_op2[0],of_op2[1],of_op2[2],of_op2[3],of_op2[4],of_op2[5],of_op2[6],of_op2[7],of_op2[8],of_op2[9],of_op2[10],of_op2[11],of_op2[12],of_op2[13],of_op2[14],of_op2[15],of_op2[16],of_op2[17],of_op2[18],of_op2[19],of_op2[20],of_op2[21],of_op2[22],of_op2[23],of_op2[24],of_op2[25],of_op2[26],of_op2[27],of_op2[28],of_op2[29],of_op2[30],of_op2[31]}),
        .\EX_Op2_reg[0]_0 ({D[327:298],D[95:80]}),
        .\EX_Op2_reg[30] ({ex_databus_addr_mmu[30],ex_databus_addr_mmu[31]}),
        .\EX_Op2_reg[31] (ex_op2),
        .\EX_Op3_reg[0] ({of_op3[0],of_op3[1],of_op3[2],of_op3[3],of_op3[4],of_op3[5],of_op3[6],of_op3[7],of_op3[8],of_op3[9],of_op3[10],of_op3[11],of_op3[12],of_op3[13],of_op3[14],of_op3[15]}),
        .GPR_Op1({gpr_op1[0],gpr_op1[1],gpr_op1[2],gpr_op1[3],gpr_op1[4],gpr_op1[5],gpr_op1[6],gpr_op1[7],gpr_op1[8],gpr_op1[9],gpr_op1[10],gpr_op1[11],gpr_op1[12],gpr_op1[13],gpr_op1[14],gpr_op1[15]}),
        .GPR_Op2(gpr_op2),
        .GPR_Op3({gpr_op3[0],gpr_op3[1],gpr_op3[2],gpr_op3[3],gpr_op3[4],gpr_op3[5],gpr_op3[6],gpr_op3[7],gpr_op3[8],gpr_op3[9],gpr_op3[10],gpr_op3[11],gpr_op3[12],gpr_op3[13],gpr_op3[14],gpr_op3[15]}),
        .I041_out(\PreFetch_Buffer_I1/I041_out ),
        .I1(\Operand_Select_I/I1 ),
        .I139_out(\PreFetch_Buffer_I1/I139_out ),
        .IB_Ready(IB_Ready),
        .IFetch({D[361:328],D[262:225],D[185:153],D[120:115],D[111:96],D[79:72],D[0]}),
        .IReady(IReady),
        .Interrupt_Ack(Interrupt_Ack),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[38],LOCKSTEP_Master_Out[36]}),
        .MEM_Sel_MEM_Res(MEM_Sel_MEM_Res),
        .M_AXI_DP_AWVALID_i(M_AXI_DP_AWVALID_i),
        .M_AXI_DP_AWVALID_i1(M_AXI_DP_AWVALID_i1),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Use_Debug_Logic.Master_Core.Debug_Perf_n_7 ),
        .\Performace_Debug_Control.dbg_hit_reg[15] (Decode_I_n_345),
        .\Performace_Debug_Control.dbg_state_nohalt_reg (\Use_Debug_Logic.Master_Core.Debug_Perf_n_5 ),
        .\Performace_Debug_Control.dbg_stop_if_delay_i_reg (\Use_Debug_Logic.Master_Core.Debug_Perf_n_15 ),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Use_Debug_Logic.Master_Core.Debug_Perf_n_3 ),
        .\Performace_Debug_Control.ex_brki_hit_reg (Decode_I_n_358),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg (Decode_I_n_357),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_61 ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_1 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_11 ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg (\Use_Debug_Logic.Master_Core.Debug_Perf_n_10 ),
        .\Performace_Debug_Control.ex_watchpoint_brk_reg (Decode_I_n_394),
        .\Performace_Debug_Control.ex_watchpoint_brk_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_13 ),
        .Q({ex_alu_op[0],ex_alu_op[1]}),
        .R(\Data_Flow_Logic_I/R ),
        .Rst18_out(Rst18_out),
        .SRI(SRI),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .Sleep(Sleep),
        .Sleep_Decode(Sleep_Decode),
        .Trace_WB_Jump_Hit_reg_0(Trace_WB_Jump_Hit_reg),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[16] (\Use_DBUS.DAXI_Interface_I1_n_33 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[17] (\Use_DBUS.DAXI_Interface_I1_n_32 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[18] (\Use_DBUS.DAXI_Interface_I1_n_31 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[19] (\Use_DBUS.DAXI_Interface_I1_n_30 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[20] (\Use_DBUS.DAXI_Interface_I1_n_29 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[21] (\Use_DBUS.DAXI_Interface_I1_n_28 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[22] (\Use_DBUS.DAXI_Interface_I1_n_27 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[23] (\Use_DBUS.DAXI_Interface_I1_n_26 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[24] (\Use_DBUS.DAXI_Interface_I1_n_41 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[25] (\Use_DBUS.DAXI_Interface_I1_n_40 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[26] (\Use_DBUS.DAXI_Interface_I1_n_39 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[27] (\Use_DBUS.DAXI_Interface_I1_n_38 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[28] (\Use_DBUS.DAXI_Interface_I1_n_37 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[29] (\Use_DBUS.DAXI_Interface_I1_n_36 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[30] (\Use_DBUS.DAXI_Interface_I1_n_35 ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[31] (\Use_DBUS.DAXI_Interface_I1_n_34 ),
        .\Using_FPGA.Native ({if_sel_input[3],if_sel_input[4]}),
        .\Using_FPGA.Native_0 (Decode_I_n_35),
        .\Using_FPGA.Native_1 (E),
        .\Using_FPGA.Native_10 (Decode_I_n_360),
        .\Using_FPGA.Native_11 (Decode_I_n_361),
        .\Using_FPGA.Native_12 (\PreFetch_Buffer_I1/p_1_in49_in ),
        .\Using_FPGA.Native_13 ({MEM_PC[0],MEM_PC[1],MEM_PC[2],MEM_PC[3],MEM_PC[4],MEM_PC[5],MEM_PC[6],MEM_PC[7],MEM_PC[8],MEM_PC[9],MEM_PC[10],MEM_PC[11],MEM_PC[12],MEM_PC[13],MEM_PC[14],MEM_PC[15],MEM_PC[16],MEM_PC[17],MEM_PC[18],MEM_PC[19],MEM_PC[20],MEM_PC[21],MEM_PC[22],MEM_PC[23],MEM_PC[24],MEM_PC[25],MEM_PC[26],MEM_PC[27],MEM_PC[28],MEM_PC[29],MEM_PC[30],MEM_PC[31]}),
        .\Using_FPGA.Native_14 (Data_Flow_I_n_345),
        .\Using_FPGA.Native_15 ({mem_ex_result[0],mem_ex_result[1],mem_ex_result[2],mem_ex_result[3],mem_ex_result[4],mem_ex_result[5],mem_ex_result[6],mem_ex_result[7],mem_ex_result[8],mem_ex_result[9],mem_ex_result[10],mem_ex_result[11],mem_ex_result[12],mem_ex_result[13],mem_ex_result[14],mem_ex_result[15],mem_ex_result[16],mem_ex_result[17],mem_ex_result[18],mem_ex_result[19],mem_ex_result[20],mem_ex_result[21],mem_ex_result[22],mem_ex_result[23],mem_ex_result[24],mem_ex_result[25],mem_ex_result[26],mem_ex_result[27],mem_ex_result[28],mem_ex_result[31]}),
        .\Using_FPGA.Native_16 ({MEM_Fwd[0],MEM_Fwd[29],MEM_Fwd[30]}),
        .\Using_FPGA.Native_17 (mem_MSR),
        .\Using_FPGA.Native_18 (\Byte_Doublet_Handle_gti_I/ex_byte_selects ),
        .\Using_FPGA.Native_19 ({wb_excep_return_addr[0],wb_excep_return_addr[1],wb_excep_return_addr[2],wb_excep_return_addr[3],wb_excep_return_addr[4],wb_excep_return_addr[5],wb_excep_return_addr[6],wb_excep_return_addr[7],wb_excep_return_addr[8],wb_excep_return_addr[9],wb_excep_return_addr[10],wb_excep_return_addr[11],wb_excep_return_addr[12],wb_excep_return_addr[13],wb_excep_return_addr[14],wb_excep_return_addr[15]}),
        .\Using_FPGA.Native_2 (Decode_I_n_300),
        .\Using_FPGA.Native_3 (Decode_I_n_301),
        .\Using_FPGA.Native_4 (Decode_I_n_304),
        .\Using_FPGA.Native_5 (Decode_I_n_305),
        .\Using_FPGA.Native_6 (Decode_I_n_343),
        .\Using_FPGA.Native_7 ({ex_sext_op[0],ex_sext_op[1]}),
        .\Using_FPGA.Native_8 (Decode_I_n_353),
        .\Using_FPGA.Native_9 (Decode_I_n_359),
        .\WB_MEM_Result_reg[0] ({wb_mem_result[0],wb_mem_result[1],wb_mem_result[2],wb_mem_result[3],wb_mem_result[4],wb_mem_result[5],wb_mem_result[6],wb_mem_result[7],wb_mem_result[8],wb_mem_result[9],wb_mem_result[10],wb_mem_result[11],wb_mem_result[12],wb_mem_result[13],wb_mem_result[14],wb_mem_result[15]}),
        .Wakeup(Wakeup),
        .active_access_d1(active_access_d1),
        .\control_reg_reg[3] (Data_Flow_I_n_344),
        .\control_reg_reg[8] (\Use_Debug_Logic.Master_Core.Debug_Perf_n_63 ),
        .dbg_clean_stop(dbg_clean_stop),
        .dbg_state_i(dbg_state_i),
        .dbg_stop_i(dbg_stop_i),
        .dbg_stop_if_delay_i(dbg_stop_if_delay_i),
        .ex_Exception_Taken(ex_Exception_Taken),
        .ex_MSR({ex_MSR[28],ex_MSR[29],ex_MSR[30]}),
        .ex_alu_carry(ex_alu_carry),
        .ex_byte_access(ex_byte_access),
        .ex_cmp_op(ex_cmp_op),
        .ex_doublet_access(ex_doublet_access),
        .ex_move_to_MSR_instr(ex_move_to_MSR_instr),
        .ex_op1_cmp_equal(ex_op1_cmp_equal),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .ex_op1_zero(ex_op1_zero),
        .ex_reverse_byteorder(\Byte_Doublet_Handle_gti_I/ex_reverse_byteorder ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .ex_unsigned_op(ex_unsigned_op),
        .ex_use_carry(ex_use_carry),
        .exception_reg(Decode_I_n_355),
        .executing0(executing0),
        .executing_reg(Decode_I_n_356),
        .executing_reg_0({instr_rd_reg[0],instr_rd_reg[1]}),
        .flush_pipe(flush_pipe),
        .if_debug_ready_i_reg(\Use_Debug_Logic.Master_Core.Debug_Perf_n_0 ),
        .\imm_reg_reg[0] ({imm_reg[0],imm_reg[1],imm_reg[2],imm_reg[3],imm_reg[4],imm_reg[5],imm_reg[6],imm_reg[7],imm_reg[8],imm_reg[9],imm_reg[10],imm_reg[11],imm_reg[12],imm_reg[13],imm_reg[14],imm_reg[15]}),
        .in({ib_data[0],ib_data[1],ib_data[2],ib_data[3],ib_data[4],ib_data[5],ib_data[6],ib_data[7],ib_data[8],ib_data[9],ib_data[10],ib_data[21],ib_data[22],ib_data[23],ib_data[24],ib_data[25],ib_data[26],ib_data[27],ib_data[28],ib_data[29],ib_data[30],ib_data[31],\PreFetch_Buffer_I1/if_predecode ,ib_data[11],ib_data[12],ib_data[13],ib_data[14],ib_data[15],ib_data[16],ib_data[17],ib_data[18],ib_data[19],ib_data[20]}),
        .\interrupt_address_d1_reg[0] ({interrupt_address_d1[0],interrupt_address_d1[1],interrupt_address_d1[2],interrupt_address_d1[3],interrupt_address_d1[4],interrupt_address_d1[5],interrupt_address_d1[6],interrupt_address_d1[7],interrupt_address_d1[8],interrupt_address_d1[9],interrupt_address_d1[10],interrupt_address_d1[11],interrupt_address_d1[12],interrupt_address_d1[13],interrupt_address_d1[14],interrupt_address_d1[15],interrupt_address_d1[16],interrupt_address_d1[17],interrupt_address_d1[18],interrupt_address_d1[19],interrupt_address_d1[20],interrupt_address_d1[21],interrupt_address_d1[22],interrupt_address_d1[23],interrupt_address_d1[24],interrupt_address_d1[25],interrupt_address_d1[26],interrupt_address_d1[27],interrupt_address_d1[28],interrupt_address_d1[29],interrupt_address_d1[30],interrupt_address_d1[31]}),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(\Use_DBUS.DAXI_Interface_I1_n_42 ),
        .mem_Exception_Taken(mem_Exception_Taken),
        .mem_databus_access(mem_databus_access),
        .mem_databus_read(mem_databus_read),
        .mem_databus_ready(mem_databus_ready),
        .mem_databus_write(mem_databus_write),
        .mem_sel_msr(mem_sel_msr),
        .no_sleeping(no_sleeping),
        .of_MSR({of_MSR[28],of_MSR[30]}),
        .of_Take_Interrupt(of_Take_Interrupt),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data),
        .of_op1_sel(of_op1_sel),
        .of_op1_sel_spr(of_op1_sel_spr),
        .of_op3_sel(of_op3_sel),
        .out(out),
        .p_36_out(p_36_out),
        .restore_wb_msr_to_ex(\msr_reg_i/restore_wb_msr_to_ex ),
        .sleep_reset_mode_reg(\Use_Debug_Logic.Master_Core.Debug_Perf_n_6 ),
        .use_Reg_Neg_S_reg(use_Reg_Neg_S_reg),
        .use_Reg_Neg_S_reg_0(of_predecode),
        .wb_Halted(wb_Halted),
        .wb_MSR_cmb(\msr_reg_i/wb_MSR_cmb ),
        .wb_byte_access(wb_byte_access),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .wb_gpr_write_i_reg_0(wb_exception),
        .wb_pc_valid(wb_pc_valid),
        .wb_piperun(wb_piperun),
        .wb_read_imm_reg(wb_read_imm_reg),
        .wb_read_imm_reg_1(wb_read_imm_reg_1),
        .wb_sel_spr_shr(wb_sel_spr_shr));
  system_microblaze_0_0_DAXI_interface \Use_DBUS.DAXI_Interface_I1 
       (.Clk(Clk),
        .D({D[224],D[187:186]}),
        .DReady(DReady),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out[41]),
        .\LOCKSTEP_Out_reg[3769] (\Use_DBUS.DAXI_Interface_I1_n_41 ),
        .\LOCKSTEP_Out_reg[3770] (\Use_DBUS.DAXI_Interface_I1_n_40 ),
        .\LOCKSTEP_Out_reg[3771] (\Use_DBUS.DAXI_Interface_I1_n_39 ),
        .\LOCKSTEP_Out_reg[3772] (\Use_DBUS.DAXI_Interface_I1_n_38 ),
        .\LOCKSTEP_Out_reg[3773] (\Use_DBUS.DAXI_Interface_I1_n_37 ),
        .\LOCKSTEP_Out_reg[3774] (\Use_DBUS.DAXI_Interface_I1_n_36 ),
        .\LOCKSTEP_Out_reg[3775] (\Use_DBUS.DAXI_Interface_I1_n_35 ),
        .\LOCKSTEP_Out_reg[3776] (\Use_DBUS.DAXI_Interface_I1_n_34 ),
        .\LOCKSTEP_Out_reg[3777] (\Use_DBUS.DAXI_Interface_I1_n_33 ),
        .\LOCKSTEP_Out_reg[3778] (\Use_DBUS.DAXI_Interface_I1_n_32 ),
        .\LOCKSTEP_Out_reg[3779] (\Use_DBUS.DAXI_Interface_I1_n_31 ),
        .\LOCKSTEP_Out_reg[3780] (\Use_DBUS.DAXI_Interface_I1_n_30 ),
        .\LOCKSTEP_Out_reg[3781] (\Use_DBUS.DAXI_Interface_I1_n_29 ),
        .\LOCKSTEP_Out_reg[3782] (\Use_DBUS.DAXI_Interface_I1_n_28 ),
        .\LOCKSTEP_Out_reg[3783] (\Use_DBUS.DAXI_Interface_I1_n_27 ),
        .\LOCKSTEP_Out_reg[3784] (\Use_DBUS.DAXI_Interface_I1_n_26 ),
        .\LOCKSTEP_Out_reg[3785] (\Use_DBUS.DAXI_Interface_I1_n_25 ),
        .\LOCKSTEP_Out_reg[3786] (\Use_DBUS.DAXI_Interface_I1_n_24 ),
        .\LOCKSTEP_Out_reg[3787] (\Use_DBUS.DAXI_Interface_I1_n_23 ),
        .\LOCKSTEP_Out_reg[3788] (\Use_DBUS.DAXI_Interface_I1_n_22 ),
        .\LOCKSTEP_Out_reg[3789] (\Use_DBUS.DAXI_Interface_I1_n_21 ),
        .\LOCKSTEP_Out_reg[3790] (\Use_DBUS.DAXI_Interface_I1_n_20 ),
        .\LOCKSTEP_Out_reg[3791] (\Use_DBUS.DAXI_Interface_I1_n_19 ),
        .\LOCKSTEP_Out_reg[3792] (\Use_DBUS.DAXI_Interface_I1_n_18 ),
        .\LOCKSTEP_Out_reg[3793] (\Use_DBUS.DAXI_Interface_I1_n_16 ),
        .\LOCKSTEP_Out_reg[3793]_0 (\Use_DBUS.DAXI_Interface_I1_n_17 ),
        .\LOCKSTEP_Out_reg[3794] (\Use_DBUS.DAXI_Interface_I1_n_14 ),
        .\LOCKSTEP_Out_reg[3794]_0 (\Use_DBUS.DAXI_Interface_I1_n_15 ),
        .\LOCKSTEP_Out_reg[3795] (\Use_DBUS.DAXI_Interface_I1_n_12 ),
        .\LOCKSTEP_Out_reg[3795]_0 (\Use_DBUS.DAXI_Interface_I1_n_13 ),
        .\LOCKSTEP_Out_reg[3796] (\Use_DBUS.DAXI_Interface_I1_n_10 ),
        .\LOCKSTEP_Out_reg[3796]_0 (\Use_DBUS.DAXI_Interface_I1_n_11 ),
        .\LOCKSTEP_Out_reg[3797] (\Use_DBUS.DAXI_Interface_I1_n_8 ),
        .\LOCKSTEP_Out_reg[3797]_0 (\Use_DBUS.DAXI_Interface_I1_n_9 ),
        .\LOCKSTEP_Out_reg[3798] (\Use_DBUS.DAXI_Interface_I1_n_6 ),
        .\LOCKSTEP_Out_reg[3798]_0 (\Use_DBUS.DAXI_Interface_I1_n_7 ),
        .\LOCKSTEP_Out_reg[3799] (\Use_DBUS.DAXI_Interface_I1_n_4 ),
        .\LOCKSTEP_Out_reg[3799]_0 (\Use_DBUS.DAXI_Interface_I1_n_5 ),
        .\LOCKSTEP_Out_reg[3800] (\Use_DBUS.DAXI_Interface_I1_n_2 ),
        .\LOCKSTEP_Out_reg[3800]_0 (\Use_DBUS.DAXI_Interface_I1_n_3 ),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_AWVALID_i(M_AXI_DP_AWVALID_i),
        .M_AXI_DP_AWVALID_i1(M_AXI_DP_AWVALID_i1),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Q({wb_dlmb_valid_read_data[0],wb_dlmb_valid_read_data[1],wb_dlmb_valid_read_data[2],wb_dlmb_valid_read_data[3],wb_dlmb_valid_read_data[4],wb_dlmb_valid_read_data[5],wb_dlmb_valid_read_data[6],wb_dlmb_valid_read_data[7],wb_dlmb_valid_read_data[8],wb_dlmb_valid_read_data[9],wb_dlmb_valid_read_data[10],wb_dlmb_valid_read_data[11],wb_dlmb_valid_read_data[12],wb_dlmb_valid_read_data[13],wb_dlmb_valid_read_data[14],wb_dlmb_valid_read_data[15],wb_dlmb_valid_read_data[16],wb_dlmb_valid_read_data[17],wb_dlmb_valid_read_data[18],wb_dlmb_valid_read_data[19],wb_dlmb_valid_read_data[20],wb_dlmb_valid_read_data[21],wb_dlmb_valid_read_data[22],wb_dlmb_valid_read_data[23],wb_dlmb_valid_read_data[24],wb_dlmb_valid_read_data[25],wb_dlmb_valid_read_data[26],wb_dlmb_valid_read_data[27],wb_dlmb_valid_read_data[28],wb_dlmb_valid_read_data[29],wb_dlmb_valid_read_data[30],wb_dlmb_valid_read_data[31]}),
        .Trace_WB_Jump_Hit_reg(\Use_DBUS.DAXI_Interface_I1_n_42 ),
        .active_access_d1(active_access_d1),
        .mem_databus_write(mem_databus_write),
        .mem_daxi_exclusive_failed(mem_daxi_exclusive_failed),
        .out(out),
        .\wb_read_lsb_1_sel_reg[0] ({Data_Flow_I_n_396,Data_Flow_I_n_397}),
        .\wb_read_lsb_sel_reg[0] (Data_Flow_I_n_398),
        .wb_read_msb_doublet_sel(wb_read_msb_doublet_sel));
  system_microblaze_0_0_MB_AND2B1L \Use_DLMB.Using_Latch_AS_Logic.AND2B1L_I1 
       (.D(D[263]),
        .SRI(SRI),
        .mem_valid_reg(Trace_WB_Jump_Hit_reg));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[0]),
        .Q(wb_dlmb_valid_read_data[0]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[10]),
        .Q(wb_dlmb_valid_read_data[10]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[11]),
        .Q(wb_dlmb_valid_read_data[11]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[12]),
        .Q(wb_dlmb_valid_read_data[12]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[13]),
        .Q(wb_dlmb_valid_read_data[13]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[14]),
        .Q(wb_dlmb_valid_read_data[14]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[15]),
        .Q(wb_dlmb_valid_read_data[15]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[16]),
        .Q(wb_dlmb_valid_read_data[16]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[17]),
        .Q(wb_dlmb_valid_read_data[17]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[18]),
        .Q(wb_dlmb_valid_read_data[18]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[19]),
        .Q(wb_dlmb_valid_read_data[19]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[1]),
        .Q(wb_dlmb_valid_read_data[1]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[20]),
        .Q(wb_dlmb_valid_read_data[20]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[21]),
        .Q(wb_dlmb_valid_read_data[21]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[22]),
        .Q(wb_dlmb_valid_read_data[22]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[23]),
        .Q(wb_dlmb_valid_read_data[23]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[24]),
        .Q(wb_dlmb_valid_read_data[24]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[25]),
        .Q(wb_dlmb_valid_read_data[25]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[26]),
        .Q(wb_dlmb_valid_read_data[26]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[27]),
        .Q(wb_dlmb_valid_read_data[27]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[28]),
        .Q(wb_dlmb_valid_read_data[28]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[29]),
        .Q(wb_dlmb_valid_read_data[29]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[2]),
        .Q(wb_dlmb_valid_read_data[2]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[30]),
        .Q(wb_dlmb_valid_read_data[30]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[31]),
        .Q(wb_dlmb_valid_read_data[31]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[3]),
        .Q(wb_dlmb_valid_read_data[3]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[4]),
        .Q(wb_dlmb_valid_read_data[4]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[5]),
        .Q(wb_dlmb_valid_read_data[5]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[6]),
        .Q(wb_dlmb_valid_read_data[6]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[7]),
        .Q(wb_dlmb_valid_read_data[7]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[8]),
        .Q(wb_dlmb_valid_read_data[8]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  FDRE \Use_DLMB.wb_dlmb_valid_read_data_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Read[9]),
        .Q(wb_dlmb_valid_read_data[9]),
        .R(\Synchronize.use_sync_reset.sync_reg[2]_0 ));
  system_microblaze_0_0_Debug \Use_Debug_Logic.Master_Core.Debug_Perf 
       (.Address(of_pc),
        .Clk(Clk),
        .D({D[361],D[152:137],D[111:96],D[72]}),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .Dbg_Reg_En(Dbg_Reg_En),
        .\Dbg_Reg_En[2]_0 (\Dbg_Reg_En[2]_0 ),
        .\Dbg_Reg_En[2]_1 (\Dbg_Reg_En[2]_1 ),
        .\Dbg_Reg_En_2__s_port_] (Dbg_Reg_En_2__s_net_1),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Dbg_Update(Dbg_Update),
        .IB_Ready(IB_Ready),
        .IReady(IReady),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .\LOCKSTEP_Out_reg[0] (D[362]),
        .MEM_DataBus_Access_reg(mem_databus_access),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_7 ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_10 ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 (Decode_I_n_357),
        .\Performace_Debug_Control.ex_watchpoint_brk_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_13 ),
        .\Performace_Debug_Control.ex_watchpoint_brk_reg_1 (Decode_I_n_394),
        .\Performace_Debug_Control.normal_stop_i_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_5 ),
        .\Performace_Debug_Control.watchpoint_brk_hold_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_11 ),
        .Q({\Use_Debug_Logic.Master_Core.Debug_Perf_n_62 ,\Use_Debug_Logic.Master_Core.Debug_Perf_n_63 }),
        .Reset_Mode(Reset_Mode),
        .Rst18_out(Rst18_out),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .\Single_Synchronize.use_async_reset.sync_reg (\Use_Debug_Logic.Master_Core.Debug_Perf_n_3 ),
        .\Single_Synchronize.use_async_reset.sync_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_6 ),
        .Sleep_Decode(Sleep_Decode),
        .\Synchronize.use_sync_reset.sync_reg[2] (\Synchronize.use_sync_reset.sync_reg[2] ),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (Decode_I_n_345),
        .\Using_FPGA.Native (\Use_Debug_Logic.Master_Core.Debug_Perf_n_61 ),
        .\Using_FPGA.Native_0 (use_Reg_Neg_S_reg),
        .\Using_FPGA.Native_1 (Data_Flow_I_n_295),
        .Wakeup(Wakeup),
        .command_reg_clear_reg_0(\Use_Debug_Logic.Master_Core.Debug_Perf_n_2 ),
        .\control_reg_reg[8]_0 (Decode_I_n_358),
        .dbg_clean_stop(dbg_clean_stop),
        .dbg_state_i(dbg_state_i),
        .dbg_stop_i(dbg_stop_i),
        .dbg_stop_if_delay_i(dbg_stop_if_delay_i),
        .ex_Exception_Taken(ex_Exception_Taken),
        .ex_branch_with_delayslot_reg(E),
        .exception_reg_0(Decode_I_n_355),
        .executing0(executing0),
        .\if_pc_reg[29] (\Use_Debug_Logic.Master_Core.Debug_Perf_n_15 ),
        .\instr_read_reg_reg[0]_0 ({instr_rd_reg[0],instr_rd_reg[1]}),
        .mem_Exception_Taken(mem_Exception_Taken),
        .mem_valid_reg(Trace_WB_Jump_Hit_reg),
        .no_sleeping(no_sleeping),
        .out(out),
        .p_36_out(p_36_out),
        .saved_reset_mode_dbg_halt(saved_reset_mode_dbg_halt),
        .start_dbg_exec_reg_0(\Use_Debug_Logic.Master_Core.Debug_Perf_n_0 ),
        .wb_Halted(wb_Halted),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .wb_gpr_write_dbg_reg(Data_Flow_I_n_294),
        .wb_gpr_write_dbg_reg_0(Data_Flow_I_n_293),
        .wb_gpr_write_dbg_reg_1(Data_Flow_I_n_292),
        .wb_gpr_write_dbg_reg_10(Data_Flow_I_n_283),
        .wb_gpr_write_dbg_reg_11(Data_Flow_I_n_282),
        .wb_gpr_write_dbg_reg_12(Data_Flow_I_n_281),
        .wb_gpr_write_dbg_reg_13(Data_Flow_I_n_280),
        .wb_gpr_write_dbg_reg_2(Data_Flow_I_n_291),
        .wb_gpr_write_dbg_reg_3(Data_Flow_I_n_290),
        .wb_gpr_write_dbg_reg_4(Data_Flow_I_n_289),
        .wb_gpr_write_dbg_reg_5(Data_Flow_I_n_288),
        .wb_gpr_write_dbg_reg_6(Data_Flow_I_n_287),
        .wb_gpr_write_dbg_reg_7(Data_Flow_I_n_286),
        .wb_gpr_write_dbg_reg_8(Data_Flow_I_n_285),
        .wb_gpr_write_dbg_reg_9(Data_Flow_I_n_284),
        .wb_pc_valid(wb_pc_valid),
        .wb_read_imm_reg(wb_read_imm_reg),
        .wb_read_imm_reg_1(wb_read_imm_reg_1),
        .wb_valid_reg(Decode_I_n_356));
  system_microblaze_0_0_instr_mux instr_mux_I
       (.I041_out(\PreFetch_Buffer_I1/I041_out ),
        .I139_out(\PreFetch_Buffer_I1/I139_out ),
        .Instr(Instr),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[39],LOCKSTEP_Master_Out[31:0]}),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (Decode_I_n_35),
        .\Using_FPGA.Native (of_predecode),
        .\Using_FPGA.Native_0 ({if_sel_input[3],if_sel_input[4]}),
        .\Using_FPGA.Native_1 (\PreFetch_Buffer_I1/p_1_in49_in ),
        .in({ib_data[0],ib_data[1],ib_data[2],ib_data[3],ib_data[4],ib_data[5],ib_data[6],ib_data[7],ib_data[8],ib_data[9],ib_data[10],ib_data[21],ib_data[22],ib_data[23],ib_data[24],ib_data[25],ib_data[26],ib_data[27],ib_data[28],ib_data[29],ib_data[30],ib_data[31],\PreFetch_Buffer_I1/if_predecode ,ib_data[11],ib_data[12],ib_data[13],ib_data[14],ib_data[15],ib_data[16],ib_data[17],ib_data[18],ib_data[19],ib_data[20]}));
  FDRE \interrupt_address_d1_reg[0] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[0]),
        .Q(interrupt_address_d1[0]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[10] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[10]),
        .Q(interrupt_address_d1[10]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[11] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[11]),
        .Q(interrupt_address_d1[11]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[12] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[12]),
        .Q(interrupt_address_d1[12]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[13] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[13]),
        .Q(interrupt_address_d1[13]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[14] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[14]),
        .Q(interrupt_address_d1[14]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[15] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[15]),
        .Q(interrupt_address_d1[15]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[16] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[16]),
        .Q(interrupt_address_d1[16]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[17] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[17]),
        .Q(interrupt_address_d1[17]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[18] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[18]),
        .Q(interrupt_address_d1[18]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[19] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[19]),
        .Q(interrupt_address_d1[19]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[1] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[1]),
        .Q(interrupt_address_d1[1]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[20] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[20]),
        .Q(interrupt_address_d1[20]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[21] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[21]),
        .Q(interrupt_address_d1[21]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[22] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[22]),
        .Q(interrupt_address_d1[22]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[23] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[23]),
        .Q(interrupt_address_d1[23]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[24] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[24]),
        .Q(interrupt_address_d1[24]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[25] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[25]),
        .Q(interrupt_address_d1[25]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[26] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[26]),
        .Q(interrupt_address_d1[26]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[27] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[27]),
        .Q(interrupt_address_d1[27]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[28] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[28]),
        .Q(interrupt_address_d1[28]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[29] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[29]),
        .Q(interrupt_address_d1[29]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[2] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[2]),
        .Q(interrupt_address_d1[2]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[30] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[30]),
        .Q(interrupt_address_d1[30]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[31] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[31]),
        .Q(interrupt_address_d1[31]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[3] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[3]),
        .Q(interrupt_address_d1[3]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[4] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[4]),
        .Q(interrupt_address_d1[4]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[5] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[5]),
        .Q(interrupt_address_d1[5]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[6] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[6]),
        .Q(interrupt_address_d1[6]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[7] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[7]),
        .Q(interrupt_address_d1[7]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[8] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[8]),
        .Q(interrupt_address_d1[8]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[9] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[9]),
        .Q(interrupt_address_d1[9]),
        .R(1'b0));
  system_microblaze_0_0_carry_or mem_databus_ready_sel_carry_or
       (.lopt(lopt_3),
        .lopt_1(lopt_4),
        .mem_access_completed_reg(\Use_DBUS.DAXI_Interface_I1_n_42 ),
        .mem_databus_ready(mem_databus_ready));
  FDRE trace_data_access_i_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(mem_databus_access),
        .Q(D[3]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[0] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[256]),
        .Q(D[71]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[10] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[246]),
        .Q(D[61]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[11] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[245]),
        .Q(D[60]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[12] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[244]),
        .Q(D[59]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[13] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[243]),
        .Q(D[58]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[14] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[242]),
        .Q(D[57]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[15] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[241]),
        .Q(D[56]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[16] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[240]),
        .Q(D[55]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[17] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[239]),
        .Q(D[54]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[18] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[238]),
        .Q(D[53]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[19] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[237]),
        .Q(D[52]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[1] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[255]),
        .Q(D[70]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[20] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[236]),
        .Q(D[51]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[21] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[235]),
        .Q(D[50]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[22] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[234]),
        .Q(D[49]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[23] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[233]),
        .Q(D[48]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[24] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[232]),
        .Q(D[47]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[25] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[231]),
        .Q(D[46]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[26] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[230]),
        .Q(D[45]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[27] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[229]),
        .Q(D[44]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[28] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[228]),
        .Q(D[43]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[29] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[227]),
        .Q(D[42]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[2] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[254]),
        .Q(D[69]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[30] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[226]),
        .Q(D[41]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[31] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[225]),
        .Q(D[40]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[3] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[253]),
        .Q(D[68]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[4] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[252]),
        .Q(D[67]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[5] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[251]),
        .Q(D[66]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[6] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[250]),
        .Q(D[65]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[7] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[249]),
        .Q(D[64]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[8] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[248]),
        .Q(D[63]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[9] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[247]),
        .Q(D[62]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[0] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[191]),
        .Q(D[7]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[1] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[190]),
        .Q(D[6]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[2] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[189]),
        .Q(D[5]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[3] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[188]),
        .Q(D[4]),
        .R(1'b0));
  FDRE trace_data_read_i_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(mem_databus_read),
        .Q(D[2]),
        .R(1'b0));
  FDRE trace_data_write_i_reg
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(mem_databus_write),
        .Q(D[1]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[0] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[223]),
        .Q(D[39]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[10] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[213]),
        .Q(D[29]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[11] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[212]),
        .Q(D[28]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[12] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[211]),
        .Q(D[27]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[13] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[210]),
        .Q(D[26]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[14] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[209]),
        .Q(D[25]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[15] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[208]),
        .Q(D[24]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[16] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[207]),
        .Q(D[23]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[17] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[206]),
        .Q(D[22]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[18] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[205]),
        .Q(D[21]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[19] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[204]),
        .Q(D[20]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[1] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[222]),
        .Q(D[38]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[20] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[203]),
        .Q(D[19]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[21] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[202]),
        .Q(D[18]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[22] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[201]),
        .Q(D[17]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[23] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[200]),
        .Q(D[16]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[24] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[199]),
        .Q(D[15]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[25] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[198]),
        .Q(D[14]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[26] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[197]),
        .Q(D[13]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[27] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[196]),
        .Q(D[12]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[28] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[195]),
        .Q(D[11]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[29] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[194]),
        .Q(D[10]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[2] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[221]),
        .Q(D[37]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[30] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[193]),
        .Q(D[9]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[31] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[192]),
        .Q(D[8]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[3] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[220]),
        .Q(D[36]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[4] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[219]),
        .Q(D[35]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[5] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[218]),
        .Q(D[34]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[6] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[217]),
        .Q(D[33]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[7] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[216]),
        .Q(D[32]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[8] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[215]),
        .Q(D[31]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[9] 
       (.C(Clk),
        .CE(Trace_WB_Jump_Hit_reg),
        .D(D[214]),
        .Q(D[30]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "Operand_Select_gti" *) 
module system_microblaze_0_0_Operand_Select_gti
   (\Using_FPGA.Native ,
    Q,
    \MEM_DataBus_Addr_reg[0] ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \mem_byte_selects_reg[0] ,
    \Data_Addr[30] ,
    S,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \MEM_DataBus_Addr_reg[0]_0 ,
    \Using_FPGA.Native_34 ,
    \Zero_Detecting[1].nibble_Zero_reg ,
    \Zero_Detecting[2].nibble_Zero_reg ,
    \Zero_Detecting[3].nibble_Zero_reg ,
    \Zero_Detecting[4].nibble_Zero_reg ,
    \Zero_Detecting[5].nibble_Zero_reg ,
    \Using_FPGA.Native_35 ,
    \Zero_Detecting[0].nibble_Zero_reg ,
    \EX_Op2_reg[0]_0 ,
    of_op1_sel_spr,
    D,
    I1,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_44 ,
    \Using_FPGA.Native_45 ,
    \Using_FPGA.Native_46 ,
    \Using_FPGA.Native_47 ,
    \Using_FPGA.Native_48 ,
    \Using_FPGA.Native_49 ,
    \Using_FPGA.Native_50 ,
    \Using_FPGA.Native_51 ,
    \Using_FPGA.Native_52 ,
    \Using_FPGA.Native_53 ,
    \Using_FPGA.Native_54 ,
    \Using_FPGA.Native_55 ,
    \Using_FPGA.Native_56 ,
    \Using_FPGA.Native_57 ,
    \Using_FPGA.Native_58 ,
    \Using_FPGA.Native_59 ,
    \Using_FPGA.Native_60 ,
    \Using_FPGA.Native_61 ,
    \Using_FPGA.Native_62 ,
    \Using_FPGA.Native_63 ,
    \Using_FPGA.Native_64 ,
    \Using_FPGA.Native_65 ,
    \Using_FPGA.Native_66 ,
    ex_MSR,
    ex_Take_Intr_or_Exc_reg,
    wb_sel_spr_shr,
    ex_move_to_MSR_instr,
    ex_reverse_byteorder,
    ex_byte_access,
    ex_doublet_access,
    ex_cmp_op,
    ex_swap_byte_instr,
    \EX_Sext_Op_reg[0] ,
    out,
    E,
    of_imm_data,
    Clk,
    \Using_FPGA.Native_67 ,
    \interrupt_address_d1_reg[0] ,
    WB_Doublet_Access_reg);
  output \Using_FPGA.Native ;
  output [31:0]Q;
  output [31:0]\MEM_DataBus_Addr_reg[0] ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output [1:0]\mem_byte_selects_reg[0] ;
  output [33:0]\Data_Addr[30] ;
  output S;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output \Using_FPGA.Native_21 ;
  output \Using_FPGA.Native_22 ;
  output \Using_FPGA.Native_23 ;
  output \Using_FPGA.Native_24 ;
  output \Using_FPGA.Native_25 ;
  output \Using_FPGA.Native_26 ;
  output \Using_FPGA.Native_27 ;
  output \Using_FPGA.Native_28 ;
  output \Using_FPGA.Native_29 ;
  output \Using_FPGA.Native_30 ;
  output \Using_FPGA.Native_31 ;
  output \Using_FPGA.Native_32 ;
  output \Using_FPGA.Native_33 ;
  output \MEM_DataBus_Addr_reg[0]_0 ;
  output \Using_FPGA.Native_34 ;
  output \Zero_Detecting[1].nibble_Zero_reg ;
  output \Zero_Detecting[2].nibble_Zero_reg ;
  output \Zero_Detecting[3].nibble_Zero_reg ;
  output \Zero_Detecting[4].nibble_Zero_reg ;
  output \Zero_Detecting[5].nibble_Zero_reg ;
  output [0:0]\Using_FPGA.Native_35 ;
  output \Zero_Detecting[0].nibble_Zero_reg ;
  output [15:0]\EX_Op2_reg[0]_0 ;
  input of_op1_sel_spr;
  input [31:0]D;
  input I1;
  input \Using_FPGA.Native_36 ;
  input \Using_FPGA.Native_37 ;
  input \Using_FPGA.Native_38 ;
  input \Using_FPGA.Native_39 ;
  input \Using_FPGA.Native_40 ;
  input \Using_FPGA.Native_41 ;
  input \Using_FPGA.Native_42 ;
  input \Using_FPGA.Native_43 ;
  input \Using_FPGA.Native_44 ;
  input \Using_FPGA.Native_45 ;
  input \Using_FPGA.Native_46 ;
  input \Using_FPGA.Native_47 ;
  input \Using_FPGA.Native_48 ;
  input \Using_FPGA.Native_49 ;
  input \Using_FPGA.Native_50 ;
  input \Using_FPGA.Native_51 ;
  input \Using_FPGA.Native_52 ;
  input \Using_FPGA.Native_53 ;
  input \Using_FPGA.Native_54 ;
  input \Using_FPGA.Native_55 ;
  input \Using_FPGA.Native_56 ;
  input \Using_FPGA.Native_57 ;
  input \Using_FPGA.Native_58 ;
  input \Using_FPGA.Native_59 ;
  input \Using_FPGA.Native_60 ;
  input \Using_FPGA.Native_61 ;
  input \Using_FPGA.Native_62 ;
  input \Using_FPGA.Native_63 ;
  input \Using_FPGA.Native_64 ;
  input \Using_FPGA.Native_65 ;
  input \Using_FPGA.Native_66 ;
  input [2:0]ex_MSR;
  input ex_Take_Intr_or_Exc_reg;
  input wb_sel_spr_shr;
  input ex_move_to_MSR_instr;
  input ex_reverse_byteorder;
  input ex_byte_access;
  input ex_doublet_access;
  input ex_cmp_op;
  input ex_swap_byte_instr;
  input [1:0]\EX_Sext_Op_reg[0] ;
  input [0:0]out;
  input [0:0]E;
  input [0:15]of_imm_data;
  input Clk;
  input \Using_FPGA.Native_67 ;
  input [31:0]\interrupt_address_d1_reg[0] ;
  input [31:0]WB_Doublet_Access_reg;

  wire Clk;
  wire [31:0]D;
  wire [33:0]\Data_Addr[30] ;
  wire [0:0]E;
  wire [15:0]\EX_Op2_reg[0]_0 ;
  wire [1:0]\EX_Sext_Op_reg[0] ;
  wire \Gen_Bit[31].MUXF7_I1_n_0 ;
  wire I1;
  wire [31:0]\MEM_DataBus_Addr_reg[0] ;
  wire \MEM_DataBus_Addr_reg[0]_0 ;
  wire O;
  wire O0_out;
  wire O10_out;
  wire O11_out;
  wire O12_out;
  wire O13_out;
  wire O14_out;
  wire O15_out;
  wire O16_out;
  wire O17_out;
  wire O18_out;
  wire O19_out;
  wire O1_out;
  wire O20_out;
  wire O21_out;
  wire O22_out;
  wire O23_out;
  wire O24_out;
  wire O25_out;
  wire O26_out;
  wire O27_out;
  wire O28_out;
  wire O29_out;
  wire O2_out;
  wire O3_out;
  wire O4_out;
  wire O5_out;
  wire O6_out;
  wire O7_out;
  wire O8_out;
  wire O9_out;
  wire [31:0]Q;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire [0:0]\Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire \Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire \Using_FPGA.Native_47 ;
  wire \Using_FPGA.Native_48 ;
  wire \Using_FPGA.Native_49 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_50 ;
  wire \Using_FPGA.Native_51 ;
  wire \Using_FPGA.Native_52 ;
  wire \Using_FPGA.Native_53 ;
  wire \Using_FPGA.Native_54 ;
  wire \Using_FPGA.Native_55 ;
  wire \Using_FPGA.Native_56 ;
  wire \Using_FPGA.Native_57 ;
  wire \Using_FPGA.Native_58 ;
  wire \Using_FPGA.Native_59 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_60 ;
  wire \Using_FPGA.Native_61 ;
  wire \Using_FPGA.Native_62 ;
  wire \Using_FPGA.Native_63 ;
  wire \Using_FPGA.Native_64 ;
  wire \Using_FPGA.Native_65 ;
  wire \Using_FPGA.Native_66 ;
  wire \Using_FPGA.Native_67 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [31:0]WB_Doublet_Access_reg;
  wire \Zero_Detecting[0].nibble_Zero_reg ;
  wire \Zero_Detecting[1].nibble_Zero_reg ;
  wire \Zero_Detecting[2].nibble_Zero_reg ;
  wire \Zero_Detecting[3].nibble_Zero_reg ;
  wire \Zero_Detecting[4].nibble_Zero_reg ;
  wire \Zero_Detecting[5].nibble_Zero_reg ;
  wire [2:0]ex_MSR;
  wire ex_Take_Intr_or_Exc_reg;
  wire [1:31]ex_branch_cmp_op1;
  wire ex_byte_access;
  wire ex_cmp_op;
  wire ex_doublet_access;
  wire ex_move_to_MSR_instr;
  wire [0:31]ex_op3;
  wire ex_reverse_byteorder;
  wire ex_swap_byte_instr;
  wire [31:0]\interrupt_address_d1_reg[0] ;
  wire [1:0]\mem_byte_selects_reg[0] ;
  wire [0:15]of_imm_data;
  wire of_op1_sel_spr;
  wire [0:0]out;
  wire wb_sel_spr_shr;

  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'h956A6A95)) 
    \Byte_Enable[0]_INST_0_i_1 
       (.I0(ex_reverse_byteorder),
        .I1(\MEM_DataBus_Addr_reg[0] [0]),
        .I2(Q[0]),
        .I3(\MEM_DataBus_Addr_reg[0] [1]),
        .I4(Q[1]),
        .O(\mem_byte_selects_reg[0] [1]));
  LUT6 #(
    .INIT(64'h8778877887780000)) 
    \Data_Addr[30]_INST_0 
       (.I0(\MEM_DataBus_Addr_reg[0] [0]),
        .I1(Q[0]),
        .I2(\MEM_DataBus_Addr_reg[0] [1]),
        .I3(Q[1]),
        .I4(ex_doublet_access),
        .I5(ex_byte_access),
        .O(\Data_Addr[30] [33]));
  LUT3 #(
    .INIT(8'h28)) 
    \Data_Addr[31]_INST_0 
       (.I0(ex_byte_access),
        .I1(\MEM_DataBus_Addr_reg[0] [0]),
        .I2(Q[0]),
        .O(\Data_Addr[30] [32]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \Data_Write[0]_INST_0 
       (.I0(ex_op3[24]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[16]),
        .I4(ex_doublet_access),
        .I5(ex_op3[0]),
        .O(\Data_Addr[30] [31]));
  LUT6 #(
    .INIT(64'hAAFBAA0BAAF8AA08)) 
    \Data_Write[10]_INST_0 
       (.I0(ex_op3[26]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[18]),
        .I5(ex_op3[10]),
        .O(\Data_Addr[30] [21]));
  LUT6 #(
    .INIT(64'hAAFBAA0BAAF8AA08)) 
    \Data_Write[11]_INST_0 
       (.I0(ex_op3[27]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[19]),
        .I5(ex_op3[11]),
        .O(\Data_Addr[30] [20]));
  LUT6 #(
    .INIT(64'hAAFBAA0BAAF8AA08)) 
    \Data_Write[12]_INST_0 
       (.I0(ex_op3[28]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[20]),
        .I5(ex_op3[12]),
        .O(\Data_Addr[30] [19]));
  LUT6 #(
    .INIT(64'hAAFBAA0BAAF8AA08)) 
    \Data_Write[13]_INST_0 
       (.I0(ex_op3[29]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[21]),
        .I5(ex_op3[13]),
        .O(\Data_Addr[30] [18]));
  LUT6 #(
    .INIT(64'hAAFBAA0BAAF8AA08)) 
    \Data_Write[14]_INST_0 
       (.I0(ex_op3[30]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[22]),
        .I5(ex_op3[14]),
        .O(\Data_Addr[30] [17]));
  LUT6 #(
    .INIT(64'hAAFBAA0BAAF8AA08)) 
    \Data_Write[15]_INST_0 
       (.I0(ex_op3[31]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[23]),
        .I5(ex_op3[15]),
        .O(\Data_Addr[30] [16]));
  LUT6 #(
    .INIT(64'hAABFAA8FAAB0AA80)) 
    \Data_Write[16]_INST_0 
       (.I0(ex_op3[24]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[8]),
        .I5(ex_op3[16]),
        .O(\Data_Addr[30] [15]));
  LUT6 #(
    .INIT(64'hAABFAA8FAAB0AA80)) 
    \Data_Write[17]_INST_0 
       (.I0(ex_op3[25]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[9]),
        .I5(ex_op3[17]),
        .O(\Data_Addr[30] [14]));
  LUT6 #(
    .INIT(64'hAABFAA8FAAB0AA80)) 
    \Data_Write[18]_INST_0 
       (.I0(ex_op3[26]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[10]),
        .I5(ex_op3[18]),
        .O(\Data_Addr[30] [13]));
  LUT6 #(
    .INIT(64'hAABFAA8FAAB0AA80)) 
    \Data_Write[19]_INST_0 
       (.I0(ex_op3[27]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[11]),
        .I5(ex_op3[19]),
        .O(\Data_Addr[30] [12]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \Data_Write[1]_INST_0 
       (.I0(ex_op3[25]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[17]),
        .I4(ex_doublet_access),
        .I5(ex_op3[1]),
        .O(\Data_Addr[30] [30]));
  LUT6 #(
    .INIT(64'hAABFAA8FAAB0AA80)) 
    \Data_Write[20]_INST_0 
       (.I0(ex_op3[28]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[12]),
        .I5(ex_op3[20]),
        .O(\Data_Addr[30] [11]));
  LUT6 #(
    .INIT(64'hAABFAA8FAAB0AA80)) 
    \Data_Write[21]_INST_0 
       (.I0(ex_op3[29]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[13]),
        .I5(ex_op3[21]),
        .O(\Data_Addr[30] [10]));
  LUT6 #(
    .INIT(64'hAABFAA8FAAB0AA80)) 
    \Data_Write[22]_INST_0 
       (.I0(ex_op3[30]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[14]),
        .I5(ex_op3[22]),
        .O(\Data_Addr[30] [9]));
  LUT6 #(
    .INIT(64'hAABFAA8FAAB0AA80)) 
    \Data_Write[23]_INST_0 
       (.I0(ex_op3[31]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[15]),
        .I5(ex_op3[23]),
        .O(\Data_Addr[30] [8]));
  LUT6 #(
    .INIT(64'hAEA2AEAEAEA2A2A2)) 
    \Data_Write[24]_INST_0 
       (.I0(ex_op3[24]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[16]),
        .I4(ex_doublet_access),
        .I5(ex_op3[0]),
        .O(\Data_Addr[30] [7]));
  LUT6 #(
    .INIT(64'hAEA2AEAEAEA2A2A2)) 
    \Data_Write[25]_INST_0 
       (.I0(ex_op3[25]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[17]),
        .I4(ex_doublet_access),
        .I5(ex_op3[1]),
        .O(\Data_Addr[30] [6]));
  LUT6 #(
    .INIT(64'hAEA2AEAEAEA2A2A2)) 
    \Data_Write[26]_INST_0 
       (.I0(ex_op3[26]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[18]),
        .I4(ex_doublet_access),
        .I5(ex_op3[2]),
        .O(\Data_Addr[30] [5]));
  LUT6 #(
    .INIT(64'hAEA2AEAEAEA2A2A2)) 
    \Data_Write[27]_INST_0 
       (.I0(ex_op3[27]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[19]),
        .I4(ex_doublet_access),
        .I5(ex_op3[3]),
        .O(\Data_Addr[30] [4]));
  LUT6 #(
    .INIT(64'hAEA2AEAEAEA2A2A2)) 
    \Data_Write[28]_INST_0 
       (.I0(ex_op3[28]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[20]),
        .I4(ex_doublet_access),
        .I5(ex_op3[4]),
        .O(\Data_Addr[30] [3]));
  LUT6 #(
    .INIT(64'hAEA2AEAEAEA2A2A2)) 
    \Data_Write[29]_INST_0 
       (.I0(ex_op3[29]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[21]),
        .I4(ex_doublet_access),
        .I5(ex_op3[5]),
        .O(\Data_Addr[30] [2]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \Data_Write[2]_INST_0 
       (.I0(ex_op3[26]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[18]),
        .I4(ex_doublet_access),
        .I5(ex_op3[2]),
        .O(\Data_Addr[30] [29]));
  LUT6 #(
    .INIT(64'hAEA2AEAEAEA2A2A2)) 
    \Data_Write[30]_INST_0 
       (.I0(ex_op3[30]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[22]),
        .I4(ex_doublet_access),
        .I5(ex_op3[6]),
        .O(\Data_Addr[30] [1]));
  LUT6 #(
    .INIT(64'hAEA2AEAEAEA2A2A2)) 
    \Data_Write[31]_INST_0 
       (.I0(ex_op3[31]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[23]),
        .I4(ex_doublet_access),
        .I5(ex_op3[7]),
        .O(\Data_Addr[30] [0]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \Data_Write[3]_INST_0 
       (.I0(ex_op3[27]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[19]),
        .I4(ex_doublet_access),
        .I5(ex_op3[3]),
        .O(\Data_Addr[30] [28]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \Data_Write[4]_INST_0 
       (.I0(ex_op3[28]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[20]),
        .I4(ex_doublet_access),
        .I5(ex_op3[4]),
        .O(\Data_Addr[30] [27]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \Data_Write[5]_INST_0 
       (.I0(ex_op3[29]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[21]),
        .I4(ex_doublet_access),
        .I5(ex_op3[5]),
        .O(\Data_Addr[30] [26]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \Data_Write[6]_INST_0 
       (.I0(ex_op3[30]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[22]),
        .I4(ex_doublet_access),
        .I5(ex_op3[6]),
        .O(\Data_Addr[30] [25]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \Data_Write[7]_INST_0 
       (.I0(ex_op3[31]),
        .I1(ex_reverse_byteorder),
        .I2(ex_byte_access),
        .I3(ex_op3[23]),
        .I4(ex_doublet_access),
        .I5(ex_op3[7]),
        .O(\Data_Addr[30] [24]));
  LUT6 #(
    .INIT(64'hAAFBAA0BAAF8AA08)) 
    \Data_Write[8]_INST_0 
       (.I0(ex_op3[24]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[16]),
        .I5(ex_op3[8]),
        .O(\Data_Addr[30] [23]));
  LUT6 #(
    .INIT(64'hAAFBAA0BAAF8AA08)) 
    \Data_Write[9]_INST_0 
       (.I0(ex_op3[25]),
        .I1(ex_doublet_access),
        .I2(ex_reverse_byteorder),
        .I3(ex_byte_access),
        .I4(ex_op3[17]),
        .I5(ex_op3[9]),
        .O(\Data_Addr[30] [22]));
  FDRE \EX_Branch_CMP_Op1_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[31]),
        .Q(\Using_FPGA.Native_35 ),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[10] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[21]),
        .Q(ex_branch_cmp_op1[10]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[11] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[20]),
        .Q(ex_branch_cmp_op1[11]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[12] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[19]),
        .Q(ex_branch_cmp_op1[12]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[13] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[18]),
        .Q(ex_branch_cmp_op1[13]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[14] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[17]),
        .Q(ex_branch_cmp_op1[14]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[15] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[16]),
        .Q(ex_branch_cmp_op1[15]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[16] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[15]),
        .Q(ex_branch_cmp_op1[16]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[17] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[14]),
        .Q(ex_branch_cmp_op1[17]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[18] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[13]),
        .Q(ex_branch_cmp_op1[18]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[19] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[12]),
        .Q(ex_branch_cmp_op1[19]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[1] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[30]),
        .Q(ex_branch_cmp_op1[1]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[20] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[11]),
        .Q(ex_branch_cmp_op1[20]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[21] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[10]),
        .Q(ex_branch_cmp_op1[21]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[22] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[9]),
        .Q(ex_branch_cmp_op1[22]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[23] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[8]),
        .Q(ex_branch_cmp_op1[23]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[24] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[7]),
        .Q(ex_branch_cmp_op1[24]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[25] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[6]),
        .Q(ex_branch_cmp_op1[25]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[26] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[5]),
        .Q(ex_branch_cmp_op1[26]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[27] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[4]),
        .Q(ex_branch_cmp_op1[27]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[28] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[3]),
        .Q(ex_branch_cmp_op1[28]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[29] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[2]),
        .Q(ex_branch_cmp_op1[29]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[2] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[29]),
        .Q(ex_branch_cmp_op1[2]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[30] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[1]),
        .Q(ex_branch_cmp_op1[30]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[31] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[0]),
        .Q(ex_branch_cmp_op1[31]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[3] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[28]),
        .Q(ex_branch_cmp_op1[3]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[4] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[27]),
        .Q(ex_branch_cmp_op1[4]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[5] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[26]),
        .Q(ex_branch_cmp_op1[5]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[6] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[25]),
        .Q(ex_branch_cmp_op1[6]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[7] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[24]),
        .Q(ex_branch_cmp_op1[7]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[8] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[23]),
        .Q(ex_branch_cmp_op1[8]),
        .R(out));
  FDRE \EX_Branch_CMP_Op1_reg[9] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(D[22]),
        .Q(ex_branch_cmp_op1[9]),
        .R(out));
  FDRE \EX_Op1_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O),
        .Q(Q[31]),
        .R(out));
  FDRE \EX_Op1_reg[10] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O20_out),
        .Q(Q[21]),
        .R(out));
  FDRE \EX_Op1_reg[11] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O19_out),
        .Q(Q[20]),
        .R(out));
  FDRE \EX_Op1_reg[12] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O18_out),
        .Q(Q[19]),
        .R(out));
  FDRE \EX_Op1_reg[13] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O17_out),
        .Q(Q[18]),
        .R(out));
  FDRE \EX_Op1_reg[14] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O16_out),
        .Q(Q[17]),
        .R(out));
  FDRE \EX_Op1_reg[15] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O15_out),
        .Q(Q[16]),
        .R(out));
  FDRE \EX_Op1_reg[16] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O14_out),
        .Q(Q[15]),
        .R(out));
  FDRE \EX_Op1_reg[17] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O13_out),
        .Q(Q[14]),
        .R(out));
  FDRE \EX_Op1_reg[18] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O12_out),
        .Q(Q[13]),
        .R(out));
  FDRE \EX_Op1_reg[19] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O11_out),
        .Q(Q[12]),
        .R(out));
  FDRE \EX_Op1_reg[1] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O29_out),
        .Q(Q[30]),
        .R(out));
  FDRE \EX_Op1_reg[20] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O10_out),
        .Q(Q[11]),
        .R(out));
  FDRE \EX_Op1_reg[21] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O9_out),
        .Q(Q[10]),
        .R(out));
  FDRE \EX_Op1_reg[22] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O8_out),
        .Q(Q[9]),
        .R(out));
  FDRE \EX_Op1_reg[23] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O7_out),
        .Q(Q[8]),
        .R(out));
  FDRE \EX_Op1_reg[24] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O6_out),
        .Q(Q[7]),
        .R(out));
  FDRE \EX_Op1_reg[25] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O5_out),
        .Q(Q[6]),
        .R(out));
  FDRE \EX_Op1_reg[26] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O4_out),
        .Q(Q[5]),
        .R(out));
  FDRE \EX_Op1_reg[27] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O3_out),
        .Q(Q[4]),
        .R(out));
  FDRE \EX_Op1_reg[28] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O2_out),
        .Q(Q[3]),
        .R(out));
  FDRE \EX_Op1_reg[29] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O1_out),
        .Q(Q[2]),
        .R(out));
  FDRE \EX_Op1_reg[2] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O28_out),
        .Q(Q[29]),
        .R(out));
  FDRE \EX_Op1_reg[30] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O0_out),
        .Q(Q[1]),
        .R(out));
  FDRE \EX_Op1_reg[31] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\Gen_Bit[31].MUXF7_I1_n_0 ),
        .Q(Q[0]),
        .R(out));
  FDRE \EX_Op1_reg[3] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O27_out),
        .Q(Q[28]),
        .R(out));
  FDRE \EX_Op1_reg[4] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O26_out),
        .Q(Q[27]),
        .R(out));
  FDRE \EX_Op1_reg[5] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O25_out),
        .Q(Q[26]),
        .R(out));
  FDRE \EX_Op1_reg[6] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O24_out),
        .Q(Q[25]),
        .R(out));
  FDRE \EX_Op1_reg[7] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O23_out),
        .Q(Q[24]),
        .R(out));
  FDRE \EX_Op1_reg[8] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O22_out),
        .Q(Q[23]),
        .R(out));
  FDRE \EX_Op1_reg[9] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(O21_out),
        .Q(Q[22]),
        .R(out));
  FDRE \EX_Op2_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [31]),
        .Q(\MEM_DataBus_Addr_reg[0] [31]),
        .R(out));
  FDRE \EX_Op2_reg[10] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [21]),
        .Q(\MEM_DataBus_Addr_reg[0] [21]),
        .R(out));
  FDRE \EX_Op2_reg[11] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [20]),
        .Q(\MEM_DataBus_Addr_reg[0] [20]),
        .R(out));
  FDRE \EX_Op2_reg[12] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [19]),
        .Q(\MEM_DataBus_Addr_reg[0] [19]),
        .R(out));
  FDRE \EX_Op2_reg[13] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [18]),
        .Q(\MEM_DataBus_Addr_reg[0] [18]),
        .R(out));
  FDRE \EX_Op2_reg[14] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [17]),
        .Q(\MEM_DataBus_Addr_reg[0] [17]),
        .R(out));
  FDRE \EX_Op2_reg[15] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [16]),
        .Q(\MEM_DataBus_Addr_reg[0] [16]),
        .R(out));
  FDRE \EX_Op2_reg[16] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [15]),
        .Q(\MEM_DataBus_Addr_reg[0] [15]),
        .R(out));
  FDRE \EX_Op2_reg[17] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [14]),
        .Q(\MEM_DataBus_Addr_reg[0] [14]),
        .R(out));
  FDRE \EX_Op2_reg[18] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [13]),
        .Q(\MEM_DataBus_Addr_reg[0] [13]),
        .R(out));
  FDRE \EX_Op2_reg[19] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [12]),
        .Q(\MEM_DataBus_Addr_reg[0] [12]),
        .R(out));
  FDRE \EX_Op2_reg[1] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [30]),
        .Q(\MEM_DataBus_Addr_reg[0] [30]),
        .R(out));
  FDRE \EX_Op2_reg[20] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [11]),
        .Q(\MEM_DataBus_Addr_reg[0] [11]),
        .R(out));
  FDRE \EX_Op2_reg[21] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [10]),
        .Q(\MEM_DataBus_Addr_reg[0] [10]),
        .R(out));
  FDRE \EX_Op2_reg[22] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [9]),
        .Q(\MEM_DataBus_Addr_reg[0] [9]),
        .R(out));
  FDRE \EX_Op2_reg[23] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [8]),
        .Q(\MEM_DataBus_Addr_reg[0] [8]),
        .R(out));
  FDRE \EX_Op2_reg[24] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [7]),
        .Q(\MEM_DataBus_Addr_reg[0] [7]),
        .R(out));
  FDRE \EX_Op2_reg[25] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [6]),
        .Q(\MEM_DataBus_Addr_reg[0] [6]),
        .R(out));
  FDRE \EX_Op2_reg[26] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [5]),
        .Q(\MEM_DataBus_Addr_reg[0] [5]),
        .R(out));
  FDRE \EX_Op2_reg[27] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [4]),
        .Q(\MEM_DataBus_Addr_reg[0] [4]),
        .R(out));
  FDRE \EX_Op2_reg[28] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [3]),
        .Q(\MEM_DataBus_Addr_reg[0] [3]),
        .R(out));
  FDRE \EX_Op2_reg[29] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [2]),
        .Q(\MEM_DataBus_Addr_reg[0] [2]),
        .R(out));
  FDRE \EX_Op2_reg[2] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [29]),
        .Q(\MEM_DataBus_Addr_reg[0] [29]),
        .R(out));
  FDRE \EX_Op2_reg[30] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [1]),
        .Q(\MEM_DataBus_Addr_reg[0] [1]),
        .R(out));
  FDRE \EX_Op2_reg[31] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [0]),
        .Q(\MEM_DataBus_Addr_reg[0] [0]),
        .R(out));
  FDRE \EX_Op2_reg[3] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [28]),
        .Q(\MEM_DataBus_Addr_reg[0] [28]),
        .R(out));
  FDRE \EX_Op2_reg[4] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [27]),
        .Q(\MEM_DataBus_Addr_reg[0] [27]),
        .R(out));
  FDRE \EX_Op2_reg[5] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [26]),
        .Q(\MEM_DataBus_Addr_reg[0] [26]),
        .R(out));
  FDRE \EX_Op2_reg[6] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [25]),
        .Q(\MEM_DataBus_Addr_reg[0] [25]),
        .R(out));
  FDRE \EX_Op2_reg[7] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [24]),
        .Q(\MEM_DataBus_Addr_reg[0] [24]),
        .R(out));
  FDRE \EX_Op2_reg[8] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [23]),
        .Q(\MEM_DataBus_Addr_reg[0] [23]),
        .R(out));
  FDRE \EX_Op2_reg[9] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(\interrupt_address_d1_reg[0] [22]),
        .Q(\MEM_DataBus_Addr_reg[0] [22]),
        .R(out));
  FDRE \EX_Op3_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[31]),
        .Q(ex_op3[0]),
        .R(out));
  FDRE \EX_Op3_reg[10] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[21]),
        .Q(ex_op3[10]),
        .R(out));
  FDRE \EX_Op3_reg[11] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[20]),
        .Q(ex_op3[11]),
        .R(out));
  FDRE \EX_Op3_reg[12] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[19]),
        .Q(ex_op3[12]),
        .R(out));
  FDRE \EX_Op3_reg[13] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[18]),
        .Q(ex_op3[13]),
        .R(out));
  FDRE \EX_Op3_reg[14] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[17]),
        .Q(ex_op3[14]),
        .R(out));
  FDRE \EX_Op3_reg[15] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[16]),
        .Q(ex_op3[15]),
        .R(out));
  FDRE \EX_Op3_reg[16] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[15]),
        .Q(ex_op3[16]),
        .R(out));
  FDRE \EX_Op3_reg[17] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[14]),
        .Q(ex_op3[17]),
        .R(out));
  FDRE \EX_Op3_reg[18] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[13]),
        .Q(ex_op3[18]),
        .R(out));
  FDRE \EX_Op3_reg[19] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[12]),
        .Q(ex_op3[19]),
        .R(out));
  FDRE \EX_Op3_reg[1] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[30]),
        .Q(ex_op3[1]),
        .R(out));
  FDRE \EX_Op3_reg[20] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[11]),
        .Q(ex_op3[20]),
        .R(out));
  FDRE \EX_Op3_reg[21] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[10]),
        .Q(ex_op3[21]),
        .R(out));
  FDRE \EX_Op3_reg[22] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[9]),
        .Q(ex_op3[22]),
        .R(out));
  FDRE \EX_Op3_reg[23] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[8]),
        .Q(ex_op3[23]),
        .R(out));
  FDRE \EX_Op3_reg[24] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[7]),
        .Q(ex_op3[24]),
        .R(out));
  FDRE \EX_Op3_reg[25] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[6]),
        .Q(ex_op3[25]),
        .R(out));
  FDRE \EX_Op3_reg[26] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[5]),
        .Q(ex_op3[26]),
        .R(out));
  FDRE \EX_Op3_reg[27] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[4]),
        .Q(ex_op3[27]),
        .R(out));
  FDRE \EX_Op3_reg[28] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[3]),
        .Q(ex_op3[28]),
        .R(out));
  FDRE \EX_Op3_reg[29] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[2]),
        .Q(ex_op3[29]),
        .R(out));
  FDRE \EX_Op3_reg[2] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[29]),
        .Q(ex_op3[2]),
        .R(out));
  FDRE \EX_Op3_reg[30] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[1]),
        .Q(ex_op3[30]),
        .R(out));
  FDRE \EX_Op3_reg[31] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[0]),
        .Q(ex_op3[31]),
        .R(out));
  FDRE \EX_Op3_reg[3] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[28]),
        .Q(ex_op3[3]),
        .R(out));
  FDRE \EX_Op3_reg[4] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[27]),
        .Q(ex_op3[4]),
        .R(out));
  FDRE \EX_Op3_reg[5] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[26]),
        .Q(ex_op3[5]),
        .R(out));
  FDRE \EX_Op3_reg[6] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[25]),
        .Q(ex_op3[6]),
        .R(out));
  FDRE \EX_Op3_reg[7] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[24]),
        .Q(ex_op3[7]),
        .R(out));
  FDRE \EX_Op3_reg[8] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[23]),
        .Q(ex_op3[8]),
        .R(out));
  FDRE \EX_Op3_reg[9] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_67 ),
        .D(WB_Doublet_Access_reg[22]),
        .Q(ex_op3[9]),
        .R(out));
  system_microblaze_0_0_MB_MUXF7_355 \Gen_Bit[0].MUXF7_I1 
       (.D(O),
        .I1(I1),
        .Q({Q[15],Q[7]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_33 ),
        .WB_Doublet_Access_reg(D[31]),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_356 \Gen_Bit[10].MUXF7_I1 
       (.D(O20_out),
        .Q({Q[13],Q[5]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_1 (D[21]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_45 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_357 \Gen_Bit[11].MUXF7_I1 
       (.D(O19_out),
        .Q({Q[12],Q[4]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_1 (D[20]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_46 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_358 \Gen_Bit[12].MUXF7_I1 
       (.D(O18_out),
        .Q({Q[11],Q[3]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_1 (D[19]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_47 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_359 \Gen_Bit[13].MUXF7_I1 
       (.D(O17_out),
        .Q({Q[10],Q[2]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_1 (D[18]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_48 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_360 \Gen_Bit[14].MUXF7_I1 
       (.D(O16_out),
        .Q({Q[9],Q[1]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_1 (D[17]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_49 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_361 \Gen_Bit[15].MUXF7_I1 
       (.D(O15_out),
        .Q({Q[8],Q[0]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_1 (D[16]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_50 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_362 \Gen_Bit[16].MUXF7_I1 
       (.D(O14_out),
        .Q({Q[31],Q[23]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_1 (D[15]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_51 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_363 \Gen_Bit[17].MUXF7_I1 
       (.D(O13_out),
        .Q({Q[30],Q[22]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_1 (D[14]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_52 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_364 \Gen_Bit[18].MUXF7_I1 
       (.D(O12_out),
        .Q({Q[29],Q[21]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_1 (D[13]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_53 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_365 \Gen_Bit[19].MUXF7_I1 
       (.D(O11_out),
        .Q({Q[28],Q[20]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_1 (D[12]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_54 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_366 \Gen_Bit[1].MUXF7_I1 
       (.D(O29_out),
        .Q({Q[14],Q[6]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_1 (D[30]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_36 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_367 \Gen_Bit[20].MUXF7_I1 
       (.D(O10_out),
        .Q({Q[27],Q[19]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_1 (D[11]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_55 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_368 \Gen_Bit[21].MUXF7_I1 
       (.D(O9_out),
        .Q({Q[26],Q[18]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_1 (D[10]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_56 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_369 \Gen_Bit[22].MUXF7_I1 
       (.D(O8_out),
        .Q({Q[25],Q[17]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_1 (D[9]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_57 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_370 \Gen_Bit[23].MUXF7_I1 
       (.D(O7_out),
        .Q({Q[24],Q[16]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_1 (D[8]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_58 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_371 \Gen_Bit[24].MUXF7_I1 
       (.D(O6_out),
        .Q({Q[31],Q[23]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_1 (D[7]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_59 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_372 \Gen_Bit[25].MUXF7_I1 
       (.D(O5_out),
        .Q({Q[30],Q[22]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_1 (D[6]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_60 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_373 \Gen_Bit[26].MUXF7_I1 
       (.D(O4_out),
        .Q({Q[29],Q[21]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_1 (D[5]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_61 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_374 \Gen_Bit[27].MUXF7_I1 
       (.D(O3_out),
        .Q({Q[28],Q[20]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_1 (D[4]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_62 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_375 \Gen_Bit[28].MUXF7_I1 
       (.D(O2_out),
        .Q({Q[27],Q[19]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_63 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr),
        .\wb_read_lsb_sel_reg[1] (D[3]));
  system_microblaze_0_0_MB_MUXF7_376 \Gen_Bit[29].MUXF7_I1 
       (.D(O1_out),
        .Q({Q[26],Q[18]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_64 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr),
        .\wb_read_lsb_sel_reg[1] (D[2]));
  system_microblaze_0_0_MB_MUXF7_377 \Gen_Bit[2].MUXF7_I1 
       (.D(O28_out),
        .Q({Q[13],Q[5]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_1 (D[29]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_37 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_378 \Gen_Bit[30].MUXF7_I1 
       (.D(O0_out),
        .Q({Q[25],Q[17]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_65 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr),
        .\wb_read_lsb_sel_reg[1] (D[1]));
  system_microblaze_0_0_MB_MUXF7_379 \Gen_Bit[31].MUXF7_I1 
       (.D(\Gen_Bit[31].MUXF7_I1_n_0 ),
        .Q({Q[24],Q[16]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (D[0]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_66 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_380 \Gen_Bit[3].MUXF7_I1 
       (.D(O27_out),
        .Q({Q[12],Q[4]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_1 (D[28]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_38 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_381 \Gen_Bit[4].MUXF7_I1 
       (.D(O26_out),
        .Q({Q[11],Q[3]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_1 (D[27]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_39 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_382 \Gen_Bit[5].MUXF7_I1 
       (.D(O25_out),
        .Q({Q[10],Q[2]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_1 (D[26]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_40 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_383 \Gen_Bit[6].MUXF7_I1 
       (.D(O24_out),
        .Q({Q[9],Q[1]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_1 (D[25]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_41 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_384 \Gen_Bit[7].MUXF7_I1 
       (.D(O23_out),
        .Q({Q[8],Q[0]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_1 (D[24]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_42 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_385 \Gen_Bit[8].MUXF7_I1 
       (.D(O22_out),
        .Q({Q[15],Q[7]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_1 (D[23]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_43 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  system_microblaze_0_0_MB_MUXF7_386 \Gen_Bit[9].MUXF7_I1 
       (.D(O21_out),
        .Q({Q[14],Q[6]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_1 (D[22]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_44 ),
        .ex_swap_byte_instr(ex_swap_byte_instr),
        .of_op1_sel_spr(of_op1_sel_spr));
  LUT3 #(
    .INIT(8'hD7)) 
    \Using_FPGA.Native_i_1__132 
       (.I0(ex_cmp_op),
        .I1(\MEM_DataBus_Addr_reg[0] [31]),
        .I2(Q[31]),
        .O(S));
  LUT3 #(
    .INIT(8'hD7)) 
    \Using_FPGA.Native_i_1__165 
       (.I0(ex_cmp_op),
        .I1(\MEM_DataBus_Addr_reg[0] [31]),
        .I2(Q[31]),
        .O(\MEM_DataBus_Addr_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_1__166 
       (.I0(ex_branch_cmp_op1[28]),
        .I1(ex_branch_cmp_op1[27]),
        .I2(ex_branch_cmp_op1[24]),
        .I3(ex_branch_cmp_op1[29]),
        .I4(ex_branch_cmp_op1[26]),
        .I5(ex_branch_cmp_op1[25]),
        .O(\Zero_Detecting[1].nibble_Zero_reg ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_1__167 
       (.I0(ex_branch_cmp_op1[22]),
        .I1(ex_branch_cmp_op1[21]),
        .I2(ex_branch_cmp_op1[18]),
        .I3(ex_branch_cmp_op1[23]),
        .I4(ex_branch_cmp_op1[20]),
        .I5(ex_branch_cmp_op1[19]),
        .O(\Zero_Detecting[2].nibble_Zero_reg ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_1__168 
       (.I0(ex_branch_cmp_op1[16]),
        .I1(ex_branch_cmp_op1[15]),
        .I2(ex_branch_cmp_op1[12]),
        .I3(ex_branch_cmp_op1[17]),
        .I4(ex_branch_cmp_op1[14]),
        .I5(ex_branch_cmp_op1[13]),
        .O(\Zero_Detecting[3].nibble_Zero_reg ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_1__169 
       (.I0(ex_branch_cmp_op1[10]),
        .I1(ex_branch_cmp_op1[9]),
        .I2(ex_branch_cmp_op1[6]),
        .I3(ex_branch_cmp_op1[11]),
        .I4(ex_branch_cmp_op1[8]),
        .I5(ex_branch_cmp_op1[7]),
        .O(\Zero_Detecting[4].nibble_Zero_reg ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.Native_i_1__170 
       (.I0(ex_branch_cmp_op1[4]),
        .I1(ex_branch_cmp_op1[3]),
        .I2(\Using_FPGA.Native_35 ),
        .I3(ex_branch_cmp_op1[5]),
        .I4(ex_branch_cmp_op1[2]),
        .I5(ex_branch_cmp_op1[1]),
        .O(\Zero_Detecting[5].nibble_Zero_reg ));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1__171 
       (.I0(ex_branch_cmp_op1[30]),
        .I1(ex_branch_cmp_op1[31]),
        .O(\Zero_Detecting[0].nibble_Zero_reg ));
  LUT6 #(
    .INIT(64'hACACACACFCCCCCCC)) 
    \Using_FPGA.Native_i_2__36 
       (.I0(Q[1]),
        .I1(ex_MSR[0]),
        .I2(ex_Take_Intr_or_Exc_reg),
        .I3(wb_sel_spr_shr),
        .I4(\MEM_DataBus_Addr_reg[0] [1]),
        .I5(ex_move_to_MSR_instr),
        .O(\Using_FPGA.Native ));
  LUT6 #(
    .INIT(64'hACACACACFCCCCCCC)) 
    \Using_FPGA.Native_i_3__0 
       (.I0(Q[3]),
        .I1(ex_MSR[2]),
        .I2(ex_Take_Intr_or_Exc_reg),
        .I3(wb_sel_spr_shr),
        .I4(\MEM_DataBus_Addr_reg[0] [3]),
        .I5(ex_move_to_MSR_instr),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'hACACACACFCCCCCCC)) 
    \Using_FPGA.Native_i_6 
       (.I0(Q[2]),
        .I1(ex_MSR[1]),
        .I2(ex_Take_Intr_or_Exc_reg),
        .I3(wb_sel_spr_shr),
        .I4(\MEM_DataBus_Addr_reg[0] [2]),
        .I5(ex_move_to_MSR_instr),
        .O(\Using_FPGA.Native_0 ));
  FDRE \imm_reg_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[0]),
        .Q(\EX_Op2_reg[0]_0 [15]),
        .R(out));
  FDRE \imm_reg_reg[10] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[10]),
        .Q(\EX_Op2_reg[0]_0 [5]),
        .R(out));
  FDRE \imm_reg_reg[11] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[11]),
        .Q(\EX_Op2_reg[0]_0 [4]),
        .R(out));
  FDRE \imm_reg_reg[12] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[12]),
        .Q(\EX_Op2_reg[0]_0 [3]),
        .R(out));
  FDRE \imm_reg_reg[13] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[13]),
        .Q(\EX_Op2_reg[0]_0 [2]),
        .R(out));
  FDRE \imm_reg_reg[14] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[14]),
        .Q(\EX_Op2_reg[0]_0 [1]),
        .R(out));
  FDRE \imm_reg_reg[15] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[15]),
        .Q(\EX_Op2_reg[0]_0 [0]),
        .R(out));
  FDRE \imm_reg_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[1]),
        .Q(\EX_Op2_reg[0]_0 [14]),
        .R(out));
  FDRE \imm_reg_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[2]),
        .Q(\EX_Op2_reg[0]_0 [13]),
        .R(out));
  FDRE \imm_reg_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[3]),
        .Q(\EX_Op2_reg[0]_0 [12]),
        .R(out));
  FDRE \imm_reg_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[4]),
        .Q(\EX_Op2_reg[0]_0 [11]),
        .R(out));
  FDRE \imm_reg_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[5]),
        .Q(\EX_Op2_reg[0]_0 [10]),
        .R(out));
  FDRE \imm_reg_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[6]),
        .Q(\EX_Op2_reg[0]_0 [9]),
        .R(out));
  FDRE \imm_reg_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[7]),
        .Q(\EX_Op2_reg[0]_0 [8]),
        .R(out));
  FDRE \imm_reg_reg[8] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[8]),
        .Q(\EX_Op2_reg[0]_0 [7]),
        .R(out));
  FDRE \imm_reg_reg[9] 
       (.C(Clk),
        .CE(E),
        .D(of_imm_data[9]),
        .Q(\EX_Op2_reg[0]_0 [6]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \mem_byte_selects[1]_i_1 
       (.I0(ex_reverse_byteorder),
        .I1(\MEM_DataBus_Addr_reg[0] [0]),
        .I2(Q[0]),
        .O(\mem_byte_selects_reg[0] [0]));
  LUT4 #(
    .INIT(16'h00E2)) 
    sign_0_15_inferred_i_1
       (.I0(Q[7]),
        .I1(\EX_Sext_Op_reg[0] [0]),
        .I2(Q[15]),
        .I3(\EX_Sext_Op_reg[0] [1]),
        .O(\Using_FPGA.Native_34 ));
endmodule

(* ORIG_REF_NAME = "PC_Module_gti" *) 
module system_microblaze_0_0_PC_Module_gti
   (D,
    \Instr_Addr[0] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    out,
    Clk,
    \Using_FPGA.Native_1 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_2 ,
    \EX_Op2_reg[0] ,
    ex_delayslot_Instr2,
    CI,
    if_pre_buffer_addr,
    if_sel_input,
    E,
    if_fetch_in_progress_reg,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output [31:0]D;
  output [31:0]\Instr_Addr[0] ;
  output [31:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:0]out;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \Using_FPGA.Native_2 ;
  input [31:0]\EX_Op2_reg[0] ;
  input ex_delayslot_Instr2;
  input CI;
  input [0:0]if_pre_buffer_addr;
  input [0:0]if_sel_input;
  input [0:0]E;
  input [0:0]if_fetch_in_progress_reg;
  input lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire CI;
  wire Clk;
  wire [31:0]D;
  wire [0:0]E;
  wire [31:0]\EX_Op2_reg[0] ;
  wire I0;
  wire I0101_out;
  wire I0105_out;
  wire I0109_out;
  wire I0113_out;
  wire I0117_out;
  wire I0121_out;
  wire I0125_out;
  wire I013_out;
  wire I017_out;
  wire I021_out;
  wire I025_out;
  wire I029_out;
  wire I033_out;
  wire I037_out;
  wire I041_out;
  wire I045_out;
  wire I049_out;
  wire I053_out;
  wire I057_out;
  wire I05_out;
  wire I061_out;
  wire I065_out;
  wire I069_out;
  wire I073_out;
  wire I077_out;
  wire I081_out;
  wire I085_out;
  wire I089_out;
  wire I093_out;
  wire I097_out;
  wire I09_out;
  wire [31:0]\Instr_Addr[0] ;
  wire \PC_Buffer_reg[3][0]_srl4_n_0 ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire S;
  wire S102_in;
  wire S107_in;
  wire S112_in;
  wire S117_in;
  wire S122_in;
  wire S127_in;
  wire S12_in;
  wire S132_in;
  wire S137_in;
  wire S142_in;
  wire S147_in;
  wire S152_in;
  wire S17_in;
  wire S22_in;
  wire S27_in;
  wire S32_in;
  wire S37_in;
  wire S42_in;
  wire S47_in;
  wire S52_in;
  wire S57_in;
  wire S62_in;
  wire S67_in;
  wire S72_in;
  wire S77_in;
  wire S82_in;
  wire S87_in;
  wire S92_in;
  wire S97_in;
  wire [31:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_delayslot_Instr2;
  wire [0:31]ex_pc;
  wire [0:0]if_fetch_in_progress_reg;
  wire [29:1]if_pc_carry;
  wire \if_pc_reg_n_0_[31] ;
  wire [0:0]if_pre_buffer_addr;
  wire [0:0]if_sel_input;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_9;
  wire of_pc_ii_0;
  wire of_pc_ii_1;
  wire of_pc_ii_10;
  wire of_pc_ii_11;
  wire of_pc_ii_12;
  wire of_pc_ii_13;
  wire of_pc_ii_14;
  wire of_pc_ii_15;
  wire of_pc_ii_16;
  wire of_pc_ii_17;
  wire of_pc_ii_18;
  wire of_pc_ii_19;
  wire of_pc_ii_2;
  wire of_pc_ii_20;
  wire of_pc_ii_21;
  wire of_pc_ii_22;
  wire of_pc_ii_23;
  wire of_pc_ii_24;
  wire of_pc_ii_25;
  wire of_pc_ii_26;
  wire of_pc_ii_27;
  wire of_pc_ii_28;
  wire of_pc_ii_29;
  wire of_pc_ii_3;
  wire of_pc_ii_30;
  wire of_pc_ii_31;
  wire of_pc_ii_4;
  wire of_pc_ii_5;
  wire of_pc_ii_6;
  wire of_pc_ii_7;
  wire of_pc_ii_8;
  wire of_pc_ii_9;
  wire [0:0]out;
  wire p_1_in103_in;
  wire p_1_in108_in;
  wire p_1_in113_in;
  wire p_1_in118_in;
  wire p_1_in123_in;
  wire p_1_in128_in;
  wire p_1_in133_in;
  wire p_1_in138_in;
  wire p_1_in13_in;
  wire p_1_in143_in;
  wire p_1_in148_in;
  wire p_1_in153_in;
  wire p_1_in18_in;
  wire p_1_in23_in;
  wire p_1_in28_in;
  wire p_1_in33_in;
  wire p_1_in38_in;
  wire p_1_in3_in;
  wire p_1_in43_in;
  wire p_1_in48_in;
  wire p_1_in53_in;
  wire p_1_in58_in;
  wire p_1_in63_in;
  wire p_1_in68_in;
  wire p_1_in73_in;
  wire p_1_in78_in;
  wire p_1_in83_in;
  wire p_1_in88_in;
  wire p_1_in8_in;
  wire p_1_in93_in;
  wire p_1_in98_in;
  wire p_2_in4_in;

  system_microblaze_0_0_MB_MUXCY_XORCY \Incr_PC[0].MUXCY_XOR_I 
       (.\EX_Op2_reg[0] (\EX_Op2_reg[0] [31]),
        .\Instr_Addr[0] (\Instr_Addr[0] [31]),
        .LO(if_pc_carry[29]),
        .Q(S152_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2));
  system_microblaze_0_0_MB_MUXCY_XORCY_166 \Incr_PC[10].MUXCY_XOR_I 
       (.\EX_Op2_reg[10] (\EX_Op2_reg[0] [21]),
        .\Instr_Addr[10] (\Instr_Addr[0] [21]),
        .LO(if_pc_carry[20]),
        .Q(S102_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[11] (if_pc_carry[19]),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(S),
        .lopt_11(lopt_10),
        .lopt_12(lopt_11),
        .lopt_13(lopt_12),
        .lopt_14(S12_in),
        .lopt_15(lopt_13),
        .lopt_16(lopt_14),
        .lopt_17(S17_in),
        .lopt_18(lopt_15),
        .lopt_19(lopt_16),
        .lopt_2(lopt_2),
        .lopt_20(S22_in),
        .lopt_21(lopt_17),
        .lopt_22(lopt_18),
        .lopt_23(S27_in),
        .lopt_24(lopt_19),
        .lopt_25(lopt_20),
        .lopt_26(lopt_21),
        .lopt_27(lopt_22),
        .lopt_28(lopt_23),
        .lopt_29(lopt_24),
        .lopt_3(lopt_3),
        .lopt_30(S32_in),
        .lopt_31(lopt_25),
        .lopt_32(lopt_26),
        .lopt_33(S37_in),
        .lopt_34(lopt_27),
        .lopt_35(lopt_28),
        .lopt_36(S42_in),
        .lopt_37(lopt_29),
        .lopt_38(lopt_30),
        .lopt_39(S47_in),
        .lopt_4(lopt_4),
        .lopt_40(lopt_31),
        .lopt_41(lopt_32),
        .lopt_42(lopt_33),
        .lopt_43(lopt_34),
        .lopt_44(lopt_35),
        .lopt_45(lopt_36),
        .lopt_46(S52_in),
        .lopt_47(lopt_37),
        .lopt_48(lopt_38),
        .lopt_49(S57_in),
        .lopt_5(lopt_5),
        .lopt_50(lopt_39),
        .lopt_51(lopt_40),
        .lopt_52(S62_in),
        .lopt_53(lopt_41),
        .lopt_54(lopt_42),
        .lopt_55(S67_in),
        .lopt_56(lopt_43),
        .lopt_57(lopt_44),
        .lopt_58(lopt_45),
        .lopt_59(lopt_46),
        .lopt_6(lopt_6),
        .lopt_60(lopt_47),
        .lopt_61(lopt_48),
        .lopt_62(S72_in),
        .lopt_63(lopt_49),
        .lopt_64(lopt_50),
        .lopt_65(S77_in),
        .lopt_66(lopt_51),
        .lopt_67(lopt_52),
        .lopt_68(S82_in),
        .lopt_69(lopt_53),
        .lopt_7(lopt_7),
        .lopt_70(lopt_54),
        .lopt_71(S87_in),
        .lopt_72(lopt_55),
        .lopt_73(lopt_56),
        .lopt_74(lopt_57),
        .lopt_75(lopt_58),
        .lopt_76(lopt_59),
        .lopt_77(lopt_60),
        .lopt_78(S92_in),
        .lopt_79(lopt_61),
        .lopt_8(lopt_8),
        .lopt_80(lopt_62),
        .lopt_81(S97_in),
        .lopt_82(lopt_63),
        .lopt_83(lopt_64),
        .lopt_84(S107_in),
        .lopt_85(lopt_65),
        .lopt_86(lopt_66),
        .lopt_87(lopt_67),
        .lopt_9(lopt_9));
  system_microblaze_0_0_MB_MUXCY_XORCY_167 \Incr_PC[11].MUXCY_XOR_I 
       (.\EX_Op2_reg[11] (\EX_Op2_reg[0] [20]),
        .\Instr_Addr[11] (\Instr_Addr[0] [20]),
        .LO(if_pc_carry[19]),
        .Q(S97_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[12] (if_pc_carry[18]),
        .lopt(lopt_61),
        .lopt_1(lopt_62),
        .lopt_2(lopt_66));
  system_microblaze_0_0_MB_MUXCY_XORCY_168 \Incr_PC[12].MUXCY_XOR_I 
       (.\EX_Op2_reg[12] (\EX_Op2_reg[0] [19]),
        .\Instr_Addr[12] (\Instr_Addr[0] [19]),
        .LO(if_pc_carry[18]),
        .Q(S92_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[13] (if_pc_carry[17]),
        .lopt(lopt_59),
        .lopt_1(lopt_60),
        .lopt_2(lopt_65));
  system_microblaze_0_0_MB_MUXCY_XORCY_169 \Incr_PC[13].MUXCY_XOR_I 
       (.\EX_Op2_reg[13] (\EX_Op2_reg[0] [18]),
        .\Instr_Addr[13] (\Instr_Addr[0] [18]),
        .LO(if_pc_carry[17]),
        .Q(S87_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[14] (if_pc_carry[16]),
        .lopt(lopt_53),
        .lopt_1(lopt_54),
        .lopt_2(lopt_58));
  system_microblaze_0_0_MB_MUXCY_XORCY_170 \Incr_PC[14].MUXCY_XOR_I 
       (.\EX_Op2_reg[14] (\EX_Op2_reg[0] [17]),
        .\Instr_Addr[14] (\Instr_Addr[0] [17]),
        .LO(if_pc_carry[16]),
        .Q(S82_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[15] (if_pc_carry[15]),
        .lopt(lopt_51),
        .lopt_1(lopt_52),
        .lopt_2(lopt_57));
  system_microblaze_0_0_MB_MUXCY_XORCY_171 \Incr_PC[15].MUXCY_XOR_I 
       (.\EX_Op2_reg[15] (\EX_Op2_reg[0] [16]),
        .\Instr_Addr[15] (\Instr_Addr[0] [16]),
        .LO(if_pc_carry[15]),
        .Q(S77_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[16] (if_pc_carry[14]),
        .lopt(lopt_49),
        .lopt_1(lopt_50),
        .lopt_2(lopt_56));
  system_microblaze_0_0_MB_MUXCY_XORCY_172 \Incr_PC[16].MUXCY_XOR_I 
       (.\EX_Op2_reg[16] (\EX_Op2_reg[0] [15]),
        .\Instr_Addr[16] (\Instr_Addr[0] [15]),
        .LO(if_pc_carry[14]),
        .Q(S72_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[17] (if_pc_carry[13]),
        .lopt(lopt_47),
        .lopt_1(lopt_48),
        .lopt_2(lopt_55));
  system_microblaze_0_0_MB_MUXCY_XORCY_173 \Incr_PC[17].MUXCY_XOR_I 
       (.\EX_Op2_reg[17] (\EX_Op2_reg[0] [14]),
        .\Instr_Addr[17] (\Instr_Addr[0] [14]),
        .LO(if_pc_carry[13]),
        .Q(S67_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[18] (if_pc_carry[12]),
        .lopt(lopt_41),
        .lopt_1(lopt_42),
        .lopt_2(lopt_46));
  system_microblaze_0_0_MB_MUXCY_XORCY_174 \Incr_PC[18].MUXCY_XOR_I 
       (.\EX_Op2_reg[18] (\EX_Op2_reg[0] [13]),
        .\Instr_Addr[18] (\Instr_Addr[0] [13]),
        .LO(if_pc_carry[12]),
        .Q(S62_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[19] (if_pc_carry[11]),
        .lopt(lopt_39),
        .lopt_1(lopt_40),
        .lopt_2(lopt_45));
  system_microblaze_0_0_MB_MUXCY_XORCY_175 \Incr_PC[19].MUXCY_XOR_I 
       (.\EX_Op2_reg[19] (\EX_Op2_reg[0] [12]),
        .\Instr_Addr[19] (\Instr_Addr[0] [12]),
        .LO(if_pc_carry[11]),
        .Q(S57_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[20] (if_pc_carry[10]),
        .lopt(lopt_37),
        .lopt_1(lopt_38),
        .lopt_2(lopt_44));
  system_microblaze_0_0_MB_MUXCY_XORCY_176 \Incr_PC[1].MUXCY_XOR_I 
       (.\EX_Op2_reg[1] (\EX_Op2_reg[0] [30]),
        .\Instr_Addr[1] (\Instr_Addr[0] [30]),
        .LO(if_pc_carry[29]),
        .Q(S147_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[2] (if_pc_carry[28]),
        .lopt(lopt_68),
        .lopt_1(lopt_63),
        .lopt_10(lopt_74),
        .lopt_11(lopt_75),
        .lopt_12(S127_in),
        .lopt_13(lopt_76),
        .lopt_14(lopt_77),
        .lopt_15(lopt_78),
        .lopt_16(lopt_79),
        .lopt_17(lopt_80),
        .lopt_18(lopt_81),
        .lopt_19(S132_in),
        .lopt_2(lopt_69),
        .lopt_20(lopt_82),
        .lopt_21(lopt_83),
        .lopt_22(S137_in),
        .lopt_23(lopt_84),
        .lopt_24(lopt_85),
        .lopt_25(S142_in),
        .lopt_26(lopt_86),
        .lopt_27(lopt_87),
        .lopt_28(lopt_88),
        .lopt_3(S112_in),
        .lopt_4(lopt_70),
        .lopt_5(lopt_71),
        .lopt_6(S117_in),
        .lopt_7(lopt_72),
        .lopt_8(lopt_73),
        .lopt_9(S122_in));
  system_microblaze_0_0_MB_MUXCY_XORCY_177 \Incr_PC[20].MUXCY_XOR_I 
       (.\EX_Op2_reg[20] (\EX_Op2_reg[0] [11]),
        .\Instr_Addr[20] (\Instr_Addr[0] [11]),
        .LO(if_pc_carry[10]),
        .Q(S52_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[21] (if_pc_carry[9]),
        .lopt(lopt_35),
        .lopt_1(lopt_36),
        .lopt_2(lopt_43));
  system_microblaze_0_0_MB_MUXCY_XORCY_178 \Incr_PC[21].MUXCY_XOR_I 
       (.\EX_Op2_reg[21] (\EX_Op2_reg[0] [10]),
        .\Instr_Addr[21] (\Instr_Addr[0] [10]),
        .LO(if_pc_carry[9]),
        .Q(S47_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[22] (if_pc_carry[8]),
        .lopt(lopt_29),
        .lopt_1(lopt_30),
        .lopt_2(lopt_34));
  system_microblaze_0_0_MB_MUXCY_XORCY_179 \Incr_PC[22].MUXCY_XOR_I 
       (.\EX_Op2_reg[22] (\EX_Op2_reg[0] [9]),
        .\Instr_Addr[22] (\Instr_Addr[0] [9]),
        .LO(if_pc_carry[8]),
        .Q(S42_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[23] (if_pc_carry[7]),
        .lopt(lopt_27),
        .lopt_1(lopt_28),
        .lopt_2(lopt_33));
  system_microblaze_0_0_MB_MUXCY_XORCY_180 \Incr_PC[23].MUXCY_XOR_I 
       (.\EX_Op2_reg[23] (\EX_Op2_reg[0] [8]),
        .\Instr_Addr[23] (\Instr_Addr[0] [8]),
        .LO(if_pc_carry[7]),
        .Q(S37_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[24] (if_pc_carry[6]),
        .lopt(lopt_25),
        .lopt_1(lopt_26),
        .lopt_2(lopt_32));
  system_microblaze_0_0_MB_MUXCY_XORCY_181 \Incr_PC[24].MUXCY_XOR_I 
       (.\EX_Op2_reg[24] (\EX_Op2_reg[0] [7]),
        .\Instr_Addr[24] (\Instr_Addr[0] [7]),
        .LO(if_pc_carry[6]),
        .Q(S32_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[25] (if_pc_carry[5]),
        .lopt(lopt_23),
        .lopt_1(lopt_24),
        .lopt_2(lopt_31));
  system_microblaze_0_0_MB_MUXCY_XORCY_182 \Incr_PC[25].MUXCY_XOR_I 
       (.\EX_Op2_reg[25] (\EX_Op2_reg[0] [6]),
        .\Instr_Addr[25] (\Instr_Addr[0] [6]),
        .LO(if_pc_carry[5]),
        .Q(S27_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[26] (if_pc_carry[4]),
        .lopt(lopt_17),
        .lopt_1(lopt_18),
        .lopt_2(lopt_22));
  system_microblaze_0_0_MB_MUXCY_XORCY_183 \Incr_PC[26].MUXCY_XOR_I 
       (.\EX_Op2_reg[26] (\EX_Op2_reg[0] [5]),
        .\Instr_Addr[26] (\Instr_Addr[0] [5]),
        .LO(if_pc_carry[4]),
        .Q(S22_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[27] (if_pc_carry[3]),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(lopt_21));
  system_microblaze_0_0_MB_MUXCY_XORCY_184 \Incr_PC[27].MUXCY_XOR_I 
       (.\EX_Op2_reg[27] (\EX_Op2_reg[0] [4]),
        .\Instr_Addr[27] (\Instr_Addr[0] [4]),
        .LO(if_pc_carry[3]),
        .Q(S17_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[28] (if_pc_carry[2]),
        .lopt(lopt_13),
        .lopt_1(lopt_14),
        .lopt_2(lopt_20));
  system_microblaze_0_0_MB_MUXCY_XORCY_185 \Incr_PC[28].MUXCY_XOR_I 
       (.\EX_Op2_reg[28] (\EX_Op2_reg[0] [3]),
        .\Instr_Addr[28] (\Instr_Addr[0] [3]),
        .LO(if_pc_carry[2]),
        .Q(S12_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[29] (if_pc_carry[1]),
        .lopt(lopt_11),
        .lopt_1(lopt_12),
        .lopt_2(lopt_19));
  system_microblaze_0_0_MB_MUXCY_XORCY_186 \Incr_PC[29].MUXCY_XOR_I 
       (.CI(CI),
        .\EX_Op2_reg[29] (\EX_Op2_reg[0] [2]),
        .\Instr_Addr[29] (\Instr_Addr[0] [2]),
        .LO(if_pc_carry[1]),
        .Q(S),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .lopt(lopt_8),
        .lopt_1(lopt_9),
        .lopt_2(lopt_10));
  system_microblaze_0_0_MB_MUXCY_XORCY_187 \Incr_PC[2].MUXCY_XOR_I 
       (.\EX_Op2_reg[2] (\EX_Op2_reg[0] [29]),
        .\Instr_Addr[2] (\Instr_Addr[0] [29]),
        .LO(if_pc_carry[28]),
        .Q(S142_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[3] (if_pc_carry[27]),
        .lopt(lopt_84),
        .lopt_1(lopt_85),
        .lopt_2(lopt_88));
  system_microblaze_0_0_MB_MUXCY_XORCY_188 \Incr_PC[3].MUXCY_XOR_I 
       (.\EX_Op2_reg[3] (\EX_Op2_reg[0] [28]),
        .\Instr_Addr[3] (\Instr_Addr[0] [28]),
        .LO(if_pc_carry[27]),
        .Q(S137_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[4] (if_pc_carry[26]),
        .lopt(lopt_82),
        .lopt_1(lopt_83),
        .lopt_2(lopt_87));
  system_microblaze_0_0_MB_MUXCY_XORCY_189 \Incr_PC[4].MUXCY_XOR_I 
       (.\EX_Op2_reg[4] (\EX_Op2_reg[0] [27]),
        .\Instr_Addr[4] (\Instr_Addr[0] [27]),
        .LO(if_pc_carry[26]),
        .Q(S132_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[5] (if_pc_carry[25]),
        .lopt(lopt_80),
        .lopt_1(lopt_81),
        .lopt_2(lopt_86));
  system_microblaze_0_0_MB_MUXCY_XORCY_190 \Incr_PC[5].MUXCY_XOR_I 
       (.\EX_Op2_reg[5] (\EX_Op2_reg[0] [26]),
        .\Instr_Addr[5] (\Instr_Addr[0] [26]),
        .LO(if_pc_carry[25]),
        .Q(S127_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[6] (if_pc_carry[24]),
        .lopt(lopt_74),
        .lopt_1(lopt_75),
        .lopt_2(lopt_79));
  system_microblaze_0_0_MB_MUXCY_XORCY_191 \Incr_PC[6].MUXCY_XOR_I 
       (.\EX_Op2_reg[6] (\EX_Op2_reg[0] [25]),
        .\Instr_Addr[6] (\Instr_Addr[0] [25]),
        .LO(if_pc_carry[24]),
        .Q(S122_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[7] (if_pc_carry[23]),
        .lopt(lopt_72),
        .lopt_1(lopt_73),
        .lopt_2(lopt_78));
  system_microblaze_0_0_MB_MUXCY_XORCY_192 \Incr_PC[7].MUXCY_XOR_I 
       (.\EX_Op2_reg[7] (\EX_Op2_reg[0] [24]),
        .\Instr_Addr[7] (\Instr_Addr[0] [24]),
        .LO(if_pc_carry[23]),
        .Q(S117_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[8] (if_pc_carry[22]),
        .lopt(lopt_70),
        .lopt_1(lopt_71),
        .lopt_2(lopt_77));
  system_microblaze_0_0_MB_MUXCY_XORCY_193 \Incr_PC[8].MUXCY_XOR_I 
       (.\EX_Op2_reg[8] (\EX_Op2_reg[0] [23]),
        .\Instr_Addr[8] (\Instr_Addr[0] [23]),
        .LO(if_pc_carry[22]),
        .Q(S112_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\if_pc_reg[9] (if_pc_carry[21]),
        .lopt(lopt_68),
        .lopt_1(lopt_69),
        .lopt_2(lopt_76));
  system_microblaze_0_0_MB_MUXCY_XORCY_194 \Incr_PC[9].MUXCY_XOR_I 
       (.CI(if_pc_carry[20]),
        .\EX_Op2_reg[9] (\EX_Op2_reg[0] [22]),
        .\Instr_Addr[9] (\Instr_Addr[0] [22]),
        .LO(if_pc_carry[21]),
        .Q(S107_in),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .lopt(lopt_63),
        .lopt_1(lopt_64),
        .lopt_2(lopt_67));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[30]_INST_0 
       (.I0(\EX_Op2_reg[0] [1]),
        .I1(p_1_in3_in),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[0] [1]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Instr_Addr[31]_INST_0 
       (.I0(\EX_Op2_reg[0] [0]),
        .I1(\if_pc_reg_n_0_[31] ),
        .I2(ex_delayslot_Instr2),
        .O(\Instr_Addr[0] [0]));
  system_microblaze_0_0_MB_FDR_195 \Instruction_Prefetch_Mux[0].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[31]),
        .I0125_out(I0125_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S152_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_31(of_pc_ii_31),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_196 \Instruction_Prefetch_Mux[0].PC_Mux_MUXF7 
       (.I0125_out(I0125_out),
        .Q(S152_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_31(of_pc_ii_31),
        .out(p_1_in153_in));
  system_microblaze_0_0_MB_FDR_197 \Instruction_Prefetch_Mux[10].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[21]),
        .I085_out(I085_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S102_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_21(of_pc_ii_21),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_198 \Instruction_Prefetch_Mux[10].PC_Mux_MUXF7 
       (.I085_out(I085_out),
        .Q(S102_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_21(of_pc_ii_21),
        .out(p_1_in103_in));
  system_microblaze_0_0_MB_FDR_199 \Instruction_Prefetch_Mux[11].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[20]),
        .I081_out(I081_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S97_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_20(of_pc_ii_20),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_200 \Instruction_Prefetch_Mux[11].PC_Mux_MUXF7 
       (.I081_out(I081_out),
        .Q(S97_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_20(of_pc_ii_20),
        .out(p_1_in98_in));
  system_microblaze_0_0_MB_FDR_201 \Instruction_Prefetch_Mux[12].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[19]),
        .I077_out(I077_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S92_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_19(of_pc_ii_19),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_202 \Instruction_Prefetch_Mux[12].PC_Mux_MUXF7 
       (.I077_out(I077_out),
        .Q(S92_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_19(of_pc_ii_19),
        .out(p_1_in93_in));
  system_microblaze_0_0_MB_FDR_203 \Instruction_Prefetch_Mux[13].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[18]),
        .I073_out(I073_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S87_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_18(of_pc_ii_18),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_204 \Instruction_Prefetch_Mux[13].PC_Mux_MUXF7 
       (.I073_out(I073_out),
        .Q(S87_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_18(of_pc_ii_18),
        .out(p_1_in88_in));
  system_microblaze_0_0_MB_FDR_205 \Instruction_Prefetch_Mux[14].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[17]),
        .I069_out(I069_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S82_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_17(of_pc_ii_17),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_206 \Instruction_Prefetch_Mux[14].PC_Mux_MUXF7 
       (.I069_out(I069_out),
        .Q(S82_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_17(of_pc_ii_17),
        .out(p_1_in83_in));
  system_microblaze_0_0_MB_FDR_207 \Instruction_Prefetch_Mux[15].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[16]),
        .I065_out(I065_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S77_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_16(of_pc_ii_16),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_208 \Instruction_Prefetch_Mux[15].PC_Mux_MUXF7 
       (.I065_out(I065_out),
        .Q(S77_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_16(of_pc_ii_16),
        .out(p_1_in78_in));
  system_microblaze_0_0_MB_FDR_209 \Instruction_Prefetch_Mux[16].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[15]),
        .I061_out(I061_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S72_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_15(of_pc_ii_15),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_210 \Instruction_Prefetch_Mux[16].PC_Mux_MUXF7 
       (.I061_out(I061_out),
        .Q(S72_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_15(of_pc_ii_15),
        .out(p_1_in73_in));
  system_microblaze_0_0_MB_FDR_211 \Instruction_Prefetch_Mux[17].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[14]),
        .I057_out(I057_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S67_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_14(of_pc_ii_14),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_212 \Instruction_Prefetch_Mux[17].PC_Mux_MUXF7 
       (.I057_out(I057_out),
        .Q(S67_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_14(of_pc_ii_14),
        .out(p_1_in68_in));
  system_microblaze_0_0_MB_FDR_213 \Instruction_Prefetch_Mux[18].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[13]),
        .I053_out(I053_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S62_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_13(of_pc_ii_13),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_214 \Instruction_Prefetch_Mux[18].PC_Mux_MUXF7 
       (.I053_out(I053_out),
        .Q(S62_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_13(of_pc_ii_13),
        .out(p_1_in63_in));
  system_microblaze_0_0_MB_FDR_215 \Instruction_Prefetch_Mux[19].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[12]),
        .I049_out(I049_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S57_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_12(of_pc_ii_12),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_216 \Instruction_Prefetch_Mux[19].PC_Mux_MUXF7 
       (.I049_out(I049_out),
        .Q(S57_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_12(of_pc_ii_12),
        .out(p_1_in58_in));
  system_microblaze_0_0_MB_FDR_217 \Instruction_Prefetch_Mux[1].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[30]),
        .I0121_out(I0121_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S147_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_30(of_pc_ii_30),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_218 \Instruction_Prefetch_Mux[1].PC_Mux_MUXF7 
       (.I0121_out(I0121_out),
        .Q(S147_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_30(of_pc_ii_30),
        .out(p_1_in148_in));
  system_microblaze_0_0_MB_FDR_219 \Instruction_Prefetch_Mux[20].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[11]),
        .I045_out(I045_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S52_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_11(of_pc_ii_11),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_220 \Instruction_Prefetch_Mux[20].PC_Mux_MUXF7 
       (.I045_out(I045_out),
        .Q(S52_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_11(of_pc_ii_11),
        .out(p_1_in53_in));
  system_microblaze_0_0_MB_FDR_221 \Instruction_Prefetch_Mux[21].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[10]),
        .I041_out(I041_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S47_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_10(of_pc_ii_10),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_222 \Instruction_Prefetch_Mux[21].PC_Mux_MUXF7 
       (.I041_out(I041_out),
        .Q(S47_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_10(of_pc_ii_10),
        .out(p_1_in48_in));
  system_microblaze_0_0_MB_FDR_223 \Instruction_Prefetch_Mux[22].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[9]),
        .I037_out(I037_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S42_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_9(of_pc_ii_9),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_224 \Instruction_Prefetch_Mux[22].PC_Mux_MUXF7 
       (.I037_out(I037_out),
        .Q(S42_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_9(of_pc_ii_9),
        .out(p_1_in43_in));
  system_microblaze_0_0_MB_FDR_225 \Instruction_Prefetch_Mux[23].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[8]),
        .I033_out(I033_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S37_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_8(of_pc_ii_8),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_226 \Instruction_Prefetch_Mux[23].PC_Mux_MUXF7 
       (.I033_out(I033_out),
        .Q(S37_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_8(of_pc_ii_8),
        .out(p_1_in38_in));
  system_microblaze_0_0_MB_FDR_227 \Instruction_Prefetch_Mux[24].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[7]),
        .I029_out(I029_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S32_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_7(of_pc_ii_7),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_228 \Instruction_Prefetch_Mux[24].PC_Mux_MUXF7 
       (.I029_out(I029_out),
        .Q(S32_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_7(of_pc_ii_7),
        .out(p_1_in33_in));
  system_microblaze_0_0_MB_FDR_229 \Instruction_Prefetch_Mux[25].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[6]),
        .I025_out(I025_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S27_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_6(of_pc_ii_6),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_230 \Instruction_Prefetch_Mux[25].PC_Mux_MUXF7 
       (.I025_out(I025_out),
        .Q(S27_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_6(of_pc_ii_6),
        .out(p_1_in28_in));
  system_microblaze_0_0_MB_FDR_231 \Instruction_Prefetch_Mux[26].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[5]),
        .I021_out(I021_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S22_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_5(of_pc_ii_5),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_232 \Instruction_Prefetch_Mux[26].PC_Mux_MUXF7 
       (.I021_out(I021_out),
        .Q(S22_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_5(of_pc_ii_5),
        .out(p_1_in23_in));
  system_microblaze_0_0_MB_FDR_233 \Instruction_Prefetch_Mux[27].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[4]),
        .I017_out(I017_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S17_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_4(of_pc_ii_4),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_234 \Instruction_Prefetch_Mux[27].PC_Mux_MUXF7 
       (.I017_out(I017_out),
        .Q(S17_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_4(of_pc_ii_4),
        .out(p_1_in18_in));
  system_microblaze_0_0_MB_FDR_235 \Instruction_Prefetch_Mux[28].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[3]),
        .I013_out(I013_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S12_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_3(of_pc_ii_3),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_236 \Instruction_Prefetch_Mux[28].PC_Mux_MUXF7 
       (.I013_out(I013_out),
        .Q(S12_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_3(of_pc_ii_3),
        .out(p_1_in13_in));
  system_microblaze_0_0_MB_FDR_237 \Instruction_Prefetch_Mux[29].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[2]),
        .I09_out(I09_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_2(of_pc_ii_2),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_238 \Instruction_Prefetch_Mux[29].PC_Mux_MUXF7 
       (.I09_out(I09_out),
        .Q(S),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_2(of_pc_ii_2),
        .out(p_1_in8_in));
  system_microblaze_0_0_MB_FDR_239 \Instruction_Prefetch_Mux[2].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[29]),
        .I0117_out(I0117_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S142_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_29(of_pc_ii_29),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_240 \Instruction_Prefetch_Mux[2].PC_Mux_MUXF7 
       (.I0117_out(I0117_out),
        .Q(S142_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_29(of_pc_ii_29),
        .out(p_1_in143_in));
  system_microblaze_0_0_MB_FDR_241 \Instruction_Prefetch_Mux[30].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[1]),
        .I05_out(I05_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(p_1_in3_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_1(of_pc_ii_1),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_242 \Instruction_Prefetch_Mux[30].PC_Mux_MUXF7 
       (.I05_out(I05_out),
        .Q(p_1_in3_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_1(of_pc_ii_1),
        .out(p_2_in4_in));
  system_microblaze_0_0_MB_FDR_243 \Instruction_Prefetch_Mux[31].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[0]),
        .I0(I0),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(\if_pc_reg_n_0_[31] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_0(of_pc_ii_0),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_244 \Instruction_Prefetch_Mux[31].PC_Mux_MUXF7 
       (.I0(I0),
        .Q(\if_pc_reg_n_0_[31] ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_0(of_pc_ii_0),
        .out(\PC_Buffer_reg[3][0]_srl4_n_0 ));
  system_microblaze_0_0_MB_FDR_245 \Instruction_Prefetch_Mux[3].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[28]),
        .I0113_out(I0113_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S137_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_28(of_pc_ii_28),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_246 \Instruction_Prefetch_Mux[3].PC_Mux_MUXF7 
       (.I0113_out(I0113_out),
        .Q(S137_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_28(of_pc_ii_28),
        .out(p_1_in138_in));
  system_microblaze_0_0_MB_FDR_247 \Instruction_Prefetch_Mux[4].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[27]),
        .I0109_out(I0109_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S132_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_27(of_pc_ii_27),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_248 \Instruction_Prefetch_Mux[4].PC_Mux_MUXF7 
       (.I0109_out(I0109_out),
        .Q(S132_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_27(of_pc_ii_27),
        .out(p_1_in133_in));
  system_microblaze_0_0_MB_FDR_249 \Instruction_Prefetch_Mux[5].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[26]),
        .I0105_out(I0105_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S127_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_26(of_pc_ii_26),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_250 \Instruction_Prefetch_Mux[5].PC_Mux_MUXF7 
       (.I0105_out(I0105_out),
        .Q(S127_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_26(of_pc_ii_26),
        .out(p_1_in128_in));
  system_microblaze_0_0_MB_FDR_251 \Instruction_Prefetch_Mux[6].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[25]),
        .I0101_out(I0101_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S122_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_25(of_pc_ii_25),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_252 \Instruction_Prefetch_Mux[6].PC_Mux_MUXF7 
       (.I0101_out(I0101_out),
        .Q(S122_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_25(of_pc_ii_25),
        .out(p_1_in123_in));
  system_microblaze_0_0_MB_FDR_253 \Instruction_Prefetch_Mux[7].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[24]),
        .I097_out(I097_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S117_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_24(of_pc_ii_24),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_254 \Instruction_Prefetch_Mux[7].PC_Mux_MUXF7 
       (.I097_out(I097_out),
        .Q(S117_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_24(of_pc_ii_24),
        .out(p_1_in118_in));
  system_microblaze_0_0_MB_FDR_255 \Instruction_Prefetch_Mux[8].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[23]),
        .I093_out(I093_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S112_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_23(of_pc_ii_23),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_256 \Instruction_Prefetch_Mux[8].PC_Mux_MUXF7 
       (.I093_out(I093_out),
        .Q(S112_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_23(of_pc_ii_23),
        .out(p_1_in113_in));
  system_microblaze_0_0_MB_FDR_257 \Instruction_Prefetch_Mux[9].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[22]),
        .I089_out(I089_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .Q(S107_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .of_pc_ii_22(of_pc_ii_22),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_258 \Instruction_Prefetch_Mux[9].PC_Mux_MUXF7 
       (.I089_out(I089_out),
        .Q(S107_in),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 ),
        .of_pc_ii_22(of_pc_ii_22),
        .out(p_1_in108_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][0]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][0]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(\if_pc_reg_n_0_[31] ),
        .Q(\PC_Buffer_reg[3][0]_srl4_n_0 ));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][10]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][10]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S47_in),
        .Q(p_1_in48_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][11]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][11]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S52_in),
        .Q(p_1_in53_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][12]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][12]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S57_in),
        .Q(p_1_in58_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][13]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][13]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S62_in),
        .Q(p_1_in63_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][14]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][14]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S67_in),
        .Q(p_1_in68_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][15]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][15]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S72_in),
        .Q(p_1_in73_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][16]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][16]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S77_in),
        .Q(p_1_in78_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][17]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][17]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S82_in),
        .Q(p_1_in83_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][18]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][18]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S87_in),
        .Q(p_1_in88_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][19]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][19]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S92_in),
        .Q(p_1_in93_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][1]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][1]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(p_1_in3_in),
        .Q(p_2_in4_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][20]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][20]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S97_in),
        .Q(p_1_in98_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][21]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][21]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S102_in),
        .Q(p_1_in103_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][22]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][22]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S107_in),
        .Q(p_1_in108_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][23]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][23]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S112_in),
        .Q(p_1_in113_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][24]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][24]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S117_in),
        .Q(p_1_in118_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][25]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][25]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S122_in),
        .Q(p_1_in123_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][26]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][26]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S127_in),
        .Q(p_1_in128_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][27]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][27]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S132_in),
        .Q(p_1_in133_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][28]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][28]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S137_in),
        .Q(p_1_in138_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][29]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][29]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S142_in),
        .Q(p_1_in143_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][2]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][2]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S),
        .Q(p_1_in8_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][30]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][30]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S147_in),
        .Q(p_1_in148_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][31]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][31]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S152_in),
        .Q(p_1_in153_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][3]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][3]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S12_in),
        .Q(p_1_in13_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][4]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][4]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S17_in),
        .Q(p_1_in18_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][5]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][5]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S22_in),
        .Q(p_1_in23_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][6]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][6]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S27_in),
        .Q(p_1_in28_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][7]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][7]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S32_in),
        .Q(p_1_in33_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][8]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][8]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S37_in),
        .Q(p_1_in38_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PC_Module_I/PC_Buffer_reg[3][9]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \PC_Buffer_reg[3][9]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(if_sel_input),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .CLK(Clk),
        .D(S42_in),
        .Q(p_1_in43_in));
  FDRE \ex_pc_i_reg[0] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[31]),
        .Q(ex_pc[0]),
        .R(out));
  FDRE \ex_pc_i_reg[10] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[21]),
        .Q(ex_pc[10]),
        .R(out));
  FDRE \ex_pc_i_reg[11] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[20]),
        .Q(ex_pc[11]),
        .R(out));
  FDRE \ex_pc_i_reg[12] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[19]),
        .Q(ex_pc[12]),
        .R(out));
  FDRE \ex_pc_i_reg[13] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[18]),
        .Q(ex_pc[13]),
        .R(out));
  FDRE \ex_pc_i_reg[14] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[17]),
        .Q(ex_pc[14]),
        .R(out));
  FDRE \ex_pc_i_reg[15] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[16]),
        .Q(ex_pc[15]),
        .R(out));
  FDRE \ex_pc_i_reg[16] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[15]),
        .Q(ex_pc[16]),
        .R(out));
  FDRE \ex_pc_i_reg[17] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[14]),
        .Q(ex_pc[17]),
        .R(out));
  FDRE \ex_pc_i_reg[18] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[13]),
        .Q(ex_pc[18]),
        .R(out));
  FDRE \ex_pc_i_reg[19] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[12]),
        .Q(ex_pc[19]),
        .R(out));
  FDRE \ex_pc_i_reg[1] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[30]),
        .Q(ex_pc[1]),
        .R(out));
  FDRE \ex_pc_i_reg[20] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[11]),
        .Q(ex_pc[20]),
        .R(out));
  FDRE \ex_pc_i_reg[21] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[10]),
        .Q(ex_pc[21]),
        .R(out));
  FDRE \ex_pc_i_reg[22] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[9]),
        .Q(ex_pc[22]),
        .R(out));
  FDRE \ex_pc_i_reg[23] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[8]),
        .Q(ex_pc[23]),
        .R(out));
  FDRE \ex_pc_i_reg[24] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[7]),
        .Q(ex_pc[24]),
        .R(out));
  FDRE \ex_pc_i_reg[25] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[6]),
        .Q(ex_pc[25]),
        .R(out));
  FDRE \ex_pc_i_reg[26] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[5]),
        .Q(ex_pc[26]),
        .R(out));
  FDRE \ex_pc_i_reg[27] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[4]),
        .Q(ex_pc[27]),
        .R(out));
  FDRE \ex_pc_i_reg[28] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[3]),
        .Q(ex_pc[28]),
        .R(out));
  FDRE \ex_pc_i_reg[29] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[2]),
        .Q(ex_pc[29]),
        .R(out));
  FDRE \ex_pc_i_reg[2] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[29]),
        .Q(ex_pc[2]),
        .R(out));
  FDRE \ex_pc_i_reg[30] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[1]),
        .Q(ex_pc[30]),
        .R(out));
  FDRE \ex_pc_i_reg[31] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[0]),
        .Q(ex_pc[31]),
        .R(out));
  FDRE \ex_pc_i_reg[3] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[28]),
        .Q(ex_pc[3]),
        .R(out));
  FDRE \ex_pc_i_reg[4] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[27]),
        .Q(ex_pc[4]),
        .R(out));
  FDRE \ex_pc_i_reg[5] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[26]),
        .Q(ex_pc[5]),
        .R(out));
  FDRE \ex_pc_i_reg[6] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[25]),
        .Q(ex_pc[6]),
        .R(out));
  FDRE \ex_pc_i_reg[7] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[24]),
        .Q(ex_pc[7]),
        .R(out));
  FDRE \ex_pc_i_reg[8] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[23]),
        .Q(ex_pc[8]),
        .R(out));
  FDRE \ex_pc_i_reg[9] 
       (.C(Clk),
        .CE(\Using_FPGA.Native_0 ),
        .D(D[22]),
        .Q(ex_pc[9]),
        .R(out));
  FDSE \if_pc_reg[0] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [31]),
        .Q(S152_in),
        .S(out));
  FDSE \if_pc_reg[10] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [21]),
        .Q(S102_in),
        .S(out));
  FDSE \if_pc_reg[11] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [20]),
        .Q(S97_in),
        .S(out));
  FDSE \if_pc_reg[12] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [19]),
        .Q(S92_in),
        .S(out));
  FDSE \if_pc_reg[13] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [18]),
        .Q(S87_in),
        .S(out));
  FDSE \if_pc_reg[14] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [17]),
        .Q(S82_in),
        .S(out));
  FDSE \if_pc_reg[15] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [16]),
        .Q(S77_in),
        .S(out));
  FDSE \if_pc_reg[16] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [15]),
        .Q(S72_in),
        .S(out));
  FDSE \if_pc_reg[17] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [14]),
        .Q(S67_in),
        .S(out));
  FDSE \if_pc_reg[18] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [13]),
        .Q(S62_in),
        .S(out));
  FDSE \if_pc_reg[19] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [12]),
        .Q(S57_in),
        .S(out));
  FDSE \if_pc_reg[1] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [30]),
        .Q(S147_in),
        .S(out));
  FDSE \if_pc_reg[20] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [11]),
        .Q(S52_in),
        .S(out));
  FDSE \if_pc_reg[21] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [10]),
        .Q(S47_in),
        .S(out));
  FDSE \if_pc_reg[22] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [9]),
        .Q(S42_in),
        .S(out));
  FDSE \if_pc_reg[23] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [8]),
        .Q(S37_in),
        .S(out));
  FDSE \if_pc_reg[24] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [7]),
        .Q(S32_in),
        .S(out));
  FDSE \if_pc_reg[25] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [6]),
        .Q(S27_in),
        .S(out));
  FDSE \if_pc_reg[26] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [5]),
        .Q(S22_in),
        .S(out));
  FDSE \if_pc_reg[27] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [4]),
        .Q(S17_in),
        .S(out));
  FDSE \if_pc_reg[28] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [3]),
        .Q(S12_in),
        .S(out));
  FDSE \if_pc_reg[29] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [2]),
        .Q(S),
        .S(out));
  FDSE \if_pc_reg[2] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [29]),
        .Q(S142_in),
        .S(out));
  FDRE \if_pc_reg[30] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [1]),
        .Q(p_1_in3_in),
        .R(out));
  FDRE \if_pc_reg[31] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [0]),
        .Q(\if_pc_reg_n_0_[31] ),
        .R(out));
  FDSE \if_pc_reg[3] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [28]),
        .Q(S137_in),
        .S(out));
  FDSE \if_pc_reg[4] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [27]),
        .Q(S132_in),
        .S(out));
  FDSE \if_pc_reg[5] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [26]),
        .Q(S127_in),
        .S(out));
  FDSE \if_pc_reg[6] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [25]),
        .Q(S122_in),
        .S(out));
  FDSE \if_pc_reg[7] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [24]),
        .Q(S117_in),
        .S(out));
  FDSE \if_pc_reg[8] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [23]),
        .Q(S112_in),
        .S(out));
  FDSE \if_pc_reg[9] 
       (.C(Clk),
        .CE(if_fetch_in_progress_reg),
        .D(\Instr_Addr[0] [22]),
        .Q(S107_in),
        .S(out));
  FDRE \mem_pc_i_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[0]),
        .Q(\Using_FPGA.Native [31]),
        .R(out));
  FDRE \mem_pc_i_reg[10] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[10]),
        .Q(\Using_FPGA.Native [21]),
        .R(out));
  FDRE \mem_pc_i_reg[11] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[11]),
        .Q(\Using_FPGA.Native [20]),
        .R(out));
  FDRE \mem_pc_i_reg[12] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[12]),
        .Q(\Using_FPGA.Native [19]),
        .R(out));
  FDRE \mem_pc_i_reg[13] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[13]),
        .Q(\Using_FPGA.Native [18]),
        .R(out));
  FDRE \mem_pc_i_reg[14] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[14]),
        .Q(\Using_FPGA.Native [17]),
        .R(out));
  FDRE \mem_pc_i_reg[15] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[15]),
        .Q(\Using_FPGA.Native [16]),
        .R(out));
  FDRE \mem_pc_i_reg[16] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[16]),
        .Q(\Using_FPGA.Native [15]),
        .R(out));
  FDRE \mem_pc_i_reg[17] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[17]),
        .Q(\Using_FPGA.Native [14]),
        .R(out));
  FDRE \mem_pc_i_reg[18] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[18]),
        .Q(\Using_FPGA.Native [13]),
        .R(out));
  FDRE \mem_pc_i_reg[19] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[19]),
        .Q(\Using_FPGA.Native [12]),
        .R(out));
  FDRE \mem_pc_i_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[1]),
        .Q(\Using_FPGA.Native [30]),
        .R(out));
  FDRE \mem_pc_i_reg[20] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[20]),
        .Q(\Using_FPGA.Native [11]),
        .R(out));
  FDRE \mem_pc_i_reg[21] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[21]),
        .Q(\Using_FPGA.Native [10]),
        .R(out));
  FDRE \mem_pc_i_reg[22] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[22]),
        .Q(\Using_FPGA.Native [9]),
        .R(out));
  FDRE \mem_pc_i_reg[23] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[23]),
        .Q(\Using_FPGA.Native [8]),
        .R(out));
  FDRE \mem_pc_i_reg[24] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[24]),
        .Q(\Using_FPGA.Native [7]),
        .R(out));
  FDRE \mem_pc_i_reg[25] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[25]),
        .Q(\Using_FPGA.Native [6]),
        .R(out));
  FDRE \mem_pc_i_reg[26] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[26]),
        .Q(\Using_FPGA.Native [5]),
        .R(out));
  FDRE \mem_pc_i_reg[27] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[27]),
        .Q(\Using_FPGA.Native [4]),
        .R(out));
  FDRE \mem_pc_i_reg[28] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[28]),
        .Q(\Using_FPGA.Native [3]),
        .R(out));
  FDRE \mem_pc_i_reg[29] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[29]),
        .Q(\Using_FPGA.Native [2]),
        .R(out));
  FDRE \mem_pc_i_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[2]),
        .Q(\Using_FPGA.Native [29]),
        .R(out));
  FDRE \mem_pc_i_reg[30] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[30]),
        .Q(\Using_FPGA.Native [1]),
        .R(out));
  FDRE \mem_pc_i_reg[31] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[31]),
        .Q(\Using_FPGA.Native [0]),
        .R(out));
  FDRE \mem_pc_i_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[3]),
        .Q(\Using_FPGA.Native [28]),
        .R(out));
  FDRE \mem_pc_i_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[4]),
        .Q(\Using_FPGA.Native [27]),
        .R(out));
  FDRE \mem_pc_i_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[5]),
        .Q(\Using_FPGA.Native [26]),
        .R(out));
  FDRE \mem_pc_i_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[6]),
        .Q(\Using_FPGA.Native [25]),
        .R(out));
  FDRE \mem_pc_i_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[7]),
        .Q(\Using_FPGA.Native [24]),
        .R(out));
  FDRE \mem_pc_i_reg[8] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[8]),
        .Q(\Using_FPGA.Native [23]),
        .R(out));
  FDRE \mem_pc_i_reg[9] 
       (.C(Clk),
        .CE(E),
        .D(ex_pc[9]),
        .Q(\Using_FPGA.Native [22]),
        .R(out));
endmodule

(* ORIG_REF_NAME = "PreFetch_Buffer_gti" *) 
module system_microblaze_0_0_PreFetch_Buffer_gti
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    of_valid,
    of_instr,
    D,
    \ex_instr_reg[11] ,
    use_Reg_Neg_S_reg,
    of_predecode,
    \status_reg_reg[25] ,
    if_pre_buffer_addr,
    I_AS,
    IFetch,
    if_fetch_for_timing_optimization1,
    ex_op1_cmp_eq_n5_out,
    ex_op1_cmp_eq1,
    force_Val2_N_reg,
    use_Reg_Neg_DI1_out,
    force_Val10_out,
    use_Reg_Neg_S3_out,
    force12_out,
    \EX_Op2_reg[0] ,
    ex_atomic_Instruction_Pair0,
    ex_branch_with_delayslot_reg,
    E,
    \EX_ALU_Op_reg[0] ,
    ex_enable_alu_i_reg,
    ex_move_to_MSR_instr29_out,
    of_op1_sel_spr,
    of_pipe_ctrl,
    \EX_Op3_reg[0] ,
    \EX_Op3_reg[15] ,
    \EX_Op3_reg[15]_0 ,
    \EX_Branch_CMP_Op1_reg[0] ,
    \EX_Branch_CMP_Op1_reg[15] ,
    \EX_Branch_CMP_Op1_reg[15]_0 ,
    EX_SWAP_Instr_reg,
    ex_mbar_decode_cmb,
    ex_mbar_is_sleep_cmb,
    \Using_FPGA.Native_2 ,
    D122_out,
    EX_SWAP_BYTE_Instr_reg,
    ex_is_multi_or_load_instr0,
    ex_is_multi_instr2_reg,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    ex_op1_cmp_eq,
    ex_set_bip,
    ex_enable_sext_shift_i0,
    ex_sel_alu_i0,
    of_Sel_SPR_MSR3_out,
    p_9_in,
    \EX_Sext_Op_reg[0] ,
    if_fetch_in_progress_reg,
    ex_gpr_write_reg,
    ex_is_div_instr_I_reg,
    ex_gpr_write_dbg_reg,
    Dbg_Clean_Stop_reg,
    EX_CMP_Op_reg,
    EX_Unsigned_Op_reg,
    EX_Use_Carry_reg,
    ex_load_alu_carry_reg,
    \Using_FPGA.Native_5 ,
    \Performace_Debug_Control.ex_brki_hit_reg ,
    use_Reg_Neg_S_reg_0,
    ex_load_shift_carry_reg,
    mem_jump_taken_reg,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    ex_alu_sel_logic_i_reg,
    I1,
    \EX_Op1_reg[28] ,
    \EX_Op1_reg[29] ,
    \EX_Op1_reg[30] ,
    \EX_Op1_reg[31] ,
    \EX_Op1_reg[27] ,
    \EX_Op1_reg[26] ,
    \EX_Op1_reg[25] ,
    \EX_Op1_reg[24] ,
    \EX_Op1_reg[23] ,
    \EX_Op1_reg[22] ,
    \EX_Op1_reg[21] ,
    \EX_Op1_reg[20] ,
    \EX_Op1_reg[19] ,
    \EX_Op1_reg[18] ,
    \EX_Op1_reg[17] ,
    \EX_Op1_reg[16] ,
    \EX_Op1_reg[15] ,
    \EX_Op1_reg[14] ,
    \EX_Op1_reg[13] ,
    \EX_Op1_reg[12] ,
    \EX_Op1_reg[11] ,
    \EX_Op1_reg[10] ,
    \EX_Op1_reg[9] ,
    \EX_Op1_reg[8] ,
    \EX_Op1_reg[7] ,
    \EX_Op1_reg[6] ,
    \EX_Op1_reg[5] ,
    \EX_Op1_reg[4] ,
    \EX_Op1_reg[3] ,
    \EX_Op1_reg[2] ,
    \EX_Op1_reg[1] ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \wb_exception_kind_i_reg[27] ,
    out,
    Clk,
    I041_out,
    I139_out,
    p_0_in44_in,
    IB_Ready,
    if_fetch_in_progress,
    ex_delayslot_Instr2,
    in00,
    \wb_exception_kind_i_reg[27]_0 ,
    GPR_Op2,
    WB_Byte_Access_reg,
    EX_Fwd,
    \Using_FPGA.Native_10 ,
    \interrupt_address_d1_reg[31] ,
    \Using_FPGA.Native_11 ,
    \interrupt_address_d1_reg[30] ,
    \interrupt_address_d1_reg[29] ,
    \interrupt_address_d1_reg[0] ,
    of_Take_Interrupt_hold_reg,
    \interrupt_address_d1_reg[26] ,
    \interrupt_address_d1_reg[25] ,
    \interrupt_address_d1_reg[24] ,
    \interrupt_address_d1_reg[23] ,
    \interrupt_address_d1_reg[22] ,
    \interrupt_address_d1_reg[21] ,
    \interrupt_address_d1_reg[20] ,
    \interrupt_address_d1_reg[19] ,
    \interrupt_address_d1_reg[18] ,
    \interrupt_address_d1_reg[17] ,
    \interrupt_address_d1_reg[16] ,
    WB_Doublet_Access_reg,
    \interrupt_address_d1_reg[15] ,
    WB_Doublet_Access_reg_0,
    \interrupt_address_d1_reg[14] ,
    WB_Doublet_Access_reg_1,
    \interrupt_address_d1_reg[13] ,
    WB_Doublet_Access_reg_2,
    \interrupt_address_d1_reg[12] ,
    WB_Doublet_Access_reg_3,
    \interrupt_address_d1_reg[11] ,
    WB_Doublet_Access_reg_4,
    \interrupt_address_d1_reg[10] ,
    WB_Doublet_Access_reg_5,
    \interrupt_address_d1_reg[9] ,
    WB_Doublet_Access_reg_6,
    \interrupt_address_d1_reg[8] ,
    WB_Doublet_Access_reg_7,
    \interrupt_address_d1_reg[7] ,
    WB_Doublet_Access_reg_8,
    \interrupt_address_d1_reg[6] ,
    WB_Doublet_Access_reg_9,
    \interrupt_address_d1_reg[5] ,
    WB_Doublet_Access_reg_10,
    \interrupt_address_d1_reg[4] ,
    WB_Doublet_Access_reg_11,
    \interrupt_address_d1_reg[3] ,
    WB_Doublet_Access_reg_12,
    \interrupt_address_d1_reg[2] ,
    WB_Doublet_Access_reg_13,
    \interrupt_address_d1_reg[1] ,
    \Using_FPGA.Native_12 ,
    mem_sel_msr,
    WB_Doublet_Access_reg_14,
    \imm_reg_reg[0] ,
    of_read_imm_reg_ii_reg,
    ex_is_multi_or_load_instr,
    of_read_ex_write_op2_conflict_part2,
    of_read_ex_write_op2_conflict_part1,
    of_read_mem_write_op2_conflict_part2,
    mem_is_multi_or_load_instr,
    of_read_mem_write_op2_conflict_part1,
    GPR_Op3,
    Q,
    mem_gpr_write,
    mem_valid_instr,
    p_109_in,
    GPR_Op1,
    \wb_gpr_write_addr_reg[0] ,
    p_19_in,
    \ex_gpr_write_addr_reg[0] ,
    p_112_in,
    ex_mbar_decode,
    ex_branch_with_delayslot_reg_0,
    ex_mbar_is_sleep,
    of_read_imm_reg_ii,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    Dbg_Disable,
    in,
    wb_valid_reg,
    wb_exception_i_reg,
    wb_gpr_write_i,
    wb_reset,
    of_read_ex_write_op3_conflict_part1,
    of_read_ex_write_op3_conflict_part2,
    LOCKSTEP_Master_Out,
    ex_gpr_write_reg_0,
    EX_Is_Div_Instr,
    ex_gpr_write_dbg,
    ex_jump_nodelay_reg,
    \control_reg_reg[8] ,
    IReady,
    if_debug_ready_i_reg,
    if_missed_fetch,
    ex_branch_with_delayslot,
    ex_jump_q,
    wb_MSR_cmb,
    \Using_FPGA.Native_13 ,
    ex_MSR,
    ex_valid);
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output of_valid;
  output [5:0]of_instr;
  output [4:0]D;
  output [20:0]\ex_instr_reg[11] ;
  output use_Reg_Neg_S_reg;
  output [9:0]of_predecode;
  output [0:0]\status_reg_reg[25] ;
  output [0:0]if_pre_buffer_addr;
  output I_AS;
  output [0:0]IFetch;
  output if_fetch_for_timing_optimization1;
  output ex_op1_cmp_eq_n5_out;
  output ex_op1_cmp_eq1;
  output force_Val2_N_reg;
  output use_Reg_Neg_DI1_out;
  output force_Val10_out;
  output use_Reg_Neg_S3_out;
  output force12_out;
  output [31:0]\EX_Op2_reg[0] ;
  output ex_atomic_Instruction_Pair0;
  output ex_branch_with_delayslot_reg;
  output [0:0]E;
  output [1:0]\EX_ALU_Op_reg[0] ;
  output ex_enable_alu_i_reg;
  output ex_move_to_MSR_instr29_out;
  output of_op1_sel_spr;
  output [2:0]of_pipe_ctrl;
  output [15:0]\EX_Op3_reg[0] ;
  output \EX_Op3_reg[15] ;
  output \EX_Op3_reg[15]_0 ;
  output [15:0]\EX_Branch_CMP_Op1_reg[0] ;
  output \EX_Branch_CMP_Op1_reg[15] ;
  output \EX_Branch_CMP_Op1_reg[15]_0 ;
  output EX_SWAP_Instr_reg;
  output ex_mbar_decode_cmb;
  output ex_mbar_is_sleep_cmb;
  output \Using_FPGA.Native_2 ;
  output D122_out;
  output EX_SWAP_BYTE_Instr_reg;
  output ex_is_multi_or_load_instr0;
  output ex_is_multi_instr2_reg;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output ex_op1_cmp_eq;
  output ex_set_bip;
  output ex_enable_sext_shift_i0;
  output ex_sel_alu_i0;
  output of_Sel_SPR_MSR3_out;
  output p_9_in;
  output [1:0]\EX_Sext_Op_reg[0] ;
  output if_fetch_in_progress_reg;
  output ex_gpr_write_reg;
  output ex_is_div_instr_I_reg;
  output ex_gpr_write_dbg_reg;
  output Dbg_Clean_Stop_reg;
  output EX_CMP_Op_reg;
  output EX_Unsigned_Op_reg;
  output EX_Use_Carry_reg;
  output ex_load_alu_carry_reg;
  output \Using_FPGA.Native_5 ;
  output \Performace_Debug_Control.ex_brki_hit_reg ;
  output use_Reg_Neg_S_reg_0;
  output ex_load_shift_carry_reg;
  output mem_jump_taken_reg;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output ex_alu_sel_logic_i_reg;
  output I1;
  output \EX_Op1_reg[28] ;
  output \EX_Op1_reg[29] ;
  output \EX_Op1_reg[30] ;
  output \EX_Op1_reg[31] ;
  output \EX_Op1_reg[27] ;
  output \EX_Op1_reg[26] ;
  output \EX_Op1_reg[25] ;
  output \EX_Op1_reg[24] ;
  output \EX_Op1_reg[23] ;
  output \EX_Op1_reg[22] ;
  output \EX_Op1_reg[21] ;
  output \EX_Op1_reg[20] ;
  output \EX_Op1_reg[19] ;
  output \EX_Op1_reg[18] ;
  output \EX_Op1_reg[17] ;
  output \EX_Op1_reg[16] ;
  output \EX_Op1_reg[15] ;
  output \EX_Op1_reg[14] ;
  output \EX_Op1_reg[13] ;
  output \EX_Op1_reg[12] ;
  output \EX_Op1_reg[11] ;
  output \EX_Op1_reg[10] ;
  output \EX_Op1_reg[9] ;
  output \EX_Op1_reg[8] ;
  output \EX_Op1_reg[7] ;
  output \EX_Op1_reg[6] ;
  output \EX_Op1_reg[5] ;
  output \EX_Op1_reg[4] ;
  output \EX_Op1_reg[3] ;
  output \EX_Op1_reg[2] ;
  output \EX_Op1_reg[1] ;
  output [0:0]\Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \wb_exception_kind_i_reg[27] ;
  input [0:0]out;
  input Clk;
  input I041_out;
  input I139_out;
  input p_0_in44_in;
  input IB_Ready;
  input if_fetch_in_progress;
  input ex_delayslot_Instr2;
  input in00;
  input \wb_exception_kind_i_reg[27]_0 ;
  input [0:31]GPR_Op2;
  input [15:0]WB_Byte_Access_reg;
  input [0:31]EX_Fwd;
  input [29:0]\Using_FPGA.Native_10 ;
  input \interrupt_address_d1_reg[31] ;
  input [2:0]\Using_FPGA.Native_11 ;
  input \interrupt_address_d1_reg[30] ;
  input \interrupt_address_d1_reg[29] ;
  input [2:0]\interrupt_address_d1_reg[0] ;
  input of_Take_Interrupt_hold_reg;
  input \interrupt_address_d1_reg[26] ;
  input \interrupt_address_d1_reg[25] ;
  input \interrupt_address_d1_reg[24] ;
  input \interrupt_address_d1_reg[23] ;
  input \interrupt_address_d1_reg[22] ;
  input \interrupt_address_d1_reg[21] ;
  input \interrupt_address_d1_reg[20] ;
  input \interrupt_address_d1_reg[19] ;
  input \interrupt_address_d1_reg[18] ;
  input \interrupt_address_d1_reg[17] ;
  input \interrupt_address_d1_reg[16] ;
  input WB_Doublet_Access_reg;
  input \interrupt_address_d1_reg[15] ;
  input WB_Doublet_Access_reg_0;
  input \interrupt_address_d1_reg[14] ;
  input WB_Doublet_Access_reg_1;
  input \interrupt_address_d1_reg[13] ;
  input WB_Doublet_Access_reg_2;
  input \interrupt_address_d1_reg[12] ;
  input WB_Doublet_Access_reg_3;
  input \interrupt_address_d1_reg[11] ;
  input WB_Doublet_Access_reg_4;
  input \interrupt_address_d1_reg[10] ;
  input WB_Doublet_Access_reg_5;
  input \interrupt_address_d1_reg[9] ;
  input WB_Doublet_Access_reg_6;
  input \interrupt_address_d1_reg[8] ;
  input WB_Doublet_Access_reg_7;
  input \interrupt_address_d1_reg[7] ;
  input WB_Doublet_Access_reg_8;
  input \interrupt_address_d1_reg[6] ;
  input WB_Doublet_Access_reg_9;
  input \interrupt_address_d1_reg[5] ;
  input WB_Doublet_Access_reg_10;
  input \interrupt_address_d1_reg[4] ;
  input WB_Doublet_Access_reg_11;
  input \interrupt_address_d1_reg[3] ;
  input WB_Doublet_Access_reg_12;
  input \interrupt_address_d1_reg[2] ;
  input WB_Doublet_Access_reg_13;
  input \interrupt_address_d1_reg[1] ;
  input [0:0]\Using_FPGA.Native_12 ;
  input mem_sel_msr;
  input WB_Doublet_Access_reg_14;
  input [15:0]\imm_reg_reg[0] ;
  input of_read_imm_reg_ii_reg;
  input ex_is_multi_or_load_instr;
  input of_read_ex_write_op2_conflict_part2;
  input of_read_ex_write_op2_conflict_part1;
  input of_read_mem_write_op2_conflict_part2;
  input mem_is_multi_or_load_instr;
  input of_read_mem_write_op2_conflict_part1;
  input [15:0]GPR_Op3;
  input [4:0]Q;
  input mem_gpr_write;
  input mem_valid_instr;
  input p_109_in;
  input [15:0]GPR_Op1;
  input [4:0]\wb_gpr_write_addr_reg[0] ;
  input p_19_in;
  input [4:0]\ex_gpr_write_addr_reg[0] ;
  input p_112_in;
  input ex_mbar_decode;
  input ex_branch_with_delayslot_reg_0;
  input ex_mbar_is_sleep;
  input of_read_imm_reg_ii;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input Dbg_Disable;
  input [32:0]in;
  input wb_valid_reg;
  input wb_exception_i_reg;
  input wb_gpr_write_i;
  input wb_reset;
  input of_read_ex_write_op3_conflict_part1;
  input of_read_ex_write_op3_conflict_part2;
  input [0:0]LOCKSTEP_Master_Out;
  input ex_gpr_write_reg_0;
  input EX_Is_Div_Instr;
  input ex_gpr_write_dbg;
  input ex_jump_nodelay_reg;
  input [0:0]\control_reg_reg[8] ;
  input IReady;
  input if_debug_ready_i_reg;
  input if_missed_fetch;
  input ex_branch_with_delayslot;
  input ex_jump_q;
  input [0:0]wb_MSR_cmb;
  input [31:0]\Using_FPGA.Native_13 ;
  input [2:0]ex_MSR;
  input ex_valid;

  wire Clk;
  wire [4:0]D;
  wire D122_out;
  wire Dbg_Clean_Stop_reg;
  wire Dbg_Disable;
  wire [0:0]E;
  wire EX_ALU_Op1;
  wire [1:0]\EX_ALU_Op_reg[0] ;
  wire [15:0]\EX_Branch_CMP_Op1_reg[0] ;
  wire \EX_Branch_CMP_Op1_reg[15] ;
  wire \EX_Branch_CMP_Op1_reg[15]_0 ;
  wire EX_CMP_Op_reg;
  wire [0:31]EX_Fwd;
  wire EX_Is_Div_Instr;
  wire \EX_Op1_reg[10] ;
  wire \EX_Op1_reg[11] ;
  wire \EX_Op1_reg[12] ;
  wire \EX_Op1_reg[13] ;
  wire \EX_Op1_reg[14] ;
  wire \EX_Op1_reg[15] ;
  wire \EX_Op1_reg[16] ;
  wire \EX_Op1_reg[17] ;
  wire \EX_Op1_reg[18] ;
  wire \EX_Op1_reg[19] ;
  wire \EX_Op1_reg[1] ;
  wire \EX_Op1_reg[20] ;
  wire \EX_Op1_reg[21] ;
  wire \EX_Op1_reg[22] ;
  wire \EX_Op1_reg[23] ;
  wire \EX_Op1_reg[24] ;
  wire \EX_Op1_reg[25] ;
  wire \EX_Op1_reg[26] ;
  wire \EX_Op1_reg[27] ;
  wire \EX_Op1_reg[28] ;
  wire \EX_Op1_reg[29] ;
  wire \EX_Op1_reg[2] ;
  wire \EX_Op1_reg[30] ;
  wire \EX_Op1_reg[31] ;
  wire \EX_Op1_reg[3] ;
  wire \EX_Op1_reg[4] ;
  wire \EX_Op1_reg[5] ;
  wire \EX_Op1_reg[6] ;
  wire \EX_Op1_reg[7] ;
  wire \EX_Op1_reg[8] ;
  wire \EX_Op1_reg[9] ;
  wire [31:0]\EX_Op2_reg[0] ;
  wire [15:0]\EX_Op3_reg[0] ;
  wire \EX_Op3_reg[15] ;
  wire \EX_Op3_reg[15]_0 ;
  wire EX_SWAP_BYTE_Instr_reg;
  wire EX_SWAP_Instr_reg;
  wire [1:0]\EX_Sext_Op_reg[0] ;
  wire EX_Unsigned_Op_reg;
  wire EX_Use_Carry_reg;
  wire [15:0]GPR_Op1;
  wire [0:31]GPR_Op2;
  wire [15:0]GPR_Op3;
  wire \Gen_Mux_Select_LUT6[4].Gen_Sel_DFF_n_1 ;
  wire I0101_out;
  wire I0105_out;
  wire I0109_out;
  wire I0113_out;
  wire I0117_out;
  wire I0121_out;
  wire I0125_out;
  wire I0129_out;
  wire I0133_out;
  wire I0137_out;
  wire I013_out;
  wire I0141_out;
  wire I0145_out;
  wire I0149_out;
  wire I0153_out;
  wire I0157_out;
  wire I0161_out;
  wire I0165_out;
  wire I0169_out;
  wire I017_out;
  wire I021_out;
  wire I025_out;
  wire I029_out;
  wire I033_out;
  wire I037_out;
  wire I041_out;
  wire I045_out;
  wire I049_out;
  wire I053_out;
  wire I057_out;
  wire I05_out;
  wire I061_out;
  wire I065_out;
  wire I069_out;
  wire I073_out;
  wire I077_out;
  wire I081_out;
  wire I085_out;
  wire I089_out;
  wire I093_out;
  wire I097_out;
  wire I09_out;
  wire I1;
  wire I1103_out;
  wire I1107_out;
  wire I1111_out;
  wire I1115_out;
  wire I1119_out;
  wire I111_out;
  wire I1123_out;
  wire I1127_out;
  wire I1131_out;
  wire I1135_out;
  wire I1139_out;
  wire I1143_out;
  wire I1147_out;
  wire I1151_out;
  wire I1155_out;
  wire I1159_out;
  wire I115_out;
  wire I1163_out;
  wire I1167_out;
  wire I119_out;
  wire I123_out;
  wire I127_out;
  wire I131_out;
  wire I135_out;
  wire I139_out;
  wire I13_out;
  wire I143_out;
  wire I147_out;
  wire I151_out;
  wire I155_out;
  wire I159_out;
  wire I163_out;
  wire I167_out;
  wire I171_out;
  wire I175_out;
  wire I179_out;
  wire I17_out;
  wire I183_out;
  wire I187_out;
  wire I191_out;
  wire I195_out;
  wire I199_out;
  wire I4;
  wire IB_Ready;
  wire [0:0]IFetch;
  wire IReady;
  wire I_AS;
  wire \Instruction_Prefetch_Mux[0].Gen_Instr_DFF_n_2 ;
  wire \Instruction_Prefetch_Mux[10].Gen_Instr_DFF_n_2 ;
  wire \Instruction_Prefetch_Mux[10].Gen_Instr_DFF_n_3 ;
  wire \Instruction_Prefetch_Mux[10].Gen_Instr_DFF_n_4 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_1 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_10 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_11 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_12 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_13 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_14 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_15 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_16 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_2 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_3 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_4 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_5 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_6 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_7 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_8 ;
  wire \Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_9 ;
  wire \Instruction_Prefetch_Mux[1].Gen_Instr_DFF_n_10 ;
  wire \Instruction_Prefetch_Mux[27].Gen_Instr_DFF_n_1 ;
  wire \Instruction_Prefetch_Mux[28].Gen_Instr_DFF_n_1 ;
  wire \Instruction_Prefetch_Mux[28].Gen_Instr_DFF_n_2 ;
  wire \Instruction_Prefetch_Mux[2].Gen_Instr_DFF_n_2 ;
  wire \Instruction_Prefetch_Mux[2].Gen_Instr_DFF_n_3 ;
  wire \Instruction_Prefetch_Mux[30].Gen_Instr_DFF_n_1 ;
  wire \Instruction_Prefetch_Mux[32].Gen_Instr_DFF_n_1 ;
  wire \Instruction_Prefetch_Mux[32].Gen_Instr_DFF_n_2 ;
  wire \Instruction_Prefetch_Mux[32].Gen_Instr_DFF_n_3 ;
  wire \Instruction_Prefetch_Mux[37].Gen_Instr_DFF_n_2 ;
  wire \Instruction_Prefetch_Mux[37].Gen_Instr_DFF_n_3 ;
  wire \Instruction_Prefetch_Mux[37].Gen_Instr_DFF_n_4 ;
  wire \Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_1 ;
  wire \Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_2 ;
  wire \Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_3 ;
  wire \Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_4 ;
  wire \Instruction_Prefetch_Mux[6].Gen_Instr_DFF_n_23 ;
  wire [0:0]LOCKSTEP_Master_Out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.ex_brki_hit_reg ;
  wire [4:0]Q;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [29:0]\Using_FPGA.Native_10 ;
  wire [2:0]\Using_FPGA.Native_11 ;
  wire [0:0]\Using_FPGA.Native_12 ;
  wire [31:0]\Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire [0:0]\Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [15:0]WB_Byte_Access_reg;
  wire WB_Doublet_Access_reg;
  wire WB_Doublet_Access_reg_0;
  wire WB_Doublet_Access_reg_1;
  wire WB_Doublet_Access_reg_10;
  wire WB_Doublet_Access_reg_11;
  wire WB_Doublet_Access_reg_12;
  wire WB_Doublet_Access_reg_13;
  wire WB_Doublet_Access_reg_14;
  wire WB_Doublet_Access_reg_2;
  wire WB_Doublet_Access_reg_3;
  wire WB_Doublet_Access_reg_4;
  wire WB_Doublet_Access_reg_5;
  wire WB_Doublet_Access_reg_6;
  wire WB_Doublet_Access_reg_7;
  wire WB_Doublet_Access_reg_8;
  wire WB_Doublet_Access_reg_9;
  wire [0:0]\control_reg_reg[8] ;
  wire [2:0]ex_MSR;
  wire ex_alu_sel_logic_i_reg;
  wire ex_atomic_Instruction_Pair0;
  wire ex_branch_with_delayslot;
  wire ex_branch_with_delayslot_i;
  wire ex_branch_with_delayslot_reg;
  wire ex_branch_with_delayslot_reg_0;
  wire ex_delayslot_Instr2;
  wire ex_enable_alu_i_reg;
  wire ex_enable_sext_shift_i0;
  wire ex_gpr_write27_out;
  wire [4:0]\ex_gpr_write_addr_reg[0] ;
  wire ex_gpr_write_dbg;
  wire ex_gpr_write_dbg_reg;
  wire ex_gpr_write_reg;
  wire ex_gpr_write_reg_0;
  wire [20:0]\ex_instr_reg[11] ;
  wire ex_is_div_instr_I_reg;
  wire ex_is_multi_instr2_reg;
  wire ex_is_multi_or_load_instr;
  wire ex_is_multi_or_load_instr0;
  wire ex_jump_nodelay_reg;
  wire ex_jump_q;
  wire ex_load_alu_carry_reg;
  wire ex_load_shift_carry_reg;
  wire ex_mbar_decode;
  wire ex_mbar_decode_cmb;
  wire ex_mbar_is_sleep;
  wire ex_mbar_is_sleep_cmb;
  wire ex_move_to_MSR_instr29_out;
  wire ex_op1_cmp_eq;
  wire ex_op1_cmp_eq1;
  wire ex_op1_cmp_eq_n5_out;
  wire ex_sel_alu_i0;
  wire ex_set_bip;
  wire ex_set_bip0;
  wire ex_valid;
  wire force12_out;
  wire force_Val10_out;
  wire force_Val2_N_reg;
  wire \ibuffer_reg[3][0]_srl4_n_0 ;
  wire if_debug_ready_i_reg;
  wire if_fetch_for_timing_optimization1;
  wire if_fetch_in_progress;
  wire if_fetch_in_progress_reg;
  wire if_missed_fetch;
  wire [0:0]if_pre_buffer_addr;
  wire [1:2]if_sel_input;
  wire [15:0]\imm_reg_reg[0] ;
  wire [32:0]in;
  wire in00;
  wire [2:0]\interrupt_address_d1_reg[0] ;
  wire \interrupt_address_d1_reg[10] ;
  wire \interrupt_address_d1_reg[11] ;
  wire \interrupt_address_d1_reg[12] ;
  wire \interrupt_address_d1_reg[13] ;
  wire \interrupt_address_d1_reg[14] ;
  wire \interrupt_address_d1_reg[15] ;
  wire \interrupt_address_d1_reg[16] ;
  wire \interrupt_address_d1_reg[17] ;
  wire \interrupt_address_d1_reg[18] ;
  wire \interrupt_address_d1_reg[19] ;
  wire \interrupt_address_d1_reg[1] ;
  wire \interrupt_address_d1_reg[20] ;
  wire \interrupt_address_d1_reg[21] ;
  wire \interrupt_address_d1_reg[22] ;
  wire \interrupt_address_d1_reg[23] ;
  wire \interrupt_address_d1_reg[24] ;
  wire \interrupt_address_d1_reg[25] ;
  wire \interrupt_address_d1_reg[26] ;
  wire \interrupt_address_d1_reg[29] ;
  wire \interrupt_address_d1_reg[2] ;
  wire \interrupt_address_d1_reg[30] ;
  wire \interrupt_address_d1_reg[31] ;
  wire \interrupt_address_d1_reg[3] ;
  wire \interrupt_address_d1_reg[4] ;
  wire \interrupt_address_d1_reg[5] ;
  wire \interrupt_address_d1_reg[6] ;
  wire \interrupt_address_d1_reg[7] ;
  wire \interrupt_address_d1_reg[8] ;
  wire \interrupt_address_d1_reg[9] ;
  wire mem_gpr_write;
  wire mem_is_multi_or_load_instr;
  wire mem_jump_taken_reg;
  wire mem_sel_msr;
  wire mem_valid_instr;
  wire of_Sel_SPR_MSR3_out;
  wire of_Take_Interrupt_hold_reg;
  wire of_Valid_II;
  wire [5:0]of_instr;
  wire of_instr_ii_0;
  wire of_instr_ii_1;
  wire of_instr_ii_10;
  wire of_instr_ii_11;
  wire of_instr_ii_12;
  wire of_instr_ii_13;
  wire of_instr_ii_14;
  wire of_instr_ii_15;
  wire of_instr_ii_16;
  wire of_instr_ii_17;
  wire of_instr_ii_18;
  wire of_instr_ii_19;
  wire of_instr_ii_2;
  wire of_instr_ii_20;
  wire of_instr_ii_21;
  wire of_instr_ii_22;
  wire of_instr_ii_23;
  wire of_instr_ii_24;
  wire of_instr_ii_25;
  wire of_instr_ii_26;
  wire of_instr_ii_27;
  wire of_instr_ii_28;
  wire of_instr_ii_29;
  wire of_instr_ii_3;
  wire of_instr_ii_30;
  wire of_instr_ii_31;
  wire of_instr_ii_32;
  wire of_instr_ii_33;
  wire of_instr_ii_34;
  wire of_instr_ii_35;
  wire of_instr_ii_36;
  wire of_instr_ii_37;
  wire of_instr_ii_38;
  wire of_instr_ii_39;
  wire of_instr_ii_4;
  wire of_instr_ii_40;
  wire of_instr_ii_41;
  wire of_instr_ii_42;
  wire of_instr_ii_5;
  wire of_instr_ii_6;
  wire of_instr_ii_7;
  wire of_instr_ii_8;
  wire of_instr_ii_9;
  wire of_op1_sel_spr;
  wire [0:0]of_op2_sel;
  wire of_op2_sel_imm;
  wire [2:0]of_pipe_ctrl;
  wire [9:0]of_predecode;
  wire of_read_ex_write_op2_conflict_part1;
  wire of_read_ex_write_op2_conflict_part2;
  wire of_read_ex_write_op3_conflict_part1;
  wire of_read_ex_write_op3_conflict_part2;
  wire of_read_imm_reg_ii;
  wire of_read_imm_reg_ii_reg;
  wire of_read_mem_write_op2_conflict_part1;
  wire of_read_mem_write_op2_conflict_part2;
  wire of_use_op2_s;
  wire of_valid;
  wire [0:0]out;
  wire p_0_in44_in;
  wire p_109_in;
  wire p_112_in;
  wire p_19_in;
  wire p_1_in104_in;
  wire p_1_in109_in;
  wire p_1_in114_in;
  wire p_1_in119_in;
  wire p_1_in124_in;
  wire p_1_in129_in;
  wire p_1_in134_in;
  wire p_1_in139_in;
  wire p_1_in144_in;
  wire p_1_in149_in;
  wire p_1_in14_in;
  wire p_1_in154_in;
  wire p_1_in159_in;
  wire p_1_in164_in;
  wire p_1_in169_in;
  wire p_1_in16_in;
  wire p_1_in174_in;
  wire p_1_in179_in;
  wire p_1_in184_in;
  wire p_1_in189_in;
  wire p_1_in194_in;
  wire p_1_in199_in;
  wire p_1_in19_in;
  wire p_1_in204_in;
  wire p_1_in209_in;
  wire p_1_in24_in;
  wire p_1_in29_in;
  wire p_1_in34_in;
  wire p_1_in39_in;
  wire p_1_in44_in;
  wire p_1_in4_in;
  wire p_1_in54_in;
  wire p_1_in59_in;
  wire p_1_in64_in;
  wire p_1_in69_in;
  wire p_1_in74_in;
  wire p_1_in79_in;
  wire p_1_in84_in;
  wire p_1_in89_in_0;
  wire p_1_in94_in;
  wire p_1_in99_in;
  wire p_1_in9_in;
  wire p_9_in;
  wire sel_input_delayslot;
  wire sel_input_i_0;
  wire sel_input_i_1;
  wire sel_input_iii_0;
  wire sel_input_iii_1;
  wire sel_input_iii_2;
  wire sel_input_iii_3;
  wire [0:0]\status_reg_reg[25] ;
  wire use_Reg_Neg_DI1_out;
  wire use_Reg_Neg_S3_out;
  wire use_Reg_Neg_S_reg;
  wire use_Reg_Neg_S_reg_0;
  wire [0:0]wb_MSR_cmb;
  wire wb_exception_i_reg;
  wire \wb_exception_kind_i_reg[27] ;
  wire \wb_exception_kind_i_reg[27]_0 ;
  wire [4:0]\wb_gpr_write_addr_reg[0] ;
  wire wb_gpr_write_i;
  wire wb_reset;
  wire wb_valid_reg;

  system_microblaze_0_0_MB_FDR_72 \Gen_Mux_Select_LUT6[1].Gen_Sel_DFF 
       (.Clk(Clk),
        .IB_Ready(IB_Ready),
        .IFetch(IFetch),
        .I_AS(I_AS),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .if_fetch_for_timing_optimization1(if_fetch_for_timing_optimization1),
        .if_fetch_in_progress(if_fetch_in_progress),
        .if_fetch_in_progress_reg(if_fetch_in_progress_reg),
        .if_sel_input(if_sel_input[1]),
        .in00(in00),
        .out(out),
        .p_0_in44_in(p_0_in44_in),
        .sel_input_iii_3(sel_input_iii_3),
        .\status_reg_reg[25] (\status_reg_reg[25] ));
  system_microblaze_0_0_MB_LUT6 \Gen_Mux_Select_LUT6[1].Mux_Select_LUT6 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\status_reg_reg[25] ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_9 ),
        .if_sel_input(if_sel_input[1]),
        .sel_input_iii_3(sel_input_iii_3),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27] ));
  system_microblaze_0_0_MB_FDR_73 \Gen_Mux_Select_LUT6[2].Gen_Sel_DFF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\status_reg_reg[25] ),
        .addr(if_pre_buffer_addr),
        .if_sel_input(if_sel_input[1]),
        .out(out),
        .sel_input_iii_2(sel_input_iii_2));
  system_microblaze_0_0_MB_LUT6_74 \Gen_Mux_Select_LUT6[2].Mux_Select_LUT6 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\status_reg_reg[25] ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_9 ),
        .if_sel_input({if_sel_input[1],if_sel_input[2]}),
        .sel_input_iii_2(sel_input_iii_2),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27] ));
  system_microblaze_0_0_MB_FDR_75 \Gen_Mux_Select_LUT6[3].Gen_Sel_DFF 
       (.Clk(Clk),
        .if_sel_input(if_sel_input[2]),
        .out(out),
        .sel_input_iii_1(sel_input_iii_1));
  system_microblaze_0_0_MB_LUT6_76 \Gen_Mux_Select_LUT6[3].Mux_Select_LUT6 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_9 ),
        .if_sel_input({if_sel_input[1],if_sel_input[2]}),
        .sel_input_iii_1(sel_input_iii_1),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27] ));
  system_microblaze_0_0_MB_FDR_77 \Gen_Mux_Select_LUT6[4].Gen_Sel_DFF 
       (.Clk(Clk),
        .I1103_out(I1103_out),
        .I1107_out(I1107_out),
        .I1111_out(I1111_out),
        .I1115_out(I1115_out),
        .I1119_out(I1119_out),
        .I111_out(I111_out),
        .I1123_out(I1123_out),
        .I1127_out(I1127_out),
        .I1131_out(I1131_out),
        .I1135_out(I1135_out),
        .I1139_out(I1139_out),
        .I1143_out(I1143_out),
        .I1147_out(I1147_out),
        .I1151_out(I1151_out),
        .I1155_out(I1155_out),
        .I1159_out(I1159_out),
        .I115_out(I115_out),
        .I1163_out(I1163_out),
        .I1167_out(I1167_out),
        .I119_out(I119_out),
        .I123_out(I123_out),
        .I127_out(I127_out),
        .I131_out(I131_out),
        .I135_out(I135_out),
        .I13_out(I13_out),
        .I143_out(I143_out),
        .I147_out(I147_out),
        .I151_out(I151_out),
        .I155_out(I155_out),
        .I159_out(I159_out),
        .I163_out(I163_out),
        .I167_out(I167_out),
        .I171_out(I171_out),
        .I175_out(I175_out),
        .I179_out(I179_out),
        .I17_out(I17_out),
        .I183_out(I183_out),
        .I187_out(I187_out),
        .I191_out(I191_out),
        .I195_out(I195_out),
        .I199_out(I199_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Gen_Mux_Select_LUT6[4].Gen_Sel_DFF_n_1 ),
        .\Using_FPGA.Native_2 ({p_1_in209_in,p_1_in204_in,p_1_in199_in,p_1_in194_in,p_1_in189_in,p_1_in184_in,p_1_in179_in,p_1_in174_in,p_1_in169_in,p_1_in164_in,p_1_in159_in,p_1_in154_in,p_1_in149_in,p_1_in144_in,p_1_in139_in,p_1_in134_in,p_1_in129_in,p_1_in124_in,p_1_in119_in,p_1_in114_in,p_1_in109_in,p_1_in104_in,p_1_in99_in,p_1_in94_in,p_1_in89_in_0,p_1_in84_in,p_1_in79_in,p_1_in74_in,p_1_in69_in,p_1_in64_in,p_1_in59_in,p_1_in54_in,p_1_in44_in,p_1_in39_in,p_1_in34_in,p_1_in29_in,p_1_in24_in,p_1_in19_in,p_1_in14_in,p_1_in9_in,p_1_in4_in,\ibuffer_reg[3][0]_srl4_n_0 }),
        .in({in[32:11],in[9:0]}),
        .out(out),
        .sel_input_i_1(sel_input_i_1));
  system_microblaze_0_0_MB_LUT6_78 \Gen_Mux_Select_LUT6[4].Mux_Select_LUT6 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_9 ),
        .if_sel_input(if_sel_input[2]),
        .sel_input_iii_0(sel_input_iii_0),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27] ));
  system_microblaze_0_0_MB_LUT6__parameterized4 \Gen_Mux_Select_LUT6[4].Using_ExtraMUX.Mux_Select_Delayslot_LUT6 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_9 ),
        .if_sel_input(if_sel_input[2]),
        .sel_input_delayslot(sel_input_delayslot),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27] ));
  system_microblaze_0_0_MB_MUXF7 \Gen_Mux_Select_LUT6[4].Using_ExtraMUX.Sel_Mux_MUXF7 
       (.I4(I4),
        .ex_branch_with_delayslot_i(ex_branch_with_delayslot_i),
        .sel_input_delayslot(sel_input_delayslot),
        .sel_input_i_1(sel_input_i_1),
        .sel_input_iii_0(sel_input_iii_0),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27]_0 ));
  system_microblaze_0_0_MB_FDR_79 \Instruction_Prefetch_Mux[0].Gen_Instr_DFF 
       (.Clk(Clk),
        .EX_ALU_Op1(EX_ALU_Op1),
        .EX_CMP_Op_reg(EX_CMP_Op_reg),
        .EX_Unsigned_Op_reg(EX_Unsigned_Op_reg),
        .EX_Use_Carry_reg(EX_Use_Carry_reg),
        .I0169_out(I0169_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_3 (of_instr[2]),
        .\Using_FPGA.Native_4 (of_instr[4]),
        .\Using_FPGA.Native_5 (\ex_instr_reg[11] [0]),
        .\Using_FPGA.Native_6 (of_instr[3]),
        .\Using_FPGA.Native_7 (\ex_instr_reg[11] [1]),
        .\Using_FPGA.Native_8 (of_instr[1]),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .\ex_instr_reg[0] (of_instr[5]),
        .ex_jump_nodelay_reg(ex_jump_nodelay_reg),
        .\imm_reg_reg[15] (\Instruction_Prefetch_Mux[0].Gen_Instr_DFF_n_2 ),
        .in(in[32]),
        .of_instr_ii_42(of_instr_ii_42),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_80 \Instruction_Prefetch_Mux[0].Instr_Mux_MUXF7 
       (.I0169_out(I0169_out),
        .I1167_out(I1167_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_42(of_instr_ii_42));
  system_microblaze_0_0_MB_FDR_81 \Instruction_Prefetch_Mux[10].Gen_Instr_DFF 
       (.Clk(Clk),
        .\EX_Op3_reg[15] (\Instruction_Prefetch_Mux[10].Gen_Instr_DFF_n_2 ),
        .\EX_Op3_reg[15]_0 (\Instruction_Prefetch_Mux[10].Gen_Instr_DFF_n_3 ),
        .\EX_Op3_reg[15]_1 (\Instruction_Prefetch_Mux[10].Gen_Instr_DFF_n_4 ),
        .I0129_out(I0129_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .Q(Q[2:0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (D[2]),
        .\Using_FPGA.Native_2 (D[1]),
        .\ex_gpr_write_addr_reg[2] (\ex_gpr_write_addr_reg[0] [2:0]),
        .\ex_gpr_write_addr_reg[4] (D[0]),
        .in(in[22]),
        .of_instr_ii_32(of_instr_ii_32),
        .out(out),
        .\wb_gpr_write_addr_reg[2] (\wb_gpr_write_addr_reg[0] [2:0]));
  system_microblaze_0_0_MB_MUXF7_82 \Instruction_Prefetch_Mux[10].Instr_Mux_MUXF7 
       (.I0129_out(I0129_out),
        .I1127_out(I1127_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_32(of_instr_ii_32));
  system_microblaze_0_0_MB_FDR_83 \Instruction_Prefetch_Mux[11].Gen_Instr_DFF 
       (.Clk(Clk),
        .I0125_out(I0125_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_instr_reg[11] (\ex_instr_reg[11] [20]),
        .in(in[9]),
        .of_instr_ii_31(of_instr_ii_31),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_84 \Instruction_Prefetch_Mux[11].Instr_Mux_MUXF7 
       (.Dbg_Disable(Dbg_Disable),
        .I0125_out(I0125_out),
        .I1123_out(I1123_out),
        .IReady(IReady),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_9 ),
        .if_debug_ready_i_reg(if_debug_ready_i_reg),
        .if_missed_fetch(if_missed_fetch),
        .of_instr_ii_31(of_instr_ii_31),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27]_0 ));
  system_microblaze_0_0_MB_FDR_85 \Instruction_Prefetch_Mux[12].Gen_Instr_DFF 
       (.Clk(Clk),
        .I0121_out(I0121_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\ex_instr_reg[11] [18]),
        .\Using_FPGA.Native_2 (\ex_instr_reg[11] [20]),
        .\ex_instr_reg[12] (\ex_instr_reg[11] [19]),
        .ex_set_bip0(ex_set_bip0),
        .in(in[8]),
        .of_instr_ii_30(of_instr_ii_30),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_86 \Instruction_Prefetch_Mux[12].Instr_Mux_MUXF7 
       (.I0121_out(I0121_out),
        .I1119_out(I1119_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_30(of_instr_ii_30));
  system_microblaze_0_0_MB_FDR_87 \Instruction_Prefetch_Mux[13].Gen_Instr_DFF 
       (.Clk(Clk),
        .I0117_out(I0117_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_instr_reg[13] (\ex_instr_reg[11] [18]),
        .in(in[7]),
        .of_instr_ii_29(of_instr_ii_29),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_88 \Instruction_Prefetch_Mux[13].Instr_Mux_MUXF7 
       (.I0117_out(I0117_out),
        .I1115_out(I1115_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_29(of_instr_ii_29));
  system_microblaze_0_0_MB_FDR_89 \Instruction_Prefetch_Mux[14].Gen_Instr_DFF 
       (.Clk(Clk),
        .I0113_out(I0113_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg_0),
        .\ex_instr_reg[14] (\ex_instr_reg[11] [17]),
        .ex_mbar_decode(ex_mbar_decode),
        .ex_mbar_decode_reg(ex_mbar_decode_cmb),
        .in(in[6]),
        .of_instr_ii_28(of_instr_ii_28),
        .out(out),
        .p_1_in16_in(p_1_in16_in));
  system_microblaze_0_0_MB_MUXF7_90 \Instruction_Prefetch_Mux[14].Instr_Mux_MUXF7 
       (.I0113_out(I0113_out),
        .I1111_out(I1111_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_28(of_instr_ii_28));
  system_microblaze_0_0_MB_FDR_91 \Instruction_Prefetch_Mux[15].Gen_Instr_DFF 
       (.Clk(Clk),
        .I0109_out(I0109_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_instr_reg[15] (\ex_instr_reg[11] [16]),
        .in(in[5]),
        .of_instr_ii_27(of_instr_ii_27),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_92 \Instruction_Prefetch_Mux[15].Instr_Mux_MUXF7 
       (.I0109_out(I0109_out),
        .I1107_out(I1107_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_27(of_instr_ii_27));
  system_microblaze_0_0_MB_FDR_93 \Instruction_Prefetch_Mux[16].Gen_Instr_DFF 
       (.Clk(Clk),
        .Dbg_Disable(Dbg_Disable),
        .\EX_Op2_reg[0] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_1 ),
        .\EX_Op2_reg[10] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_7 ),
        .\EX_Op2_reg[11] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_6 ),
        .\EX_Op2_reg[12] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_5 ),
        .\EX_Op2_reg[13] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_4 ),
        .\EX_Op2_reg[14] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_3 ),
        .\EX_Op2_reg[15] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_2 ),
        .\EX_Op2_reg[1] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_16 ),
        .\EX_Op2_reg[2] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_15 ),
        .\EX_Op2_reg[3] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_14 ),
        .\EX_Op2_reg[4] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_13 ),
        .\EX_Op2_reg[5] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_12 ),
        .\EX_Op2_reg[6] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_11 ),
        .\EX_Op2_reg[7] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_10 ),
        .\EX_Op2_reg[8] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_9 ),
        .\EX_Op2_reg[9] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_8 ),
        .GPR_Op2(GPR_Op2[0]),
        .I0105_out(I0105_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_instr_reg[16] (\ex_instr_reg[11] [15]),
        .\imm_reg_reg[0] (\imm_reg_reg[0] ),
        .in(in[4]),
        .of_instr_ii_26(of_instr_ii_26),
        .of_op2_sel_imm(of_op2_sel_imm),
        .of_read_imm_reg_ii(of_read_imm_reg_ii),
        .of_read_imm_reg_ii_reg(of_read_imm_reg_ii_reg),
        .out(out),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27]_0 ));
  system_microblaze_0_0_MB_MUXF7_94 \Instruction_Prefetch_Mux[16].Instr_Mux_MUXF7 
       (.I0105_out(I0105_out),
        .I1103_out(I1103_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_26(of_instr_ii_26));
  system_microblaze_0_0_MB_FDR_95 \Instruction_Prefetch_Mux[17].Gen_Instr_DFF 
       (.Clk(Clk),
        .I0101_out(I0101_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (of_instr[0]),
        .\Using_FPGA.Native_1 (of_instr[3]),
        .\Using_FPGA.Native_2 (of_instr[4]),
        .\Using_FPGA.Native_3 (\Instruction_Prefetch_Mux[0].Gen_Instr_DFF_n_2 ),
        .\Using_FPGA.Native_4 (of_instr[1]),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native ),
        .\ex_instr_reg[17] (\ex_instr_reg[11] [14]),
        .in(in[3]),
        .of_instr_ii_25(of_instr_ii_25),
        .of_op1_sel_spr(of_op1_sel_spr),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_96 \Instruction_Prefetch_Mux[17].Instr_Mux_MUXF7 
       (.I0101_out(I0101_out),
        .I199_out(I199_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_25(of_instr_ii_25));
  system_microblaze_0_0_MB_FDR_97 \Instruction_Prefetch_Mux[18].Gen_Instr_DFF 
       (.Clk(Clk),
        .I097_out(I097_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_instr_reg[18] (\ex_instr_reg[11] [13]),
        .in(in[2]),
        .of_instr_ii_24(of_instr_ii_24),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_98 \Instruction_Prefetch_Mux[18].Instr_Mux_MUXF7 
       (.I097_out(I097_out),
        .I195_out(I195_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_24(of_instr_ii_24));
  system_microblaze_0_0_MB_FDR_99 \Instruction_Prefetch_Mux[19].Gen_Instr_DFF 
       (.Clk(Clk),
        .I093_out(I093_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_instr_reg[19] (\ex_instr_reg[11] [12]),
        .in(in[1]),
        .of_instr_ii_23(of_instr_ii_23),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_100 \Instruction_Prefetch_Mux[19].Instr_Mux_MUXF7 
       (.I093_out(I093_out),
        .I191_out(I191_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_23(of_instr_ii_23));
  system_microblaze_0_0_MB_FDR_101 \Instruction_Prefetch_Mux[1].Gen_Instr_DFF 
       (.Clk(Clk),
        .EX_ALU_Op1(EX_ALU_Op1),
        .\EX_Sext_Op_reg[0] (\Instruction_Prefetch_Mux[1].Gen_Instr_DFF_n_10 ),
        .I0165_out(I0165_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (D[1]),
        .\Using_FPGA.Native_1 (D[0]),
        .\Using_FPGA.Native_2 (D[2]),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_4 (of_instr[2]),
        .\Using_FPGA.Native_5 (of_instr[5]),
        .\Using_FPGA.Native_6 (of_instr[0]),
        .\Using_FPGA.Native_7 (of_instr[1]),
        .\Using_FPGA.Native_8 (of_instr[3]),
        .ex_alu_sel_logic_i_reg(ex_alu_sel_logic_i_reg),
        .ex_enable_sext_shift_i0(ex_enable_sext_shift_i0),
        .\ex_instr_reg[1] (of_instr[4]),
        .ex_op1_cmp_eq(ex_op1_cmp_eq),
        .ex_op1_cmp_eq_n5_out(ex_op1_cmp_eq_n5_out),
        .force12_out(force12_out),
        .force2_reg(ex_op1_cmp_eq1),
        .force_Val10_out(force_Val10_out),
        .in(in[31]),
        .of_instr_ii_41(of_instr_ii_41),
        .out(out),
        .use_Reg_Neg_DI1_out(use_Reg_Neg_DI1_out),
        .use_Reg_Neg_S3_out(use_Reg_Neg_S3_out));
  system_microblaze_0_0_MB_MUXF7_102 \Instruction_Prefetch_Mux[1].Instr_Mux_MUXF7 
       (.I0165_out(I0165_out),
        .I1163_out(I1163_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_41(of_instr_ii_41));
  system_microblaze_0_0_MB_FDR_103 \Instruction_Prefetch_Mux[20].Gen_Instr_DFF 
       (.Clk(Clk),
        .I089_out(I089_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_instr_reg[20] (\ex_instr_reg[11] [11]),
        .in(in[0]),
        .of_instr_ii_22(of_instr_ii_22),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_104 \Instruction_Prefetch_Mux[20].Instr_Mux_MUXF7 
       (.I089_out(I089_out),
        .I187_out(I187_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_22(of_instr_ii_22));
  system_microblaze_0_0_MB_FDR_105 \Instruction_Prefetch_Mux[21].Gen_Instr_DFF 
       (.Clk(Clk),
        .I085_out(I085_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Performace_Debug_Control.ex_brki_hit_reg (\Performace_Debug_Control.ex_brki_hit_reg ),
        .\Using_FPGA.Native_0 (\ex_instr_reg[11] [5]),
        .\Using_FPGA.Native_1 (\ex_instr_reg[11] [7]),
        .\Using_FPGA.Native_2 (\ex_instr_reg[11] [6]),
        .\Using_FPGA.Native_3 ({\ex_instr_reg[11] [11],\ex_instr_reg[11] [9:8]}),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_5 (\Instruction_Prefetch_Mux[30].Gen_Instr_DFF_n_1 ),
        .\Using_FPGA.Native_6 (\Instruction_Prefetch_Mux[28].Gen_Instr_DFF_n_2 ),
        .\control_reg_reg[8] (\control_reg_reg[8] ),
        .\ex_instr_reg[21] (\ex_instr_reg[11] [10]),
        .in(in[21]),
        .of_instr_ii_21(of_instr_ii_21),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_106 \Instruction_Prefetch_Mux[21].Instr_Mux_MUXF7 
       (.I085_out(I085_out),
        .I183_out(I183_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_21(of_instr_ii_21));
  system_microblaze_0_0_MB_FDR_107 \Instruction_Prefetch_Mux[22].Gen_Instr_DFF 
       (.Clk(Clk),
        .I081_out(I081_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (of_instr[3]),
        .\ex_instr_reg[22] (\ex_instr_reg[11] [9]),
        .in(in[20]),
        .of_instr_ii_20(of_instr_ii_20),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_108 \Instruction_Prefetch_Mux[22].Instr_Mux_MUXF7 
       (.I081_out(I081_out),
        .I179_out(I179_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_20(of_instr_ii_20));
  system_microblaze_0_0_MB_FDR_109 \Instruction_Prefetch_Mux[23].Gen_Instr_DFF 
       (.Clk(Clk),
        .I077_out(I077_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_instr_reg[23] (\ex_instr_reg[11] [8]),
        .in(in[19]),
        .of_instr_ii_19(of_instr_ii_19),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_110 \Instruction_Prefetch_Mux[23].Instr_Mux_MUXF7 
       (.I077_out(I077_out),
        .I175_out(I175_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_19(of_instr_ii_19));
  system_microblaze_0_0_MB_FDR_111 \Instruction_Prefetch_Mux[24].Gen_Instr_DFF 
       (.Clk(Clk),
        .I073_out(I073_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_instr_reg[24] (\ex_instr_reg[11] [7]),
        .in(in[18]),
        .of_instr_ii_18(of_instr_ii_18),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_112 \Instruction_Prefetch_Mux[24].Instr_Mux_MUXF7 
       (.I073_out(I073_out),
        .I171_out(I171_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_18(of_instr_ii_18));
  system_microblaze_0_0_MB_FDR_113 \Instruction_Prefetch_Mux[25].Gen_Instr_DFF 
       (.Clk(Clk),
        .\EX_Sext_Op_reg[0] (\EX_Sext_Op_reg[0] [1]),
        .\EX_Shift_Op_reg[0] (\ex_instr_reg[11] [6]),
        .I069_out(I069_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\ex_instr_reg[11] [5]),
        .\Using_FPGA.Native_2 (of_instr[0]),
        .\Using_FPGA.Native_3 (of_instr[5]),
        .\Using_FPGA.Native_4 (\Instruction_Prefetch_Mux[1].Gen_Instr_DFF_n_10 ),
        .in(in[17]),
        .of_instr_ii_17(of_instr_ii_17),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_114 \Instruction_Prefetch_Mux[25].Instr_Mux_MUXF7 
       (.I069_out(I069_out),
        .I167_out(I167_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_17(of_instr_ii_17));
  system_microblaze_0_0_MB_FDR_115 \Instruction_Prefetch_Mux[26].Gen_Instr_DFF 
       (.Clk(Clk),
        .EX_SWAP_Instr_reg(EX_SWAP_Instr_reg),
        .\EX_Sext_Op_reg[1] (\EX_Sext_Op_reg[0] [0]),
        .\EX_Shift_Op_reg[1] (\ex_instr_reg[11] [5]),
        .I065_out(I065_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (of_instr[4]),
        .\Using_FPGA.Native_1 (of_instr[0]),
        .\Using_FPGA.Native_2 (of_instr[1]),
        .\Using_FPGA.Native_3 (of_instr[3]),
        .\Using_FPGA.Native_4 (\ex_instr_reg[11] [6]),
        .\Using_FPGA.Native_5 (\ex_instr_reg[11] [8]),
        .\Using_FPGA.Native_6 (of_instr[2]),
        .\Using_FPGA.Native_7 (of_instr[5]),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_9 (\ex_instr_reg[11] [0]),
        .in(in[16]),
        .of_instr_ii_16(of_instr_ii_16),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_116 \Instruction_Prefetch_Mux[26].Instr_Mux_MUXF7 
       (.I065_out(I065_out),
        .I163_out(I163_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_16(of_instr_ii_16));
  system_microblaze_0_0_MB_FDR_117 \Instruction_Prefetch_Mux[27].Gen_Instr_DFF 
       (.Clk(Clk),
        .\EX_Op2_reg[27] (\Instruction_Prefetch_Mux[27].Gen_Instr_DFF_n_1 ),
        .GPR_Op2(GPR_Op2[27]),
        .I061_out(I061_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_instr_reg[27] (\ex_instr_reg[11] [4]),
        .in(in[15]),
        .\interrupt_address_d1_reg[27] (\interrupt_address_d1_reg[0] [1]),
        .of_Take_Interrupt_hold_reg(of_Take_Interrupt_hold_reg),
        .of_instr_ii_15(of_instr_ii_15),
        .of_op2_sel(of_op2_sel),
        .of_op2_sel_imm(of_op2_sel_imm),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_118 \Instruction_Prefetch_Mux[27].Instr_Mux_MUXF7 
       (.I061_out(I061_out),
        .I159_out(I159_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_15(of_instr_ii_15));
  system_microblaze_0_0_MB_FDR_119 \Instruction_Prefetch_Mux[28].Gen_Instr_DFF 
       (.Clk(Clk),
        .\EX_Op2_reg[28] (\Instruction_Prefetch_Mux[28].Gen_Instr_DFF_n_1 ),
        .GPR_Op2(GPR_Op2[28]),
        .I057_out(I057_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Performace_Debug_Control.ex_brki_hit_reg (\Instruction_Prefetch_Mux[28].Gen_Instr_DFF_n_2 ),
        .\Using_FPGA.Native_0 ({\ex_instr_reg[11] [15:12],\ex_instr_reg[11] [2:0]}),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (ex_is_multi_instr2_reg),
        .\ex_instr_reg[28] (\ex_instr_reg[11] [3]),
        .in(in[14]),
        .\interrupt_address_d1_reg[28] (\interrupt_address_d1_reg[0] [0]),
        .of_Sel_SPR_MSR3_out(of_Sel_SPR_MSR3_out),
        .of_Take_Interrupt_hold_reg(of_Take_Interrupt_hold_reg),
        .of_instr_ii_14(of_instr_ii_14),
        .of_op2_sel(of_op2_sel),
        .of_op2_sel_imm(of_op2_sel_imm),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_120 \Instruction_Prefetch_Mux[28].Instr_Mux_MUXF7 
       (.I057_out(I057_out),
        .I155_out(I155_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_14(of_instr_ii_14));
  system_microblaze_0_0_MB_FDR_121 \Instruction_Prefetch_Mux[29].Gen_Instr_DFF 
       (.Clk(Clk),
        .I053_out(I053_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 ({\ex_instr_reg[11] [14],\ex_instr_reg[11] [3],\ex_instr_reg[11] [1:0]}),
        .\Using_FPGA.Native_1 (\Instruction_Prefetch_Mux[2].Gen_Instr_DFF_n_2 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native ),
        .\ex_instr_reg[29] (\ex_instr_reg[11] [2]),
        .ex_move_to_MSR_instr29_out(ex_move_to_MSR_instr29_out),
        .in(in[13]),
        .of_instr_ii_13(of_instr_ii_13),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_122 \Instruction_Prefetch_Mux[29].Instr_Mux_MUXF7 
       (.I053_out(I053_out),
        .I151_out(I151_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_13(of_instr_ii_13));
  system_microblaze_0_0_MB_FDR_123 \Instruction_Prefetch_Mux[2].Gen_Instr_DFF 
       (.Clk(Clk),
        .\EX_ALU_Op_reg[1] (\Instruction_Prefetch_Mux[2].Gen_Instr_DFF_n_3 ),
        .I0161_out(I0161_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (of_instr[5]),
        .\Using_FPGA.Native_2 (of_instr[2]),
        .\Using_FPGA.Native_3 (of_instr[4]),
        .\Using_FPGA.Native_4 (of_instr[0]),
        .\Using_FPGA.Native_5 (of_instr[1]),
        .\Using_FPGA.Native_6 (\ex_instr_reg[11] [10]),
        .\ex_instr_reg[2] (of_instr[3]),
        .ex_move_to_MSR_instr_reg(\Instruction_Prefetch_Mux[2].Gen_Instr_DFF_n_2 ),
        .in(in[30]),
        .of_instr_ii_40(of_instr_ii_40),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_124 \Instruction_Prefetch_Mux[2].Instr_Mux_MUXF7 
       (.I0161_out(I0161_out),
        .I1159_out(I1159_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_40(of_instr_ii_40));
  system_microblaze_0_0_MB_FDR_125 \Instruction_Prefetch_Mux[30].Gen_Instr_DFF 
       (.Clk(Clk),
        .EX_SWAP_BYTE_Instr_reg(EX_SWAP_BYTE_Instr_reg),
        .I049_out(I049_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Performace_Debug_Control.ex_brki_hit_reg (\Instruction_Prefetch_Mux[30].Gen_Instr_DFF_n_1 ),
        .\Using_FPGA.Native_0 ({\ex_instr_reg[11] [2],\ex_instr_reg[11] [0]}),
        .\Using_FPGA.Native_1 (\ex_instr_reg[11] [4]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native ),
        .\ex_instr_reg[30] (\ex_instr_reg[11] [1]),
        .ex_set_bip0(ex_set_bip0),
        .in(in[12]),
        .of_instr_ii_12(of_instr_ii_12),
        .out(out),
        .p_1_in16_in(p_1_in16_in));
  system_microblaze_0_0_MB_MUXF7_126 \Instruction_Prefetch_Mux[30].Instr_Mux_MUXF7 
       (.I049_out(I049_out),
        .I147_out(I147_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_12(of_instr_ii_12));
  system_microblaze_0_0_MB_FDR_127 \Instruction_Prefetch_Mux[31].Gen_Instr_DFF 
       (.Clk(Clk),
        .I045_out(I045_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_instr_reg[31] (\ex_instr_reg[11] [0]),
        .in(in[11]),
        .of_instr_ii_11(of_instr_ii_11),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_128 \Instruction_Prefetch_Mux[31].Instr_Mux_MUXF7 
       (.I045_out(I045_out),
        .I143_out(I143_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_11(of_instr_ii_11));
  system_microblaze_0_0_MB_FDR_129 \Instruction_Prefetch_Mux[32].Gen_Instr_DFF 
       (.Clk(Clk),
        .\EX_Op3_reg[15] (\Instruction_Prefetch_Mux[32].Gen_Instr_DFF_n_1 ),
        .\EX_Op3_reg[15]_0 (\Instruction_Prefetch_Mux[32].Gen_Instr_DFF_n_2 ),
        .\EX_Op3_reg[15]_1 (\Instruction_Prefetch_Mux[32].Gen_Instr_DFF_n_3 ),
        .\Using_FPGA.Native_0 (D[4]),
        .\Using_FPGA.Native_1 (D[3]),
        .\ex_gpr_write_addr_reg[0] (\ex_gpr_write_addr_reg[0] [4:3]),
        .\ex_gpr_write_addr_reg[4] (\Instruction_Prefetch_Mux[10].Gen_Instr_DFF_n_4 ),
        .ex_is_multi_or_load_instr(ex_is_multi_or_load_instr),
        .mem_gpr_write(mem_gpr_write),
        .mem_valid_instr(mem_valid_instr),
        .of_instr_ii_10(of_instr_ii_10),
        .of_pipe_ctrl(of_pipe_ctrl[0]),
        .of_read_ex_write_op3_conflict_part1(of_read_ex_write_op3_conflict_part1),
        .of_read_ex_write_op3_conflict_part2(of_read_ex_write_op3_conflict_part2),
        .out(out),
        .use_Reg_Neg_S_reg(use_Reg_Neg_S_reg),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_write_i(wb_gpr_write_i),
        .wb_reset(wb_reset),
        .wb_valid_reg(wb_valid_reg));
  system_microblaze_0_0_MB_MUXF7_130 \Instruction_Prefetch_Mux[32].Instr_Mux_MUXF7 
       (.I041_out(I041_out),
        .I139_out(I139_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_10(of_instr_ii_10));
  system_microblaze_0_0_MB_FDR_131 \Instruction_Prefetch_Mux[33].Gen_Instr_DFF 
       (.Clk(Clk),
        .\EX_Branch_CMP_Op1_reg[0] (\EX_Branch_CMP_Op1_reg[0] ),
        .\EX_Branch_CMP_Op1_reg[15] (\EX_Branch_CMP_Op1_reg[15] ),
        .\EX_Branch_CMP_Op1_reg[15]_0 (\EX_Branch_CMP_Op1_reg[15]_0 ),
        .EX_Fwd({EX_Fwd[0],EX_Fwd[1],EX_Fwd[2],EX_Fwd[3],EX_Fwd[4],EX_Fwd[5],EX_Fwd[6],EX_Fwd[7],EX_Fwd[8],EX_Fwd[9],EX_Fwd[10],EX_Fwd[11],EX_Fwd[12],EX_Fwd[13],EX_Fwd[14],EX_Fwd[15]}),
        .GPR_Op1(GPR_Op1),
        .I037_out(I037_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .Q(Q[4:3]),
        .\Using_FPGA.Native_0 (of_predecode[9]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_10 [28:14]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_11 [2]),
        .\Using_FPGA.Native_3 (of_predecode[8]),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native ),
        .WB_Doublet_Access_reg(WB_Doublet_Access_reg),
        .WB_Doublet_Access_reg_0(WB_Doublet_Access_reg_0),
        .WB_Doublet_Access_reg_1(WB_Doublet_Access_reg_1),
        .WB_Doublet_Access_reg_10(WB_Doublet_Access_reg_10),
        .WB_Doublet_Access_reg_11(WB_Doublet_Access_reg_11),
        .WB_Doublet_Access_reg_12(WB_Doublet_Access_reg_12),
        .WB_Doublet_Access_reg_13(WB_Doublet_Access_reg_13),
        .WB_Doublet_Access_reg_14(WB_Doublet_Access_reg_14),
        .WB_Doublet_Access_reg_2(WB_Doublet_Access_reg_2),
        .WB_Doublet_Access_reg_3(WB_Doublet_Access_reg_3),
        .WB_Doublet_Access_reg_4(WB_Doublet_Access_reg_4),
        .WB_Doublet_Access_reg_5(WB_Doublet_Access_reg_5),
        .WB_Doublet_Access_reg_6(WB_Doublet_Access_reg_6),
        .WB_Doublet_Access_reg_7(WB_Doublet_Access_reg_7),
        .WB_Doublet_Access_reg_8(WB_Doublet_Access_reg_8),
        .WB_Doublet_Access_reg_9(WB_Doublet_Access_reg_9),
        .\ex_gpr_write_addr_reg[0] (\ex_gpr_write_addr_reg[0] [4:3]),
        .\ex_gpr_write_addr_reg[4] (\Instruction_Prefetch_Mux[37].Gen_Instr_DFF_n_4 ),
        .in(in[9]),
        .\mem_gpr_write_addr_reg[4] (\Instruction_Prefetch_Mux[37].Gen_Instr_DFF_n_2 ),
        .of_instr_ii_9(of_instr_ii_9),
        .out(out),
        .p_109_in(p_109_in),
        .p_112_in(p_112_in),
        .p_19_in(p_19_in),
        .\wb_gpr_write_addr_reg[0] (\wb_gpr_write_addr_reg[0] [4:3]),
        .\wb_gpr_write_addr_reg[4] (\Instruction_Prefetch_Mux[37].Gen_Instr_DFF_n_3 ));
  system_microblaze_0_0_MB_MUXF7_132 \Instruction_Prefetch_Mux[33].Instr_Mux_MUXF7 
       (.I037_out(I037_out),
        .I135_out(I135_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_9(of_instr_ii_9));
  system_microblaze_0_0_MB_FDR_133 \Instruction_Prefetch_Mux[34].Gen_Instr_DFF 
       (.Clk(Clk),
        .I033_out(I033_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .in(in[8]),
        .of_instr_ii_8(of_instr_ii_8),
        .of_predecode(of_predecode[8]),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_134 \Instruction_Prefetch_Mux[34].Instr_Mux_MUXF7 
       (.I033_out(I033_out),
        .I131_out(I131_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_8(of_instr_ii_8));
  system_microblaze_0_0_MB_FDR_135 \Instruction_Prefetch_Mux[35].Gen_Instr_DFF 
       (.Clk(Clk),
        .I029_out(I029_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (of_predecode[7]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .in(in[7]),
        .of_instr_ii_7(of_instr_ii_7),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_136 \Instruction_Prefetch_Mux[35].Instr_Mux_MUXF7 
       (.I029_out(I029_out),
        .I127_out(I127_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_7(of_instr_ii_7));
  system_microblaze_0_0_MB_FDR_137 \Instruction_Prefetch_Mux[36].Gen_Instr_DFF 
       (.Clk(Clk),
        .I025_out(I025_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (of_predecode[6]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .in(in[6]),
        .of_instr_ii_6(of_instr_ii_6),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_138 \Instruction_Prefetch_Mux[36].Instr_Mux_MUXF7 
       (.I025_out(I025_out),
        .I123_out(I123_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_6(of_instr_ii_6));
  system_microblaze_0_0_MB_FDR_139 \Instruction_Prefetch_Mux[37].Gen_Instr_DFF 
       (.Clk(Clk),
        .\EX_Branch_CMP_Op1_reg[15] (\Instruction_Prefetch_Mux[37].Gen_Instr_DFF_n_2 ),
        .\EX_Branch_CMP_Op1_reg[15]_0 (\Instruction_Prefetch_Mux[37].Gen_Instr_DFF_n_3 ),
        .\EX_Branch_CMP_Op1_reg[15]_1 (\Instruction_Prefetch_Mux[37].Gen_Instr_DFF_n_4 ),
        .I021_out(I021_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .Q(Q[2:0]),
        .\Using_FPGA.Native_0 (of_predecode[5]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (of_predecode[7]),
        .\Using_FPGA.Native_3 (of_predecode[6]),
        .\ex_gpr_write_addr_reg[2] (\ex_gpr_write_addr_reg[0] [2:0]),
        .in(in[5]),
        .of_instr_ii_5(of_instr_ii_5),
        .out(out),
        .\wb_gpr_write_addr_reg[2] (\wb_gpr_write_addr_reg[0] [2:0]));
  system_microblaze_0_0_MB_MUXF7_140 \Instruction_Prefetch_Mux[37].Instr_Mux_MUXF7 
       (.I021_out(I021_out),
        .I119_out(I119_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_5(of_instr_ii_5));
  system_microblaze_0_0_MB_FDR_141 \Instruction_Prefetch_Mux[38].Gen_Instr_DFF 
       (.Clk(Clk),
        .EX_Fwd(EX_Fwd),
        .\EX_Op2_reg[0] (\EX_Op2_reg[0] ),
        .GPR_Op2({GPR_Op2[1],GPR_Op2[2],GPR_Op2[3],GPR_Op2[4],GPR_Op2[5],GPR_Op2[6],GPR_Op2[7],GPR_Op2[8],GPR_Op2[9],GPR_Op2[10],GPR_Op2[11],GPR_Op2[12],GPR_Op2[13],GPR_Op2[14],GPR_Op2[15],GPR_Op2[16],GPR_Op2[17],GPR_Op2[18],GPR_Op2[19],GPR_Op2[20],GPR_Op2[21],GPR_Op2[22],GPR_Op2[23],GPR_Op2[24],GPR_Op2[25],GPR_Op2[26],GPR_Op2[29],GPR_Op2[30],GPR_Op2[31]}),
        .I017_out(I017_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .Q(Q[4:3]),
        .\Using_FPGA.Native_0 (of_predecode[4]),
        .\Using_FPGA.Native_1 ({\ex_instr_reg[11] [15:12],\ex_instr_reg[11] [2:0]}),
        .\Using_FPGA.Native_10 (of_predecode[3]),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_11 [1:0]),
        .\Using_FPGA.Native_4 (\Instruction_Prefetch_Mux[28].Gen_Instr_DFF_n_1 ),
        .\Using_FPGA.Native_5 (\Instruction_Prefetch_Mux[27].Gen_Instr_DFF_n_1 ),
        .\Using_FPGA.Native_6 (\ex_instr_reg[11] [5]),
        .\Using_FPGA.Native_7 (\ex_instr_reg[11] [6]),
        .\Using_FPGA.Native_8 (\ex_instr_reg[11] [11:7]),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_12 ),
        .WB_Byte_Access_reg(WB_Byte_Access_reg),
        .WB_Doublet_Access_reg(WB_Doublet_Access_reg),
        .WB_Doublet_Access_reg_0(WB_Doublet_Access_reg_0),
        .WB_Doublet_Access_reg_1(WB_Doublet_Access_reg_1),
        .WB_Doublet_Access_reg_10(WB_Doublet_Access_reg_10),
        .WB_Doublet_Access_reg_11(WB_Doublet_Access_reg_11),
        .WB_Doublet_Access_reg_12(WB_Doublet_Access_reg_12),
        .WB_Doublet_Access_reg_13(WB_Doublet_Access_reg_13),
        .WB_Doublet_Access_reg_14(WB_Doublet_Access_reg_14),
        .WB_Doublet_Access_reg_2(WB_Doublet_Access_reg_2),
        .WB_Doublet_Access_reg_3(WB_Doublet_Access_reg_3),
        .WB_Doublet_Access_reg_4(WB_Doublet_Access_reg_4),
        .WB_Doublet_Access_reg_5(WB_Doublet_Access_reg_5),
        .WB_Doublet_Access_reg_6(WB_Doublet_Access_reg_6),
        .WB_Doublet_Access_reg_7(WB_Doublet_Access_reg_7),
        .WB_Doublet_Access_reg_8(WB_Doublet_Access_reg_8),
        .WB_Doublet_Access_reg_9(WB_Doublet_Access_reg_9),
        .\ex_gpr_write_addr_reg[0] (\ex_gpr_write_addr_reg[0] [4:3]),
        .\ex_gpr_write_addr_reg[4] (\Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_4 ),
        .\imm_reg_reg[0] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_1 ),
        .\imm_reg_reg[10] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_7 ),
        .\imm_reg_reg[11] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_6 ),
        .\imm_reg_reg[12] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_5 ),
        .\imm_reg_reg[13] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_4 ),
        .\imm_reg_reg[14] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_3 ),
        .\imm_reg_reg[15] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_2 ),
        .\imm_reg_reg[1] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_16 ),
        .\imm_reg_reg[2] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_15 ),
        .\imm_reg_reg[3] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_14 ),
        .\imm_reg_reg[4] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_13 ),
        .\imm_reg_reg[5] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_12 ),
        .\imm_reg_reg[6] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_11 ),
        .\imm_reg_reg[7] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_10 ),
        .\imm_reg_reg[8] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_9 ),
        .\imm_reg_reg[9] (\Instruction_Prefetch_Mux[16].Gen_Instr_DFF_n_8 ),
        .in(in[4]),
        .\interrupt_address_d1_reg[0] (\interrupt_address_d1_reg[0] [2]),
        .\interrupt_address_d1_reg[10] (\interrupt_address_d1_reg[10] ),
        .\interrupt_address_d1_reg[11] (\interrupt_address_d1_reg[11] ),
        .\interrupt_address_d1_reg[12] (\interrupt_address_d1_reg[12] ),
        .\interrupt_address_d1_reg[13] (\interrupt_address_d1_reg[13] ),
        .\interrupt_address_d1_reg[14] (\interrupt_address_d1_reg[14] ),
        .\interrupt_address_d1_reg[15] (\interrupt_address_d1_reg[15] ),
        .\interrupt_address_d1_reg[16] (\interrupt_address_d1_reg[16] ),
        .\interrupt_address_d1_reg[17] (\interrupt_address_d1_reg[17] ),
        .\interrupt_address_d1_reg[18] (\interrupt_address_d1_reg[18] ),
        .\interrupt_address_d1_reg[19] (\interrupt_address_d1_reg[19] ),
        .\interrupt_address_d1_reg[1] (\interrupt_address_d1_reg[1] ),
        .\interrupt_address_d1_reg[20] (\interrupt_address_d1_reg[20] ),
        .\interrupt_address_d1_reg[21] (\interrupt_address_d1_reg[21] ),
        .\interrupt_address_d1_reg[22] (\interrupt_address_d1_reg[22] ),
        .\interrupt_address_d1_reg[23] (\interrupt_address_d1_reg[23] ),
        .\interrupt_address_d1_reg[24] (\interrupt_address_d1_reg[24] ),
        .\interrupt_address_d1_reg[25] (\interrupt_address_d1_reg[25] ),
        .\interrupt_address_d1_reg[26] (\interrupt_address_d1_reg[26] ),
        .\interrupt_address_d1_reg[29] (\interrupt_address_d1_reg[29] ),
        .\interrupt_address_d1_reg[2] (\interrupt_address_d1_reg[2] ),
        .\interrupt_address_d1_reg[30] (\interrupt_address_d1_reg[30] ),
        .\interrupt_address_d1_reg[31] (\interrupt_address_d1_reg[31] ),
        .\interrupt_address_d1_reg[3] (\interrupt_address_d1_reg[3] ),
        .\interrupt_address_d1_reg[4] (\interrupt_address_d1_reg[4] ),
        .\interrupt_address_d1_reg[5] (\interrupt_address_d1_reg[5] ),
        .\interrupt_address_d1_reg[6] (\interrupt_address_d1_reg[6] ),
        .\interrupt_address_d1_reg[7] (\interrupt_address_d1_reg[7] ),
        .\interrupt_address_d1_reg[8] (\interrupt_address_d1_reg[8] ),
        .\interrupt_address_d1_reg[9] (\interrupt_address_d1_reg[9] ),
        .\mem_gpr_write_addr_reg[4] (\Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_2 ),
        .mem_sel_msr(mem_sel_msr),
        .of_Take_Interrupt_hold_reg(of_Take_Interrupt_hold_reg),
        .of_instr_ii_4(of_instr_ii_4),
        .of_op2_sel(of_op2_sel),
        .of_op2_sel_imm(of_op2_sel_imm),
        .of_use_op2_s(of_use_op2_s),
        .out(out),
        .p_109_in(p_109_in),
        .p_112_in(p_112_in),
        .p_19_in(p_19_in),
        .wb_MSR_cmb(wb_MSR_cmb),
        .\wb_gpr_write_addr_reg[0] (\wb_gpr_write_addr_reg[0] [4:3]),
        .\wb_gpr_write_addr_reg[4] (\Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_3 ));
  system_microblaze_0_0_MB_MUXF7_142 \Instruction_Prefetch_Mux[38].Instr_Mux_MUXF7 
       (.I017_out(I017_out),
        .I115_out(I115_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_4(of_instr_ii_4));
  system_microblaze_0_0_MB_FDR_143 \Instruction_Prefetch_Mux[39].Gen_Instr_DFF 
       (.Clk(Clk),
        .I013_out(I013_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .in(in[3]),
        .of_instr_ii_3(of_instr_ii_3),
        .of_predecode(of_predecode[3]),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_144 \Instruction_Prefetch_Mux[39].Instr_Mux_MUXF7 
       (.I013_out(I013_out),
        .I111_out(I111_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_3(of_instr_ii_3));
  system_microblaze_0_0_MB_FDR_145 \Instruction_Prefetch_Mux[3].Gen_Instr_DFF 
       (.Clk(Clk),
        .EX_ALU_Op1(EX_ALU_Op1),
        .I0157_out(I0157_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\ex_instr_reg[11] [10]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_3 (of_instr[5]),
        .\Using_FPGA.Native_4 (of_instr[3]),
        .\Using_FPGA.Native_5 (of_instr[0]),
        .\Using_FPGA.Native_6 (of_instr[1]),
        .\Using_FPGA.Native_7 (of_instr[4]),
        .\ex_instr_reg[3] (of_instr[2]),
        .ex_load_alu_carry_reg(ex_load_alu_carry_reg),
        .ex_sel_alu_i0(ex_sel_alu_i0),
        .in(in[29]),
        .of_instr_ii_39(of_instr_ii_39),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_146 \Instruction_Prefetch_Mux[3].Instr_Mux_MUXF7 
       (.I0157_out(I0157_out),
        .I1155_out(I1155_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_39(of_instr_ii_39));
  system_microblaze_0_0_MB_FDR_147 \Instruction_Prefetch_Mux[40].Gen_Instr_DFF 
       (.Clk(Clk),
        .I09_out(I09_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (of_predecode[2]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .in(in[2]),
        .of_instr_ii_2(of_instr_ii_2),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_148 \Instruction_Prefetch_Mux[40].Instr_Mux_MUXF7 
       (.I09_out(I09_out),
        .I17_out(I17_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_2(of_instr_ii_2));
  system_microblaze_0_0_MB_FDR_149 \Instruction_Prefetch_Mux[41].Gen_Instr_DFF 
       (.Clk(Clk),
        .I05_out(I05_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (of_predecode[1]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .in(in[1]),
        .of_instr_ii_1(of_instr_ii_1),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_150 \Instruction_Prefetch_Mux[41].Instr_Mux_MUXF7 
       (.I05_out(I05_out),
        .I13_out(I13_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_1(of_instr_ii_1));
  system_microblaze_0_0_MB_FDR_151 \Instruction_Prefetch_Mux[42].Gen_Instr_DFF 
       (.Clk(Clk),
        .\EX_Op2_reg[27] (\Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_2 ),
        .\EX_Op2_reg[27]_0 (\Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_3 ),
        .\EX_Op2_reg[27]_1 (\Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_4 ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .Q(Q[2:0]),
        .\Using_FPGA.Native_0 (of_predecode[0]),
        .\Using_FPGA.Native_1 (\Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_3 (of_predecode[2]),
        .\Using_FPGA.Native_4 (of_predecode[1]),
        .\ex_gpr_write_addr_reg[2] (\ex_gpr_write_addr_reg[0] [2:0]),
        .in(in[0]),
        .of_instr_ii_0(of_instr_ii_0),
        .out(out),
        .\wb_gpr_write_addr_reg[2] (\wb_gpr_write_addr_reg[0] [2:0]));
  system_microblaze_0_0_MB_MUXF7_152 \Instruction_Prefetch_Mux[42].Instr_Mux_MUXF7 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_1 (\Instruction_Prefetch_Mux[42].Gen_Instr_DFF_n_1 ),
        .\Using_FPGA.Native_2 (\Gen_Mux_Select_LUT6[4].Gen_Sel_DFF_n_1 ),
        .of_instr_ii_0(of_instr_ii_0));
  system_microblaze_0_0_MB_FDR_153 \Instruction_Prefetch_Mux[4].Gen_Instr_DFF 
       (.Clk(Clk),
        .\EX_Op1_reg[10] (\EX_Op1_reg[10] ),
        .\EX_Op1_reg[11] (\EX_Op1_reg[11] ),
        .\EX_Op1_reg[12] (\EX_Op1_reg[12] ),
        .\EX_Op1_reg[13] (\EX_Op1_reg[13] ),
        .\EX_Op1_reg[14] (\EX_Op1_reg[14] ),
        .\EX_Op1_reg[15] (\EX_Op1_reg[15] ),
        .\EX_Op1_reg[16] (\EX_Op1_reg[16] ),
        .\EX_Op1_reg[17] (\EX_Op1_reg[17] ),
        .\EX_Op1_reg[18] (\EX_Op1_reg[18] ),
        .\EX_Op1_reg[19] (\EX_Op1_reg[19] ),
        .\EX_Op1_reg[1] (\EX_Op1_reg[1] ),
        .\EX_Op1_reg[20] (\EX_Op1_reg[20] ),
        .\EX_Op1_reg[21] (\EX_Op1_reg[21] ),
        .\EX_Op1_reg[22] (\EX_Op1_reg[22] ),
        .\EX_Op1_reg[23] (\EX_Op1_reg[23] ),
        .\EX_Op1_reg[24] (\EX_Op1_reg[24] ),
        .\EX_Op1_reg[25] (\EX_Op1_reg[25] ),
        .\EX_Op1_reg[26] (\EX_Op1_reg[26] ),
        .\EX_Op1_reg[27] (\EX_Op1_reg[27] ),
        .\EX_Op1_reg[28] (\EX_Op1_reg[28] ),
        .\EX_Op1_reg[29] (\EX_Op1_reg[29] ),
        .\EX_Op1_reg[2] (\EX_Op1_reg[2] ),
        .\EX_Op1_reg[30] (\EX_Op1_reg[30] ),
        .\EX_Op1_reg[31] (\EX_Op1_reg[31] ),
        .\EX_Op1_reg[3] (\EX_Op1_reg[3] ),
        .\EX_Op1_reg[4] (\EX_Op1_reg[4] ),
        .\EX_Op1_reg[5] (\EX_Op1_reg[5] ),
        .\EX_Op1_reg[6] (\EX_Op1_reg[6] ),
        .\EX_Op1_reg[7] (\EX_Op1_reg[7] ),
        .\EX_Op1_reg[8] (\EX_Op1_reg[8] ),
        .\EX_Op1_reg[9] (\EX_Op1_reg[9] ),
        .I0153_out(I0153_out),
        .I1(I1),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_1 (of_instr[3]),
        .\Using_FPGA.Native_2 (of_instr[4]),
        .\Using_FPGA.Native_3 (of_instr[0]),
        .\Using_FPGA.Native_4 (of_instr[5]),
        .\Using_FPGA.Native_5 (of_instr[2]),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_7 (\Instruction_Prefetch_Mux[0].Gen_Instr_DFF_n_2 ),
        .\Using_FPGA.Native_8 ({\ex_instr_reg[11] [14],\ex_instr_reg[11] [0]}),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_13 ),
        .ex_MSR(ex_MSR),
        .\ex_instr_reg[4] (of_instr[1]),
        .ex_is_multi_instr2_reg(ex_is_multi_instr2_reg),
        .ex_is_multi_or_load_instr(ex_is_multi_or_load_instr),
        .ex_is_multi_or_load_instr0(ex_is_multi_or_load_instr0),
        .force_Val2_N_reg(force_Val2_N_reg),
        .in(in[28]),
        .mem_is_multi_or_load_instr(mem_is_multi_or_load_instr),
        .of_instr_ii_38(of_instr_ii_38),
        .of_op2_sel_imm(of_op2_sel_imm),
        .of_pipe_ctrl(of_pipe_ctrl[2:1]),
        .of_read_ex_write_op2_conflict_part1(of_read_ex_write_op2_conflict_part1),
        .of_read_ex_write_op2_conflict_part2(of_read_ex_write_op2_conflict_part2),
        .of_read_mem_write_op2_conflict_part1(of_read_mem_write_op2_conflict_part1),
        .of_read_mem_write_op2_conflict_part2(of_read_mem_write_op2_conflict_part2),
        .of_use_op2_s(of_use_op2_s),
        .out(out),
        .p_1_in16_in(p_1_in16_in));
  system_microblaze_0_0_MB_MUXF7_154 \Instruction_Prefetch_Mux[4].Instr_Mux_MUXF7 
       (.I0153_out(I0153_out),
        .I1151_out(I1151_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_38(of_instr_ii_38));
  system_microblaze_0_0_MB_FDR_155 \Instruction_Prefetch_Mux[5].Gen_Instr_DFF 
       (.Clk(Clk),
        .D122_out(D122_out),
        .EX_ALU_Op1(EX_ALU_Op1),
        .\EX_ALU_Op_reg[0] (\EX_ALU_Op_reg[0] ),
        .EX_Is_Div_Instr(EX_Is_Div_Instr),
        .I0149_out(I0149_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_1 (of_instr[2]),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_2 (\Instruction_Prefetch_Mux[2].Gen_Instr_DFF_n_3 ),
        .\Using_FPGA.Native_3 (of_instr[4]),
        .\Using_FPGA.Native_4 (of_instr[5]),
        .\Using_FPGA.Native_5 (of_instr[1]),
        .\Using_FPGA.Native_6 (of_instr[3]),
        .\Using_FPGA.Native_7 (\ex_instr_reg[11] [10]),
        .\Using_FPGA.Native_8 ({\ex_instr_reg[11] [19:18],\ex_instr_reg[11] [14],\ex_instr_reg[11] [6:5],\ex_instr_reg[11] [3:2]}),
        .\Using_FPGA.Native_9 (\Instruction_Prefetch_Mux[0].Gen_Instr_DFF_n_2 ),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg_0),
        .ex_enable_alu_i_reg(ex_enable_alu_i_reg),
        .ex_gpr_write27_out(ex_gpr_write27_out),
        .ex_gpr_write_dbg(ex_gpr_write_dbg),
        .ex_gpr_write_dbg_reg(ex_gpr_write_dbg_reg),
        .ex_gpr_write_reg(ex_gpr_write_reg),
        .ex_gpr_write_reg_0(ex_gpr_write_reg_0),
        .\ex_instr_reg[5] (of_instr[0]),
        .ex_is_div_instr_I_reg(ex_is_div_instr_I_reg),
        .ex_load_shift_carry_reg(ex_load_shift_carry_reg),
        .ex_set_bip(ex_set_bip),
        .ex_set_bip0(ex_set_bip0),
        .in(in[27]),
        .of_Take_Interrupt_hold_reg(of_Take_Interrupt_hold_reg),
        .of_instr_ii_37(of_instr_ii_37),
        .out(out),
        .p_9_in(p_9_in),
        .wb_exception_i_reg(wb_exception_i_reg));
  system_microblaze_0_0_MB_MUXF7_156 \Instruction_Prefetch_Mux[5].Instr_Mux_MUXF7 
       (.I0149_out(I0149_out),
        .I1147_out(I1147_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_37(of_instr_ii_37));
  system_microblaze_0_0_MB_FDR_157 \Instruction_Prefetch_Mux[6].Gen_Instr_DFF 
       (.Clk(Clk),
        .E(E),
        .EX_Fwd({EX_Fwd[0],EX_Fwd[1],EX_Fwd[2],EX_Fwd[3],EX_Fwd[4],EX_Fwd[5],EX_Fwd[6],EX_Fwd[7],EX_Fwd[8],EX_Fwd[9],EX_Fwd[10],EX_Fwd[11],EX_Fwd[12],EX_Fwd[13],EX_Fwd[14],EX_Fwd[15]}),
        .\EX_Op3_reg[0] (\EX_Op3_reg[0] ),
        .\EX_Op3_reg[15] (\EX_Op3_reg[15] ),
        .\EX_Op3_reg[15]_0 (\EX_Op3_reg[15]_0 ),
        .GPR_Op3(GPR_Op3),
        .I0145_out(I0145_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .Q(Q[4:3]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_10 [28:14]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_11 [2]),
        .\Using_FPGA.Native_10 (\Instruction_Prefetch_Mux[32].Gen_Instr_DFF_n_2 ),
        .\Using_FPGA.Native_11 (of_instr[2]),
        .\Using_FPGA.Native_12 (of_instr[5]),
        .\Using_FPGA.Native_13 (of_instr[4]),
        .\Using_FPGA.Native_14 (\Instruction_Prefetch_Mux[32].Gen_Instr_DFF_n_3 ),
        .\Using_FPGA.Native_2 (D[3]),
        .\Using_FPGA.Native_3 (\Instruction_Prefetch_Mux[32].Gen_Instr_DFF_n_1 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_6 (of_instr[3]),
        .\Using_FPGA.Native_7 (of_instr[0]),
        .\Using_FPGA.Native_8 (of_instr[1]),
        .\Using_FPGA.Native_9 (\ex_instr_reg[11] [20]),
        .WB_Doublet_Access_reg(WB_Doublet_Access_reg),
        .WB_Doublet_Access_reg_0(WB_Doublet_Access_reg_0),
        .WB_Doublet_Access_reg_1(WB_Doublet_Access_reg_1),
        .WB_Doublet_Access_reg_10(WB_Doublet_Access_reg_10),
        .WB_Doublet_Access_reg_11(WB_Doublet_Access_reg_11),
        .WB_Doublet_Access_reg_12(WB_Doublet_Access_reg_12),
        .WB_Doublet_Access_reg_13(WB_Doublet_Access_reg_13),
        .WB_Doublet_Access_reg_14(WB_Doublet_Access_reg_14),
        .WB_Doublet_Access_reg_2(WB_Doublet_Access_reg_2),
        .WB_Doublet_Access_reg_3(WB_Doublet_Access_reg_3),
        .WB_Doublet_Access_reg_4(WB_Doublet_Access_reg_4),
        .WB_Doublet_Access_reg_5(WB_Doublet_Access_reg_5),
        .WB_Doublet_Access_reg_6(WB_Doublet_Access_reg_6),
        .WB_Doublet_Access_reg_7(WB_Doublet_Access_reg_7),
        .WB_Doublet_Access_reg_8(WB_Doublet_Access_reg_8),
        .WB_Doublet_Access_reg_9(WB_Doublet_Access_reg_9),
        .ex_atomic_Instruction_Pair0(ex_atomic_Instruction_Pair0),
        .ex_branch_with_delayslot_i(ex_branch_with_delayslot_i),
        .ex_branch_with_delayslot_i_reg(\Instruction_Prefetch_Mux[6].Gen_Instr_DFF_n_23 ),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .\ex_gpr_write_addr_reg[0] (D[4]),
        .ex_gpr_write_reg(ex_gpr_write_reg_0),
        .ex_mbar_is_sleep(ex_mbar_is_sleep),
        .ex_mbar_is_sleep_reg(ex_mbar_is_sleep_cmb),
        .ex_valid(ex_valid),
        .in(in[26]),
        .\mem_gpr_write_addr_reg[4] (\Instruction_Prefetch_Mux[10].Gen_Instr_DFF_n_2 ),
        .of_Take_Interrupt_hold_reg(of_Take_Interrupt_hold_reg),
        .of_instr_ii_36(of_instr_ii_36),
        .out(out),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27]_0 ),
        .\wb_gpr_write_addr_reg[0] (\wb_gpr_write_addr_reg[0] [4:3]),
        .\wb_gpr_write_addr_reg[4] (\Instruction_Prefetch_Mux[10].Gen_Instr_DFF_n_3 ));
  system_microblaze_0_0_MB_MUXF7_158 \Instruction_Prefetch_Mux[6].Instr_Mux_MUXF7 
       (.I0145_out(I0145_out),
        .I1143_out(I1143_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_36(of_instr_ii_36));
  system_microblaze_0_0_MB_FDR_159 \Instruction_Prefetch_Mux[7].Gen_Instr_DFF 
       (.Clk(Clk),
        .I0141_out(I0141_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\ex_gpr_write_addr_reg[1] (D[3]),
        .in(in[25]),
        .of_instr_ii_35(of_instr_ii_35),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_160 \Instruction_Prefetch_Mux[7].Instr_Mux_MUXF7 
       (.I0141_out(I0141_out),
        .I1139_out(I1139_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_35(of_instr_ii_35));
  system_microblaze_0_0_MB_FDR_161 \Instruction_Prefetch_Mux[8].Gen_Instr_DFF 
       (.Clk(Clk),
        .D({D[4:3],D[1:0]}),
        .I0137_out(I0137_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .ex_gpr_write27_out(ex_gpr_write27_out),
        .\ex_gpr_write_addr_reg[2] (D[2]),
        .in(in[24]),
        .of_instr_ii_34(of_instr_ii_34),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_162 \Instruction_Prefetch_Mux[8].Instr_Mux_MUXF7 
       (.I0137_out(I0137_out),
        .I1135_out(I1135_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_34(of_instr_ii_34));
  system_microblaze_0_0_MB_FDR_163 \Instruction_Prefetch_Mux[9].Gen_Instr_DFF 
       (.Clk(Clk),
        .D(D[1]),
        .I0133_out(I0133_out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .in(in[23]),
        .of_instr_ii_33(of_instr_ii_33),
        .out(out));
  system_microblaze_0_0_MB_MUXF7_164 \Instruction_Prefetch_Mux[9].Instr_Mux_MUXF7 
       (.I0133_out(I0133_out),
        .I1131_out(I1131_out),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .of_instr_ii_33(of_instr_ii_33));
  system_microblaze_0_0_MB_FDS Last_Sel_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .out(out),
        .sel_input_i_0(sel_input_i_0));
  system_microblaze_0_0_MB_LUT6__parameterized6 Mux_Select_Empty_LUT6
       (.I4(I4),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_9 ),
        .sel_input_i_0(sel_input_i_0),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27] ));
  system_microblaze_0_0_MB_LUT6__parameterized8 Mux_Select_OF_Valid_LUT6
       (.I4(I4),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_9 ),
        .of_Valid_II(of_Valid_II),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27] ));
  system_microblaze_0_0_MB_FDR_165 OF_Valid_DFF
       (.Clk(Clk),
        .Dbg_Clean_Stop_reg(Dbg_Clean_Stop_reg),
        .E(E),
        .\Using_FPGA.Native_0 (of_instr[1]),
        .\Using_FPGA.Native_1 (of_instr[4]),
        .\Using_FPGA.Native_2 (\Instruction_Prefetch_Mux[0].Gen_Instr_DFF_n_2 ),
        .\Using_FPGA.Native_3 (of_instr[3]),
        .\Using_FPGA.Native_4 (of_instr[0]),
        .\Using_FPGA.Native_5 (ex_branch_with_delayslot_reg),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .ex_jump_nodelay_reg(ex_jump_nodelay_reg),
        .ex_jump_q(ex_jump_q),
        .\imm_reg_reg[15] (of_valid),
        .mem_jump_taken_reg(mem_jump_taken_reg),
        .of_Valid_II(of_Valid_II),
        .out(out),
        .use_Reg_Neg_S_reg(use_Reg_Neg_S_reg_0),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27]_0 ));
  FDRE ex_branch_with_delayslot_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Instruction_Prefetch_Mux[6].Gen_Instr_DFF_n_23 ),
        .Q(ex_branch_with_delayslot_i),
        .R(1'b0));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][0]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][0]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[0]),
        .Q(\ibuffer_reg[3][0]_srl4_n_0 ));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][10]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][10]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[10]),
        .Q(\Using_FPGA.Native_8 ));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][11]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][11]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[11]),
        .Q(p_1_in54_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][12]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][12]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[12]),
        .Q(p_1_in59_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][13]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][13]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[13]),
        .Q(p_1_in64_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][14]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][14]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[14]),
        .Q(p_1_in69_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][15]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][15]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[15]),
        .Q(p_1_in74_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][16]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][16]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[16]),
        .Q(p_1_in79_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][17]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][17]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[17]),
        .Q(p_1_in84_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][18]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][18]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[18]),
        .Q(p_1_in89_in_0));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][19]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][19]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[19]),
        .Q(p_1_in94_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][1]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][1]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[1]),
        .Q(p_1_in4_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][20]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][20]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[20]),
        .Q(p_1_in99_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][21]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][21]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[21]),
        .Q(p_1_in104_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][22]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][22]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[0]),
        .Q(p_1_in109_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][23]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][23]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[1]),
        .Q(p_1_in114_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][24]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][24]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[2]),
        .Q(p_1_in119_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][25]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][25]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[3]),
        .Q(p_1_in124_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][26]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][26]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[4]),
        .Q(p_1_in129_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][27]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][27]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[5]),
        .Q(p_1_in134_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][28]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][28]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[6]),
        .Q(p_1_in139_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][29]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][29]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[7]),
        .Q(p_1_in144_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][2]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][2]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[2]),
        .Q(p_1_in9_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][30]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][30]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[8]),
        .Q(p_1_in149_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][31]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][31]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[9]),
        .Q(p_1_in154_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][32]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][32]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[22]),
        .Q(p_1_in159_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][33]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][33]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[23]),
        .Q(p_1_in164_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][34]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][34]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[24]),
        .Q(p_1_in169_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][35]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][35]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[25]),
        .Q(p_1_in174_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][36]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][36]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[26]),
        .Q(p_1_in179_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][37]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][37]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[27]),
        .Q(p_1_in184_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][38]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][38]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[28]),
        .Q(p_1_in189_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][39]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][39]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[29]),
        .Q(p_1_in194_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][3]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][3]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[3]),
        .Q(p_1_in14_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][40]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][40]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[30]),
        .Q(p_1_in199_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][41]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][41]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[31]),
        .Q(p_1_in204_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][42]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][42]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[32]),
        .Q(p_1_in209_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][4]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][4]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[4]),
        .Q(p_1_in19_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][5]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][5]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[5]),
        .Q(p_1_in24_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][6]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][6]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[6]),
        .Q(p_1_in29_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][7]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][7]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[7]),
        .Q(p_1_in34_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][8]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][8]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[8]),
        .Q(p_1_in39_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Performance.Core/Decode_I/PreFetch_Buffer_I1/ibuffer_reg[3][9]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ibuffer_reg[3][9]_srl4 
       (.A0(if_pre_buffer_addr),
        .A1(\status_reg_reg[25] ),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\Using_FPGA.Native_1 ),
        .CLK(Clk),
        .D(in[9]),
        .Q(p_1_in44_in));
endmodule

(* ORIG_REF_NAME = "Register_File_gti" *) 
module system_microblaze_0_0_Register_File_gti
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    WB_GPR_Wr,
    DID,
    of_gpr_op1_rd_addr,
    of_imm_data,
    of_gpr_op3_rd_addr,
    ADDRD,
    WB_Doublet_Access_reg,
    WB_Doublet_Access_reg_0,
    WB_Doublet_Access_reg_1,
    WB_Doublet_Access_reg_2,
    WB_Doublet_Access_reg_3,
    WB_Doublet_Access_reg_4,
    WB_Doublet_Access_reg_5,
    WB_Byte_Access_reg,
    WB_Byte_Access_reg_0,
    WB_Byte_Access_reg_1,
    WB_Byte_Access_reg_2,
    \wb_read_lsb_sel_reg[1] ,
    \wb_read_lsb_sel_reg[1]_0 ,
    \wb_read_lsb_sel_reg[1]_1 ,
    \wb_read_lsb_sel_reg[1]_2 );
  output [0:31]GPR_Op1;
  output [0:31]GPR_Op2;
  output [0:31]GPR_Op3;
  input Clk;
  input WB_GPR_Wr;
  input [1:0]DID;
  input [0:4]of_gpr_op1_rd_addr;
  input [4:0]of_imm_data;
  input [0:4]of_gpr_op3_rd_addr;
  input [4:0]ADDRD;
  input [1:0]WB_Doublet_Access_reg;
  input [1:0]WB_Doublet_Access_reg_0;
  input [1:0]WB_Doublet_Access_reg_1;
  input [1:0]WB_Doublet_Access_reg_2;
  input [1:0]WB_Doublet_Access_reg_3;
  input [1:0]WB_Doublet_Access_reg_4;
  input [1:0]WB_Doublet_Access_reg_5;
  input [1:0]WB_Byte_Access_reg;
  input [1:0]WB_Byte_Access_reg_0;
  input [1:0]WB_Byte_Access_reg_1;
  input [1:0]WB_Byte_Access_reg_2;
  input [1:0]\wb_read_lsb_sel_reg[1] ;
  input [1:0]\wb_read_lsb_sel_reg[1]_0 ;
  input [1:0]\wb_read_lsb_sel_reg[1]_1 ;
  input [1:0]\wb_read_lsb_sel_reg[1]_2 ;

  wire [4:0]ADDRD;
  wire Clk;
  wire [1:0]DID;
  wire [0:31]GPR_Op1;
  wire [0:31]GPR_Op2;
  wire [0:31]GPR_Op3;
  wire [1:0]WB_Byte_Access_reg;
  wire [1:0]WB_Byte_Access_reg_0;
  wire [1:0]WB_Byte_Access_reg_1;
  wire [1:0]WB_Byte_Access_reg_2;
  wire [1:0]WB_Doublet_Access_reg;
  wire [1:0]WB_Doublet_Access_reg_0;
  wire [1:0]WB_Doublet_Access_reg_1;
  wire [1:0]WB_Doublet_Access_reg_2;
  wire [1:0]WB_Doublet_Access_reg_3;
  wire [1:0]WB_Doublet_Access_reg_4;
  wire [1:0]WB_Doublet_Access_reg_5;
  wire WB_GPR_Wr;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [4:0]of_imm_data;
  wire [1:0]\wb_read_lsb_sel_reg[1] ;
  wire [1:0]\wb_read_lsb_sel_reg[1]_0 ;
  wire [1:0]\wb_read_lsb_sel_reg[1]_1 ;
  wire [1:0]\wb_read_lsb_sel_reg[1]_2 ;

  system_microblaze_0_0_MB_RAM32M \Using_LUT6.All_RAM32M[0].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .DID(DID),
        .GPR_Op1({GPR_Op1[0],GPR_Op1[1]}),
        .GPR_Op2({GPR_Op2[0],GPR_Op2[1]}),
        .GPR_Op3({GPR_Op3[0],GPR_Op3[1]}),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
  system_microblaze_0_0_MB_RAM32M_340 \Using_LUT6.All_RAM32M[10].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[20],GPR_Op1[21]}),
        .GPR_Op2({GPR_Op2[20],GPR_Op2[21]}),
        .GPR_Op3({GPR_Op3[20],GPR_Op3[21]}),
        .WB_Byte_Access_reg(WB_Byte_Access_reg_1),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
  system_microblaze_0_0_MB_RAM32M_341 \Using_LUT6.All_RAM32M[11].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[22],GPR_Op1[23]}),
        .GPR_Op2({GPR_Op2[22],GPR_Op2[23]}),
        .GPR_Op3({GPR_Op3[22],GPR_Op3[23]}),
        .WB_Byte_Access_reg(WB_Byte_Access_reg_2),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
  system_microblaze_0_0_MB_RAM32M_342 \Using_LUT6.All_RAM32M[12].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[24],GPR_Op1[25]}),
        .GPR_Op2({GPR_Op2[24],GPR_Op2[25]}),
        .GPR_Op3({GPR_Op3[24],GPR_Op3[25]}),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1] ));
  system_microblaze_0_0_MB_RAM32M_343 \Using_LUT6.All_RAM32M[13].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[26],GPR_Op1[27]}),
        .GPR_Op2({GPR_Op2[26],GPR_Op2[27]}),
        .GPR_Op3({GPR_Op3[26],GPR_Op3[27]}),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1]_0 ));
  system_microblaze_0_0_MB_RAM32M_344 \Using_LUT6.All_RAM32M[14].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[28],GPR_Op1[29]}),
        .GPR_Op2({GPR_Op2[28],GPR_Op2[29]}),
        .GPR_Op3({GPR_Op3[28],GPR_Op3[29]}),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1]_1 ));
  system_microblaze_0_0_MB_RAM32M_345 \Using_LUT6.All_RAM32M[15].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[30],GPR_Op1[31]}),
        .GPR_Op2({GPR_Op2[30],GPR_Op2[31]}),
        .GPR_Op3({GPR_Op3[30],GPR_Op3[31]}),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1]_2 ));
  system_microblaze_0_0_MB_RAM32M_346 \Using_LUT6.All_RAM32M[1].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[2],GPR_Op1[3]}),
        .GPR_Op2({GPR_Op2[2],GPR_Op2[3]}),
        .GPR_Op3({GPR_Op3[2],GPR_Op3[3]}),
        .WB_Doublet_Access_reg(WB_Doublet_Access_reg),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
  system_microblaze_0_0_MB_RAM32M_347 \Using_LUT6.All_RAM32M[2].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[4],GPR_Op1[5]}),
        .GPR_Op2({GPR_Op2[4],GPR_Op2[5]}),
        .GPR_Op3({GPR_Op3[4],GPR_Op3[5]}),
        .WB_Doublet_Access_reg(WB_Doublet_Access_reg_0),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
  system_microblaze_0_0_MB_RAM32M_348 \Using_LUT6.All_RAM32M[3].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[6],GPR_Op1[7]}),
        .GPR_Op2({GPR_Op2[6],GPR_Op2[7]}),
        .GPR_Op3({GPR_Op3[6],GPR_Op3[7]}),
        .WB_Doublet_Access_reg(WB_Doublet_Access_reg_1),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
  system_microblaze_0_0_MB_RAM32M_349 \Using_LUT6.All_RAM32M[4].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[8],GPR_Op1[9]}),
        .GPR_Op2({GPR_Op2[8],GPR_Op2[9]}),
        .GPR_Op3({GPR_Op3[8],GPR_Op3[9]}),
        .WB_Doublet_Access_reg(WB_Doublet_Access_reg_2),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
  system_microblaze_0_0_MB_RAM32M_350 \Using_LUT6.All_RAM32M[5].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[10],GPR_Op1[11]}),
        .GPR_Op2({GPR_Op2[10],GPR_Op2[11]}),
        .GPR_Op3({GPR_Op3[10],GPR_Op3[11]}),
        .WB_Doublet_Access_reg(WB_Doublet_Access_reg_3),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
  system_microblaze_0_0_MB_RAM32M_351 \Using_LUT6.All_RAM32M[6].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[12],GPR_Op1[13]}),
        .GPR_Op2({GPR_Op2[12],GPR_Op2[13]}),
        .GPR_Op3({GPR_Op3[12],GPR_Op3[13]}),
        .WB_Doublet_Access_reg(WB_Doublet_Access_reg_4),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
  system_microblaze_0_0_MB_RAM32M_352 \Using_LUT6.All_RAM32M[7].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[14],GPR_Op1[15]}),
        .GPR_Op2({GPR_Op2[14],GPR_Op2[15]}),
        .GPR_Op3({GPR_Op3[14],GPR_Op3[15]}),
        .WB_Doublet_Access_reg(WB_Doublet_Access_reg_5),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
  system_microblaze_0_0_MB_RAM32M_353 \Using_LUT6.All_RAM32M[8].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[16],GPR_Op1[17]}),
        .GPR_Op2({GPR_Op2[16],GPR_Op2[17]}),
        .GPR_Op3({GPR_Op3[16],GPR_Op3[17]}),
        .WB_Byte_Access_reg(WB_Byte_Access_reg),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
  system_microblaze_0_0_MB_RAM32M_354 \Using_LUT6.All_RAM32M[9].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .GPR_Op1({GPR_Op1[18],GPR_Op1[19]}),
        .GPR_Op2({GPR_Op2[18],GPR_Op2[19]}),
        .GPR_Op3({GPR_Op3[18],GPR_Op3[19]}),
        .WB_Byte_Access_reg(WB_Byte_Access_reg_0),
        .WB_GPR_Wr(WB_GPR_Wr),
        .of_gpr_op1_rd_addr(of_gpr_op1_rd_addr),
        .of_gpr_op3_rd_addr(of_gpr_op3_rd_addr),
        .of_imm_data(of_imm_data));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Module_gti" *) 
module system_microblaze_0_0_Shift_Logic_Module_gti
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \EX_Op1_reg[24] ,
    \EX_Op1_reg[24]_0 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input \EX_Op1_reg[24] ;
  input \EX_Op1_reg[24]_0 ;

  wire mask_0_15;
  wire mask_16_23;
  (* RTL_KEEP = "true" *) wire sign_0_15;
  (* RTL_KEEP = "true" *) wire sign_16_23;

  assign \Using_FPGA.Native  = sign_16_23;
  assign \Using_FPGA.Native_0  = sign_0_15;
  assign sign_0_15 = \EX_Op1_reg[24]_0 ;
  assign sign_16_23 = \EX_Op1_reg[24] ;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(mask_0_15));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(mask_16_23));
endmodule

(* ORIG_REF_NAME = "Zero_Detect_gti" *) 
module system_microblaze_0_0_Zero_Detect_gti
   (ex_op1_zero,
    ex_op1_cmp_equal,
    \Zero_Detecting[0].nibble_Zero_reg ,
    ex_op1_cmp_equal_n,
    \Zero_Detecting[1].nibble_Zero_reg ,
    \Zero_Detecting[2].nibble_Zero_reg ,
    \Zero_Detecting[3].nibble_Zero_reg ,
    \Zero_Detecting[4].nibble_Zero_reg ,
    \Zero_Detecting[5].nibble_Zero_reg ,
    lopt,
    lopt_1,
    lopt_2);
  output ex_op1_zero;
  input ex_op1_cmp_equal;
  input \Zero_Detecting[0].nibble_Zero_reg ;
  input ex_op1_cmp_equal_n;
  input \Zero_Detecting[1].nibble_Zero_reg ;
  input \Zero_Detecting[2].nibble_Zero_reg ;
  input \Zero_Detecting[3].nibble_Zero_reg ;
  input \Zero_Detecting[4].nibble_Zero_reg ;
  input \Zero_Detecting[5].nibble_Zero_reg ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \Zero_Detecting[0].nibble_Zero_reg ;
  wire \Zero_Detecting[1].nibble_Zero_reg ;
  wire \Zero_Detecting[2].nibble_Zero_reg ;
  wire \Zero_Detecting[3].nibble_Zero_reg ;
  wire \Zero_Detecting[4].nibble_Zero_reg ;
  wire \Zero_Detecting[5].nibble_Zero_reg ;
  wire ex_op1_cmp_equal;
  wire ex_op1_cmp_equal_n;
  wire ex_op1_zero;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire zero_CI_0;
  wire zero_CI_1;
  wire zero_CI_2;
  wire zero_CI_3;
  wire zero_CI_4;
  wire zero_CI_5;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  system_microblaze_0_0_MB_MUXCY_333 Part_Of_Zero_Carry_Start
       (.ex_op1_cmp_equal(ex_op1_cmp_equal),
        .lopt(ex_op1_cmp_equal_n),
        .lopt_1(\Zero_Detecting[0].nibble_Zero_reg ),
        .lopt_2(\Zero_Detecting[1].nibble_Zero_reg ),
        .lopt_3(\^lopt ),
        .lopt_4(\Zero_Detecting[2].nibble_Zero_reg ),
        .zero_CI_0(zero_CI_0));
  system_microblaze_0_0_MB_MUXCY_334 \Zero_Detecting[0].I_Part_Of_Zero_Detect 
       (.\Zero_Detecting[0].nibble_Zero_reg (\Zero_Detecting[0].nibble_Zero_reg ),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .zero_CI_0(zero_CI_0),
        .zero_CI_1(zero_CI_1));
  system_microblaze_0_0_MB_MUXCY_335 \Zero_Detecting[1].I_Part_Of_Zero_Detect 
       (.\Zero_Detecting[1].nibble_Zero_reg (\Zero_Detecting[1].nibble_Zero_reg ),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .zero_CI_1(zero_CI_1),
        .zero_CI_2(zero_CI_2));
  system_microblaze_0_0_MB_MUXCY_336 \Zero_Detecting[2].I_Part_Of_Zero_Detect 
       (.\Zero_Detecting[2].nibble_Zero_reg (\Zero_Detecting[2].nibble_Zero_reg ),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .lopt(\^lopt ),
        .zero_CI_2(zero_CI_2),
        .zero_CI_3(zero_CI_3));
  system_microblaze_0_0_MB_MUXCY_337 \Zero_Detecting[3].I_Part_Of_Zero_Detect 
       (.\Zero_Detecting[3].nibble_Zero_reg (\Zero_Detecting[3].nibble_Zero_reg ),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .lopt(\Zero_Detecting[4].nibble_Zero_reg ),
        .lopt_1(\Zero_Detecting[5].nibble_Zero_reg ),
        .lopt_2(\^lopt_1 ),
        .lopt_3(\^lopt_2 ),
        .lopt_4(lopt_3),
        .zero_CI_3(zero_CI_3),
        .zero_CI_4(zero_CI_4));
  system_microblaze_0_0_MB_MUXCY_338 \Zero_Detecting[4].I_Part_Of_Zero_Detect 
       (.\Zero_Detecting[4].nibble_Zero_reg (\Zero_Detecting[4].nibble_Zero_reg ),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .zero_CI_4(zero_CI_4),
        .zero_CI_5(zero_CI_5));
  system_microblaze_0_0_MB_MUXCY_339 \Zero_Detecting[5].I_Part_Of_Zero_Detect 
       (.\Zero_Detecting[5].nibble_Zero_reg (\Zero_Detecting[5].nibble_Zero_reg ),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .ex_op1_zero(ex_op1_zero),
        .zero_CI_5(zero_CI_5));
endmodule

(* ORIG_REF_NAME = "address_hit" *) 
module system_microblaze_0_0_address_hit
   (p_36_out,
    Hit,
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ,
    \Using_FPGA.Native ,
    \Performace_Debug_Control.dbg_stop_i_reg ,
    \control_reg_reg[8] ,
    force_stop_i,
    \Performace_Debug_Control.watchpoint_brk_hold_reg ,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    dbg_clean_stop,
    normal_stop_i,
    single_Step_N,
    Dbg_Reg_En,
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ,
    ex_branch_with_delayslot_reg,
    ex_Exception_Taken,
    mem_Exception_Taken,
    Dbg_TDI,
    Address,
    Dbg_Clk,
    Q);
  output p_36_out;
  output Hit;
  output \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  input \Using_FPGA.Native ;
  input \Performace_Debug_Control.dbg_stop_i_reg ;
  input \control_reg_reg[8] ;
  input force_stop_i;
  input \Performace_Debug_Control.watchpoint_brk_hold_reg ;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input dbg_clean_stop;
  input normal_stop_i;
  input single_Step_N;
  input [0:7]Dbg_Reg_En;
  input \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  input ex_branch_with_delayslot_reg;
  input ex_Exception_Taken;
  input mem_Exception_Taken;
  input Dbg_TDI;
  input [0:31]Address;
  input Dbg_Clk;
  input [0:0]Q;

  wire [0:31]Address;
  wire \Compare[1].SRLC16E_I_n_2 ;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_TDI;
  wire Hit;
  wire \Performace_Debug_Control.dbg_stop_i_reg ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  wire \Performace_Debug_Control.watchpoint_brk_hold_reg ;
  wire [0:0]Q;
  wire SRL16_MC15_1;
  wire SRL16_MC15_2;
  wire SRL16_MC15_3;
  wire SRL16_MC15_4;
  wire SRL16_MC15_5;
  wire SRL16_MC15_6;
  wire SRL16_MC15_7;
  wire SRL16_Sel_0;
  wire SRL16_Sel_1;
  wire SRL16_Sel_2;
  wire SRL16_Sel_3;
  wire SRL16_Sel_4;
  wire SRL16_Sel_5;
  wire SRL16_Sel_6;
  wire SRL16_Sel_7;
  wire \Using_FPGA.Native ;
  wire carry_0;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire carry_6;
  wire carry_7;
  wire \control_reg_reg[8] ;
  wire dbg_clean_stop;
  wire ex_Exception_Taken;
  wire ex_branch_with_delayslot_reg;
  wire force_stop_i;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire mem_Exception_Taken;
  wire normal_stop_i;
  wire p_36_out;
  wire single_Step_N;

  system_microblaze_0_0_MB_MUXCY_9 \Compare[0].MUXCY_I 
       (.Q(Q),
        .SRL16_Sel_7(SRL16_Sel_7),
        .carry_7(carry_7),
        .lopt(lopt),
        .lopt_1(SRL16_Sel_6),
        .lopt_2(lopt_1),
        .lopt_3(SRL16_Sel_5),
        .lopt_4(lopt_2),
        .lopt_5(lopt_3),
        .lopt_6(SRL16_Sel_4));
  system_microblaze_0_0_MB_SRLC16E \Compare[0].SRLC16E_I 
       (.Address({Address[28],Address[29],Address[30],Address[31]}),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_En(\Compare[1].SRLC16E_I_n_2 ),
        .SRL16_MC15_7(SRL16_MC15_7),
        .SRL16_Sel_7(SRL16_Sel_7));
  system_microblaze_0_0_MB_MUXCY_10 \Compare[1].MUXCY_I 
       (.SRL16_Sel_6(SRL16_Sel_6),
        .carry_6(carry_6),
        .carry_7(carry_7),
        .lopt(lopt));
  system_microblaze_0_0_MB_SRLC16E_11 \Compare[1].SRLC16E_I 
       (.Address({Address[24],Address[25],Address[26],Address[27]}),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .\Performace_Debug_Control.ex_dbg_hit_reg[0] (\Compare[1].SRLC16E_I_n_2 ),
        .SRL16_MC15_6(SRL16_MC15_6),
        .SRL16_MC15_7(SRL16_MC15_7),
        .SRL16_Sel_6(SRL16_Sel_6));
  system_microblaze_0_0_MB_MUXCY_12 \Compare[2].MUXCY_I 
       (.SRL16_Sel_5(SRL16_Sel_5),
        .carry_5(carry_5),
        .carry_6(carry_6),
        .lopt(lopt_1));
  system_microblaze_0_0_MB_SRLC16E_13 \Compare[2].SRLC16E_I 
       (.Address({Address[20],Address[21],Address[22],Address[23]}),
        .Dbg_Clk(Dbg_Clk),
        .\Dbg_Reg_En[6] (\Compare[1].SRLC16E_I_n_2 ),
        .SRL16_MC15_5(SRL16_MC15_5),
        .SRL16_MC15_6(SRL16_MC15_6),
        .SRL16_Sel_5(SRL16_Sel_5));
  system_microblaze_0_0_MB_MUXCY_14 \Compare[3].MUXCY_I 
       (.SRL16_Sel_4(SRL16_Sel_4),
        .carry_4(carry_4),
        .carry_5(carry_5),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  system_microblaze_0_0_MB_SRLC16E_15 \Compare[3].SRLC16E_I 
       (.Address({Address[16],Address[17],Address[18],Address[19]}),
        .Dbg_Clk(Dbg_Clk),
        .\Dbg_Reg_En[6] (\Compare[1].SRLC16E_I_n_2 ),
        .SRL16_MC15_4(SRL16_MC15_4),
        .SRL16_MC15_5(SRL16_MC15_5),
        .SRL16_Sel_4(SRL16_Sel_4));
  system_microblaze_0_0_MB_MUXCY_16 \Compare[4].MUXCY_I 
       (.SRL16_Sel_3(SRL16_Sel_3),
        .carry_3(carry_3),
        .carry_4(carry_4),
        .lopt(lopt_4),
        .lopt_1(SRL16_Sel_2),
        .lopt_2(lopt_5),
        .lopt_3(SRL16_Sel_1),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .lopt_6(SRL16_Sel_0));
  system_microblaze_0_0_MB_SRLC16E_17 \Compare[4].SRLC16E_I 
       (.Address({Address[12],Address[13],Address[14],Address[15]}),
        .Dbg_Clk(Dbg_Clk),
        .\Dbg_Reg_En[6] (\Compare[1].SRLC16E_I_n_2 ),
        .SRL16_MC15_3(SRL16_MC15_3),
        .SRL16_MC15_4(SRL16_MC15_4),
        .SRL16_Sel_3(SRL16_Sel_3));
  system_microblaze_0_0_MB_MUXCY_18 \Compare[5].MUXCY_I 
       (.SRL16_Sel_2(SRL16_Sel_2),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_4));
  system_microblaze_0_0_MB_SRLC16E_19 \Compare[5].SRLC16E_I 
       (.Address({Address[8],Address[9],Address[10],Address[11]}),
        .Dbg_Clk(Dbg_Clk),
        .\Dbg_Reg_En[6] (\Compare[1].SRLC16E_I_n_2 ),
        .SRL16_MC15_2(SRL16_MC15_2),
        .SRL16_MC15_3(SRL16_MC15_3),
        .SRL16_Sel_2(SRL16_Sel_2));
  system_microblaze_0_0_MB_MUXCY_20 \Compare[6].MUXCY_I 
       (.SRL16_Sel_1(SRL16_Sel_1),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_5));
  system_microblaze_0_0_MB_SRLC16E_21 \Compare[6].SRLC16E_I 
       (.Address({Address[4],Address[5],Address[6],Address[7]}),
        .Dbg_Clk(Dbg_Clk),
        .\Dbg_Reg_En[6] (\Compare[1].SRLC16E_I_n_2 ),
        .SRL16_MC15_1(SRL16_MC15_1),
        .SRL16_MC15_2(SRL16_MC15_2),
        .SRL16_Sel_1(SRL16_Sel_1));
  system_microblaze_0_0_MB_MUXCY_22 \Compare[7].MUXCY_I 
       (.SRL16_Sel_0(SRL16_Sel_0),
        .carry_0(carry_0),
        .carry_1(carry_1),
        .lopt(lopt_6),
        .lopt_1(lopt_7));
  system_microblaze_0_0_MB_SRLC16E_23 \Compare[7].SRLC16E_I 
       (.Address({Address[0],Address[1],Address[2],Address[3]}),
        .Dbg_Clk(Dbg_Clk),
        .\Dbg_Reg_En[6] (\Compare[1].SRLC16E_I_n_2 ),
        .Dbg_TDI(Dbg_TDI),
        .SRL16_MC15_1(SRL16_MC15_1),
        .SRL16_Sel_0(SRL16_Sel_0));
  system_microblaze_0_0_MB_MUXCY_24 \The_First_BreakPoints.MUXCY_Post 
       (.Hit(Hit),
        .\Performace_Debug_Control.dbg_stop_i_reg (\Performace_Debug_Control.dbg_stop_i_reg ),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg (\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 (\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ),
        .\Performace_Debug_Control.watchpoint_brk_hold_reg (\Performace_Debug_Control.watchpoint_brk_hold_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_0(carry_0),
        .\control_reg_reg[8] (\control_reg_reg[8] ),
        .dbg_clean_stop(dbg_clean_stop),
        .ex_Exception_Taken(ex_Exception_Taken),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .force_stop_i(force_stop_i),
        .mem_Exception_Taken(mem_Exception_Taken),
        .normal_stop_i(normal_stop_i),
        .p_36_out(p_36_out),
        .single_Step_N(single_Step_N));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and
   (of_PipeRun_for_ce,
    ex_Take_Intr_or_Exc_reg,
    ex_is_mul_instr_reg,
    ex_valid_keep_reg,
    ex_first_cycle_reg,
    \Using_FPGA.Native ,
    ex_Instr_Excep_combo_reg,
    \Performace_Debug_Control.ex_watchpoint_brk_reg ,
    of_Take_Interrupt_hold_reg,
    ex_jump_nodelay_reg,
    of_pipe_ctrl,
    of_PipeRun_carry_2,
    of_Take_Interrupt_hold_reg_0,
    ex_Take_Intr_or_Exc,
    ex_delayslot_Instr2,
    out,
    ex_div_unsigned,
    ex_valid_keep,
    of_next_ex_valid,
    wb_exception_i_reg,
    ex_Take_Intr_or_Exc_reg_0,
    ex_set_MSR_IE_instr,
    \EX_Op1_reg[30] ,
    of_MSR,
    \wb_exception_kind_i_reg[27] ,
    ex_Instr_Excep_combo,
    \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ,
    Dbg_Disable,
    of_Take_Interrupt_hold,
    ex_jump_nodelay_reg_0,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output of_PipeRun_for_ce;
  output ex_Take_Intr_or_Exc_reg;
  output ex_is_mul_instr_reg;
  output ex_valid_keep_reg;
  output ex_first_cycle_reg;
  output \Using_FPGA.Native ;
  output ex_Instr_Excep_combo_reg;
  output \Performace_Debug_Control.ex_watchpoint_brk_reg ;
  output of_Take_Interrupt_hold_reg;
  output ex_jump_nodelay_reg;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_2;
  input of_Take_Interrupt_hold_reg_0;
  input ex_Take_Intr_or_Exc;
  input ex_delayslot_Instr2;
  input [0:0]out;
  input ex_div_unsigned;
  input ex_valid_keep;
  input of_next_ex_valid;
  input wb_exception_i_reg;
  input ex_Take_Intr_or_Exc_reg_0;
  input ex_set_MSR_IE_instr;
  input \EX_Op1_reg[30] ;
  input [0:0]of_MSR;
  input \wb_exception_kind_i_reg[27] ;
  input ex_Instr_Excep_combo;
  input \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ;
  input Dbg_Disable;
  input of_Take_Interrupt_hold;
  input ex_jump_nodelay_reg_0;
  input \Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;

  wire Dbg_Disable;
  wire \EX_Op1_reg[30] ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.ex_watchpoint_brk_reg ;
  wire \Performace_Debug_Control.ex_watchpoint_brk_reg_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire ex_Instr_Excep_combo;
  wire ex_Instr_Excep_combo_reg;
  wire ex_Take_Intr_or_Exc;
  wire ex_Take_Intr_or_Exc_reg;
  wire ex_Take_Intr_or_Exc_reg_0;
  wire ex_delayslot_Instr2;
  wire ex_div_unsigned;
  wire ex_first_cycle_reg;
  wire ex_is_mul_instr_reg;
  wire ex_jump_nodelay_reg;
  wire ex_jump_nodelay_reg_0;
  wire ex_set_MSR_IE_instr;
  wire ex_valid_keep;
  wire ex_valid_keep_reg;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]of_MSR;
  wire of_PipeRun_carry_2;
  wire of_PipeRun_for_ce;
  wire of_Take_Interrupt_hold;
  wire of_Take_Interrupt_hold_reg;
  wire of_Take_Interrupt_hold_reg_0;
  wire of_next_ex_valid;
  wire [0:0]of_pipe_ctrl;
  wire [0:0]out;
  wire wb_exception_i_reg;
  wire \wb_exception_kind_i_reg[27] ;

  system_microblaze_0_0_MB_MUXCY_71 MUXCY_I
       (.Dbg_Disable(Dbg_Disable),
        .\EX_Op1_reg[30] (\EX_Op1_reg[30] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .\Performace_Debug_Control.ex_watchpoint_brk_reg (\Performace_Debug_Control.ex_watchpoint_brk_reg ),
        .\Performace_Debug_Control.ex_watchpoint_brk_reg_0 (\Performace_Debug_Control.ex_watchpoint_brk_reg_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .ex_Instr_Excep_combo(ex_Instr_Excep_combo),
        .ex_Instr_Excep_combo_reg(ex_Instr_Excep_combo_reg),
        .ex_Take_Intr_or_Exc(ex_Take_Intr_or_Exc),
        .ex_Take_Intr_or_Exc_reg(ex_Take_Intr_or_Exc_reg),
        .ex_Take_Intr_or_Exc_reg_0(ex_Take_Intr_or_Exc_reg_0),
        .ex_delayslot_Instr2(ex_delayslot_Instr2),
        .ex_div_unsigned(ex_div_unsigned),
        .ex_first_cycle_reg(ex_first_cycle_reg),
        .ex_is_mul_instr_reg(ex_is_mul_instr_reg),
        .ex_jump_nodelay_reg(ex_jump_nodelay_reg),
        .ex_jump_nodelay_reg_0(ex_jump_nodelay_reg_0),
        .ex_set_MSR_IE_instr(ex_set_MSR_IE_instr),
        .ex_valid_keep(ex_valid_keep),
        .ex_valid_keep_reg(ex_valid_keep_reg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9),
        .of_MSR(of_MSR),
        .of_PipeRun_carry_2(of_PipeRun_carry_2),
        .of_Take_Interrupt_hold(of_Take_Interrupt_hold),
        .of_Take_Interrupt_hold_reg(of_Take_Interrupt_hold_reg),
        .of_Take_Interrupt_hold_reg_0(of_Take_Interrupt_hold_reg_0),
        .of_next_ex_valid(of_next_ex_valid),
        .of_pipe_ctrl(of_pipe_ctrl),
        .out(out),
        .use_Reg_Neg_S_reg(of_PipeRun_for_ce),
        .wb_exception_i_reg(wb_exception_i_reg),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_25
   (of_PipeRun_carry_10,
    E,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output of_PipeRun_carry_10;
  input [0:0]E;
  input lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;

  wire [0:0]E;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire of_PipeRun_carry_10;

  system_microblaze_0_0_MB_MUXCY_70 MUXCY_I
       (.E(E),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .of_PipeRun_carry_10(of_PipeRun_carry_10));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_26
   (of_PipeRun_carry_9,
    EX_MBAR_Stall,
    ex_branch_with_delayslot_reg,
    of_PipeRun_carry_10,
    ex_mbar_sleep,
    ex_mbar_decode,
    ex_first_cycle,
    ex_mbar_stall_no_sleep_1,
    ex_jump_hold,
    ex_Take_Intr_or_Exc,
    lopt);
  output of_PipeRun_carry_9;
  output EX_MBAR_Stall;
  input ex_branch_with_delayslot_reg;
  input of_PipeRun_carry_10;
  input ex_mbar_sleep;
  input ex_mbar_decode;
  input ex_first_cycle;
  input ex_mbar_stall_no_sleep_1;
  input ex_jump_hold;
  input ex_Take_Intr_or_Exc;
  output lopt;

  wire EX_MBAR_Stall;
  wire ex_Take_Intr_or_Exc;
  wire ex_branch_with_delayslot_reg;
  wire ex_first_cycle;
  wire ex_jump_hold;
  wire ex_mbar_decode;
  wire ex_mbar_sleep;
  wire ex_mbar_stall_no_sleep_1;
  wire lopt;
  wire of_PipeRun_carry_10;
  wire of_PipeRun_carry_9;

  system_microblaze_0_0_MB_MUXCY_69 MUXCY_I
       (.EX_MBAR_Stall(EX_MBAR_Stall),
        .ex_Take_Intr_or_Exc(ex_Take_Intr_or_Exc),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .ex_first_cycle(ex_first_cycle),
        .ex_jump_hold(ex_jump_hold),
        .ex_mbar_decode(ex_mbar_decode),
        .ex_mbar_sleep(ex_mbar_sleep),
        .ex_mbar_stall_no_sleep_1(ex_mbar_stall_no_sleep_1),
        .lopt(lopt),
        .of_PipeRun_carry_10(of_PipeRun_carry_10),
        .of_PipeRun_carry_9(of_PipeRun_carry_9));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_27
   (\Using_FPGA.Native ,
    E,
    ex_Write_DCache_decode_cmb,
    ex_Write_ICache_i_cmb,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ,
    mem_gpr_write_reg,
    ex_bt_hit_hold_reg,
    mem_gpr_write_dbg_reg,
    of_set_MSR_IE_hold_reg,
    \Using_FPGA.Native_0 ,
    of_PipeRun_carry_9,
    Dbg_Disable,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \wb_exception_kind_i_reg[27] ,
    \Using_FPGA.Native_1 ,
    ex_write_dcache_instr,
    ex_Write_ICache_i,
    mem_valid_reg,
    \Performace_Debug_Control.dbg_stop_if_delay_i_reg ,
    \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ,
    p_36_out,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ,
    mem_gpr_write,
    ex_gpr_write_reg,
    wb_exception_i_reg,
    out,
    mem_jump_hit0,
    ex_gpr_write_dbg,
    mem_gpr_write_dbg,
    Q,
    p_82_in,
    of_set_MSR_IE_hold_reg_0,
    ex_Take_Intr_or_Exc_reg,
    ex_set_MSR_IE_instr,
    \EX_Op1_reg[30] ,
    ex_MSR,
    \wb_exception_kind_i_reg[27]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output \Using_FPGA.Native ;
  output [0:0]E;
  output ex_Write_DCache_decode_cmb;
  output ex_Write_ICache_i_cmb;
  output \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  output mem_gpr_write_reg;
  output ex_bt_hit_hold_reg;
  output mem_gpr_write_dbg_reg;
  output of_set_MSR_IE_hold_reg;
  output \Using_FPGA.Native_0 ;
  input of_PipeRun_carry_9;
  input Dbg_Disable;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input \wb_exception_kind_i_reg[27] ;
  input \Using_FPGA.Native_1 ;
  input ex_write_dcache_instr;
  input ex_Write_ICache_i;
  input mem_valid_reg;
  input \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  input \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  input p_36_out;
  input \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  input mem_gpr_write;
  input ex_gpr_write_reg;
  input wb_exception_i_reg;
  input [0:0]out;
  input mem_jump_hit0;
  input ex_gpr_write_dbg;
  input mem_gpr_write_dbg;
  input [0:0]Q;
  input p_82_in;
  input of_set_MSR_IE_hold_reg_0;
  input ex_Take_Intr_or_Exc_reg;
  input ex_set_MSR_IE_instr;
  input \EX_Op1_reg[30] ;
  input [0:0]ex_MSR;
  input \wb_exception_kind_i_reg[27]_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire Dbg_Disable;
  wire [0:0]E;
  wire \EX_Op1_reg[30] ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  wire [0:0]Q;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]ex_MSR;
  wire ex_Take_Intr_or_Exc_reg;
  wire ex_Write_DCache_decode_cmb;
  wire ex_Write_ICache_i;
  wire ex_Write_ICache_i_cmb;
  wire ex_bt_hit_hold_reg;
  wire ex_gpr_write_dbg;
  wire ex_gpr_write_reg;
  wire ex_set_MSR_IE_instr;
  wire ex_write_dcache_instr;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire mem_gpr_write;
  wire mem_gpr_write_dbg;
  wire mem_gpr_write_dbg_reg;
  wire mem_gpr_write_reg;
  wire mem_jump_hit0;
  wire mem_valid_reg;
  wire of_PipeRun_carry_9;
  wire of_set_MSR_IE_hold_reg;
  wire of_set_MSR_IE_hold_reg_0;
  wire [0:0]out;
  wire p_36_out;
  wire p_82_in;
  wire wb_exception_i_reg;
  wire \wb_exception_kind_i_reg[27] ;
  wire \wb_exception_kind_i_reg[27]_0 ;

  system_microblaze_0_0_MB_MUXCY_68 MUXCY_I
       (.Dbg_Disable(Dbg_Disable),
        .E(E),
        .\EX_Op1_reg[30] (\EX_Op1_reg[30] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .\Performace_Debug_Control.dbg_stop_if_delay_i_reg (\Performace_Debug_Control.dbg_stop_if_delay_i_reg ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg (\Performace_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 (\Performace_Debug_Control.ex_dbg_pc_hit_i_reg_0 ),
        .\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg (\Performace_Debug_Control.ex_dbg_pc_hit_single_step_reg ),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .ex_MSR(ex_MSR),
        .ex_Take_Intr_or_Exc_reg(ex_Take_Intr_or_Exc_reg),
        .ex_Write_DCache_decode_reg(ex_Write_DCache_decode_cmb),
        .ex_Write_ICache_i(ex_Write_ICache_i),
        .ex_Write_ICache_i_reg(ex_Write_ICache_i_cmb),
        .ex_bt_hit_hold_reg(ex_bt_hit_hold_reg),
        .ex_gpr_write_dbg(ex_gpr_write_dbg),
        .ex_gpr_write_reg(ex_gpr_write_reg),
        .ex_set_MSR_IE_instr(ex_set_MSR_IE_instr),
        .ex_write_dcache_instr(ex_write_dcache_instr),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .mem_gpr_write(mem_gpr_write),
        .mem_gpr_write_dbg(mem_gpr_write_dbg),
        .mem_gpr_write_dbg_reg(mem_gpr_write_dbg_reg),
        .mem_gpr_write_reg(mem_gpr_write_reg),
        .mem_jump_hit0(mem_jump_hit0),
        .mem_valid_reg(mem_valid_reg),
        .of_PipeRun_carry_9(of_PipeRun_carry_9),
        .of_set_MSR_IE_hold_reg(of_set_MSR_IE_hold_reg),
        .of_set_MSR_IE_hold_reg_0(of_set_MSR_IE_hold_reg_0),
        .out(out),
        .p_36_out(p_36_out),
        .p_82_in(p_82_in),
        .wb_exception_i_reg(wb_exception_i_reg),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27] ),
        .\wb_exception_kind_i_reg[27]_0 (\wb_exception_kind_i_reg[27]_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_28
   (of_PipeRun_carry_7,
    \Using_FPGA.Native ,
    ex_branch_with_delayslot_reg,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output of_PipeRun_carry_7;
  input \Using_FPGA.Native ;
  input ex_branch_with_delayslot_reg;
  input lopt;
  input lopt_1;
  input lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;

  wire \Using_FPGA.Native ;
  wire ex_branch_with_delayslot_reg;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire of_PipeRun_carry_7;

  system_microblaze_0_0_MB_MUXCY_67 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .of_PipeRun_carry_7(of_PipeRun_carry_7));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_29
   (of_PipeRun_carry_6,
    of_pipe_ctrl,
    of_PipeRun_carry_7,
    lopt);
  output of_PipeRun_carry_6;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_7;
  output lopt;

  wire lopt;
  wire of_PipeRun_carry_6;
  wire of_PipeRun_carry_7;
  wire [0:0]of_pipe_ctrl;

  system_microblaze_0_0_MB_MUXCY_66 MUXCY_I
       (.lopt(lopt),
        .of_PipeRun_carry_6(of_PipeRun_carry_6),
        .of_PipeRun_carry_7(of_PipeRun_carry_7),
        .of_pipe_ctrl(of_pipe_ctrl));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_30
   (of_PipeRun_carry_5,
    of_pipe_ctrl,
    of_PipeRun_carry_6,
    lopt);
  output of_PipeRun_carry_5;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_6;
  output lopt;

  wire lopt;
  wire of_PipeRun_carry_5;
  wire of_PipeRun_carry_6;
  wire [0:0]of_pipe_ctrl;

  system_microblaze_0_0_MB_MUXCY_65 MUXCY_I
       (.lopt(lopt),
        .of_PipeRun_carry_5(of_PipeRun_carry_5),
        .of_PipeRun_carry_6(of_PipeRun_carry_6),
        .of_pipe_ctrl(of_pipe_ctrl));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_31
   (of_PipeRun_carry_4,
    of_pipe_ctrl,
    of_PipeRun_carry_5,
    lopt,
    lopt_1);
  output of_PipeRun_carry_4;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_5;
  input lopt;
  output lopt_1;

  wire lopt;
  wire lopt_1;
  wire of_PipeRun_carry_4;
  wire of_PipeRun_carry_5;
  wire [0:0]of_pipe_ctrl;

  system_microblaze_0_0_MB_MUXCY_64 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .of_PipeRun_carry_4(of_PipeRun_carry_4),
        .of_PipeRun_carry_5(of_PipeRun_carry_5),
        .of_pipe_ctrl(of_pipe_ctrl));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_32
   (of_PipeRun_carry_3,
    of_pipe_ctrl,
    of_PipeRun_carry_4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output of_PipeRun_carry_3;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_4;
  input lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire of_PipeRun_carry_3;
  wire of_PipeRun_carry_4;
  wire [0:0]of_pipe_ctrl;

  system_microblaze_0_0_MB_MUXCY_63 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .of_PipeRun_carry_3(of_PipeRun_carry_3),
        .of_PipeRun_carry_4(of_PipeRun_carry_4),
        .of_pipe_ctrl(of_pipe_ctrl));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_33
   (of_PipeRun_carry_2,
    of_pipe_ctrl,
    of_PipeRun_carry_3,
    lopt);
  output of_PipeRun_carry_2;
  input [0:0]of_pipe_ctrl;
  input of_PipeRun_carry_3;
  output lopt;

  wire lopt;
  wire of_PipeRun_carry_2;
  wire of_PipeRun_carry_3;
  wire [0:0]of_pipe_ctrl;

  system_microblaze_0_0_MB_MUXCY_62 MUXCY_I
       (.lopt(lopt),
        .of_PipeRun_carry_2(of_PipeRun_carry_2),
        .of_PipeRun_carry_3(of_PipeRun_carry_3),
        .of_pipe_ctrl(of_pipe_ctrl));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_46
   (if_pc_incr_carry1,
    \Performace_Debug_Control.dbg_stop_if_delay_i_reg ,
    if_pc_incr_carry0,
    lopt);
  output if_pc_incr_carry1;
  input \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  input if_pc_incr_carry0;
  output lopt;

  wire \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  wire if_pc_incr_carry0;
  wire if_pc_incr_carry1;
  wire lopt;

  system_microblaze_0_0_MB_MUXCY_61 MUXCY_I
       (.\Performace_Debug_Control.dbg_stop_if_delay_i_reg (\Performace_Debug_Control.dbg_stop_if_delay_i_reg ),
        .if_pc_incr_carry0(if_pc_incr_carry0),
        .if_pc_incr_carry1(if_pc_incr_carry1),
        .lopt(lopt));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_47
   (if_pc_incr_carry0,
    if_missed_fetch,
    lopt,
    lopt_1,
    lopt_2);
  output if_pc_incr_carry0;
  input if_missed_fetch;
  output lopt;
  output lopt_1;
  output lopt_2;

  wire if_missed_fetch;
  wire if_pc_incr_carry0;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  system_microblaze_0_0_MB_MUXCY_60 MUXCY_I
       (.if_missed_fetch(if_missed_fetch),
        .if_pc_incr_carry0(if_pc_incr_carry0),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_48
   (if_pc_incr_carry3,
    if_fetch_for_timing_optimization1,
    if_pc_incr_carry1,
    lopt,
    lopt_1);
  output if_pc_incr_carry3;
  input if_fetch_for_timing_optimization1;
  input if_pc_incr_carry1;
  input lopt;
  output lopt_1;

  wire if_fetch_for_timing_optimization1;
  wire if_pc_incr_carry1;
  wire if_pc_incr_carry3;
  wire lopt;
  wire lopt_1;

  system_microblaze_0_0_MB_MUXCY_59 MUXCY_I
       (.if_fetch_for_timing_optimization1(if_fetch_for_timing_optimization1),
        .if_pc_incr_carry1(if_pc_incr_carry1),
        .if_pc_incr_carry3(if_pc_incr_carry3),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module system_microblaze_0_0_carry_and_49
   (E,
    wb_gpr_write_dbg0,
    wb_gpr_write_i0,
    mem_valid_reg,
    wb_valid_reg,
    mem_wait_on_ready_N,
    out,
    wb_exception_i_reg,
    mem_gpr_write_dbg,
    mem_gpr_write,
    mem_valid_instr,
    mem_exception_from_ex,
    ex_valid_reg,
    ex_branch_with_delayslot_reg,
    flush_pipe,
    wb_valid_reg_0,
    wb_piperun,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]E;
  output wb_gpr_write_dbg0;
  output wb_gpr_write_i0;
  output mem_valid_reg;
  output wb_valid_reg;
  input mem_wait_on_ready_N;
  input [0:0]out;
  input wb_exception_i_reg;
  input mem_gpr_write_dbg;
  input mem_gpr_write;
  input mem_valid_instr;
  input mem_exception_from_ex;
  input ex_valid_reg;
  input ex_branch_with_delayslot_reg;
  input flush_pipe;
  input wb_valid_reg_0;
  input wb_piperun;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [0:0]E;
  wire ex_branch_with_delayslot_reg;
  wire ex_valid_reg;
  wire flush_pipe;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire mem_exception_from_ex;
  wire mem_gpr_write;
  wire mem_gpr_write_dbg;
  wire mem_valid_instr;
  wire mem_valid_reg;
  wire mem_wait_on_ready_N;
  wire [0:0]out;
  wire wb_exception_i_reg;
  wire wb_gpr_write_dbg0;
  wire wb_gpr_write_i0;
  wire wb_piperun;
  wire wb_valid_reg;
  wire wb_valid_reg_0;

  system_microblaze_0_0_MB_MUXCY_52 MUXCY_I
       (.Trace_WB_Jump_Hit_reg(E),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .ex_valid_reg(ex_valid_reg),
        .flush_pipe(flush_pipe),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .mem_exception_from_ex(mem_exception_from_ex),
        .mem_gpr_write(mem_gpr_write),
        .mem_gpr_write_dbg(mem_gpr_write_dbg),
        .mem_valid_instr(mem_valid_instr),
        .mem_valid_reg(mem_valid_reg),
        .mem_wait_on_ready_N(mem_wait_on_ready_N),
        .out(out),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_write_dbg0(wb_gpr_write_dbg0),
        .wb_gpr_write_i0(wb_gpr_write_i0),
        .wb_piperun(wb_piperun),
        .wb_valid_reg(wb_valid_reg),
        .wb_valid_reg_0(wb_valid_reg_0));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module system_microblaze_0_0_carry_or
   (mem_databus_ready,
    mem_access_completed_reg,
    lopt,
    lopt_1);
  output mem_databus_ready;
  input mem_access_completed_reg;
  output lopt;
  output lopt_1;

  wire lopt;
  wire lopt_1;
  wire mem_access_completed_reg;
  wire mem_databus_ready;

  system_microblaze_0_0_MB_MUXCY MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .mem_access_completed_reg(mem_access_completed_reg),
        .mem_databus_ready(mem_databus_ready));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module system_microblaze_0_0_carry_or_50
   (mem_wait_on_ready_N,
    mem_databus_ready,
    mem_valid_instr,
    mem_load_store_access,
    mem_Write_DCache,
    lopt,
    lopt_1);
  output mem_wait_on_ready_N;
  input mem_databus_ready;
  input mem_valid_instr;
  input mem_load_store_access;
  input mem_Write_DCache;
  output lopt;
  output lopt_1;

  wire lopt;
  wire lopt_1;
  wire mem_Write_DCache;
  wire mem_databus_ready;
  wire mem_load_store_access;
  wire mem_valid_instr;
  wire mem_wait_on_ready_N;

  system_microblaze_0_0_MB_MUXCY_51 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .mem_Write_DCache(mem_Write_DCache),
        .mem_databus_ready(mem_databus_ready),
        .mem_load_store_access(mem_load_store_access),
        .mem_valid_instr(mem_valid_instr),
        .mem_wait_on_ready_N(mem_wait_on_ready_N));
endmodule

(* ORIG_REF_NAME = "exception_registers_gti" *) 
module system_microblaze_0_0_exception_registers_gti
   (DI,
    \LOCKSTEP_Out_reg[3738] ,
    \LOCKSTEP_Out_reg[3737] ,
    \LOCKSTEP_Out_reg[3736] ,
    \LOCKSTEP_Out_reg[3735] ,
    \LOCKSTEP_Out_reg[3734] ,
    \LOCKSTEP_Out_reg[3733] ,
    \LOCKSTEP_Out_reg[3732] ,
    \LOCKSTEP_Out_reg[3731] ,
    \LOCKSTEP_Out_reg[3730] ,
    \LOCKSTEP_Out_reg[3729] ,
    \LOCKSTEP_Out_reg[3728] ,
    \LOCKSTEP_Out_reg[3727] ,
    \LOCKSTEP_Out_reg[3726] ,
    \LOCKSTEP_Out_reg[3725] ,
    \LOCKSTEP_Out_reg[3724] ,
    \LOCKSTEP_Out_reg[3723] ,
    \LOCKSTEP_Out_reg[3722] ,
    \LOCKSTEP_Out_reg[3721] ,
    \LOCKSTEP_Out_reg[3720] ,
    \LOCKSTEP_Out_reg[3719] ,
    \LOCKSTEP_Out_reg[3718] ,
    \LOCKSTEP_Out_reg[3717] ,
    \LOCKSTEP_Out_reg[3716] ,
    \LOCKSTEP_Out_reg[3715] ,
    \LOCKSTEP_Out_reg[3714] ,
    \LOCKSTEP_Out_reg[3713] ,
    \LOCKSTEP_Out_reg[3712] ,
    \LOCKSTEP_Out_reg[3711] ,
    \LOCKSTEP_Out_reg[3710] ,
    \LOCKSTEP_Out_reg[3709] ,
    \LOCKSTEP_Out_reg[3708] ,
    \LOCKSTEP_Out_reg[3769] ,
    \EX_Op3_reg[16] ,
    \EX_Branch_CMP_Op1_reg[16] ,
    \data_rd_reg_reg[31] ,
    \data_rd_reg_reg[30] ,
    \data_rd_reg_reg[29] ,
    \data_rd_reg_reg[28] ,
    \data_rd_reg_reg[27] ,
    \data_rd_reg_reg[26] ,
    \data_rd_reg_reg[25] ,
    \data_rd_reg_reg[24] ,
    \data_rd_reg_reg[23] ,
    \data_rd_reg_reg[22] ,
    \data_rd_reg_reg[21] ,
    \data_rd_reg_reg[20] ,
    \data_rd_reg_reg[19] ,
    \data_rd_reg_reg[18] ,
    \data_rd_reg_reg[17] ,
    \data_rd_reg_reg[16] ,
    \wb_exception_kind_i_reg[28] ,
    \mem_pc_i_reg[0] ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    mem_valid_reg,
    Clk,
    \wb_exception_kind_i_reg[28]_0 ,
    EX_Fwd,
    \Using_FPGA.Native ,
    of_op3_sel,
    GPR_Op3,
    D,
    of_op1_sel,
    GPR_Op1,
    wb_gpr_wr_dbg,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    read_register_MSR_1_reg,
    \wb_MSR_i_reg[30] ,
    \wb_MSR_i_reg[28] ,
    wb_exception_i_reg,
    wb_byte_access,
    \wb_read_lsb_1_sel_reg[0] ,
    Q,
    \wb_read_lsb_1_sel_reg[0]_0 ,
    \wb_read_lsb_1_sel_reg[0]_1 ,
    \wb_read_lsb_1_sel_reg[0]_2 ,
    \wb_read_lsb_sel_reg[1] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ,
    \wb_read_lsb_1_sel_reg[0]_3 ,
    \wb_read_lsb_1_sel_reg[0]_4 ,
    \wb_read_lsb_1_sel_reg[0]_5 ,
    \wb_read_lsb_1_sel_reg[0]_6 );
  output DI;
  output \LOCKSTEP_Out_reg[3738] ;
  output \LOCKSTEP_Out_reg[3737] ;
  output \LOCKSTEP_Out_reg[3736] ;
  output \LOCKSTEP_Out_reg[3735] ;
  output \LOCKSTEP_Out_reg[3734] ;
  output \LOCKSTEP_Out_reg[3733] ;
  output \LOCKSTEP_Out_reg[3732] ;
  output \LOCKSTEP_Out_reg[3731] ;
  output \LOCKSTEP_Out_reg[3730] ;
  output \LOCKSTEP_Out_reg[3729] ;
  output \LOCKSTEP_Out_reg[3728] ;
  output \LOCKSTEP_Out_reg[3727] ;
  output \LOCKSTEP_Out_reg[3726] ;
  output \LOCKSTEP_Out_reg[3725] ;
  output \LOCKSTEP_Out_reg[3724] ;
  output \LOCKSTEP_Out_reg[3723] ;
  output \LOCKSTEP_Out_reg[3722] ;
  output \LOCKSTEP_Out_reg[3721] ;
  output \LOCKSTEP_Out_reg[3720] ;
  output \LOCKSTEP_Out_reg[3719] ;
  output \LOCKSTEP_Out_reg[3718] ;
  output \LOCKSTEP_Out_reg[3717] ;
  output \LOCKSTEP_Out_reg[3716] ;
  output \LOCKSTEP_Out_reg[3715] ;
  output \LOCKSTEP_Out_reg[3714] ;
  output \LOCKSTEP_Out_reg[3713] ;
  output \LOCKSTEP_Out_reg[3712] ;
  output \LOCKSTEP_Out_reg[3711] ;
  output \LOCKSTEP_Out_reg[3710] ;
  output \LOCKSTEP_Out_reg[3709] ;
  output [16:0]\LOCKSTEP_Out_reg[3708] ;
  output [15:0]\LOCKSTEP_Out_reg[3769] ;
  output [15:0]\EX_Op3_reg[16] ;
  output [15:0]\EX_Branch_CMP_Op1_reg[16] ;
  output \data_rd_reg_reg[31] ;
  output \data_rd_reg_reg[30] ;
  output \data_rd_reg_reg[29] ;
  output \data_rd_reg_reg[28] ;
  output \data_rd_reg_reg[27] ;
  output \data_rd_reg_reg[26] ;
  output \data_rd_reg_reg[25] ;
  output \data_rd_reg_reg[24] ;
  output \data_rd_reg_reg[23] ;
  output \data_rd_reg_reg[22] ;
  output \data_rd_reg_reg[21] ;
  output \data_rd_reg_reg[20] ;
  output \data_rd_reg_reg[19] ;
  output \data_rd_reg_reg[18] ;
  output \data_rd_reg_reg[17] ;
  output \data_rd_reg_reg[16] ;
  input [0:0]\wb_exception_kind_i_reg[28] ;
  input [31:0]\mem_pc_i_reg[0] ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input mem_valid_reg;
  input Clk;
  input \wb_exception_kind_i_reg[28]_0 ;
  input [15:0]EX_Fwd;
  input [12:0]\Using_FPGA.Native ;
  input [0:1]of_op3_sel;
  input [15:0]GPR_Op3;
  input [2:0]D;
  input [0:1]of_op1_sel;
  input [15:0]GPR_Op1;
  input wb_gpr_wr_dbg;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input read_register_MSR_1_reg;
  input \wb_MSR_i_reg[30] ;
  input [1:0]\wb_MSR_i_reg[28] ;
  input wb_exception_i_reg;
  input wb_byte_access;
  input \wb_read_lsb_1_sel_reg[0] ;
  input [15:0]Q;
  input \wb_read_lsb_1_sel_reg[0]_0 ;
  input \wb_read_lsb_1_sel_reg[0]_1 ;
  input \wb_read_lsb_1_sel_reg[0]_2 ;
  input [0:0]\wb_read_lsb_sel_reg[1] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ;
  input \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ;
  input \wb_read_lsb_1_sel_reg[0]_3 ;
  input \wb_read_lsb_1_sel_reg[0]_4 ;
  input \wb_read_lsb_1_sel_reg[0]_5 ;
  input \wb_read_lsb_1_sel_reg[0]_6 ;

  wire Clk;
  wire [2:0]D;
  wire DI;
  wire [15:0]\EX_Branch_CMP_Op1_reg[16] ;
  wire [15:0]EX_Fwd;
  wire [15:0]\EX_Op3_reg[16] ;
  wire [15:0]GPR_Op1;
  wire [15:0]GPR_Op3;
  wire [16:0]\LOCKSTEP_Out_reg[3708] ;
  wire \LOCKSTEP_Out_reg[3709] ;
  wire \LOCKSTEP_Out_reg[3710] ;
  wire \LOCKSTEP_Out_reg[3711] ;
  wire \LOCKSTEP_Out_reg[3712] ;
  wire \LOCKSTEP_Out_reg[3713] ;
  wire \LOCKSTEP_Out_reg[3714] ;
  wire \LOCKSTEP_Out_reg[3715] ;
  wire \LOCKSTEP_Out_reg[3716] ;
  wire \LOCKSTEP_Out_reg[3717] ;
  wire \LOCKSTEP_Out_reg[3718] ;
  wire \LOCKSTEP_Out_reg[3719] ;
  wire \LOCKSTEP_Out_reg[3720] ;
  wire \LOCKSTEP_Out_reg[3721] ;
  wire \LOCKSTEP_Out_reg[3722] ;
  wire \LOCKSTEP_Out_reg[3723] ;
  wire \LOCKSTEP_Out_reg[3724] ;
  wire \LOCKSTEP_Out_reg[3725] ;
  wire \LOCKSTEP_Out_reg[3726] ;
  wire \LOCKSTEP_Out_reg[3727] ;
  wire \LOCKSTEP_Out_reg[3728] ;
  wire \LOCKSTEP_Out_reg[3729] ;
  wire \LOCKSTEP_Out_reg[3730] ;
  wire \LOCKSTEP_Out_reg[3731] ;
  wire \LOCKSTEP_Out_reg[3732] ;
  wire \LOCKSTEP_Out_reg[3733] ;
  wire \LOCKSTEP_Out_reg[3734] ;
  wire \LOCKSTEP_Out_reg[3735] ;
  wire \LOCKSTEP_Out_reg[3736] ;
  wire \LOCKSTEP_Out_reg[3737] ;
  wire \LOCKSTEP_Out_reg[3738] ;
  wire [15:0]\LOCKSTEP_Out_reg[3769] ;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire [15:0]Q;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[16] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[17] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[18] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[19] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[20] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[21] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[22] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[23] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[24] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[25] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[26] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[27] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[28] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[29] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[30] ;
  wire \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ;
  wire [12:0]\Using_FPGA.Native ;
  wire addr_AddSub_0;
  wire addr_AddSub_1;
  wire addr_AddSub_10;
  wire addr_AddSub_11;
  wire addr_AddSub_12;
  wire addr_AddSub_13;
  wire addr_AddSub_14;
  wire addr_AddSub_15;
  wire addr_AddSub_16;
  wire addr_AddSub_17;
  wire addr_AddSub_18;
  wire addr_AddSub_19;
  wire addr_AddSub_2;
  wire addr_AddSub_20;
  wire addr_AddSub_21;
  wire addr_AddSub_22;
  wire addr_AddSub_23;
  wire addr_AddSub_24;
  wire addr_AddSub_25;
  wire addr_AddSub_26;
  wire addr_AddSub_27;
  wire addr_AddSub_28;
  wire addr_AddSub_29;
  wire addr_AddSub_3;
  wire addr_AddSub_30;
  wire addr_AddSub_31;
  wire addr_AddSub_4;
  wire addr_AddSub_5;
  wire addr_AddSub_6;
  wire addr_AddSub_7;
  wire addr_AddSub_8;
  wire addr_AddSub_9;
  wire carry_0;
  wire carry_1;
  wire carry_10;
  wire carry_11;
  wire carry_12;
  wire carry_13;
  wire carry_14;
  wire carry_15;
  wire carry_16;
  wire carry_17;
  wire carry_18;
  wire carry_19;
  wire carry_2;
  wire carry_20;
  wire carry_21;
  wire carry_22;
  wire carry_23;
  wire carry_24;
  wire carry_25;
  wire carry_26;
  wire carry_27;
  wire carry_28;
  wire carry_29;
  wire carry_3;
  wire carry_30;
  wire carry_31;
  wire carry_4;
  wire carry_5;
  wire carry_6;
  wire carry_7;
  wire carry_8;
  wire carry_9;
  wire \data_rd_reg_reg[16] ;
  wire \data_rd_reg_reg[17] ;
  wire \data_rd_reg_reg[18] ;
  wire \data_rd_reg_reg[19] ;
  wire \data_rd_reg_reg[20] ;
  wire \data_rd_reg_reg[21] ;
  wire \data_rd_reg_reg[22] ;
  wire \data_rd_reg_reg[23] ;
  wire \data_rd_reg_reg[24] ;
  wire \data_rd_reg_reg[25] ;
  wire \data_rd_reg_reg[26] ;
  wire \data_rd_reg_reg[27] ;
  wire \data_rd_reg_reg[28] ;
  wire \data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[30] ;
  wire \data_rd_reg_reg[31] ;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [31:0]\mem_pc_i_reg[0] ;
  wire mem_valid_reg;
  wire [0:1]of_op1_sel;
  wire [0:1]of_op3_sel;
  wire read_register_MSR_1_reg;
  wire [1:0]\wb_MSR_i_reg[28] ;
  wire \wb_MSR_i_reg[30] ;
  wire wb_PC_II_0;
  wire wb_PC_II_1;
  wire wb_PC_II_10;
  wire wb_PC_II_11;
  wire wb_PC_II_12;
  wire wb_PC_II_13;
  wire wb_PC_II_14;
  wire wb_PC_II_15;
  wire wb_PC_II_16;
  wire wb_PC_II_17;
  wire wb_PC_II_18;
  wire wb_PC_II_19;
  wire wb_PC_II_2;
  wire wb_PC_II_20;
  wire wb_PC_II_21;
  wire wb_PC_II_22;
  wire wb_PC_II_23;
  wire wb_PC_II_24;
  wire wb_PC_II_25;
  wire wb_PC_II_26;
  wire wb_PC_II_27;
  wire wb_PC_II_28;
  wire wb_PC_II_29;
  wire wb_PC_II_3;
  wire wb_PC_II_30;
  wire wb_PC_II_31;
  wire wb_PC_II_4;
  wire wb_PC_II_5;
  wire wb_PC_II_6;
  wire wb_PC_II_7;
  wire wb_PC_II_8;
  wire wb_PC_II_9;
  wire wb_byte_access;
  wire wb_exception_i_reg;
  wire [0:0]\wb_exception_kind_i_reg[28] ;
  wire \wb_exception_kind_i_reg[28]_0 ;
  wire wb_gpr_wr_dbg;
  wire \wb_read_lsb_1_sel_reg[0] ;
  wire \wb_read_lsb_1_sel_reg[0]_0 ;
  wire \wb_read_lsb_1_sel_reg[0]_1 ;
  wire \wb_read_lsb_1_sel_reg[0]_2 ;
  wire \wb_read_lsb_1_sel_reg[0]_3 ;
  wire \wb_read_lsb_1_sel_reg[0]_4 ;
  wire \wb_read_lsb_1_sel_reg[0]_5 ;
  wire \wb_read_lsb_1_sel_reg[0]_6 ;
  wire [0:0]\wb_read_lsb_sel_reg[1] ;

  system_microblaze_0_0_MB_MUXCY_269 CarryIn_MUXCY
       (.CI(carry_0),
        .lopt(lopt),
        .lopt_1(DI),
        .lopt_10(lopt_4),
        .lopt_11(lopt_5),
        .lopt_2(addr_AddSub_0),
        .lopt_3(lopt_1),
        .lopt_4(\LOCKSTEP_Out_reg[3738] ),
        .lopt_5(addr_AddSub_1),
        .lopt_6(lopt_2),
        .lopt_7(\LOCKSTEP_Out_reg[3737] ),
        .lopt_8(addr_AddSub_2),
        .lopt_9(lopt_3),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_LUT6_2__parameterized97 \Using_FPGA_LUT6.Gen_Ret_Addr[0].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3708] [16]),
        .addr_AddSub_31(addr_AddSub_31),
        .\mem_pc_i_reg[0] (\mem_pc_i_reg[0] [31]),
        .wb_PC_II_31(wb_PC_II_31),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_270 \Using_FPGA_LUT6.Gen_Ret_Addr[0].MUXCY_XOR_I 
       (.LO(carry_31),
        .\LOCKSTEP_Out_reg[3769] (\LOCKSTEP_Out_reg[3769] [15]),
        .addr_AddSub_31(addr_AddSub_31));
  system_microblaze_0_0_MB_FDE \Using_FPGA_LUT6.Gen_Ret_Addr[0].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3708] (\LOCKSTEP_Out_reg[3708] [16]),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_31(wb_PC_II_31));
  system_microblaze_0_0_MB_LUT6_2__parameterized77 \Using_FPGA_LUT6.Gen_Ret_Addr[10].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_21),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3718] ),
        .\mem_pc_i_reg[10] (\mem_pc_i_reg[0] [21]),
        .wb_PC_II_21(wb_PC_II_21),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_271 \Using_FPGA_LUT6.Gen_Ret_Addr[10].MUXCY_XOR_I 
       (.LO(carry_22),
        .\LOCKSTEP_Out_reg[3779] (\LOCKSTEP_Out_reg[3769] [5]),
        .S(addr_AddSub_21),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3718] ),
        .\Using_FPGA.Native_0 (carry_21),
        .lopt(lopt_6),
        .lopt_1(lopt_2),
        .lopt_10(lopt_9),
        .lopt_11(\LOCKSTEP_Out_reg[3733] ),
        .lopt_12(addr_AddSub_6),
        .lopt_13(lopt_10),
        .lopt_14(lopt_11),
        .lopt_15(lopt_12),
        .lopt_16(lopt_13),
        .lopt_17(lopt_14),
        .lopt_18(\LOCKSTEP_Out_reg[3732] ),
        .lopt_19(addr_AddSub_7),
        .lopt_2(\LOCKSTEP_Out_reg[3736] ),
        .lopt_20(lopt_15),
        .lopt_21(\LOCKSTEP_Out_reg[3731] ),
        .lopt_22(addr_AddSub_8),
        .lopt_23(lopt_16),
        .lopt_24(\LOCKSTEP_Out_reg[3730] ),
        .lopt_25(addr_AddSub_9),
        .lopt_26(lopt_17),
        .lopt_27(\LOCKSTEP_Out_reg[3729] ),
        .lopt_28(addr_AddSub_10),
        .lopt_29(lopt_18),
        .lopt_3(addr_AddSub_3),
        .lopt_30(lopt_19),
        .lopt_31(lopt_20),
        .lopt_32(lopt_21),
        .lopt_33(lopt_22),
        .lopt_34(\LOCKSTEP_Out_reg[3728] ),
        .lopt_35(addr_AddSub_11),
        .lopt_36(lopt_23),
        .lopt_37(\LOCKSTEP_Out_reg[3727] ),
        .lopt_38(addr_AddSub_12),
        .lopt_39(lopt_24),
        .lopt_4(lopt_7),
        .lopt_40(\LOCKSTEP_Out_reg[3726] ),
        .lopt_41(addr_AddSub_13),
        .lopt_42(lopt_25),
        .lopt_43(\LOCKSTEP_Out_reg[3725] ),
        .lopt_44(addr_AddSub_14),
        .lopt_45(lopt_26),
        .lopt_46(lopt_27),
        .lopt_47(lopt_28),
        .lopt_48(lopt_29),
        .lopt_49(lopt_30),
        .lopt_5(\LOCKSTEP_Out_reg[3735] ),
        .lopt_50(\LOCKSTEP_Out_reg[3724] ),
        .lopt_51(addr_AddSub_15),
        .lopt_52(lopt_31),
        .lopt_53(\LOCKSTEP_Out_reg[3723] ),
        .lopt_54(addr_AddSub_16),
        .lopt_55(lopt_32),
        .lopt_56(\LOCKSTEP_Out_reg[3722] ),
        .lopt_57(addr_AddSub_17),
        .lopt_58(lopt_33),
        .lopt_59(\LOCKSTEP_Out_reg[3721] ),
        .lopt_6(addr_AddSub_4),
        .lopt_60(addr_AddSub_18),
        .lopt_61(lopt_34),
        .lopt_62(lopt_35),
        .lopt_63(lopt_36),
        .lopt_64(lopt_37),
        .lopt_65(lopt_38),
        .lopt_66(\LOCKSTEP_Out_reg[3720] ),
        .lopt_67(addr_AddSub_19),
        .lopt_68(lopt_39),
        .lopt_69(\LOCKSTEP_Out_reg[3719] ),
        .lopt_7(lopt_8),
        .lopt_70(addr_AddSub_20),
        .lopt_71(lopt_40),
        .lopt_72(\LOCKSTEP_Out_reg[3717] ),
        .lopt_73(addr_AddSub_22),
        .lopt_74(lopt_41),
        .lopt_75(lopt_42),
        .lopt_76(lopt_43),
        .lopt_8(\LOCKSTEP_Out_reg[3734] ),
        .lopt_9(addr_AddSub_5));
  system_microblaze_0_0_MB_FDE_272 \Using_FPGA_LUT6.Gen_Ret_Addr[10].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3718] (\LOCKSTEP_Out_reg[3718] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_21(wb_PC_II_21));
  system_microblaze_0_0_MB_LUT6_2__parameterized75 \Using_FPGA_LUT6.Gen_Ret_Addr[11].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_20),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3719] ),
        .\mem_pc_i_reg[11] (\mem_pc_i_reg[0] [20]),
        .wb_PC_II_20(wb_PC_II_20),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_273 \Using_FPGA_LUT6.Gen_Ret_Addr[11].MUXCY_XOR_I 
       (.LO(carry_21),
        .\LOCKSTEP_Out_reg[3780] (\LOCKSTEP_Out_reg[3769] [4]),
        .S(addr_AddSub_20),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3719] ),
        .\Using_FPGA.Native_0 (carry_20),
        .lopt(lopt_39),
        .lopt_1(lopt_42));
  system_microblaze_0_0_MB_FDE_274 \Using_FPGA_LUT6.Gen_Ret_Addr[11].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3719] (\LOCKSTEP_Out_reg[3719] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_20(wb_PC_II_20));
  system_microblaze_0_0_MB_LUT6_2__parameterized73 \Using_FPGA_LUT6.Gen_Ret_Addr[12].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_19),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3720] ),
        .\mem_pc_i_reg[12] (\mem_pc_i_reg[0] [19]),
        .wb_PC_II_19(wb_PC_II_19),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_275 \Using_FPGA_LUT6.Gen_Ret_Addr[12].MUXCY_XOR_I 
       (.LO(carry_20),
        .\LOCKSTEP_Out_reg[3781] (\LOCKSTEP_Out_reg[3769] [3]),
        .S(addr_AddSub_19),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3720] ),
        .\Using_FPGA.Native_0 (carry_19),
        .lopt(lopt_38),
        .lopt_1(lopt_41));
  system_microblaze_0_0_MB_FDE_276 \Using_FPGA_LUT6.Gen_Ret_Addr[12].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3720] (\LOCKSTEP_Out_reg[3720] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_19(wb_PC_II_19));
  system_microblaze_0_0_MB_LUT6_2__parameterized71 \Using_FPGA_LUT6.Gen_Ret_Addr[13].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_18),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3721] ),
        .\mem_pc_i_reg[13] (\mem_pc_i_reg[0] [18]),
        .wb_PC_II_18(wb_PC_II_18),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_277 \Using_FPGA_LUT6.Gen_Ret_Addr[13].MUXCY_XOR_I 
       (.LO(carry_19),
        .\LOCKSTEP_Out_reg[3782] (\LOCKSTEP_Out_reg[3769] [2]),
        .S(addr_AddSub_18),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3721] ),
        .\Using_FPGA.Native_0 (carry_18),
        .lopt(lopt_33),
        .lopt_1(lopt_37));
  system_microblaze_0_0_MB_FDE_278 \Using_FPGA_LUT6.Gen_Ret_Addr[13].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3721] (\LOCKSTEP_Out_reg[3721] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_18(wb_PC_II_18));
  system_microblaze_0_0_MB_LUT6_2__parameterized69 \Using_FPGA_LUT6.Gen_Ret_Addr[14].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_17),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3722] ),
        .\mem_pc_i_reg[14] (\mem_pc_i_reg[0] [17]),
        .wb_PC_II_17(wb_PC_II_17),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_279 \Using_FPGA_LUT6.Gen_Ret_Addr[14].MUXCY_XOR_I 
       (.LO(carry_18),
        .\LOCKSTEP_Out_reg[3783] (\LOCKSTEP_Out_reg[3769] [1]),
        .S(addr_AddSub_17),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3722] ),
        .\Using_FPGA.Native_0 (carry_17),
        .lopt(lopt_32),
        .lopt_1(lopt_36));
  system_microblaze_0_0_MB_FDE_280 \Using_FPGA_LUT6.Gen_Ret_Addr[14].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3722] (\LOCKSTEP_Out_reg[3722] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_17(wb_PC_II_17));
  system_microblaze_0_0_MB_LUT6_2__parameterized67 \Using_FPGA_LUT6.Gen_Ret_Addr[15].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_16),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3723] ),
        .\mem_pc_i_reg[15] (\mem_pc_i_reg[0] [16]),
        .wb_PC_II_16(wb_PC_II_16),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_281 \Using_FPGA_LUT6.Gen_Ret_Addr[15].MUXCY_XOR_I 
       (.LO(carry_17),
        .\LOCKSTEP_Out_reg[3784] (\LOCKSTEP_Out_reg[3769] [0]),
        .S(addr_AddSub_16),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3723] ),
        .\Using_FPGA.Native_0 (carry_16),
        .lopt(lopt_31),
        .lopt_1(lopt_35));
  system_microblaze_0_0_MB_FDE_282 \Using_FPGA_LUT6.Gen_Ret_Addr[15].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3723] (\LOCKSTEP_Out_reg[3723] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_16(wb_PC_II_16));
  system_microblaze_0_0_MB_LUT6_2__parameterized65 \Using_FPGA_LUT6.Gen_Ret_Addr[16].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3724] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_15),
        .\mem_pc_i_reg[16] (\mem_pc_i_reg[0] [15]),
        .wb_PC_II_15(wb_PC_II_15),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_283 \Using_FPGA_LUT6.Gen_Ret_Addr[16].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3724] ),
        .\EX_Branch_CMP_Op1_reg[16] (\EX_Branch_CMP_Op1_reg[16] [15]),
        .EX_Fwd(EX_Fwd[15]),
        .\EX_Op3_reg[16] (\EX_Op3_reg[16] [15]),
        .GPR_Op1(GPR_Op1[15]),
        .GPR_Op3(GPR_Op3[15]),
        .LO(carry_16),
        .\LOCKSTEP_Out_reg[3785] (\LOCKSTEP_Out_reg[3708] [15]),
        .Q(Q[15]),
        .S(addr_AddSub_15),
        .\Using_FPGA.Native (\Using_FPGA.Native [12]),
        .\Using_FPGA.Native_0 (carry_15),
        .lopt(lopt_30),
        .lopt_1(lopt_34),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .wb_byte_access(wb_byte_access),
        .wb_exception_i_reg(wb_exception_i_reg),
        .\wb_read_lsb_1_sel_reg[0] (\wb_read_lsb_1_sel_reg[0]_6 ));
  system_microblaze_0_0_MB_FDE_284 \Using_FPGA_LUT6.Gen_Ret_Addr[16].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3724] (\LOCKSTEP_Out_reg[3724] ),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .WB_Byte_Access_reg(\LOCKSTEP_Out_reg[3708] [15]),
        .\data_rd_reg_reg[16] (\data_rd_reg_reg[16] ),
        .mem_valid_reg(mem_valid_reg),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_PC_II_15(wb_PC_II_15),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg));
  system_microblaze_0_0_MB_LUT6_2__parameterized63 \Using_FPGA_LUT6.Gen_Ret_Addr[17].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3725] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_14),
        .\mem_pc_i_reg[17] (\mem_pc_i_reg[0] [14]),
        .wb_PC_II_14(wb_PC_II_14),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_285 \Using_FPGA_LUT6.Gen_Ret_Addr[17].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3725] ),
        .\EX_Branch_CMP_Op1_reg[17] (\EX_Branch_CMP_Op1_reg[16] [14]),
        .EX_Fwd(EX_Fwd[14]),
        .\EX_Op3_reg[17] (\EX_Op3_reg[16] [14]),
        .GPR_Op1(GPR_Op1[14]),
        .GPR_Op3(GPR_Op3[14]),
        .LO(carry_15),
        .\LOCKSTEP_Out_reg[3786] (\LOCKSTEP_Out_reg[3708] [14]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[14]),
        .S(addr_AddSub_14),
        .\Using_FPGA.Native (\Using_FPGA.Native [11]),
        .\Using_FPGA.Native_0 (carry_14),
        .\data_rd_reg_reg[17] (\data_rd_reg_reg[17] ),
        .lopt(lopt_25),
        .lopt_1(lopt_29),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_byte_access(wb_byte_access),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_1_sel_reg[0] (\wb_read_lsb_1_sel_reg[0] ));
  system_microblaze_0_0_MB_FDE_286 \Using_FPGA_LUT6.Gen_Ret_Addr[17].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3725] (\LOCKSTEP_Out_reg[3725] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_14(wb_PC_II_14));
  system_microblaze_0_0_MB_LUT6_2__parameterized61 \Using_FPGA_LUT6.Gen_Ret_Addr[18].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3726] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_13),
        .\mem_pc_i_reg[18] (\mem_pc_i_reg[0] [13]),
        .wb_PC_II_13(wb_PC_II_13),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_287 \Using_FPGA_LUT6.Gen_Ret_Addr[18].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3726] ),
        .\EX_Branch_CMP_Op1_reg[18] (\EX_Branch_CMP_Op1_reg[16] [13]),
        .EX_Fwd(EX_Fwd[13]),
        .\EX_Op3_reg[18] (\EX_Op3_reg[16] [13]),
        .GPR_Op1(GPR_Op1[13]),
        .GPR_Op3(GPR_Op3[13]),
        .LO(carry_14),
        .\LOCKSTEP_Out_reg[3787] (\LOCKSTEP_Out_reg[3708] [13]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[13]),
        .S(addr_AddSub_13),
        .\Using_FPGA.Native (\Using_FPGA.Native [10]),
        .\Using_FPGA.Native_0 (carry_13),
        .\data_rd_reg_reg[18] (\data_rd_reg_reg[18] ),
        .lopt(lopt_24),
        .lopt_1(lopt_28),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_byte_access(wb_byte_access),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_1_sel_reg[0] (\wb_read_lsb_1_sel_reg[0]_5 ));
  system_microblaze_0_0_MB_FDE_288 \Using_FPGA_LUT6.Gen_Ret_Addr[18].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3726] (\LOCKSTEP_Out_reg[3726] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_13(wb_PC_II_13));
  system_microblaze_0_0_MB_LUT6_2__parameterized59 \Using_FPGA_LUT6.Gen_Ret_Addr[19].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3727] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_12),
        .\mem_pc_i_reg[19] (\mem_pc_i_reg[0] [12]),
        .wb_PC_II_12(wb_PC_II_12),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_289 \Using_FPGA_LUT6.Gen_Ret_Addr[19].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3727] ),
        .\EX_Branch_CMP_Op1_reg[19] (\EX_Branch_CMP_Op1_reg[16] [12]),
        .EX_Fwd(EX_Fwd[12]),
        .\EX_Op3_reg[19] (\EX_Op3_reg[16] [12]),
        .GPR_Op1(GPR_Op1[12]),
        .GPR_Op3(GPR_Op3[12]),
        .LO(carry_13),
        .\LOCKSTEP_Out_reg[3788] (\LOCKSTEP_Out_reg[3708] [12]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[12]),
        .S(addr_AddSub_12),
        .\Using_FPGA.Native (\Using_FPGA.Native [9]),
        .\Using_FPGA.Native_0 (carry_12),
        .\data_rd_reg_reg[19] (\data_rd_reg_reg[19] ),
        .lopt(lopt_23),
        .lopt_1(lopt_27),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_byte_access(wb_byte_access),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_1_sel_reg[0] (\wb_read_lsb_1_sel_reg[0]_0 ));
  system_microblaze_0_0_MB_FDE_290 \Using_FPGA_LUT6.Gen_Ret_Addr[19].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3727] (\LOCKSTEP_Out_reg[3727] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_12(wb_PC_II_12));
  system_microblaze_0_0_MB_LUT6_2__parameterized95 \Using_FPGA_LUT6.Gen_Ret_Addr[1].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_30),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3709] ),
        .\mem_pc_i_reg[1] (\mem_pc_i_reg[0] [30]),
        .wb_PC_II_30(wb_PC_II_30),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_291 \Using_FPGA_LUT6.Gen_Ret_Addr[1].MUXCY_XOR_I 
       (.LO(carry_31),
        .\LOCKSTEP_Out_reg[3770] (\LOCKSTEP_Out_reg[3769] [14]),
        .S(addr_AddSub_30),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3709] ),
        .\Using_FPGA.Native_0 (carry_30),
        .lopt(lopt_44),
        .lopt_1(lopt_40),
        .lopt_10(lopt_47),
        .lopt_11(\LOCKSTEP_Out_reg[3713] ),
        .lopt_12(addr_AddSub_26),
        .lopt_13(lopt_48),
        .lopt_14(lopt_49),
        .lopt_15(lopt_50),
        .lopt_16(lopt_51),
        .lopt_17(lopt_52),
        .lopt_18(\LOCKSTEP_Out_reg[3712] ),
        .lopt_19(addr_AddSub_27),
        .lopt_2(\LOCKSTEP_Out_reg[3716] ),
        .lopt_20(lopt_53),
        .lopt_21(\LOCKSTEP_Out_reg[3711] ),
        .lopt_22(addr_AddSub_28),
        .lopt_23(lopt_54),
        .lopt_24(\LOCKSTEP_Out_reg[3710] ),
        .lopt_25(addr_AddSub_29),
        .lopt_26(lopt_55),
        .lopt_27(lopt_56),
        .lopt_28(lopt_57),
        .lopt_3(addr_AddSub_23),
        .lopt_4(lopt_45),
        .lopt_5(\LOCKSTEP_Out_reg[3715] ),
        .lopt_6(addr_AddSub_24),
        .lopt_7(lopt_46),
        .lopt_8(\LOCKSTEP_Out_reg[3714] ),
        .lopt_9(addr_AddSub_25));
  system_microblaze_0_0_MB_FDE_292 \Using_FPGA_LUT6.Gen_Ret_Addr[1].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3709] (\LOCKSTEP_Out_reg[3709] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_30(wb_PC_II_30));
  system_microblaze_0_0_MB_LUT6_2__parameterized57 \Using_FPGA_LUT6.Gen_Ret_Addr[20].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3728] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_11),
        .\mem_pc_i_reg[20] (\mem_pc_i_reg[0] [11]),
        .wb_PC_II_11(wb_PC_II_11),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_293 \Using_FPGA_LUT6.Gen_Ret_Addr[20].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3728] ),
        .\EX_Branch_CMP_Op1_reg[20] (\EX_Branch_CMP_Op1_reg[16] [11]),
        .EX_Fwd(EX_Fwd[11]),
        .\EX_Op3_reg[20] (\EX_Op3_reg[16] [11]),
        .GPR_Op1(GPR_Op1[11]),
        .GPR_Op3(GPR_Op3[11]),
        .LO(carry_12),
        .\LOCKSTEP_Out_reg[3789] (\LOCKSTEP_Out_reg[3708] [11]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[11]),
        .S(addr_AddSub_11),
        .\Using_FPGA.Native (\Using_FPGA.Native [8]),
        .\Using_FPGA.Native_0 (carry_11),
        .\data_rd_reg_reg[20] (\data_rd_reg_reg[20] ),
        .lopt(lopt_22),
        .lopt_1(lopt_26),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_byte_access(wb_byte_access),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_1_sel_reg[0] (\wb_read_lsb_1_sel_reg[0]_4 ));
  system_microblaze_0_0_MB_FDE_294 \Using_FPGA_LUT6.Gen_Ret_Addr[20].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3728] (\LOCKSTEP_Out_reg[3728] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_11(wb_PC_II_11));
  system_microblaze_0_0_MB_LUT6_2__parameterized55 \Using_FPGA_LUT6.Gen_Ret_Addr[21].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3729] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_10),
        .\mem_pc_i_reg[21] (\mem_pc_i_reg[0] [10]),
        .wb_PC_II_10(wb_PC_II_10),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_295 \Using_FPGA_LUT6.Gen_Ret_Addr[21].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3729] ),
        .\EX_Branch_CMP_Op1_reg[21] (\EX_Branch_CMP_Op1_reg[16] [10]),
        .EX_Fwd(EX_Fwd[10]),
        .\EX_Op3_reg[21] (\EX_Op3_reg[16] [10]),
        .GPR_Op1(GPR_Op1[10]),
        .GPR_Op3(GPR_Op3[10]),
        .LO(carry_11),
        .\LOCKSTEP_Out_reg[3790] (\LOCKSTEP_Out_reg[3708] [10]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[10]),
        .S(addr_AddSub_10),
        .\Using_FPGA.Native (\Using_FPGA.Native [7]),
        .\Using_FPGA.Native_0 (carry_10),
        .\data_rd_reg_reg[21] (\data_rd_reg_reg[21] ),
        .lopt(lopt_17),
        .lopt_1(lopt_21),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_byte_access(wb_byte_access),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_1_sel_reg[0] (\wb_read_lsb_1_sel_reg[0]_1 ));
  system_microblaze_0_0_MB_FDE_296 \Using_FPGA_LUT6.Gen_Ret_Addr[21].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3729] (\LOCKSTEP_Out_reg[3729] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_10(wb_PC_II_10));
  system_microblaze_0_0_MB_LUT6_2__parameterized53 \Using_FPGA_LUT6.Gen_Ret_Addr[22].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3730] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_9),
        .\mem_pc_i_reg[22] (\mem_pc_i_reg[0] [9]),
        .wb_PC_II_9(wb_PC_II_9),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_297 \Using_FPGA_LUT6.Gen_Ret_Addr[22].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3730] ),
        .\EX_Branch_CMP_Op1_reg[22] (\EX_Branch_CMP_Op1_reg[16] [9]),
        .EX_Fwd(EX_Fwd[9]),
        .\EX_Op3_reg[22] (\EX_Op3_reg[16] [9]),
        .GPR_Op1(GPR_Op1[9]),
        .GPR_Op3(GPR_Op3[9]),
        .LO(carry_10),
        .\LOCKSTEP_Out_reg[3791] (\LOCKSTEP_Out_reg[3708] [9]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[9]),
        .S(addr_AddSub_9),
        .\Using_FPGA.Native (\Using_FPGA.Native [6]),
        .\Using_FPGA.Native_0 (carry_9),
        .\data_rd_reg_reg[22] (\data_rd_reg_reg[22] ),
        .lopt(lopt_16),
        .lopt_1(lopt_20),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_byte_access(wb_byte_access),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_1_sel_reg[0] (\wb_read_lsb_1_sel_reg[0]_3 ));
  system_microblaze_0_0_MB_FDE_298 \Using_FPGA_LUT6.Gen_Ret_Addr[22].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3730] (\LOCKSTEP_Out_reg[3730] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_9(wb_PC_II_9));
  system_microblaze_0_0_MB_LUT6_2__parameterized51 \Using_FPGA_LUT6.Gen_Ret_Addr[23].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3731] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_8),
        .\mem_pc_i_reg[23] (\mem_pc_i_reg[0] [8]),
        .wb_PC_II_8(wb_PC_II_8),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_299 \Using_FPGA_LUT6.Gen_Ret_Addr[23].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3731] ),
        .\EX_Branch_CMP_Op1_reg[23] (\EX_Branch_CMP_Op1_reg[16] [8]),
        .EX_Fwd(EX_Fwd[8]),
        .\EX_Op3_reg[23] (\EX_Op3_reg[16] [8]),
        .GPR_Op1(GPR_Op1[8]),
        .GPR_Op3(GPR_Op3[8]),
        .LO(carry_9),
        .\LOCKSTEP_Out_reg[3792] (\LOCKSTEP_Out_reg[3708] [8]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[8]),
        .S(addr_AddSub_8),
        .\Using_FPGA.Native (\Using_FPGA.Native [5]),
        .\Using_FPGA.Native_0 (carry_8),
        .\data_rd_reg_reg[23] (\data_rd_reg_reg[23] ),
        .lopt(lopt_15),
        .lopt_1(lopt_19),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_byte_access(wb_byte_access),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_1_sel_reg[0] (\wb_read_lsb_1_sel_reg[0]_2 ));
  system_microblaze_0_0_MB_FDE_300 \Using_FPGA_LUT6.Gen_Ret_Addr[23].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3731] (\LOCKSTEP_Out_reg[3731] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_8(wb_PC_II_8));
  system_microblaze_0_0_MB_LUT6_2__parameterized49 \Using_FPGA_LUT6.Gen_Ret_Addr[24].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3732] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_7),
        .\mem_pc_i_reg[24] (\mem_pc_i_reg[0] [7]),
        .wb_PC_II_7(wb_PC_II_7),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_301 \Using_FPGA_LUT6.Gen_Ret_Addr[24].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3732] ),
        .\EX_Branch_CMP_Op1_reg[24] (\EX_Branch_CMP_Op1_reg[16] [7]),
        .EX_Fwd(EX_Fwd[7]),
        .\EX_Op3_reg[24] (\EX_Op3_reg[16] [7]),
        .GPR_Op1(GPR_Op1[7]),
        .GPR_Op3(GPR_Op3[7]),
        .LO(carry_8),
        .\LOCKSTEP_Out_reg[3793] (\LOCKSTEP_Out_reg[3708] [7]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[7]),
        .S(addr_AddSub_7),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[16] (\Use_DLMB.wb_dlmb_valid_read_data_reg[16] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[24] (\Use_DLMB.wb_dlmb_valid_read_data_reg[24] ),
        .\Using_FPGA.Native (\Using_FPGA.Native [4]),
        .\Using_FPGA.Native_0 (carry_7),
        .\data_rd_reg_reg[24] (\data_rd_reg_reg[24] ),
        .lopt(lopt_14),
        .lopt_1(lopt_18),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1] ));
  system_microblaze_0_0_MB_FDE_302 \Using_FPGA_LUT6.Gen_Ret_Addr[24].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3732] (\LOCKSTEP_Out_reg[3732] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_7(wb_PC_II_7));
  system_microblaze_0_0_MB_LUT6_2__parameterized47 \Using_FPGA_LUT6.Gen_Ret_Addr[25].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3733] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_6),
        .\mem_pc_i_reg[25] (\mem_pc_i_reg[0] [6]),
        .wb_PC_II_6(wb_PC_II_6),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_303 \Using_FPGA_LUT6.Gen_Ret_Addr[25].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3733] ),
        .\EX_Branch_CMP_Op1_reg[25] (\EX_Branch_CMP_Op1_reg[16] [6]),
        .EX_Fwd(EX_Fwd[6]),
        .\EX_Op3_reg[25] (\EX_Op3_reg[16] [6]),
        .GPR_Op1(GPR_Op1[6]),
        .GPR_Op3(GPR_Op3[6]),
        .LO(carry_7),
        .\LOCKSTEP_Out_reg[3794] (\LOCKSTEP_Out_reg[3708] [6]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[6]),
        .S(addr_AddSub_6),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[17] (\Use_DLMB.wb_dlmb_valid_read_data_reg[17] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[25] (\Use_DLMB.wb_dlmb_valid_read_data_reg[25] ),
        .\Using_FPGA.Native (\Using_FPGA.Native [3]),
        .\Using_FPGA.Native_0 (carry_6),
        .\data_rd_reg_reg[25] (\data_rd_reg_reg[25] ),
        .lopt(lopt_9),
        .lopt_1(lopt_13),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1] ));
  system_microblaze_0_0_MB_FDE_304 \Using_FPGA_LUT6.Gen_Ret_Addr[25].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3733] (\LOCKSTEP_Out_reg[3733] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_6(wb_PC_II_6));
  system_microblaze_0_0_MB_LUT6_2__parameterized45 \Using_FPGA_LUT6.Gen_Ret_Addr[26].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3734] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_5),
        .\mem_pc_i_reg[26] (\mem_pc_i_reg[0] [5]),
        .wb_PC_II_5(wb_PC_II_5),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_305 \Using_FPGA_LUT6.Gen_Ret_Addr[26].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3734] ),
        .\EX_Branch_CMP_Op1_reg[26] (\EX_Branch_CMP_Op1_reg[16] [5]),
        .EX_Fwd(EX_Fwd[5]),
        .\EX_Op3_reg[26] (\EX_Op3_reg[16] [5]),
        .GPR_Op1(GPR_Op1[5]),
        .GPR_Op3(GPR_Op3[5]),
        .LO(carry_6),
        .\LOCKSTEP_Out_reg[3795] (\LOCKSTEP_Out_reg[3708] [5]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[5]),
        .S(addr_AddSub_5),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[18] (\Use_DLMB.wb_dlmb_valid_read_data_reg[18] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[26] (\Use_DLMB.wb_dlmb_valid_read_data_reg[26] ),
        .\Using_FPGA.Native (\Using_FPGA.Native [2]),
        .\Using_FPGA.Native_0 (carry_5),
        .\data_rd_reg_reg[26] (\data_rd_reg_reg[26] ),
        .lopt(lopt_8),
        .lopt_1(lopt_12),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1] ));
  system_microblaze_0_0_MB_FDE_306 \Using_FPGA_LUT6.Gen_Ret_Addr[26].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3734] (\LOCKSTEP_Out_reg[3734] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_5(wb_PC_II_5));
  system_microblaze_0_0_MB_LUT6_2__parameterized43 \Using_FPGA_LUT6.Gen_Ret_Addr[27].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3735] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_4),
        .\mem_pc_i_reg[27] (\mem_pc_i_reg[0] [4]),
        .wb_PC_II_4(wb_PC_II_4),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_307 \Using_FPGA_LUT6.Gen_Ret_Addr[27].MUXCY_XOR_I 
       (.DI(\LOCKSTEP_Out_reg[3735] ),
        .\EX_Branch_CMP_Op1_reg[27] (\EX_Branch_CMP_Op1_reg[16] [4]),
        .EX_Fwd(EX_Fwd[4]),
        .\EX_Op3_reg[27] (\EX_Op3_reg[16] [4]),
        .GPR_Op1(GPR_Op1[4]),
        .GPR_Op3(GPR_Op3[4]),
        .LO(carry_5),
        .\LOCKSTEP_Out_reg[3796] (\LOCKSTEP_Out_reg[3708] [4]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[4]),
        .S(addr_AddSub_4),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[19] (\Use_DLMB.wb_dlmb_valid_read_data_reg[19] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[27] (\Use_DLMB.wb_dlmb_valid_read_data_reg[27] ),
        .\Using_FPGA.Native (\Using_FPGA.Native [1]),
        .\Using_FPGA.Native_0 (carry_4),
        .\data_rd_reg_reg[27] (\data_rd_reg_reg[27] ),
        .lopt(lopt_7),
        .lopt_1(lopt_11),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1] ));
  system_microblaze_0_0_MB_FDE_308 \Using_FPGA_LUT6.Gen_Ret_Addr[27].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3735] (\LOCKSTEP_Out_reg[3735] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_4(wb_PC_II_4));
  system_microblaze_0_0_MB_LUT6_2__parameterized41 \Using_FPGA_LUT6.Gen_Ret_Addr[28].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3736] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_3),
        .\mem_pc_i_reg[28] (\mem_pc_i_reg[0] [3]),
        .wb_PC_II_3(wb_PC_II_3),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_309 \Using_FPGA_LUT6.Gen_Ret_Addr[28].MUXCY_XOR_I 
       (.D(D[2]),
        .DI(\LOCKSTEP_Out_reg[3736] ),
        .\EX_Branch_CMP_Op1_reg[28] (\EX_Branch_CMP_Op1_reg[16] [3]),
        .EX_Fwd(EX_Fwd[3]),
        .\EX_Op3_reg[28] (\EX_Op3_reg[16] [3]),
        .GPR_Op1(GPR_Op1[3]),
        .GPR_Op3(GPR_Op3[3]),
        .LO(carry_4),
        .\LOCKSTEP_Out_reg[3797] (\LOCKSTEP_Out_reg[3708] [3]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[3]),
        .S(addr_AddSub_3),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[20] (\Use_DLMB.wb_dlmb_valid_read_data_reg[20] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[28] (\Use_DLMB.wb_dlmb_valid_read_data_reg[28] ),
        .\Using_FPGA.Native (carry_3),
        .\data_rd_reg_reg[28] (\data_rd_reg_reg[28] ),
        .lopt(lopt_6),
        .lopt_1(lopt_10),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .\wb_MSR_i_reg[28] (\wb_MSR_i_reg[28] [1]),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1] ));
  system_microblaze_0_0_MB_FDE_310 \Using_FPGA_LUT6.Gen_Ret_Addr[28].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3736] (\LOCKSTEP_Out_reg[3736] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_3(wb_PC_II_3));
  system_microblaze_0_0_MB_LUT6_2__parameterized39 \Using_FPGA_LUT6.Gen_Ret_Addr[29].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3737] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_2),
        .\mem_pc_i_reg[29] (\mem_pc_i_reg[0] [2]),
        .wb_PC_II_2(wb_PC_II_2),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28]_0 ),
        .\wb_exception_kind_i_reg[28]_0 (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_311 \Using_FPGA_LUT6.Gen_Ret_Addr[29].MUXCY_XOR_I 
       (.D(D[1]),
        .DI(\LOCKSTEP_Out_reg[3737] ),
        .\EX_Branch_CMP_Op1_reg[29] (\EX_Branch_CMP_Op1_reg[16] [2]),
        .EX_Fwd(EX_Fwd[2]),
        .\EX_Op3_reg[29] (\EX_Op3_reg[16] [2]),
        .GPR_Op1(GPR_Op1[2]),
        .GPR_Op3(GPR_Op3[2]),
        .LO(carry_3),
        .\LOCKSTEP_Out_reg[3798] (\LOCKSTEP_Out_reg[3708] [2]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[2]),
        .S(addr_AddSub_2),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[21] (\Use_DLMB.wb_dlmb_valid_read_data_reg[21] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[29] (\Use_DLMB.wb_dlmb_valid_read_data_reg[29] ),
        .\Using_FPGA.Native (carry_2),
        .\data_rd_reg_reg[29] (\data_rd_reg_reg[29] ),
        .lopt(lopt_2),
        .lopt_1(lopt_5),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .\wb_MSR_i_reg[29] (\wb_MSR_i_reg[28] [0]),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1] ));
  system_microblaze_0_0_MB_FDE_312 \Using_FPGA_LUT6.Gen_Ret_Addr[29].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3737] (\LOCKSTEP_Out_reg[3737] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_2(wb_PC_II_2));
  system_microblaze_0_0_MB_LUT6_2__parameterized93 \Using_FPGA_LUT6.Gen_Ret_Addr[2].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_29),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3710] ),
        .\mem_pc_i_reg[2] (\mem_pc_i_reg[0] [29]),
        .wb_PC_II_29(wb_PC_II_29),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_313 \Using_FPGA_LUT6.Gen_Ret_Addr[2].MUXCY_XOR_I 
       (.LO(carry_30),
        .\LOCKSTEP_Out_reg[3771] (\LOCKSTEP_Out_reg[3769] [13]),
        .S(addr_AddSub_29),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3710] ),
        .\Using_FPGA.Native_0 (carry_29),
        .lopt(lopt_54),
        .lopt_1(lopt_57));
  system_microblaze_0_0_MB_FDE_314 \Using_FPGA_LUT6.Gen_Ret_Addr[2].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3710] (\LOCKSTEP_Out_reg[3710] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_29(wb_PC_II_29));
  system_microblaze_0_0_MB_LUT6_2__parameterized37 \Using_FPGA_LUT6.Gen_Ret_Addr[30].I_RET_ADDR_WB 
       (.DI(\LOCKSTEP_Out_reg[3738] ),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_1),
        .\mem_pc_i_reg[30] (\mem_pc_i_reg[0] [1]),
        .wb_PC_II_1(wb_PC_II_1),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_315 \Using_FPGA_LUT6.Gen_Ret_Addr[30].MUXCY_XOR_I 
       (.D(D[0]),
        .DI(\LOCKSTEP_Out_reg[3738] ),
        .\EX_Branch_CMP_Op1_reg[30] (\EX_Branch_CMP_Op1_reg[16] [1]),
        .EX_Fwd(EX_Fwd[1]),
        .\EX_Op3_reg[30] (\EX_Op3_reg[16] [1]),
        .GPR_Op1(GPR_Op1[1]),
        .GPR_Op3(GPR_Op3[1]),
        .LO(carry_2),
        .\LOCKSTEP_Out_reg[3799] (\LOCKSTEP_Out_reg[3708] [1]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[1]),
        .S(addr_AddSub_1),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[22] (\Use_DLMB.wb_dlmb_valid_read_data_reg[22] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[30] (\Use_DLMB.wb_dlmb_valid_read_data_reg[30] ),
        .\Using_FPGA.Native (carry_1),
        .\data_rd_reg_reg[30] (\data_rd_reg_reg[30] ),
        .lopt(lopt_1),
        .lopt_1(lopt_4),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .\wb_MSR_i_reg[30] (\wb_MSR_i_reg[30] ),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1] ));
  system_microblaze_0_0_MB_FDE_316 \Using_FPGA_LUT6.Gen_Ret_Addr[30].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3738] (\LOCKSTEP_Out_reg[3738] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_1(wb_PC_II_1));
  system_microblaze_0_0_MB_LUT6_2__parameterized35 \Using_FPGA_LUT6.Gen_Ret_Addr[31].I_RET_ADDR_WB 
       (.DI(DI),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_0),
        .\mem_pc_i_reg[31] (\mem_pc_i_reg[0] [0]),
        .wb_PC_II_0(wb_PC_II_0),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_317 \Using_FPGA_LUT6.Gen_Ret_Addr[31].MUXCY_XOR_I 
       (.CI(carry_0),
        .DI(DI),
        .\EX_Branch_CMP_Op1_reg[31] (\EX_Branch_CMP_Op1_reg[16] [0]),
        .EX_Fwd(EX_Fwd[0]),
        .\EX_Op3_reg[31] (\EX_Op3_reg[16] [0]),
        .GPR_Op1(GPR_Op1[0]),
        .GPR_Op3(GPR_Op3[0]),
        .LO(carry_1),
        .\LOCKSTEP_Out_reg[3800] (\LOCKSTEP_Out_reg[3708] [0]),
        .\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg (\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(Q[0]),
        .S(addr_AddSub_0),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[23] (\Use_DLMB.wb_dlmb_valid_read_data_reg[23] ),
        .\Use_DLMB.wb_dlmb_valid_read_data_reg[31] (\Use_DLMB.wb_dlmb_valid_read_data_reg[31] ),
        .\Using_FPGA.Native (\Using_FPGA.Native [0]),
        .\data_rd_reg_reg[31] (\data_rd_reg_reg[31] ),
        .lopt(lopt),
        .lopt_1(lopt_3),
        .of_op1_sel(of_op1_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1_reg(read_register_MSR_1_reg),
        .wb_exception_i_reg(wb_exception_i_reg),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_read_lsb_sel_reg[1] (\wb_read_lsb_sel_reg[1] ));
  system_microblaze_0_0_MB_FDE_318 \Using_FPGA_LUT6.Gen_Ret_Addr[31].WB_PC_FDE 
       (.Clk(Clk),
        .DI(DI),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_0(wb_PC_II_0));
  system_microblaze_0_0_MB_LUT6_2__parameterized91 \Using_FPGA_LUT6.Gen_Ret_Addr[3].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_28),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3711] ),
        .\mem_pc_i_reg[3] (\mem_pc_i_reg[0] [28]),
        .wb_PC_II_28(wb_PC_II_28),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_319 \Using_FPGA_LUT6.Gen_Ret_Addr[3].MUXCY_XOR_I 
       (.LO(carry_29),
        .\LOCKSTEP_Out_reg[3772] (\LOCKSTEP_Out_reg[3769] [12]),
        .S(addr_AddSub_28),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3711] ),
        .\Using_FPGA.Native_0 (carry_28),
        .lopt(lopt_53),
        .lopt_1(lopt_56));
  system_microblaze_0_0_MB_FDE_320 \Using_FPGA_LUT6.Gen_Ret_Addr[3].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3711] (\LOCKSTEP_Out_reg[3711] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_28(wb_PC_II_28));
  system_microblaze_0_0_MB_LUT6_2__parameterized89 \Using_FPGA_LUT6.Gen_Ret_Addr[4].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_27),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3712] ),
        .\mem_pc_i_reg[4] (\mem_pc_i_reg[0] [27]),
        .wb_PC_II_27(wb_PC_II_27),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_321 \Using_FPGA_LUT6.Gen_Ret_Addr[4].MUXCY_XOR_I 
       (.LO(carry_28),
        .\LOCKSTEP_Out_reg[3773] (\LOCKSTEP_Out_reg[3769] [11]),
        .S(addr_AddSub_27),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3712] ),
        .\Using_FPGA.Native_0 (carry_27),
        .lopt(lopt_52),
        .lopt_1(lopt_55));
  system_microblaze_0_0_MB_FDE_322 \Using_FPGA_LUT6.Gen_Ret_Addr[4].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3712] (\LOCKSTEP_Out_reg[3712] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_27(wb_PC_II_27));
  system_microblaze_0_0_MB_LUT6_2__parameterized87 \Using_FPGA_LUT6.Gen_Ret_Addr[5].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_26),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3713] ),
        .\mem_pc_i_reg[5] (\mem_pc_i_reg[0] [26]),
        .wb_PC_II_26(wb_PC_II_26),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_323 \Using_FPGA_LUT6.Gen_Ret_Addr[5].MUXCY_XOR_I 
       (.LO(carry_27),
        .\LOCKSTEP_Out_reg[3774] (\LOCKSTEP_Out_reg[3769] [10]),
        .S(addr_AddSub_26),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3713] ),
        .\Using_FPGA.Native_0 (carry_26),
        .lopt(lopt_47),
        .lopt_1(lopt_51));
  system_microblaze_0_0_MB_FDE_324 \Using_FPGA_LUT6.Gen_Ret_Addr[5].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3713] (\LOCKSTEP_Out_reg[3713] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_26(wb_PC_II_26));
  system_microblaze_0_0_MB_LUT6_2__parameterized85 \Using_FPGA_LUT6.Gen_Ret_Addr[6].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_25),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3714] ),
        .\mem_pc_i_reg[6] (\mem_pc_i_reg[0] [25]),
        .wb_PC_II_25(wb_PC_II_25),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_325 \Using_FPGA_LUT6.Gen_Ret_Addr[6].MUXCY_XOR_I 
       (.LO(carry_26),
        .\LOCKSTEP_Out_reg[3775] (\LOCKSTEP_Out_reg[3769] [9]),
        .S(addr_AddSub_25),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3714] ),
        .\Using_FPGA.Native_0 (carry_25),
        .lopt(lopt_46),
        .lopt_1(lopt_50));
  system_microblaze_0_0_MB_FDE_326 \Using_FPGA_LUT6.Gen_Ret_Addr[6].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3714] (\LOCKSTEP_Out_reg[3714] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_25(wb_PC_II_25));
  system_microblaze_0_0_MB_LUT6_2__parameterized83 \Using_FPGA_LUT6.Gen_Ret_Addr[7].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_24),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3715] ),
        .\mem_pc_i_reg[7] (\mem_pc_i_reg[0] [24]),
        .wb_PC_II_24(wb_PC_II_24),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_327 \Using_FPGA_LUT6.Gen_Ret_Addr[7].MUXCY_XOR_I 
       (.LO(carry_25),
        .\LOCKSTEP_Out_reg[3776] (\LOCKSTEP_Out_reg[3769] [8]),
        .S(addr_AddSub_24),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3715] ),
        .\Using_FPGA.Native_0 (carry_24),
        .lopt(lopt_45),
        .lopt_1(lopt_49));
  system_microblaze_0_0_MB_FDE_328 \Using_FPGA_LUT6.Gen_Ret_Addr[7].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3715] (\LOCKSTEP_Out_reg[3715] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_24(wb_PC_II_24));
  system_microblaze_0_0_MB_LUT6_2__parameterized81 \Using_FPGA_LUT6.Gen_Ret_Addr[8].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_23),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3716] ),
        .\mem_pc_i_reg[8] (\mem_pc_i_reg[0] [23]),
        .wb_PC_II_23(wb_PC_II_23),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_329 \Using_FPGA_LUT6.Gen_Ret_Addr[8].MUXCY_XOR_I 
       (.LO(carry_24),
        .\LOCKSTEP_Out_reg[3777] (\LOCKSTEP_Out_reg[3769] [7]),
        .S(addr_AddSub_23),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3716] ),
        .\Using_FPGA.Native_0 (carry_23),
        .lopt(lopt_44),
        .lopt_1(lopt_48));
  system_microblaze_0_0_MB_FDE_330 \Using_FPGA_LUT6.Gen_Ret_Addr[8].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3716] (\LOCKSTEP_Out_reg[3716] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_23(wb_PC_II_23));
  system_microblaze_0_0_MB_LUT6_2__parameterized79 \Using_FPGA_LUT6.Gen_Ret_Addr[9].I_RET_ADDR_WB 
       (.\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .S(addr_AddSub_22),
        .\Using_FPGA.Native_0 (\LOCKSTEP_Out_reg[3717] ),
        .\mem_pc_i_reg[9] (\mem_pc_i_reg[0] [22]),
        .wb_PC_II_22(wb_PC_II_22),
        .\wb_exception_kind_i_reg[28] (\wb_exception_kind_i_reg[28] ));
  system_microblaze_0_0_MB_MUXCY_XORCY_331 \Using_FPGA_LUT6.Gen_Ret_Addr[9].MUXCY_XOR_I 
       (.CI(carry_22),
        .LO(carry_23),
        .\LOCKSTEP_Out_reg[3778] (\LOCKSTEP_Out_reg[3769] [6]),
        .S(addr_AddSub_22),
        .\Using_FPGA.Native (\LOCKSTEP_Out_reg[3717] ),
        .lopt(lopt_40),
        .lopt_1(lopt_43));
  system_microblaze_0_0_MB_FDE_332 \Using_FPGA_LUT6.Gen_Ret_Addr[9].WB_PC_FDE 
       (.Clk(Clk),
        .\LOCKSTEP_Out_reg[3717] (\LOCKSTEP_Out_reg[3717] ),
        .mem_valid_reg(mem_valid_reg),
        .wb_PC_II_22(wb_PC_II_22));
endmodule

(* ORIG_REF_NAME = "instr_mux" *) 
module system_microblaze_0_0_instr_mux
   (I041_out,
    in,
    I139_out,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_1 ,
    Instr,
    LOCKSTEP_Master_Out);
  output I041_out;
  output [32:0]in;
  output I139_out;
  input [0:0]\Using_FPGA.Native ;
  input [1:0]\Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input [0:0]\Using_FPGA.Native_1 ;
  input [0:31]Instr;
  input [32:0]LOCKSTEP_Master_Out;

  wire I041_out;
  wire I139_out;
  wire [0:31]Instr;
  wire [32:0]LOCKSTEP_Master_Out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]\Using_FPGA.Native ;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire [32:0]in;

  system_microblaze_0_0_mux_bus \Mux_LD.LD_inst 
       (.I041_out(I041_out),
        .I139_out(I139_out),
        .Instr(Instr),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .Y({in[32],in[31],in[30],in[29],in[28],in[27],in[26],in[25],in[24],in[23],in[22],in[9],in[8],in[7],in[6],in[5],in[4],in[3],in[2],in[1],in[0],in[21],in[20],in[19],in[18],in[17],in[16],in[15],in[14],in[13],in[12],in[11]}),
        .in(in[10]));
endmodule

(* ORIG_REF_NAME = "jump_logic" *) 
module system_microblaze_0_0_jump_logic
   (ex_delayslot_Instr2,
    ex_op1_cmp_equal,
    ex_op1_cmp_equal_n,
    \if_pc_reg[0] ,
    of_next_ex_valid,
    ex_delayslot_Instr0,
    mem_jump_taken0,
    if_missed_fetch_reg,
    of_read_imm_reg_ii_reg,
    \Using_FPGA.Native ,
    ex_valid_jump_reg,
    ex_valid_reg,
    \Using_FPGA.Native_0 ,
    ex_jump_hold_reg,
    keep_jump_taken_with_ds_reg,
    ex_jump_q,
    ex_op1_zero,
    ex_branch_with_delayslot_reg,
    out,
    \Using_FPGA.Native_1 ,
    ex_branch_with_delayslot_reg_0,
    ex_op1_cmp_eq,
    Clk,
    ex_op1_cmp_eq_n5_out,
    \Using_FPGA.Native_2 ,
    ex_op1_cmp_eq1,
    use_Reg_Neg_DI1_out,
    force_Val10_out,
    use_Reg_Neg_S3_out,
    force12_out,
    if_fetch_in_progress_reg,
    ex_Take_Intr_or_Exc,
    EX_Valid,
    ex_jump_nodelay_reg,
    mem_valid_instr,
    mem_exception_from_ex,
    of_valid,
    \Performace_Debug_Control.dbg_stop_if_delay_i_reg ,
    ex_jump_hold,
    ex_mbar_stall_no_sleep_1,
    ex_first_cycle,
    ex_mbar_decode,
    ex_mbar_sleep,
    keep_jump_taken_with_ds,
    ex_branch_with_delayslot,
    if_missed_fetch,
    IB_Ready,
    LOCKSTEP_Master_Out,
    wb_exception_i_reg,
    mem_valid_reg,
    p_9_in,
    of_Take_Interrupt_hold_reg,
    of_read_imm_reg_ii,
    EX_MBAR_Stall,
    ex_valid_jump_reg_0,
    ex_valid,
    ex_Instr_Excep_combo,
    dbg_stop_if_delay_i,
    Dbg_Disable,
    \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ,
    ex_Interrupt_i,
    \wb_exception_kind_i_reg[27] ,
    \EX_Branch_CMP_Op1_reg[0] ,
    lopt,
    lopt_1,
    lopt_2);
  output ex_delayslot_Instr2;
  output ex_op1_cmp_equal;
  output ex_op1_cmp_equal_n;
  output [0:0]\if_pc_reg[0] ;
  output of_next_ex_valid;
  output ex_delayslot_Instr0;
  output mem_jump_taken0;
  output if_missed_fetch_reg;
  output of_read_imm_reg_ii_reg;
  output \Using_FPGA.Native ;
  output ex_valid_jump_reg;
  output ex_valid_reg;
  output \Using_FPGA.Native_0 ;
  output ex_jump_hold_reg;
  output keep_jump_taken_with_ds_reg;
  output ex_jump_q;
  input ex_op1_zero;
  input ex_branch_with_delayslot_reg;
  input [0:0]out;
  input \Using_FPGA.Native_1 ;
  input ex_branch_with_delayslot_reg_0;
  input ex_op1_cmp_eq;
  input Clk;
  input ex_op1_cmp_eq_n5_out;
  input \Using_FPGA.Native_2 ;
  input ex_op1_cmp_eq1;
  input use_Reg_Neg_DI1_out;
  input force_Val10_out;
  input use_Reg_Neg_S3_out;
  input force12_out;
  input [0:0]if_fetch_in_progress_reg;
  input ex_Take_Intr_or_Exc;
  input EX_Valid;
  input ex_jump_nodelay_reg;
  input mem_valid_instr;
  input mem_exception_from_ex;
  input of_valid;
  input \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  input ex_jump_hold;
  input ex_mbar_stall_no_sleep_1;
  input ex_first_cycle;
  input ex_mbar_decode;
  input ex_mbar_sleep;
  input keep_jump_taken_with_ds;
  input ex_branch_with_delayslot;
  input if_missed_fetch;
  input IB_Ready;
  input [1:0]LOCKSTEP_Master_Out;
  input wb_exception_i_reg;
  input mem_valid_reg;
  input p_9_in;
  input of_Take_Interrupt_hold_reg;
  input of_read_imm_reg_ii;
  input EX_MBAR_Stall;
  input ex_valid_jump_reg_0;
  input ex_valid;
  input ex_Instr_Excep_combo;
  input dbg_stop_if_delay_i;
  input Dbg_Disable;
  input \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  input ex_Interrupt_i;
  input \wb_exception_kind_i_reg[27] ;
  input [0:0]\EX_Branch_CMP_Op1_reg[0] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire Clk;
  wire Dbg_Disable;
  wire [0:0]\EX_Branch_CMP_Op1_reg[0] ;
  wire EX_MBAR_Stall;
  wire EX_Valid;
  wire IB_Ready;
  wire [1:0]LOCKSTEP_Master_Out;
  wire \Performace_Debug_Control.dbg_stop_if_delay_i_reg ;
  wire \Performace_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_2 ;
  wire dbg_stop_if_delay_i;
  wire ex_Instr_Excep_combo;
  wire ex_Interrupt_i;
  wire ex_Take_Intr_or_Exc;
  wire ex_branch_with_delayslot;
  wire ex_branch_with_delayslot_reg;
  wire ex_branch_with_delayslot_reg_0;
  wire ex_delayslot_Instr0;
  wire ex_delayslot_Instr2;
  wire ex_first_cycle;
  wire ex_jump_hold;
  wire ex_jump_hold_reg;
  wire ex_jump_nodelay_reg;
  wire ex_jump_q;
  wire ex_jump_q_i_1_n_0;
  wire ex_jump_wanted;
  wire ex_mbar_decode;
  wire ex_mbar_sleep;
  wire ex_mbar_stall_no_sleep_1;
  wire ex_op1_cmp_eq;
  wire ex_op1_cmp_eq1;
  wire ex_op1_cmp_eq_n5_out;
  wire ex_op1_cmp_equal;
  wire ex_op1_cmp_equal_n;
  wire ex_op1_zero;
  wire ex_valid;
  wire ex_valid_jump_reg;
  wire ex_valid_jump_reg_0;
  wire ex_valid_reg;
  wire force12_out;
  wire force1_reg_n_0;
  wire force2;
  wire force_Val10_out;
  wire force_Val1_reg_n_0;
  wire force_Val2_N;
  wire [0:0]if_fetch_in_progress_reg;
  wire if_missed_fetch;
  wire if_missed_fetch_reg;
  wire [0:0]\if_pc_reg[0] ;
  wire jump_carry1;
  wire jump_carry2;
  wire jump_carry4;
  wire jump_carry5;
  wire keep_jump_taken_with_ds;
  wire keep_jump_taken_with_ds_reg;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire mem_exception_from_ex;
  wire mem_jump_taken0;
  wire mem_valid_instr;
  wire mem_valid_reg;
  (* DIRECT_ENABLE *) wire of_PipeRun_for_ce;
  wire of_Take_Interrupt_hold_reg;
  wire of_next_ex_valid;
  wire of_read_imm_reg_ii;
  wire of_read_imm_reg_ii_reg;
  wire of_valid;
  wire p_9_in;
  (* DIRECT_RESET *) wire reset_bool_for_rst;
  wire use_Reg_Neg_DI1_out;
  wire use_Reg_Neg_DI_reg_n_0;
  wire use_Reg_Neg_S3_out;
  wire use_Reg_Neg_S_reg_n_0;
  wire wb_exception_i_reg;
  wire \wb_exception_kind_i_reg[27] ;

  assign of_PipeRun_for_ce = \Using_FPGA.Native_1 ;
  assign reset_bool_for_rst = out[0];
  system_microblaze_0_0_MB_MUXCY_53 MUXCY_JUMP_CARRY
       (.\EX_Branch_CMP_Op1_reg[0] (\EX_Branch_CMP_Op1_reg[0] ),
        .ex_op1_zero(ex_op1_zero),
        .force1_reg(force1_reg_n_0),
        .force_Val1_reg(force_Val1_reg_n_0),
        .jump_carry1(jump_carry1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .use_Reg_Neg_DI_reg(use_Reg_Neg_DI_reg_n_0),
        .use_Reg_Neg_S_reg(use_Reg_Neg_S_reg_n_0));
  system_microblaze_0_0_MB_MUXCY_54 MUXCY_JUMP_CARRY2
       (.EX_Valid(EX_Valid),
        .ex_Take_Intr_or_Exc(ex_Take_Intr_or_Exc),
        .force2(force2),
        .force_Val2_N(force_Val2_N),
        .jump_carry1(jump_carry1),
        .jump_carry2(jump_carry2),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_6),
        .lopt_4(ex_branch_with_delayslot_reg),
        .lopt_5(lopt_7),
        .lopt_6(lopt_8),
        .lopt_7(lopt_9));
  system_microblaze_0_0_MB_MUXCY_55 MUXCY_JUMP_CARRY3
       (.Dbg_Disable(Dbg_Disable),
        .EX_MBAR_Stall(EX_MBAR_Stall),
        .\Performace_Debug_Control.ex_dbg_pc_hit_i_reg (\Performace_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .dbg_stop_if_delay_i(dbg_stop_if_delay_i),
        .ex_Instr_Excep_combo(ex_Instr_Excep_combo),
        .ex_Interrupt_i(ex_Interrupt_i),
        .ex_Take_Intr_or_Exc(ex_Take_Intr_or_Exc),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .ex_jump_wanted(ex_jump_wanted),
        .jump_carry2(jump_carry2),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .of_valid(of_valid));
  system_microblaze_0_0_MB_MUXCY_56 MUXCY_JUMP_CARRY4
       (.ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .ex_jump_wanted(ex_jump_wanted),
        .jump_carry4(jump_carry4),
        .lopt(lopt_6));
  system_microblaze_0_0_MB_MUXCY_57 MUXCY_JUMP_CARRY5
       (.jump_carry4(jump_carry4),
        .jump_carry5(jump_carry5),
        .lopt(lopt_7),
        .lopt_1(lopt_8),
        .lopt_2(lopt_9));
  system_microblaze_0_0_MB_MUXCY_58 MUXCY_JUMP_CARRY6
       (.IB_Ready(IB_Ready),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .\Performace_Debug_Control.dbg_stop_if_delay_i_reg (\Performace_Debug_Control.dbg_stop_if_delay_i_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (of_PipeRun_for_ce),
        .ex_Take_Intr_or_Exc(ex_Take_Intr_or_Exc),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg_0),
        .ex_delayslot_Instr0(ex_delayslot_Instr0),
        .ex_first_cycle(ex_first_cycle),
        .ex_jump_for_ce(ex_delayslot_Instr2),
        .ex_jump_hold(ex_jump_hold),
        .ex_jump_hold_reg(ex_jump_hold_reg),
        .ex_jump_nodelay_reg(ex_jump_nodelay_reg),
        .ex_mbar_decode(ex_mbar_decode),
        .ex_mbar_sleep(ex_mbar_sleep),
        .ex_mbar_stall_no_sleep_1(ex_mbar_stall_no_sleep_1),
        .ex_valid(ex_valid),
        .ex_valid_jump_reg(ex_valid_jump_reg),
        .ex_valid_jump_reg_0(ex_valid_jump_reg_0),
        .ex_valid_reg(ex_valid_reg),
        .if_fetch_in_progress_reg(if_fetch_in_progress_reg),
        .if_missed_fetch(if_missed_fetch),
        .if_missed_fetch_reg(if_missed_fetch_reg),
        .\if_pc_reg[0] (\if_pc_reg[0] ),
        .jump_carry5(jump_carry5),
        .keep_jump_taken_with_ds(keep_jump_taken_with_ds),
        .keep_jump_taken_with_ds_reg(keep_jump_taken_with_ds_reg),
        .mem_exception_from_ex(mem_exception_from_ex),
        .mem_jump_taken0(mem_jump_taken0),
        .mem_valid_instr(mem_valid_instr),
        .mem_valid_reg(mem_valid_reg),
        .of_Take_Interrupt_hold_reg(of_Take_Interrupt_hold_reg),
        .of_next_ex_valid(of_next_ex_valid),
        .of_read_imm_reg_ii(of_read_imm_reg_ii),
        .of_read_imm_reg_ii_reg(of_read_imm_reg_ii_reg),
        .of_valid(of_valid),
        .out(reset_bool_for_rst),
        .p_9_in(p_9_in),
        .wb_exception_i_reg(wb_exception_i_reg),
        .\wb_exception_kind_i_reg[27] (\wb_exception_kind_i_reg[27] ));
  LUT3 #(
    .INIT(8'h0E)) 
    ex_jump_q_i_1
       (.I0(ex_jump_q),
        .I1(ex_delayslot_Instr2),
        .I2(ex_branch_with_delayslot_reg_0),
        .O(ex_jump_q_i_1_n_0));
  FDRE ex_jump_q_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_jump_q_i_1_n_0),
        .Q(ex_jump_q),
        .R(1'b0));
  FDRE ex_op1_cmp_eq_n_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_op1_cmp_eq_n5_out),
        .Q(ex_op1_cmp_equal_n),
        .R(reset_bool_for_rst));
  FDSE ex_op1_cmp_eq_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_op1_cmp_eq),
        .Q(ex_op1_cmp_equal),
        .S(reset_bool_for_rst));
  FDRE force1_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(force12_out),
        .Q(force1_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE force2_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_op1_cmp_eq1),
        .Q(force2),
        .R(reset_bool_for_rst));
  FDRE force_Val1_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(force_Val10_out),
        .Q(force_Val1_reg_n_0),
        .R(reset_bool_for_rst));
  FDSE force_Val2_N_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(\Using_FPGA.Native_2 ),
        .Q(force_Val2_N),
        .S(reset_bool_for_rst));
  FDRE use_Reg_Neg_DI_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(use_Reg_Neg_DI1_out),
        .Q(use_Reg_Neg_DI_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE use_Reg_Neg_S_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(use_Reg_Neg_S3_out),
        .Q(use_Reg_Neg_S_reg_n_0),
        .R(reset_bool_for_rst));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit
   (out,
    flush_pipe,
    Rst18_out,
    saved_reset_mode_dbg_halt_reg,
    SR,
    \Use_DLMB.wb_dlmb_valid_read_data_reg[31] ,
    Debug_Rst,
    Reset,
    Mb_Reset,
    wb_exception,
    Dbg_Disable,
    Reset_Mode,
    saved_reset_mode_dbg_halt,
    MEM_Sel_MEM_Res,
    DReady,
    Clk);
  output [0:0]out;
  output flush_pipe;
  output Rst18_out;
  output saved_reset_mode_dbg_halt_reg;
  output [0:0]SR;
  output [0:0]\Use_DLMB.wb_dlmb_valid_read_data_reg[31] ;
  input Debug_Rst;
  input Reset;
  input Mb_Reset;
  input wb_exception;
  input Dbg_Disable;
  input [0:1]Reset_Mode;
  input saved_reset_mode_dbg_halt;
  input MEM_Sel_MEM_Res;
  input DReady;
  input Clk;

  wire Clk;
  wire DReady;
  wire Dbg_Disable;
  wire Debug_Rst;
  wire MEM_Sel_MEM_Res;
  wire Mb_Reset;
  wire Reset;
  wire [0:1]Reset_Mode;
  wire Rst18_out;
  wire [0:0]SR;
  wire [0:0]\Use_DLMB.wb_dlmb_valid_read_data_reg[31] ;
  wire flush_pipe;
  wire reset_temp;
  wire saved_reset_mode_dbg_halt;
  wire saved_reset_mode_dbg_halt_reg;
  (* async_reg = "true" *) wire [1:2]sync;
  wire wb_exception;

  assign out[0] = sync[2];
  LUT3 #(
    .INIT(8'hFE)) 
    \Synchronize.use_sync_reset.sync[1]_i_1 
       (.I0(Debug_Rst),
        .I1(Reset),
        .I2(Mb_Reset),
        .O(reset_temp));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(reset_temp),
        .Q(sync[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \Use_DLMB.wb_dlmb_valid_read_data[0]_i_1 
       (.I0(sync[2]),
        .I1(DReady),
        .O(\Use_DLMB.wb_dlmb_valid_read_data_reg[31] ));
  LUT2 #(
    .INIT(4'hB)) 
    \WB_MEM_Result[0]_i_1 
       (.I0(sync[2]),
        .I1(MEM_Sel_MEM_Res),
        .O(SR));
  LUT2 #(
    .INIT(4'hE)) 
    continue_from_brk_i_1
       (.I0(Dbg_Disable),
        .I1(sync[2]),
        .O(Rst18_out));
  LUT2 #(
    .INIT(4'hE)) 
    mem_gpr_write_dbg_i_1
       (.I0(sync[2]),
        .I1(wb_exception),
        .O(flush_pipe));
  LUT5 #(
    .INIT(32'h222F2220)) 
    saved_reset_mode_dbg_halt_i_1
       (.I0(Reset_Mode[0]),
        .I1(Reset_Mode[1]),
        .I2(Dbg_Disable),
        .I3(sync[2]),
        .I4(saved_reset_mode_dbg_halt),
        .O(saved_reset_mode_dbg_halt_reg));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit_0
   (D,
    normal_stop_cmd_i0,
    Q,
    Rst18_out,
    normal_stop_TClk_reg,
    Clk);
  output [0:0]D;
  output normal_stop_cmd_i0;
  input [0:0]Q;
  input Rst18_out;
  input [0:0]normal_stop_TClk_reg;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire Rst18_out;
  wire [0:0]normal_stop_TClk_reg;
  wire normal_stop_cmd_i0;
  (* async_reg = "true" *) wire [1:2]sync;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(normal_stop_TClk_reg),
        .Q(sync[1]),
        .R(Rst18_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(Rst18_out));
  LUT2 #(
    .INIT(4'h2)) 
    normal_stop_cmd_i_i_1
       (.I0(sync[2]),
        .I1(Q),
        .O(normal_stop_cmd_i0));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit_1
   (D,
    force_stop_cmd_i0,
    Q,
    Rst18_out,
    force_stop_TClk_reg,
    Clk);
  output [0:0]D;
  output force_stop_cmd_i0;
  input [0:0]Q;
  input Rst18_out;
  input [0:0]force_stop_TClk_reg;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire Rst18_out;
  wire [0:0]force_stop_TClk_reg;
  wire force_stop_cmd_i0;
  (* async_reg = "true" *) wire [1:2]sync;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(force_stop_TClk_reg),
        .Q(sync[1]),
        .R(Rst18_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(Rst18_out));
  LUT2 #(
    .INIT(4'h2)) 
    force_stop_cmd_i_i_1
       (.I0(sync[2]),
        .I1(Q),
        .O(force_stop_cmd_i0));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit_2
   (D,
    start_single_cmd0,
    Q,
    Rst18_out,
    single_Step_TClk_reg,
    Clk);
  output [0:0]D;
  output start_single_cmd0;
  input [0:0]Q;
  input Rst18_out;
  input [0:0]single_Step_TClk_reg;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire Rst18_out;
  wire [0:0]single_Step_TClk_reg;
  wire start_single_cmd0;
  (* async_reg = "true" *) wire [1:2]sync;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(single_Step_TClk_reg),
        .Q(sync[1]),
        .R(Rst18_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(Rst18_out));
  LUT2 #(
    .INIT(4'h2)) 
    start_single_cmd_i_1
       (.I0(sync[2]),
        .I1(Q),
        .O(start_single_cmd0));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit_3
   (D,
    read_register_MSR0,
    Q,
    Rst18_out,
    \command_reg_reg[0] ,
    Clk);
  output [0:0]D;
  output read_register_MSR0;
  input [0:0]Q;
  input Rst18_out;
  input [0:0]\command_reg_reg[0] ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire Rst18_out;
  wire [0:0]\command_reg_reg[0] ;
  wire read_register_MSR0;
  (* async_reg = "true" *) wire [1:2]sync;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\command_reg_reg[0] ),
        .Q(sync[1]),
        .R(Rst18_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(Rst18_out));
  LUT2 #(
    .INIT(4'h2)) 
    read_register_MSR_i_1
       (.I0(sync[2]),
        .I1(Q),
        .O(read_register_MSR0));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit_4
   (D,
    read_register_PC0,
    Q,
    Rst18_out,
    \command_reg_reg[1] ,
    Clk);
  output [0:0]D;
  output read_register_PC0;
  input [0:0]Q;
  input Rst18_out;
  input [0:0]\command_reg_reg[1] ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire Rst18_out;
  wire [0:0]\command_reg_reg[1] ;
  wire read_register_PC0;
  (* async_reg = "true" *) wire [1:2]sync;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\command_reg_reg[1] ),
        .Q(sync[1]),
        .R(Rst18_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(Rst18_out));
  LUT2 #(
    .INIT(4'h2)) 
    read_register_PC_i_1
       (.I0(sync[2]),
        .I1(Q),
        .O(read_register_PC0));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit_5
   (D,
    trig_in_1_reg,
    Dbg_Trig_In,
    Q,
    Rst18_out,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    continue_from_brk_TClk_reg,
    Clk);
  output [0:0]D;
  output trig_in_1_reg;
  input [0:0]Dbg_Trig_In;
  input [1:0]Q;
  input Rst18_out;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input [0:0]continue_from_brk_TClk_reg;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_In;
  wire [1:0]Q;
  wire Rst18_out;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[2]_0 ;
  wire [0:0]continue_from_brk_TClk_reg;
  (* async_reg = "true" *) wire [1:2]sync;
  wire trig_in_1_reg;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(continue_from_brk_TClk_reg),
        .Q(sync[1]),
        .R(Rst18_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(Rst18_out));
  LUT6 #(
    .INIT(64'h00BA00BA000000BA)) 
    trig_in_1_i_1
       (.I0(Dbg_Trig_In),
        .I1(Q[1]),
        .I2(sync[2]),
        .I3(Rst18_out),
        .I4(\Synchronize.use_sync_reset.sync_reg[2]_0 ),
        .I5(Q[0]),
        .O(trig_in_1_reg));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit_6
   (D,
    if_debug_ready_i0,
    Q,
    Rst18_out,
    New_Dbg_Instr2_TCK_reg,
    Clk);
  output [0:0]D;
  output if_debug_ready_i0;
  input [0:0]Q;
  input Rst18_out;
  input [0:0]New_Dbg_Instr2_TCK_reg;
  input Clk;

  wire Clk;
  wire [0:0]New_Dbg_Instr2_TCK_reg;
  wire [0:0]Q;
  wire Rst18_out;
  wire if_debug_ready_i0;
  (* async_reg = "true" *) wire [1:2]sync;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(New_Dbg_Instr2_TCK_reg),
        .Q(sync[1]),
        .R(Rst18_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(Rst18_out));
  LUT2 #(
    .INIT(4'h2)) 
    if_debug_ready_i_i_1
       (.I0(sync[2]),
        .I1(Q),
        .O(if_debug_ready_i0));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit_7
   (D,
    continue_from_brk0,
    trig_ack_out_1_reg,
    Q,
    \Synchronize.use_sync_reset.sync_reg[2]_0 ,
    Dbg_Trig_Ack_Out,
    Dbg_Disable,
    out,
    Rst18_out,
    Dbg_Trig_Out,
    Clk);
  output [0:0]D;
  output continue_from_brk0;
  output trig_ack_out_1_reg;
  input [1:0]Q;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[2]_0 ;
  input [0:0]Dbg_Trig_Ack_Out;
  input Dbg_Disable;
  input [0:0]out;
  input Rst18_out;
  input [0:0]Dbg_Trig_Out;
  input Clk;

  wire Clk;
  wire Dbg_Disable;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_Out;
  wire [1:0]Q;
  wire Rst18_out;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[2]_0 ;
  wire continue_from_brk0;
  wire [0:0]out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire trig_ack_out_1_reg;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(sync[1]),
        .R(Rst18_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(Rst18_out));
  LUT4 #(
    .INIT(16'h22F2)) 
    continue_from_brk_i_2
       (.I0(sync[2]),
        .I1(Q[0]),
        .I2(\Synchronize.use_sync_reset.sync_reg[2]_0 ),
        .I3(Q[1]),
        .O(continue_from_brk0));
  LUT5 #(
    .INIT(32'h02030002)) 
    trig_ack_out_1_i_1
       (.I0(Dbg_Trig_Ack_Out),
        .I1(Dbg_Disable),
        .I2(out),
        .I3(Q[0]),
        .I4(sync[2]),
        .O(trig_ack_out_1_reg));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit_8
   (D,
    Rst18_out,
    Dbg_Trig_Ack_In,
    Clk);
  output [0:0]D;
  input Rst18_out;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_In;
  wire Rst18_out;
  (* async_reg = "true" *) wire [1:2]sync;

  assign D[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(sync[1]),
        .R(Rst18_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(Rst18_out));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized1
   (D,
    Raw,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input Raw;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire Raw;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(Raw),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized11
   (D,
    \Performace_Debug_Control.dbg_hit_reg[5] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[5] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[5] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__4 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[5] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized13
   (D,
    \Performace_Debug_Control.dbg_hit_reg[6] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[6] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[6] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__5 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[6] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized15
   (D,
    \Performace_Debug_Control.dbg_hit_reg[7] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[7] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[7] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__6 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[7] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized17
   (D,
    \Performace_Debug_Control.dbg_hit_reg[8] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[8] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[8] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__7 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[8] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized19
   (D,
    \Performace_Debug_Control.dbg_hit_reg[9] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[9] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[9] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__8 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[9] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized21
   (D,
    \Performace_Debug_Control.dbg_hit_reg[10] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[10] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[10] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__9 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[10] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized23
   (D,
    \Performace_Debug_Control.dbg_hit_reg[11] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[11] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[11] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__10 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[11] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized25
   (D,
    \Performace_Debug_Control.dbg_hit_reg[12] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[12] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[12] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__11 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[12] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized27
   (D,
    \Performace_Debug_Control.dbg_hit_reg[13] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[13] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[13] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__12 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[13] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized29
   (D,
    \Performace_Debug_Control.dbg_hit_reg[14] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[14] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[14] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__13 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[14] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized3
   (D,
    \Performace_Debug_Control.dbg_hit_reg[1] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[1] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[1] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__0 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[1] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized31
   (D,
    \Performace_Debug_Control.dbg_hit_reg[15] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[15] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[15] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__14 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[15] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized33
   (D,
    \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__15 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_stop_instr_fetch_nohalt_reg ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized35
   (D,
    dbg_brki_hit,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input dbg_brki_hit;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;
  wire dbg_brki_hit;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__16 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(dbg_brki_hit),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized37
   (D,
    running_clock,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input running_clock;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;
  wire running_clock;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__17 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(running_clock),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized39
   (D,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__18 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(1'b0),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized41
   (D,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable,
    sleep_reset_mode_reg,
    Sleep_Decode);
  output [0:0]D;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;
  input sleep_reset_mode_reg;
  input Sleep_Decode;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Single_Synchronize.use_async_reset.sync_i_1__19_n_0 ;
  wire Sleep_Decode;
  wire async_reset;
  wire sleep_reset_mode_reg;

  LUT2 #(
    .INIT(4'hE)) 
    \Single_Synchronize.use_async_reset.sync_i_1__19 
       (.I0(sleep_reset_mode_reg),
        .I1(Sleep_Decode),
        .O(\Single_Synchronize.use_async_reset.sync_i_1__19_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_2 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Single_Synchronize.use_async_reset.sync_i_1__19_n_0 ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized5
   (D,
    \Performace_Debug_Control.dbg_hit_reg[2] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[2] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[2] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__1 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[2] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized52
   (trig_ack_in_0_synced,
    trig_in_0_reg,
    Rst18_out,
    Dbg_Trig_Ack_In,
    Clk,
    Dbg_Trig_In,
    mb_halted_1,
    dbg_state_i,
    trig_ack_in_0_synced_1);
  output trig_ack_in_0_synced;
  output trig_in_0_reg;
  input Rst18_out;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;
  input [0:0]Dbg_Trig_In;
  input mb_halted_1;
  input dbg_state_i;
  input trig_ack_in_0_synced_1;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_In;
  wire [0:0]Dbg_Trig_In;
  wire Rst18_out;
  wire dbg_state_i;
  wire mb_halted_1;
  wire trig_ack_in_0_synced;
  wire trig_ack_in_0_synced_1;
  wire trig_in_0_reg;

  FDRE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_sync_reset.sync_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(trig_ack_in_0_synced),
        .R(Rst18_out));
  LUT6 #(
    .INIT(64'h00BA00BA000000BA)) 
    trig_in_0_i_1
       (.I0(Dbg_Trig_In),
        .I1(mb_halted_1),
        .I2(dbg_state_i),
        .I3(Rst18_out),
        .I4(trig_ack_in_0_synced),
        .I5(trig_ack_in_0_synced_1),
        .O(trig_in_0_reg));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized54
   (trig_out_0_synced,
    \Performace_Debug_Control.trig_ack_out_0_reg ,
    \Performace_Debug_Control.dbg_stop_i_reg ,
    Rst18_out,
    Dbg_Trig_Out,
    Clk,
    trig_out_0_synced_1,
    Dbg_Trig_Ack_Out,
    Dbg_Disable,
    out,
    \Performace_Debug_Control.dbg_stop_i_reg_0 ,
    dbg_state_i,
    Dbg_Stop,
    dbg_stop_1,
    dbg_stop_i);
  output trig_out_0_synced;
  output \Performace_Debug_Control.trig_ack_out_0_reg ;
  output \Performace_Debug_Control.dbg_stop_i_reg ;
  input Rst18_out;
  input [0:0]Dbg_Trig_Out;
  input Clk;
  input trig_out_0_synced_1;
  input [0:0]Dbg_Trig_Ack_Out;
  input Dbg_Disable;
  input [0:0]out;
  input \Performace_Debug_Control.dbg_stop_i_reg_0 ;
  input dbg_state_i;
  input Dbg_Stop;
  input dbg_stop_1;
  input dbg_stop_i;

  wire Clk;
  wire Dbg_Disable;
  wire Dbg_Stop;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_Out;
  wire \Performace_Debug_Control.dbg_stop_i_reg ;
  wire \Performace_Debug_Control.dbg_stop_i_reg_0 ;
  wire \Performace_Debug_Control.trig_ack_out_0_reg ;
  wire Rst18_out;
  wire dbg_state_i;
  wire dbg_stop_1;
  wire dbg_stop_i;
  wire [0:0]out;
  wire p_40_out;
  wire trig_out_0_synced;
  wire trig_out_0_synced_1;

  LUT6 #(
    .INIT(64'h00000000AEAEAFAE)) 
    \Performace_Debug_Control.dbg_stop_i_i_1 
       (.I0(\Performace_Debug_Control.dbg_stop_i_reg_0 ),
        .I1(p_40_out),
        .I2(dbg_state_i),
        .I3(Dbg_Stop),
        .I4(dbg_stop_1),
        .I5(dbg_stop_i),
        .O(\Performace_Debug_Control.dbg_stop_i_reg ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Performace_Debug_Control.dbg_stop_i_i_2 
       (.I0(trig_out_0_synced),
        .I1(trig_out_0_synced_1),
        .O(p_40_out));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT5 #(
    .INIT(32'h02030002)) 
    \Performace_Debug_Control.trig_ack_out_0_i_1 
       (.I0(Dbg_Trig_Ack_Out),
        .I1(Dbg_Disable),
        .I2(out),
        .I3(trig_out_0_synced_1),
        .I4(trig_out_0_synced),
        .O(\Performace_Debug_Control.trig_ack_out_0_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_sync_reset.sync_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(trig_out_0_synced),
        .R(Rst18_out));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized7
   (D,
    \Performace_Debug_Control.dbg_hit_reg[3] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[3] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[3] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__2 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[3] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module system_microblaze_0_0_mb_sync_bit__parameterized9
   (D,
    \Performace_Debug_Control.dbg_hit_reg[4] ,
    Dbg_Clk,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [0:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[4] ;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[4] ;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \Single_Synchronize.use_async_reset.sync_i_1__3 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Dbg_Disable),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Performace_Debug_Control.dbg_hit_reg[4] ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_vec" *) 
module system_microblaze_0_0_mb_sync_vec
   (D,
    \Performace_Debug_Control.dbg_hit_reg[15] ,
    Dbg_Clk,
    \Performace_Debug_Control.dbg_hit_reg[14] ,
    \Performace_Debug_Control.dbg_hit_reg[13] ,
    \Performace_Debug_Control.dbg_hit_reg[12] ,
    \Performace_Debug_Control.dbg_hit_reg[11] ,
    \Performace_Debug_Control.dbg_hit_reg[10] ,
    \Performace_Debug_Control.dbg_hit_reg[9] ,
    \Performace_Debug_Control.dbg_hit_reg[8] ,
    \Performace_Debug_Control.dbg_hit_reg[7] ,
    \Performace_Debug_Control.dbg_hit_reg[6] ,
    \Performace_Debug_Control.dbg_hit_reg[5] ,
    \Performace_Debug_Control.dbg_hit_reg[4] ,
    \Performace_Debug_Control.dbg_hit_reg[3] ,
    \Performace_Debug_Control.dbg_hit_reg[2] ,
    \Performace_Debug_Control.dbg_hit_reg[1] ,
    Raw,
    Scan_Reset,
    Scan_Reset_Sel,
    Dbg_Disable);
  output [15:0]D;
  input \Performace_Debug_Control.dbg_hit_reg[15] ;
  input Dbg_Clk;
  input \Performace_Debug_Control.dbg_hit_reg[14] ;
  input \Performace_Debug_Control.dbg_hit_reg[13] ;
  input \Performace_Debug_Control.dbg_hit_reg[12] ;
  input \Performace_Debug_Control.dbg_hit_reg[11] ;
  input \Performace_Debug_Control.dbg_hit_reg[10] ;
  input \Performace_Debug_Control.dbg_hit_reg[9] ;
  input \Performace_Debug_Control.dbg_hit_reg[8] ;
  input \Performace_Debug_Control.dbg_hit_reg[7] ;
  input \Performace_Debug_Control.dbg_hit_reg[6] ;
  input \Performace_Debug_Control.dbg_hit_reg[5] ;
  input \Performace_Debug_Control.dbg_hit_reg[4] ;
  input \Performace_Debug_Control.dbg_hit_reg[3] ;
  input \Performace_Debug_Control.dbg_hit_reg[2] ;
  input \Performace_Debug_Control.dbg_hit_reg[1] ;
  input Raw;
  input Scan_Reset;
  input Scan_Reset_Sel;
  input Dbg_Disable;

  wire [15:0]D;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire \Performace_Debug_Control.dbg_hit_reg[10] ;
  wire \Performace_Debug_Control.dbg_hit_reg[11] ;
  wire \Performace_Debug_Control.dbg_hit_reg[12] ;
  wire \Performace_Debug_Control.dbg_hit_reg[13] ;
  wire \Performace_Debug_Control.dbg_hit_reg[14] ;
  wire \Performace_Debug_Control.dbg_hit_reg[15] ;
  wire \Performace_Debug_Control.dbg_hit_reg[1] ;
  wire \Performace_Debug_Control.dbg_hit_reg[2] ;
  wire \Performace_Debug_Control.dbg_hit_reg[3] ;
  wire \Performace_Debug_Control.dbg_hit_reg[4] ;
  wire \Performace_Debug_Control.dbg_hit_reg[5] ;
  wire \Performace_Debug_Control.dbg_hit_reg[6] ;
  wire \Performace_Debug_Control.dbg_hit_reg[7] ;
  wire \Performace_Debug_Control.dbg_hit_reg[8] ;
  wire \Performace_Debug_Control.dbg_hit_reg[9] ;
  wire Raw;
  wire Scan_Reset;
  wire Scan_Reset_Sel;

  system_microblaze_0_0_mb_sync_bit__parameterized1 \sync_bits[0].sync_bit 
       (.D(D[15]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .Raw(Raw),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized21 \sync_bits[10].sync_bit 
       (.D(D[5]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[10] (\Performace_Debug_Control.dbg_hit_reg[10] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized23 \sync_bits[11].sync_bit 
       (.D(D[4]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[11] (\Performace_Debug_Control.dbg_hit_reg[11] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized25 \sync_bits[12].sync_bit 
       (.D(D[3]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[12] (\Performace_Debug_Control.dbg_hit_reg[12] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized27 \sync_bits[13].sync_bit 
       (.D(D[2]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[13] (\Performace_Debug_Control.dbg_hit_reg[13] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized29 \sync_bits[14].sync_bit 
       (.D(D[1]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[14] (\Performace_Debug_Control.dbg_hit_reg[14] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized31 \sync_bits[15].sync_bit 
       (.D(D[0]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[15] (\Performace_Debug_Control.dbg_hit_reg[15] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized3 \sync_bits[1].sync_bit 
       (.D(D[14]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[1] (\Performace_Debug_Control.dbg_hit_reg[1] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized5 \sync_bits[2].sync_bit 
       (.D(D[13]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[2] (\Performace_Debug_Control.dbg_hit_reg[2] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized7 \sync_bits[3].sync_bit 
       (.D(D[12]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[3] (\Performace_Debug_Control.dbg_hit_reg[3] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized9 \sync_bits[4].sync_bit 
       (.D(D[11]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[4] (\Performace_Debug_Control.dbg_hit_reg[4] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized11 \sync_bits[5].sync_bit 
       (.D(D[10]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[5] (\Performace_Debug_Control.dbg_hit_reg[5] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized13 \sync_bits[6].sync_bit 
       (.D(D[9]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[6] (\Performace_Debug_Control.dbg_hit_reg[6] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized15 \sync_bits[7].sync_bit 
       (.D(D[8]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[7] (\Performace_Debug_Control.dbg_hit_reg[7] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized17 \sync_bits[8].sync_bit 
       (.D(D[7]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[8] (\Performace_Debug_Control.dbg_hit_reg[8] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
  system_microblaze_0_0_mb_sync_bit__parameterized19 \sync_bits[9].sync_bit 
       (.D(D[6]),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Disable(Dbg_Disable),
        .\Performace_Debug_Control.dbg_hit_reg[9] (\Performace_Debug_Control.dbg_hit_reg[9] ),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel));
endmodule

(* ORIG_REF_NAME = "mb_sync_vec" *) 
module system_microblaze_0_0_mb_sync_vec__parameterized1
   (D,
    if_debug_ready_i0,
    read_register_MSR0,
    read_register_PC0,
    start_single_cmd0,
    force_stop_cmd_i0,
    normal_stop_cmd_i0,
    continue_from_brk0,
    trig_in_1_reg,
    trig_ack_out_1_reg,
    Q,
    Dbg_Trig_In,
    Rst18_out,
    Dbg_Trig_Ack_Out,
    Dbg_Disable,
    out,
    normal_stop_TClk_reg,
    Clk,
    force_stop_TClk_reg,
    single_Step_TClk_reg,
    \command_reg_reg[0] ,
    continue_from_brk_TClk_reg,
    New_Dbg_Instr2_TCK_reg,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_In);
  output [8:0]D;
  output if_debug_ready_i0;
  output read_register_MSR0;
  output read_register_PC0;
  output start_single_cmd0;
  output force_stop_cmd_i0;
  output normal_stop_cmd_i0;
  output continue_from_brk0;
  output trig_in_1_reg;
  output trig_ack_out_1_reg;
  input [8:0]Q;
  input [0:0]Dbg_Trig_In;
  input Rst18_out;
  input [0:0]Dbg_Trig_Ack_Out;
  input Dbg_Disable;
  input [0:0]out;
  input [0:0]normal_stop_TClk_reg;
  input Clk;
  input [0:0]force_stop_TClk_reg;
  input [0:0]single_Step_TClk_reg;
  input [1:0]\command_reg_reg[0] ;
  input [0:0]continue_from_brk_TClk_reg;
  input [0:0]New_Dbg_Instr2_TCK_reg;
  input [0:0]Dbg_Trig_Out;
  input [0:0]Dbg_Trig_Ack_In;

  wire Clk;
  wire [8:0]D;
  wire Dbg_Disable;
  wire [0:0]Dbg_Trig_Ack_In;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_In;
  wire [0:0]Dbg_Trig_Out;
  wire [0:0]New_Dbg_Instr2_TCK_reg;
  wire [8:0]Q;
  wire Rst18_out;
  wire [1:0]\command_reg_reg[0] ;
  wire continue_from_brk0;
  wire [0:0]continue_from_brk_TClk_reg;
  wire [0:0]force_stop_TClk_reg;
  wire force_stop_cmd_i0;
  wire if_debug_ready_i0;
  wire [0:0]normal_stop_TClk_reg;
  wire normal_stop_cmd_i0;
  wire [0:0]out;
  wire read_register_MSR0;
  wire read_register_PC0;
  wire [0:0]single_Step_TClk_reg;
  wire start_single_cmd0;
  wire trig_ack_out_1_reg;
  wire trig_in_1_reg;

  system_microblaze_0_0_mb_sync_bit_0 \sync_bits[0].sync_bit 
       (.Clk(Clk),
        .D(D[8]),
        .Q(Q[8]),
        .Rst18_out(Rst18_out),
        .normal_stop_TClk_reg(normal_stop_TClk_reg),
        .normal_stop_cmd_i0(normal_stop_cmd_i0));
  system_microblaze_0_0_mb_sync_bit_1 \sync_bits[1].sync_bit 
       (.Clk(Clk),
        .D(D[7]),
        .Q(Q[7]),
        .Rst18_out(Rst18_out),
        .force_stop_TClk_reg(force_stop_TClk_reg),
        .force_stop_cmd_i0(force_stop_cmd_i0));
  system_microblaze_0_0_mb_sync_bit_2 \sync_bits[2].sync_bit 
       (.Clk(Clk),
        .D(D[6]),
        .Q(Q[6]),
        .Rst18_out(Rst18_out),
        .single_Step_TClk_reg(single_Step_TClk_reg),
        .start_single_cmd0(start_single_cmd0));
  system_microblaze_0_0_mb_sync_bit_3 \sync_bits[3].sync_bit 
       (.Clk(Clk),
        .D(D[5]),
        .Q(Q[5]),
        .Rst18_out(Rst18_out),
        .\command_reg_reg[0] (\command_reg_reg[0] [1]),
        .read_register_MSR0(read_register_MSR0));
  system_microblaze_0_0_mb_sync_bit_4 \sync_bits[4].sync_bit 
       (.Clk(Clk),
        .D(D[4]),
        .Q(Q[4]),
        .Rst18_out(Rst18_out),
        .\command_reg_reg[1] (\command_reg_reg[0] [0]),
        .read_register_PC0(read_register_PC0));
  system_microblaze_0_0_mb_sync_bit_5 \sync_bits[5].sync_bit 
       (.Clk(Clk),
        .D(D[3]),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Q({Q[3],Q[0]}),
        .Rst18_out(Rst18_out),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (D[0]),
        .continue_from_brk_TClk_reg(continue_from_brk_TClk_reg),
        .trig_in_1_reg(trig_in_1_reg));
  system_microblaze_0_0_mb_sync_bit_6 \sync_bits[6].sync_bit 
       (.Clk(Clk),
        .D(D[2]),
        .New_Dbg_Instr2_TCK_reg(New_Dbg_Instr2_TCK_reg),
        .Q(Q[2]),
        .Rst18_out(Rst18_out),
        .if_debug_ready_i0(if_debug_ready_i0));
  system_microblaze_0_0_mb_sync_bit_7 \sync_bits[7].sync_bit 
       (.Clk(Clk),
        .D(D[1]),
        .Dbg_Disable(Dbg_Disable),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Q({Q[3],Q[1]}),
        .Rst18_out(Rst18_out),
        .\Synchronize.use_sync_reset.sync_reg[2]_0 (D[3]),
        .continue_from_brk0(continue_from_brk0),
        .out(out),
        .trig_ack_out_1_reg(trig_ack_out_1_reg));
  system_microblaze_0_0_mb_sync_bit_8 \sync_bits[8].sync_bit 
       (.Clk(Clk),
        .D(D[0]),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Rst18_out(Rst18_out));
endmodule

(* ORIG_REF_NAME = "msr_reg_gti" *) 
module system_microblaze_0_0_msr_reg_gti
   (\WB_MEM_Result_reg[28] ,
    \WB_MEM_Result_reg[29] ,
    ex_MSR,
    of_MSR,
    D,
    ex_Interrupt_Brk_combo_reg,
    \Using_Fast_Interrupt.wb_ie_rising_reg ,
    \LOCKSTEP_Out_reg[3759] ,
    \LOCKSTEP_Out_reg[3757] ,
    out,
    Clk,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    ex_set_MSR_IE_instr_reg,
    ex_set_MSR_IE_instr_reg_0,
    mem_valid_reg,
    restore_wb_msr_to_ex,
    mem_ex_result,
    mem_sel_msr,
    \Using_FPGA.Native_2 ,
    \control_reg_reg[3] ,
    Dbg_Disable,
    Interrupt,
    of_Take_Interrupt,
    wb_piperun);
  output \WB_MEM_Result_reg[28] ;
  output \WB_MEM_Result_reg[29] ;
  output [2:0]ex_MSR;
  output [1:0]of_MSR;
  output [3:0]D;
  output ex_Interrupt_Brk_combo_reg;
  output \Using_Fast_Interrupt.wb_ie_rising_reg ;
  output \LOCKSTEP_Out_reg[3759] ;
  output [1:0]\LOCKSTEP_Out_reg[3757] ;
  input [0:0]out;
  input Clk;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input ex_set_MSR_IE_instr_reg;
  input ex_set_MSR_IE_instr_reg_0;
  input mem_valid_reg;
  input restore_wb_msr_to_ex;
  input [1:0]mem_ex_result;
  input mem_sel_msr;
  input [1:0]\Using_FPGA.Native_2 ;
  input [0:0]\control_reg_reg[3] ;
  input Dbg_Disable;
  input Interrupt;
  input of_Take_Interrupt;
  input wb_piperun;

  wire Clk;
  wire [3:0]D;
  wire Dbg_Disable;
  wire Interrupt;
  wire [1:0]\LOCKSTEP_Out_reg[3757] ;
  wire \LOCKSTEP_Out_reg[3759] ;
  wire \OF_EX_MSR_Bits[28].Using_FDR.MSR_ex_I_n_1 ;
  wire \OF_EX_MSR_Bits[29].Using_FDR.MSR_ex_I_n_1 ;
  wire \OF_EX_MSR_Bits[30].Using_FDR.MSR_ex_I_n_1 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [1:0]\Using_FPGA.Native_2 ;
  wire \Using_Fast_Interrupt.wb_ie_rising_reg ;
  wire \WB_MEM_Result_reg[28] ;
  wire \WB_MEM_Result_reg[29] ;
  wire [0:0]\control_reg_reg[3] ;
  wire ex_Interrupt_Brk_combo_reg;
  wire [2:0]ex_MSR;
  wire ex_set_MSR_IE_instr_reg;
  wire ex_set_MSR_IE_instr_reg_0;
  wire [30:30]mem_MSR;
  wire [1:0]mem_ex_result;
  wire mem_sel_msr;
  wire mem_valid_reg;
  wire [1:0]of_MSR;
  wire of_Take_Interrupt;
  wire [0:0]out;
  wire restore_wb_msr_to_ex;
  wire \wb_MSR_i[28]_i_1_n_0 ;
  wire \wb_MSR_i[29]_i_1_n_0 ;
  wire \wb_MSR_i[30]_i_1_n_0 ;
  wire wb_piperun;

  system_microblaze_0_0_MB_FDR_261 \MEM_MSR_Bits[28].Using_FDR.MSR_I 
       (.Clk(Clk),
        .D(D[2]),
        .\Using_FPGA.Native_0 (\OF_EX_MSR_Bits[28].Using_FDR.MSR_ex_I_n_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 [0]),
        .\WB_MEM_Result_reg[28] (\WB_MEM_Result_reg[28] ),
        .mem_sel_msr(mem_sel_msr),
        .out(out));
  system_microblaze_0_0_MB_FDR_262 \MEM_MSR_Bits[29].Using_FDR.MSR_I 
       (.Clk(Clk),
        .D({D[3],D[1]}),
        .\Using_FPGA.Native_0 (\OF_EX_MSR_Bits[29].Using_FDR.MSR_ex_I_n_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_2 [1]),
        .\WB_MEM_Result_reg[29] (\WB_MEM_Result_reg[29] ),
        .mem_ex_result(mem_ex_result[1]),
        .mem_sel_msr(mem_sel_msr),
        .out(out));
  system_microblaze_0_0_MB_FDR_263 \MEM_MSR_Bits[30].Using_FDR.MSR_I 
       (.Clk(Clk),
        .D(D[0]),
        .\Using_FPGA.Native_0 (\OF_EX_MSR_Bits[30].Using_FDR.MSR_ex_I_n_1 ),
        .\Using_Fast_Interrupt.wb_ie_rising_reg (\Using_Fast_Interrupt.wb_ie_rising_reg ),
        .mem_MSR(mem_MSR),
        .mem_ex_result(mem_ex_result[0]),
        .mem_sel_msr(mem_sel_msr),
        .out(out),
        .\wb_MSR_i_reg[30] (\LOCKSTEP_Out_reg[3759] ));
  system_microblaze_0_0_MB_FDR_264 \OF_EX_MSR_Bits[28].Using_FDR.MSR_ex_I 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\OF_EX_MSR_Bits[28].Using_FDR.MSR_ex_I_n_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\WB_MEM_Result_reg[28] ),
        .ex_MSR(ex_MSR[2]),
        .mem_valid_reg(mem_valid_reg),
        .out(out),
        .restore_wb_msr_to_ex(restore_wb_msr_to_ex));
  system_microblaze_0_0_MB_FDR_265 \OF_EX_MSR_Bits[28].Using_FDR.MSR_of_I 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .of_MSR(of_MSR[1]),
        .out(out));
  system_microblaze_0_0_MB_FDR_266 \OF_EX_MSR_Bits[29].Using_FDR.MSR_ex_I 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\OF_EX_MSR_Bits[29].Using_FDR.MSR_ex_I_n_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\WB_MEM_Result_reg[29] ),
        .ex_MSR(ex_MSR[1]),
        .mem_valid_reg(mem_valid_reg),
        .out(out),
        .restore_wb_msr_to_ex(restore_wb_msr_to_ex));
  system_microblaze_0_0_MB_FDR_267 \OF_EX_MSR_Bits[30].Using_FDR.MSR_ex_I 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\OF_EX_MSR_Bits[30].Using_FDR.MSR_ex_I_n_1 ),
        .ex_MSR(ex_MSR[0]),
        .ex_set_MSR_IE_instr_reg(ex_set_MSR_IE_instr_reg),
        .mem_MSR(mem_MSR),
        .mem_valid_reg(mem_valid_reg),
        .out(out),
        .restore_wb_msr_to_ex(restore_wb_msr_to_ex));
  system_microblaze_0_0_MB_FDR_268 \OF_EX_MSR_Bits[30].Using_FDR.MSR_of_I 
       (.Clk(Clk),
        .Dbg_Disable(Dbg_Disable),
        .Interrupt(Interrupt),
        .\Using_FPGA.Native_0 (of_MSR[1]),
        .\control_reg_reg[3] (\control_reg_reg[3] ),
        .ex_Interrupt_Brk_combo_reg(ex_Interrupt_Brk_combo_reg),
        .ex_set_MSR_IE_instr_reg(ex_set_MSR_IE_instr_reg_0),
        .of_MSR(of_MSR[0]),
        .of_Take_Interrupt(of_Take_Interrupt),
        .out(out));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \wb_MSR_i[28]_i_1 
       (.I0(\WB_MEM_Result_reg[28] ),
        .I1(wb_piperun),
        .I2(\LOCKSTEP_Out_reg[3757] [1]),
        .O(\wb_MSR_i[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \wb_MSR_i[29]_i_1 
       (.I0(\WB_MEM_Result_reg[29] ),
        .I1(wb_piperun),
        .I2(\LOCKSTEP_Out_reg[3757] [0]),
        .O(\wb_MSR_i[29]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2F20)) 
    \wb_MSR_i[30]_i_1 
       (.I0(mem_MSR),
        .I1(restore_wb_msr_to_ex),
        .I2(wb_piperun),
        .I3(\LOCKSTEP_Out_reg[3759] ),
        .O(\wb_MSR_i[30]_i_1_n_0 ));
  FDRE \wb_MSR_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(\wb_MSR_i[28]_i_1_n_0 ),
        .Q(\LOCKSTEP_Out_reg[3757] [1]),
        .R(out));
  FDRE \wb_MSR_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(\wb_MSR_i[29]_i_1_n_0 ),
        .Q(\LOCKSTEP_Out_reg[3757] [0]),
        .R(out));
  FDRE \wb_MSR_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(\wb_MSR_i[30]_i_1_n_0 ),
        .Q(\LOCKSTEP_Out_reg[3759] ),
        .R(out));
endmodule

(* ORIG_REF_NAME = "mux_bus" *) 
module system_microblaze_0_0_mux_bus
   (I041_out,
    Y,
    I139_out,
    in,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Performace_Debug_Control.dbg_freeze_nohalt_reg ,
    \Using_FPGA.Native_1 ,
    Instr,
    LOCKSTEP_Master_Out);
  output I041_out;
  output [0:31]Y;
  output I139_out;
  output [0:0]in;
  input [0:0]\Using_FPGA.Native ;
  input [1:0]\Using_FPGA.Native_0 ;
  input \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  input [0:0]\Using_FPGA.Native_1 ;
  input [0:31]Instr;
  input [32:0]LOCKSTEP_Master_Out;

  wire I041_out;
  wire I139_out;
  wire [0:31]Instr;
  wire [32:0]LOCKSTEP_Master_Out;
  wire \Performace_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]\Using_FPGA.Native ;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire [0:31]Y;
  wire [0:0]in;

  system_microblaze_0_0_MB_LUT6_2__parameterized3 \Mux_Loop[0].I_MUX_LUT6 
       (.I041_out(I041_out),
        .I139_out(I139_out),
        .Instr({Instr[0],Instr[16]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32:31],LOCKSTEP_Master_Out[15]}),
        .\New_Instr_Reg_TCK_reg[1] (Y[1]),
        .\New_Instr_Reg_TCK_reg[3] (Y[3]),
        .\Performace_Debug_Control.dbg_freeze_nohalt_reg (\Performace_Debug_Control.dbg_freeze_nohalt_reg ),
        .\Using_FPGA.Native_0 (Y[0]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_1 ),
        .Y(Y[16]),
        .in(in));
  system_microblaze_0_0_MB_LUT6_2__parameterized23 \Mux_Loop[10].I_MUX_LUT6 
       (.Instr({Instr[10],Instr[26]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[21],LOCKSTEP_Master_Out[5]}),
        .Y({Y[10],Y[26]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized25 \Mux_Loop[11].I_MUX_LUT6 
       (.Instr({Instr[11],Instr[27]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[20],LOCKSTEP_Master_Out[4]}),
        .Y({Y[11],Y[27]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized27 \Mux_Loop[12].I_MUX_LUT6 
       (.Instr({Instr[12],Instr[28]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[19],LOCKSTEP_Master_Out[3]}),
        .Y({Y[12],Y[28]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized29 \Mux_Loop[13].I_MUX_LUT6 
       (.Instr({Instr[13],Instr[29]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[18],LOCKSTEP_Master_Out[2]}),
        .Y({Y[13],Y[29]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized31 \Mux_Loop[14].I_MUX_LUT6 
       (.Instr({Instr[14],Instr[30]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[17],LOCKSTEP_Master_Out[1]}),
        .Y({Y[14],Y[30]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized33 \Mux_Loop[15].I_MUX_LUT6 
       (.Instr({Instr[15],Instr[31]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[16],LOCKSTEP_Master_Out[0]}),
        .Y({Y[15],Y[31]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized5 \Mux_Loop[1].I_MUX_LUT6 
       (.Instr({Instr[1],Instr[17]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[30],LOCKSTEP_Master_Out[14]}),
        .Y({Y[1],Y[17]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized7 \Mux_Loop[2].I_MUX_LUT6 
       (.Instr({Instr[2],Instr[18]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[29],LOCKSTEP_Master_Out[13]}),
        .Y({Y[2],Y[18]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized9 \Mux_Loop[3].I_MUX_LUT6 
       (.Instr({Instr[3],Instr[19]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[28],LOCKSTEP_Master_Out[12]}),
        .Y({Y[3],Y[19]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized11 \Mux_Loop[4].I_MUX_LUT6 
       (.Instr({Instr[4],Instr[20]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[27],LOCKSTEP_Master_Out[11]}),
        .Y({Y[4],Y[20]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized13 \Mux_Loop[5].I_MUX_LUT6 
       (.Instr({Instr[5],Instr[21]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[26],LOCKSTEP_Master_Out[10]}),
        .Y({Y[5],Y[21]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized15 \Mux_Loop[6].I_MUX_LUT6 
       (.Instr({Instr[6],Instr[22]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[25],LOCKSTEP_Master_Out[9]}),
        .Y({Y[6],Y[22]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized17 \Mux_Loop[7].I_MUX_LUT6 
       (.Instr({Instr[7],Instr[23]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[24],LOCKSTEP_Master_Out[8]}),
        .Y({Y[7],Y[23]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized19 \Mux_Loop[8].I_MUX_LUT6 
       (.Instr({Instr[8],Instr[24]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[23],LOCKSTEP_Master_Out[7]}),
        .Y({Y[8],Y[24]}));
  system_microblaze_0_0_MB_LUT6_2__parameterized21 \Mux_Loop[9].I_MUX_LUT6 
       (.Instr({Instr[9],Instr[25]}),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[32],LOCKSTEP_Master_Out[22],LOCKSTEP_Master_Out[6]}),
        .Y({Y[9],Y[25]}));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
